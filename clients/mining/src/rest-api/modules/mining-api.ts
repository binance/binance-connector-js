/**
 * Binance Mining REST API
 *
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountListResponse,
    AcquiringAlgorithmResponse,
    AcquiringCoinnameResponse,
    CancelHashrateResaleConfigurationResponse,
    EarningsListResponse,
    ExtraBonusListResponse,
    HashrateResaleDetailResponse,
    HashrateResaleListResponse,
    HashrateResaleRequestResponse,
    MiningAccountEarningResponse,
    RequestForDetailMinerListResponse,
    RequestForMinerListResponse,
    StatisticListResponse,
} from '../types';

/**
 * MiningApi - axios parameter creator
 */
const MiningApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Query Account List
         *
         * Weight: 5
         *
         * @summary Account List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountList: async (
            algo: string,
            userName: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('accountList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('accountList', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/statistics/user/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Acquiring Algorithm
         *
         * Weight: 1
         *
         * @summary Acquiring Algorithm(MARKET_DATA)
         *
         * @throws {RequiredError}
         */
        acquiringAlgorithm: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/pub/algoList',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Acquiring CoinName
         *
         * Weight: 1
         *
         * @summary Acquiring CoinName(MARKET_DATA)
         *
         * @throws {RequiredError}
         */
        acquiringCoinname: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/pub/coinList',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         *
         * Weight: 5
         *
         * @summary Cancel hashrate resale configuration(USER_DATA)
         * @param {number} configId Mining ID 168
         * @param {string} userName Mining account test
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        cancelHashrateResaleConfiguration: async (
            configId: number,
            userName: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('cancelHashrateResaleConfiguration', 'configId', configId);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('cancelHashrateResaleConfiguration', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (configId !== undefined && configId !== null) {
                localVarQueryParameter['configId'] = configId;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/hash-transfer/config/cancel',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Earnings List
         *
         * Weight: 5
         *
         * @summary Earnings List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {string} [coin] Coin Name
         * @param {number} [startDate] Millisecond timestamp
         * @param {number} [endDate] Millisecond timestamp
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [pageSize] Min 10,Max 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        earningsList: async (
            algo: string,
            userName: string,
            coin?: string,
            startDate?: number,
            endDate?: number,
            pageIndex?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('earningsList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('earningsList', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (startDate !== undefined && startDate !== null) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined && endDate !== null) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/payment/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Extra Bonus List
         *
         * Weight: 5
         *
         * @summary Extra Bonus List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {string} [coin] Coin Name
         * @param {number} [startDate] Millisecond timestamp
         * @param {number} [endDate] Millisecond timestamp
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [pageSize] Min 10,Max 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        extraBonusList: async (
            algo: string,
            userName: string,
            coin?: string,
            startDate?: number,
            endDate?: number,
            pageIndex?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('extraBonusList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('extraBonusList', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (startDate !== undefined && startDate !== null) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined && endDate !== null) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/payment/other',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Hashrate Resale Detail(USER_DATA)
         *
         * Weight: 5
         *
         * @summary Hashrate Resale Detail(USER_DATA)
         * @param {number} configId Mining ID 168
         * @param {string} userName Mining account test
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [pageSize] Min 10,Max 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        hashrateResaleDetail: async (
            configId: number,
            userName: string,
            pageIndex?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('hashrateResaleDetail', 'configId', configId);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('hashrateResaleDetail', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (configId !== undefined && configId !== null) {
                localVarQueryParameter['configId'] = configId;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/hash-transfer/profit/details',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Hashrate Resale List
         *
         * Weight: 5
         *
         * @summary Hashrate Resale List
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [pageSize] Min 10,Max 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        hashrateResaleList: async (
            pageIndex?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/hash-transfer/config/details/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Hashrate Resale Request
         *
         * Weight: 5
         *
         * @summary Hashrate Resale Request(USER_DATA)
         * @param {string} userName Mining account test
         * @param {string} algo Algorithm(sha256) sha256
         * @param {number} endDate Resale End Time (Millisecond timestamp) 1617659086000
         * @param {number} startDate Resale Start Time(Millisecond timestamp) 1607659086000
         * @param {string} toPoolUser Mining Account S19pro
         * @param {number} hashRate Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) 100000000
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        hashrateResaleRequest: async (
            userName: string,
            algo: string,
            endDate: number,
            startDate: number,
            toPoolUser: string,
            hashRate: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'userName', userName);
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'algo', algo);
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'endDate', endDate);
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'startDate', startDate);
            // verify required parameter 'toPoolUser' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'toPoolUser', toPoolUser);
            // verify required parameter 'hashRate' is not null or undefined
            assertParamExists('hashrateResaleRequest', 'hashRate', hashRate);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (endDate !== undefined && endDate !== null) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined && startDate !== null) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (toPoolUser !== undefined && toPoolUser !== null) {
                localVarQueryParameter['toPoolUser'] = toPoolUser;
            }

            if (hashRate !== undefined && hashRate !== null) {
                localVarQueryParameter['hashRate'] = hashRate;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/hash-transfer/config',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Mining Account Earning
         *
         * Weight: 5
         *
         * @summary Mining Account Earning(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {number} [startDate] Millisecond timestamp
         * @param {number} [endDate] Millisecond timestamp
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [pageSize] Min 10,Max 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        miningAccountEarning: async (
            algo: string,
            startDate?: number,
            endDate?: number,
            pageIndex?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('miningAccountEarning', 'algo', algo);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (startDate !== undefined && startDate !== null) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined && endDate !== null) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/payment/uid',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Request for Detail Miner List
         *
         * Weight: 5
         *
         * @summary Request for Detail Miner List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {string} workerName Miner’s name(required) bhdc1.16A10404B
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        requestForDetailMinerList: async (
            algo: string,
            userName: string,
            workerName: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('requestForDetailMinerList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('requestForDetailMinerList', 'userName', userName);
            // verify required parameter 'workerName' is not null or undefined
            assertParamExists('requestForDetailMinerList', 'workerName', workerName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (workerName !== undefined && workerName !== null) {
                localVarQueryParameter['workerName'] = workerName;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/worker/detail',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Request for Miner List
         *
         * Weight: 5
         *
         * @summary Request for Miner List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {number} [pageIndex] Page number, empty default first page, starting from 1
         * @param {number} [sort] sort sequence(default=0)0 positive sequence，1 negative sequence
         * @param {number} [sortColumn] Sort by( default 1): <br></br>1: miner name, <br></br>2: real-time computing power, <br></br>3: daily average computing power, <br></br>4: real-time rejection rate, <br></br>5: last submission time
         * @param {number} [workerStatus] miners status(default=0),0 all，1 valid，2 invalid，3 failure
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        requestForMinerList: async (
            algo: string,
            userName: string,
            pageIndex?: number,
            sort?: number,
            sortColumn?: number,
            workerStatus?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('requestForMinerList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('requestForMinerList', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (sort !== undefined && sort !== null) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortColumn !== undefined && sortColumn !== null) {
                localVarQueryParameter['sortColumn'] = sortColumn;
            }

            if (workerStatus !== undefined && workerStatus !== null) {
                localVarQueryParameter['workerStatus'] = workerStatus;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/worker/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Statistic List
         *
         * Weight: 5
         *
         * @summary Statistic List(USER_DATA)
         * @param {string} algo Algorithm(sha256) sha256
         * @param {string} userName Mining account test
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        statisticList: async (
            algo: string,
            userName: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algo' is not null or undefined
            assertParamExists('statisticList', 'algo', algo);
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('statisticList', 'userName', userName);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algo !== undefined && algo !== null) {
                localVarQueryParameter['algo'] = algo;
            }

            if (userName !== undefined && userName !== null) {
                localVarQueryParameter['userName'] = userName;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/mining/statistics/user/status',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MiningApi - interface
 * @interface MiningApi
 */
export interface MiningApiInterface {
    /**
     * Query Account List
     *
     * Weight: 5
     *
     * @summary Account List(USER_DATA)
     * @param {AccountListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    accountList(
        requestParameters: AccountListRequest
    ): Promise<RestApiResponse<AccountListResponse>>;
    /**
     * Acquiring Algorithm
     *
     * Weight: 1
     *
     * @summary Acquiring Algorithm(MARKET_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    acquiringAlgorithm(): Promise<RestApiResponse<AcquiringAlgorithmResponse>>;
    /**
     * Acquiring CoinName
     *
     * Weight: 1
     *
     * @summary Acquiring CoinName(MARKET_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    acquiringCoinname(): Promise<RestApiResponse<AcquiringCoinnameResponse>>;
    /**
     *
     * Weight: 5
     *
     * @summary Cancel hashrate resale configuration(USER_DATA)
     * @param {CancelHashrateResaleConfigurationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    cancelHashrateResaleConfiguration(
        requestParameters: CancelHashrateResaleConfigurationRequest
    ): Promise<RestApiResponse<CancelHashrateResaleConfigurationResponse>>;
    /**
     * Query Earnings List
     *
     * Weight: 5
     *
     * @summary Earnings List(USER_DATA)
     * @param {EarningsListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    earningsList(
        requestParameters: EarningsListRequest
    ): Promise<RestApiResponse<EarningsListResponse>>;
    /**
     * Extra Bonus List
     *
     * Weight: 5
     *
     * @summary Extra Bonus List(USER_DATA)
     * @param {ExtraBonusListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    extraBonusList(
        requestParameters: ExtraBonusListRequest
    ): Promise<RestApiResponse<ExtraBonusListResponse>>;
    /**
     * Hashrate Resale Detail(USER_DATA)
     *
     * Weight: 5
     *
     * @summary Hashrate Resale Detail(USER_DATA)
     * @param {HashrateResaleDetailRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    hashrateResaleDetail(
        requestParameters: HashrateResaleDetailRequest
    ): Promise<RestApiResponse<HashrateResaleDetailResponse>>;
    /**
     * Hashrate Resale List
     *
     * Weight: 5
     *
     * @summary Hashrate Resale List
     * @param {HashrateResaleListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    hashrateResaleList(
        requestParameters?: HashrateResaleListRequest
    ): Promise<RestApiResponse<HashrateResaleListResponse>>;
    /**
     * Hashrate Resale Request
     *
     * Weight: 5
     *
     * @summary Hashrate Resale Request(USER_DATA)
     * @param {HashrateResaleRequestRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    hashrateResaleRequest(
        requestParameters: HashrateResaleRequestRequest
    ): Promise<RestApiResponse<HashrateResaleRequestResponse>>;
    /**
     * Mining Account Earning
     *
     * Weight: 5
     *
     * @summary Mining Account Earning(USER_DATA)
     * @param {MiningAccountEarningRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    miningAccountEarning(
        requestParameters: MiningAccountEarningRequest
    ): Promise<RestApiResponse<MiningAccountEarningResponse>>;
    /**
     * Request for Detail Miner List
     *
     * Weight: 5
     *
     * @summary Request for Detail Miner List(USER_DATA)
     * @param {RequestForDetailMinerListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    requestForDetailMinerList(
        requestParameters: RequestForDetailMinerListRequest
    ): Promise<RestApiResponse<RequestForDetailMinerListResponse>>;
    /**
     * Request for Miner List
     *
     * Weight: 5
     *
     * @summary Request for Miner List(USER_DATA)
     * @param {RequestForMinerListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    requestForMinerList(
        requestParameters: RequestForMinerListRequest
    ): Promise<RestApiResponse<RequestForMinerListResponse>>;
    /**
     * Statistic List
     *
     * Weight: 5
     *
     * @summary Statistic List(USER_DATA)
     * @param {StatisticListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApiInterface
     */
    statisticList(
        requestParameters: StatisticListRequest
    ): Promise<RestApiResponse<StatisticListResponse>>;
}

/**
 * Request parameters for accountList operation in MiningApi.
 * @interface AccountListRequest
 */
export interface AccountListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiAccountList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiAccountList
     */
    readonly userName: string;

    /**
     *
     * @type {number}
     * @memberof MiningApiAccountList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for cancelHashrateResaleConfiguration operation in MiningApi.
 * @interface CancelHashrateResaleConfigurationRequest
 */
export interface CancelHashrateResaleConfigurationRequest {
    /**
     * Mining ID 168
     * @type {number}
     * @memberof MiningApiCancelHashrateResaleConfiguration
     */
    readonly configId: number;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiCancelHashrateResaleConfiguration
     */
    readonly userName: string;

    /**
     *
     * @type {number}
     * @memberof MiningApiCancelHashrateResaleConfiguration
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for earningsList operation in MiningApi.
 * @interface EarningsListRequest
 */
export interface EarningsListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiEarningsList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiEarningsList
     */
    readonly userName: string;

    /**
     * Coin Name
     * @type {string}
     * @memberof MiningApiEarningsList
     */
    readonly coin?: string;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiEarningsList
     */
    readonly startDate?: number;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiEarningsList
     */
    readonly endDate?: number;

    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiEarningsList
     */
    readonly pageIndex?: number;

    /**
     * Min 10,Max 200
     * @type {number}
     * @memberof MiningApiEarningsList
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiEarningsList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for extraBonusList operation in MiningApi.
 * @interface ExtraBonusListRequest
 */
export interface ExtraBonusListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiExtraBonusList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiExtraBonusList
     */
    readonly userName: string;

    /**
     * Coin Name
     * @type {string}
     * @memberof MiningApiExtraBonusList
     */
    readonly coin?: string;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiExtraBonusList
     */
    readonly startDate?: number;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiExtraBonusList
     */
    readonly endDate?: number;

    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiExtraBonusList
     */
    readonly pageIndex?: number;

    /**
     * Min 10,Max 200
     * @type {number}
     * @memberof MiningApiExtraBonusList
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiExtraBonusList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for hashrateResaleDetail operation in MiningApi.
 * @interface HashrateResaleDetailRequest
 */
export interface HashrateResaleDetailRequest {
    /**
     * Mining ID 168
     * @type {number}
     * @memberof MiningApiHashrateResaleDetail
     */
    readonly configId: number;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiHashrateResaleDetail
     */
    readonly userName: string;

    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiHashrateResaleDetail
     */
    readonly pageIndex?: number;

    /**
     * Min 10,Max 200
     * @type {number}
     * @memberof MiningApiHashrateResaleDetail
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiHashrateResaleDetail
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for hashrateResaleList operation in MiningApi.
 * @interface HashrateResaleListRequest
 */
export interface HashrateResaleListRequest {
    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiHashrateResaleList
     */
    readonly pageIndex?: number;

    /**
     * Min 10,Max 200
     * @type {number}
     * @memberof MiningApiHashrateResaleList
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiHashrateResaleList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for hashrateResaleRequest operation in MiningApi.
 * @interface HashrateResaleRequestRequest
 */
export interface HashrateResaleRequestRequest {
    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly userName: string;

    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly algo: string;

    /**
     * Resale End Time (Millisecond timestamp) 1617659086000
     * @type {number}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly endDate: number;

    /**
     * Resale Start Time(Millisecond timestamp) 1607659086000
     * @type {number}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly startDate: number;

    /**
     * Mining Account S19pro
     * @type {string}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly toPoolUser: string;

    /**
     * Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) 100000000
     * @type {number}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly hashRate: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiHashrateResaleRequest
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for miningAccountEarning operation in MiningApi.
 * @interface MiningAccountEarningRequest
 */
export interface MiningAccountEarningRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly algo: string;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly startDate?: number;

    /**
     * Millisecond timestamp
     * @type {number}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly endDate?: number;

    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly pageIndex?: number;

    /**
     * Min 10,Max 200
     * @type {number}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiMiningAccountEarning
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for requestForDetailMinerList operation in MiningApi.
 * @interface RequestForDetailMinerListRequest
 */
export interface RequestForDetailMinerListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiRequestForDetailMinerList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiRequestForDetailMinerList
     */
    readonly userName: string;

    /**
     * Miner’s name(required) bhdc1.16A10404B
     * @type {string}
     * @memberof MiningApiRequestForDetailMinerList
     */
    readonly workerName: string;

    /**
     *
     * @type {number}
     * @memberof MiningApiRequestForDetailMinerList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for requestForMinerList operation in MiningApi.
 * @interface RequestForMinerListRequest
 */
export interface RequestForMinerListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiRequestForMinerList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiRequestForMinerList
     */
    readonly userName: string;

    /**
     * Page number, empty default first page, starting from 1
     * @type {number}
     * @memberof MiningApiRequestForMinerList
     */
    readonly pageIndex?: number;

    /**
     * sort sequence(default=0)0 positive sequence，1 negative sequence
     * @type {number}
     * @memberof MiningApiRequestForMinerList
     */
    readonly sort?: number;

    /**
     * Sort by( default 1): <br></br>1: miner name, <br></br>2: real-time computing power, <br></br>3: daily average computing power, <br></br>4: real-time rejection rate, <br></br>5: last submission time
     * @type {number}
     * @memberof MiningApiRequestForMinerList
     */
    readonly sortColumn?: number;

    /**
     * miners status(default=0),0 all，1 valid，2 invalid，3 failure
     * @type {number}
     * @memberof MiningApiRequestForMinerList
     */
    readonly workerStatus?: number;

    /**
     *
     * @type {number}
     * @memberof MiningApiRequestForMinerList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for statisticList operation in MiningApi.
 * @interface StatisticListRequest
 */
export interface StatisticListRequest {
    /**
     * Algorithm(sha256) sha256
     * @type {string}
     * @memberof MiningApiStatisticList
     */
    readonly algo: string;

    /**
     * Mining account test
     * @type {string}
     * @memberof MiningApiStatisticList
     */
    readonly userName: string;

    /**
     *
     * @type {number}
     * @memberof MiningApiStatisticList
     */
    readonly recvWindow?: number;
}

/**
 * MiningApi - object-oriented interface
 * @class MiningApi
 */
export class MiningApi implements MiningApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MiningApiAxiosParamCreator(configuration);
    }

    /**
     * Query Account List
     *
     * Weight: 5
     *
     * @summary Account List(USER_DATA)
     * @param {AccountListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Account-List Binance API Documentation}
     */
    public async accountList(
        requestParameters: AccountListRequest
    ): Promise<RestApiResponse<AccountListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.recvWindow
        );
        return sendRequest<AccountListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Acquiring Algorithm
     *
     * Weight: 1
     *
     * @summary Acquiring Algorithm(MARKET_DATA)
     * @returns {Promise<RestApiResponse<AcquiringAlgorithmResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Acquiring-Algorithm Binance API Documentation}
     */
    public async acquiringAlgorithm(): Promise<RestApiResponse<AcquiringAlgorithmResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.acquiringAlgorithm();
        return sendRequest<AcquiringAlgorithmResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Acquiring CoinName
     *
     * Weight: 1
     *
     * @summary Acquiring CoinName(MARKET_DATA)
     * @returns {Promise<RestApiResponse<AcquiringCoinnameResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Acquiring-CoinName Binance API Documentation}
     */
    public async acquiringCoinname(): Promise<RestApiResponse<AcquiringCoinnameResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.acquiringCoinname();
        return sendRequest<AcquiringCoinnameResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     *
     * Weight: 5
     *
     * @summary Cancel hashrate resale configuration(USER_DATA)
     * @param {CancelHashrateResaleConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelHashrateResaleConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Cancel-hashrate-resale-configuration Binance API Documentation}
     */
    public async cancelHashrateResaleConfiguration(
        requestParameters: CancelHashrateResaleConfigurationRequest
    ): Promise<RestApiResponse<CancelHashrateResaleConfigurationResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.cancelHashrateResaleConfiguration(
                requestParameters?.configId,
                requestParameters?.userName,
                requestParameters?.recvWindow
            );
        return sendRequest<CancelHashrateResaleConfigurationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Earnings List
     *
     * Weight: 5
     *
     * @summary Earnings List(USER_DATA)
     * @param {EarningsListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EarningsListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Earnings-List Binance API Documentation}
     */
    public async earningsList(
        requestParameters: EarningsListRequest
    ): Promise<RestApiResponse<EarningsListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.earningsList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.coin,
            requestParameters?.startDate,
            requestParameters?.endDate,
            requestParameters?.pageIndex,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<EarningsListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Extra Bonus List
     *
     * Weight: 5
     *
     * @summary Extra Bonus List(USER_DATA)
     * @param {ExtraBonusListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ExtraBonusListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Extra-Bonus-List Binance API Documentation}
     */
    public async extraBonusList(
        requestParameters: ExtraBonusListRequest
    ): Promise<RestApiResponse<ExtraBonusListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.extraBonusList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.coin,
            requestParameters?.startDate,
            requestParameters?.endDate,
            requestParameters?.pageIndex,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<ExtraBonusListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Hashrate Resale Detail(USER_DATA)
     *
     * Weight: 5
     *
     * @summary Hashrate Resale Detail(USER_DATA)
     * @param {HashrateResaleDetailRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HashrateResaleDetailResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Detail Binance API Documentation}
     */
    public async hashrateResaleDetail(
        requestParameters: HashrateResaleDetailRequest
    ): Promise<RestApiResponse<HashrateResaleDetailResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.hashrateResaleDetail(
            requestParameters?.configId,
            requestParameters?.userName,
            requestParameters?.pageIndex,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<HashrateResaleDetailResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Hashrate Resale List
     *
     * Weight: 5
     *
     * @summary Hashrate Resale List
     * @param {HashrateResaleListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HashrateResaleListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-List Binance API Documentation}
     */
    public async hashrateResaleList(
        requestParameters: HashrateResaleListRequest = {}
    ): Promise<RestApiResponse<HashrateResaleListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.hashrateResaleList(
            requestParameters?.pageIndex,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<HashrateResaleListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Hashrate Resale Request
     *
     * Weight: 5
     *
     * @summary Hashrate Resale Request(USER_DATA)
     * @param {HashrateResaleRequestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HashrateResaleRequestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Request Binance API Documentation}
     */
    public async hashrateResaleRequest(
        requestParameters: HashrateResaleRequestRequest
    ): Promise<RestApiResponse<HashrateResaleRequestResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.hashrateResaleRequest(
            requestParameters?.userName,
            requestParameters?.algo,
            requestParameters?.endDate,
            requestParameters?.startDate,
            requestParameters?.toPoolUser,
            requestParameters?.hashRate,
            requestParameters?.recvWindow
        );
        return sendRequest<HashrateResaleRequestResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Mining Account Earning
     *
     * Weight: 5
     *
     * @summary Mining Account Earning(USER_DATA)
     * @param {MiningAccountEarningRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MiningAccountEarningResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Mining-Account-Earning Binance API Documentation}
     */
    public async miningAccountEarning(
        requestParameters: MiningAccountEarningRequest
    ): Promise<RestApiResponse<MiningAccountEarningResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.miningAccountEarning(
            requestParameters?.algo,
            requestParameters?.startDate,
            requestParameters?.endDate,
            requestParameters?.pageIndex,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<MiningAccountEarningResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Request for Detail Miner List
     *
     * Weight: 5
     *
     * @summary Request for Detail Miner List(USER_DATA)
     * @param {RequestForDetailMinerListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RequestForDetailMinerListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Request-for-Detail-Miner-List Binance API Documentation}
     */
    public async requestForDetailMinerList(
        requestParameters: RequestForDetailMinerListRequest
    ): Promise<RestApiResponse<RequestForDetailMinerListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.requestForDetailMinerList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.workerName,
            requestParameters?.recvWindow
        );
        return sendRequest<RequestForDetailMinerListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Request for Miner List
     *
     * Weight: 5
     *
     * @summary Request for Miner List(USER_DATA)
     * @param {RequestForMinerListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RequestForMinerListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Request-for-Miner-List Binance API Documentation}
     */
    public async requestForMinerList(
        requestParameters: RequestForMinerListRequest
    ): Promise<RestApiResponse<RequestForMinerListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.requestForMinerList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.pageIndex,
            requestParameters?.sort,
            requestParameters?.sortColumn,
            requestParameters?.workerStatus,
            requestParameters?.recvWindow
        );
        return sendRequest<RequestForMinerListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Statistic List
     *
     * Weight: 5
     *
     * @summary Statistic List(USER_DATA)
     * @param {StatisticListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<StatisticListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MiningApi
     * @see {@link https://developers.binance.com/docs/mining/rest-api/Statistic-List Binance API Documentation}
     */
    public async statisticList(
        requestParameters: StatisticListRequest
    ): Promise<RestApiResponse<StatisticListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.statisticList(
            requestParameters?.algo,
            requestParameters?.userName,
            requestParameters?.recvWindow
        );
        return sendRequest<StatisticListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
