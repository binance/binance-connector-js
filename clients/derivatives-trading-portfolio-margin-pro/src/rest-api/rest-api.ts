/**
 * Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { MarketDataApi } from './modules/market-data-api';

import type {
    BnbTransferRequest,
    ChangeAutoRepayFuturesStatusRequest,
    FundAutoCollectionRequest,
    FundCollectionByAssetRequest,
    GetAutoRepayFuturesStatusRequest,
    GetPortfolioMarginProAccountBalanceRequest,
    GetPortfolioMarginProAccountInfoRequest,
    GetPortfolioMarginProSpanAccountInfoRequest,
    MintBfusdForPortfolioMarginRequest,
    PortfolioMarginProBankruptcyLoanRepayRequest,
    QueryPortfolioMarginProBankruptcyLoanAmountRequest,
    QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest,
    QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest,
    RedeemBfusdForPortfolioMarginRequest,
    RepayFuturesNegativeBalanceRequest,
} from './modules/account-api';
import type {
    PortfolioMarginProTieredCollateralRateRequest,
    QueryPortfolioMarginAssetIndexPriceRequest,
} from './modules/market-data-api';

import type {
    BnbTransferResponse,
    ChangeAutoRepayFuturesStatusResponse,
    FundAutoCollectionResponse,
    FundCollectionByAssetResponse,
    GetAutoRepayFuturesStatusResponse,
    GetPortfolioMarginProAccountBalanceResponse,
    GetPortfolioMarginProAccountInfoResponse,
    GetPortfolioMarginProSpanAccountInfoResponse,
    MintBfusdForPortfolioMarginResponse,
    PortfolioMarginProBankruptcyLoanRepayResponse,
    QueryPortfolioMarginProBankruptcyLoanAmountResponse,
    QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse,
    QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse,
    RedeemBfusdForPortfolioMarginResponse,
    RepayFuturesNegativeBalanceResponse,
} from './types';
import type {
    GetPortfolioMarginAssetLeverageResponse,
    PortfolioMarginCollateralRateResponse,
    PortfolioMarginProTieredCollateralRateResponse,
    QueryPortfolioMarginAssetIndexPriceResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private marketDataApi: MarketDataApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.marketDataApi = new MarketDataApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * BNB transfer can be between Margin Account and USDM Account
     *
     *
     * You can only use this function 2 times per 10 minutes in a rolling manner
     *
     * Weight: 1500
     *
     * @summary BNB transfer(USER_DATA)
     * @param {BnbTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BnbTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/BNB-transfer Binance API Documentation}
     */
    bnbTransfer(
        requestParameters: BnbTransferRequest
    ): Promise<RestApiResponse<BnbTransferResponse>> {
        return this.accountApi.bnbTransfer(requestParameters);
    }

    /**
     * Change Auto-repay-futures Status
     *
     * Weight: 1500
     *
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {ChangeAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Change-Auto-repay-futures-Status Binance API Documentation}
     */
    changeAutoRepayFuturesStatus(
        requestParameters: ChangeAutoRepayFuturesStatusRequest
    ): Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>> {
        return this.accountApi.changeAutoRepayFuturesStatus(requestParameters);
    }

    /**
     * Transfers all assets from Futures Account to Margin account
     *
     * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
     * You can only use this function 500 times per hour in a rolling manner.
     *
     * Weight: 1500
     *
     * @summary Fund Auto-collection(USER_DATA)
     * @param {FundAutoCollectionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundAutoCollectionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Fund-Auto-collection Binance API Documentation}
     */
    fundAutoCollection(
        requestParameters: FundAutoCollectionRequest = {}
    ): Promise<RestApiResponse<FundAutoCollectionResponse>> {
        return this.accountApi.fundAutoCollection(requestParameters);
    }

    /**
     * Transfers specific asset from Futures Account to Margin account
     *
     * The BNB transfer is not be supported
     *
     * Weight: 60
     *
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {FundCollectionByAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundCollectionByAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Fund-Collection-by-Asset Binance API Documentation}
     */
    fundCollectionByAsset(
        requestParameters: FundCollectionByAssetRequest
    ): Promise<RestApiResponse<FundCollectionByAssetResponse>> {
        return this.accountApi.fundCollectionByAsset(requestParameters);
    }

    /**
     * Query Auto-repay-futures Status
     *
     * Weight: 30
     *
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {GetAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Auto-repay-futures-Status Binance API Documentation}
     */
    getAutoRepayFuturesStatus(
        requestParameters: GetAutoRepayFuturesStatusRequest = {}
    ): Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>> {
        return this.accountApi.getAutoRepayFuturesStatus(requestParameters);
    }

    /**
     * Query Portfolio Margin Pro account balance
     *
     * Weight: 20
     *
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {GetPortfolioMarginProAccountBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProAccountBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Balance-Info Binance API Documentation}
     */
    getPortfolioMarginProAccountBalance(
        requestParameters: GetPortfolioMarginProAccountBalanceRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountBalanceResponse>> {
        return this.accountApi.getPortfolioMarginProAccountBalance(requestParameters);
    }

    /**
     * Get Portfolio Margin Pro Account Info
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {GetPortfolioMarginProAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Account-Info Binance API Documentation}
     */
    getPortfolioMarginProAccountInfo(
        requestParameters: GetPortfolioMarginProAccountInfoRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountInfoResponse>> {
        return this.accountApi.getPortfolioMarginProAccountInfo(requestParameters);
    }

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {GetPortfolioMarginProSpanAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProSpanAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Account-Info-V2 Binance API Documentation}
     */
    getPortfolioMarginProSpanAccountInfo(
        requestParameters: GetPortfolioMarginProSpanAccountInfoRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProSpanAccountInfoResponse>> {
        return this.accountApi.getPortfolioMarginProSpanAccountInfo(requestParameters);
    }

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {MintBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MintBfusdForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Mint-BFUSD-Portfolio-Margin Binance API Documentation}
     */
    mintBfusdForPortfolioMargin(
        requestParameters: MintBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<MintBfusdForPortfolioMarginResponse>> {
        return this.accountApi.mintBfusdForPortfolioMargin(requestParameters);
    }

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     *
     * Weight: 3000
     *
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {PortfolioMarginProBankruptcyLoanRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PortfolioMarginProBankruptcyLoanRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Classic-Portfolio-Margin-Bankruptcy-Loan-Repay Binance API Documentation}
     */
    portfolioMarginProBankruptcyLoanRepay(
        requestParameters: PortfolioMarginProBankruptcyLoanRepayRequest = {}
    ): Promise<RestApiResponse<PortfolioMarginProBankruptcyLoanRepayResponse>> {
        return this.accountApi.portfolioMarginProBankruptcyLoanRepay(requestParameters);
    }

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     *
     * If there’s no classic portfolio margin bankruptcy loan, the amount would be 0
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanAmountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanAmountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Classic-Portfolio-Margin-Bankruptcy-Loan-Amount Binance API Documentation}
     */
    queryPortfolioMarginProBankruptcyLoanAmount(
        requestParameters: QueryPortfolioMarginProBankruptcyLoanAmountRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanAmountResponse>> {
        return this.accountApi.queryPortfolioMarginProBankruptcyLoanAmount(requestParameters);
    }

    /**
     * Query repay history of pmloan for portfolio margin pro.
     *
     * `startTime` and `endTime` cannot be longer than 360 days
     * If `startTime` and `endTime` not sent, return records of the last 30 days by default.
     * If `startTime`is sent and `endTime` is not sent, return records of [startTime, startTime+30d].
     * If `startTime` is not sent and `endTime` is sent, return records of [endTime-30d, endTime].
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Portfolio-Margin-Pro-Bankruptcy-Loan-Repay-History Binance API Documentation}
     */
    queryPortfolioMarginProBankruptcyLoanRepayHistory(
        requestParameters: QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>> {
        return this.accountApi.queryPortfolioMarginProBankruptcyLoanRepayHistory(requestParameters);
    }

    /**
     * Query interest history of negative balance for portfolio margin.
     *
     * Weight: 50
     *
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Classic-Portfolio-Margin-Negative-Balance-Interest-History Binance API Documentation}
     */
    queryPortfolioMarginProNegativeBalanceInterestHistory(
        requestParameters: QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>> {
        return this.accountApi.queryPortfolioMarginProNegativeBalanceInterestHistory(
            requestParameters
        );
    }

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {RedeemBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemBfusdForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Redeem-BFUSD-Portfolio-Margin Binance API Documentation}
     */
    redeemBfusdForPortfolioMargin(
        requestParameters: RedeemBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<RedeemBfusdForPortfolioMarginResponse>> {
        return this.accountApi.redeemBfusdForPortfolioMargin(requestParameters);
    }

    /**
     * Repay futures Negative Balance
     *
     * Weight: 1500
     *
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {RepayFuturesNegativeBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Repay-futures-Negative-Balance Binance API Documentation}
     */
    repayFuturesNegativeBalance(
        requestParameters: RepayFuturesNegativeBalanceRequest = {}
    ): Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>> {
        return this.accountApi.repayFuturesNegativeBalance(requestParameters);
    }

    /**
     * Get Portfolio Margin Asset Leverage
     *
     * Weight: 50
     *
     * @summary Get Portfolio Margin Asset Leverage(USER_DATA)
     * @returns {Promise<RestApiResponse<GetPortfolioMarginAssetLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/market-data/Get-Portfolio-Margin-Asset-Leverage Binance API Documentation}
     */
    getPortfolioMarginAssetLeverage(): Promise<
        RestApiResponse<GetPortfolioMarginAssetLeverageResponse>
        > {
        return this.marketDataApi.getPortfolioMarginAssetLeverage();
    }

    /**
     * Portfolio Margin Collateral Rate
     *
     * Weight: 50
     *
     * @summary Portfolio Margin Collateral Rate(MARKET_DATA)
     * @returns {Promise<RestApiResponse<PortfolioMarginCollateralRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/market-data/Classic-Portfolio-Margin-Collateral-Rate Binance API Documentation}
     */
    portfolioMarginCollateralRate(): Promise<
        RestApiResponse<PortfolioMarginCollateralRateResponse>
        > {
        return this.marketDataApi.portfolioMarginCollateralRate();
    }

    /**
     * Portfolio Margin PRO Tiered Collateral Rate
     *
     * Weight: 50
     *
     * @summary Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
     * @param {PortfolioMarginProTieredCollateralRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PortfolioMarginProTieredCollateralRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/market-data/Portfolio-Margin-Pro-Tiered-Collateral-Rate Binance API Documentation}
     */
    portfolioMarginProTieredCollateralRate(
        requestParameters: PortfolioMarginProTieredCollateralRateRequest = {}
    ): Promise<RestApiResponse<PortfolioMarginProTieredCollateralRateResponse>> {
        return this.marketDataApi.portfolioMarginProTieredCollateralRate(requestParameters);
    }

    /**
     * Query Portfolio Margin Asset Index Price
     *
     * Weight: 1 if send asset or 50 if not send asset
     *
     * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
     * @param {QueryPortfolioMarginAssetIndexPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginAssetIndexPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/market-data/Query-Portfolio-Margin-Asset-Index-Price Binance API Documentation}
     */
    queryPortfolioMarginAssetIndexPrice(
        requestParameters: QueryPortfolioMarginAssetIndexPriceRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginAssetIndexPriceResponse>> {
        return this.marketDataApi.queryPortfolioMarginAssetIndexPrice(requestParameters);
    }
}
