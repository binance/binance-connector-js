/**
 * Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    BnbTransferResponse,
    ChangeAutoRepayFuturesStatusResponse,
    FundAutoCollectionResponse,
    FundCollectionByAssetResponse,
    GetAutoRepayFuturesStatusResponse,
    GetPortfolioMarginProAccountBalanceResponse,
    GetPortfolioMarginProAccountInfoResponse,
    GetPortfolioMarginProSpanAccountInfoResponse,
    GetTransferableEarnAssetBalanceForPortfolioMarginResponse,
    MintBfusdForPortfolioMarginResponse,
    PortfolioMarginProBankruptcyLoanRepayResponse,
    QueryPortfolioMarginProBankruptcyLoanAmountResponse,
    QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse,
    QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse,
    RedeemBfusdForPortfolioMarginResponse,
    RepayFuturesNegativeBalanceResponse,
    TransferLdusdtForPortfolioMarginResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * BNB transfer can be between Margin Account and USDM Account
         *
         *
         * You can only use this function 2 times per 10 minutes in a rolling manner
         *
         * Weight: 1500
         *
         * @summary BNB transfer(USER_DATA)
         * @param {number} amount
         * @param {string} transferSide "TO_UM","FROM_UM"
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        bnbTransfer: async (
            amount: number,
            transferSide: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('bnbTransfer', 'amount', amount);
            // verify required parameter 'transferSide' is not null or undefined
            assertParamExists('bnbTransfer', 'transferSide', transferSide);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (transferSide !== undefined && transferSide !== null) {
                localVarQueryParameter['transferSide'] = transferSide;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/bnb-transfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Change Auto-repay-futures Status
         *
         * Weight: 1500
         *
         * @summary Change Auto-repay-futures Status(TRADE)
         * @param {string} autoRepay Default: `true`; `false` for turn off the auto-repay futures negative balance function
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        changeAutoRepayFuturesStatus: async (
            autoRepay: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'autoRepay' is not null or undefined
            assertParamExists('changeAutoRepayFuturesStatus', 'autoRepay', autoRepay);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (autoRepay !== undefined && autoRepay !== null) {
                localVarQueryParameter['autoRepay'] = autoRepay;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/repay-futures-switch',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transfers all assets from Futures Account to Margin account
         *
         * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
         * You can only use this function 500 times per hour in a rolling manner.
         *
         * Weight: 1500
         *
         * @summary Fund Auto-collection(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        fundAutoCollection: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/auto-collection',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transfers specific asset from Futures Account to Margin account
         *
         * The BNB transfer is not be supported
         *
         * Weight: 60
         *
         * @summary Fund Collection by Asset(USER_DATA)
         * @param {string} asset `LDUSDT` only
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        fundCollectionByAsset: async (asset: string, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('fundCollectionByAsset', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/asset-collection',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Auto-repay-futures Status
         *
         * Weight: 30
         *
         * @summary Get Auto-repay-futures Status(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getAutoRepayFuturesStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/repay-futures-switch',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Portfolio Margin Pro account balance
         *
         * Weight: 20
         *
         * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
         * @param {string} [asset]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getPortfolioMarginProAccountBalance: async (
            asset?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Portfolio Margin Pro Account Info
         *
         * Weight: 5
         *
         * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getPortfolioMarginProAccountInfo: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
         *
         * Weight: 5
         *
         * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getPortfolioMarginProSpanAccountInfo: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/portfolio/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get transferable earn asset balance for all types of Portfolio Margin account
         *
         * Weight: 1500
         *
         * @summary Get Transferable Earn Asset Balance for Portfolio Margin (USER_DATA)
         * @param {string} asset `LDUSDT` only
         * @param {string} transferType `EARN_TO_FUTURE` /`FUTURE_TO_EARN`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getTransferableEarnAssetBalanceForPortfolioMargin: async (
            asset: string,
            transferType: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('getTransferableEarnAssetBalanceForPortfolioMargin', 'asset', asset);
            // verify required parameter 'transferType' is not null or undefined
            assertParamExists(
                'getTransferableEarnAssetBalanceForPortfolioMargin',
                'transferType',
                transferType
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (transferType !== undefined && transferType !== null) {
                localVarQueryParameter['transferType'] = transferType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/earn-asset-balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Mint BFUSD for all types of Portfolio Margin account
         *
         * Weight: 1500
         *
         * @summary Mint BFUSD for Portfolio Margin(TRADE)
         * @param {string} fromAsset `BFUSD` only
         * @param {string} targetAsset `USDT` only
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        mintBfusdForPortfolioMargin: async (
            fromAsset: string,
            targetAsset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('mintBfusdForPortfolioMargin', 'fromAsset', fromAsset);
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('mintBfusdForPortfolioMargin', 'targetAsset', targetAsset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('mintBfusdForPortfolioMargin', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromAsset !== undefined && fromAsset !== null) {
                localVarQueryParameter['fromAsset'] = fromAsset;
            }

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/mint',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Repay Portfolio Margin Pro Bankruptcy Loan
         *
         * Weight: 3000
         *
         * @summary Portfolio Margin Pro Bankruptcy Loan Repay
         * @param {string} [from] SPOT or MARGIN，default SPOT
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        portfolioMarginProBankruptcyLoanRepay: async (
            from?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (from !== undefined && from !== null) {
                localVarQueryParameter['from'] = from;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/repay',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Portfolio Margin Pro Bankruptcy Loan Amount
         *
         * If there’s no classic portfolio margin bankruptcy loan, the amount would be 0
         *
         * Weight: 500
         *
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryPortfolioMarginProBankruptcyLoanAmount: async (
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/pmLoan',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query repay history of pmloan for portfolio margin pro.
         *
         * `startTime` and `endTime` cannot be longer than 360 days
         * If `startTime` and `endTime` not sent, return records of the last 30 days by default.
         * If `startTime`is sent and `endTime` is not sent, return records of [startTime, startTime+30d].
         * If `startTime` is not sent and `endTime` is sent, return records of [endTime-30d, endTime].
         *
         * Weight: 500
         *
         * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryPortfolioMarginProBankruptcyLoanRepayHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/pmLoan-history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query interest history of negative balance for portfolio margin.
         *
         * Weight: 50
         *
         * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryPortfolioMarginProNegativeBalanceInterestHistory: async (
            asset?: string,
            startTime?: number,
            endTime?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/interest-history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem BFUSD for all types of Portfolio Margin account
         *
         * Weight: 1500
         *
         * @summary Redeem BFUSD for Portfolio Margin(TRADE)
         * @param {string} fromAsset `BFUSD` only
         * @param {string} targetAsset `USDT` only
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemBfusdForPortfolioMargin: async (
            fromAsset: string,
            targetAsset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'fromAsset' is not null or undefined
            assertParamExists('redeemBfusdForPortfolioMargin', 'fromAsset', fromAsset);
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('redeemBfusdForPortfolioMargin', 'targetAsset', targetAsset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('redeemBfusdForPortfolioMargin', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromAsset !== undefined && fromAsset !== null) {
                localVarQueryParameter['fromAsset'] = fromAsset;
            }

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Repay futures Negative Balance
         *
         * Weight: 1500
         *
         * @summary Repay futures Negative Balance(USER_DATA)
         * @param {string} [from] SPOT or MARGIN，default SPOT
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        repayFuturesNegativeBalance: async (
            from?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (from !== undefined && from !== null) {
                localVarQueryParameter['from'] = from;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/repay-futures-negative-balance',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transfer LDUSDT as collateral for all types of Portfolio Margin account
         *
         * Weight: 1500
         *
         * @summary Transfer LDUSDT for Portfolio Margin(TRADE)
         * @param {string} asset `LDUSDT` only
         * @param {string} transferType `EARN_TO_FUTURE` /`FUTURE_TO_EARN`
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        transferLdusdtForPortfolioMargin: async (
            asset: string,
            transferType: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('transferLdusdtForPortfolioMargin', 'asset', asset);
            // verify required parameter 'transferType' is not null or undefined
            assertParamExists('transferLdusdtForPortfolioMargin', 'transferType', transferType);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('transferLdusdtForPortfolioMargin', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (transferType !== undefined && transferType !== null) {
                localVarQueryParameter['transferType'] = transferType;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/portfolio/earn-asset-balance',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * BNB transfer can be between Margin Account and USDM Account
     *
     *
     * You can only use this function 2 times per 10 minutes in a rolling manner
     *
     * Weight: 1500
     *
     * @summary BNB transfer(USER_DATA)
     * @param {BnbTransferRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    bnbTransfer(
        requestParameters: BnbTransferRequest
    ): Promise<RestApiResponse<BnbTransferResponse>>;
    /**
     * Change Auto-repay-futures Status
     *
     * Weight: 1500
     *
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {ChangeAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    changeAutoRepayFuturesStatus(
        requestParameters: ChangeAutoRepayFuturesStatusRequest
    ): Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>>;
    /**
     * Transfers all assets from Futures Account to Margin account
     *
     * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
     * You can only use this function 500 times per hour in a rolling manner.
     *
     * Weight: 1500
     *
     * @summary Fund Auto-collection(USER_DATA)
     * @param {FundAutoCollectionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    fundAutoCollection(
        requestParameters?: FundAutoCollectionRequest
    ): Promise<RestApiResponse<FundAutoCollectionResponse>>;
    /**
     * Transfers specific asset from Futures Account to Margin account
     *
     * The BNB transfer is not be supported
     *
     * Weight: 60
     *
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {FundCollectionByAssetRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    fundCollectionByAsset(
        requestParameters: FundCollectionByAssetRequest
    ): Promise<RestApiResponse<FundCollectionByAssetResponse>>;
    /**
     * Query Auto-repay-futures Status
     *
     * Weight: 30
     *
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {GetAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getAutoRepayFuturesStatus(
        requestParameters?: GetAutoRepayFuturesStatusRequest
    ): Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>>;
    /**
     * Query Portfolio Margin Pro account balance
     *
     * Weight: 20
     *
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {GetPortfolioMarginProAccountBalanceRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getPortfolioMarginProAccountBalance(
        requestParameters?: GetPortfolioMarginProAccountBalanceRequest
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountBalanceResponse>>;
    /**
     * Get Portfolio Margin Pro Account Info
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {GetPortfolioMarginProAccountInfoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getPortfolioMarginProAccountInfo(
        requestParameters?: GetPortfolioMarginProAccountInfoRequest
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountInfoResponse>>;
    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {GetPortfolioMarginProSpanAccountInfoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getPortfolioMarginProSpanAccountInfo(
        requestParameters?: GetPortfolioMarginProSpanAccountInfoRequest
    ): Promise<RestApiResponse<GetPortfolioMarginProSpanAccountInfoResponse>>;
    /**
     * Get transferable earn asset balance for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Get Transferable Earn Asset Balance for Portfolio Margin (USER_DATA)
     * @param {GetTransferableEarnAssetBalanceForPortfolioMarginRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getTransferableEarnAssetBalanceForPortfolioMargin(
        requestParameters: GetTransferableEarnAssetBalanceForPortfolioMarginRequest
    ): Promise<RestApiResponse<GetTransferableEarnAssetBalanceForPortfolioMarginResponse>>;
    /**
     * Mint BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {MintBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    mintBfusdForPortfolioMargin(
        requestParameters: MintBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<MintBfusdForPortfolioMarginResponse>>;
    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     *
     * Weight: 3000
     *
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {PortfolioMarginProBankruptcyLoanRepayRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    portfolioMarginProBankruptcyLoanRepay(
        requestParameters?: PortfolioMarginProBankruptcyLoanRepayRequest
    ): Promise<RestApiResponse<PortfolioMarginProBankruptcyLoanRepayResponse>>;
    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     *
     * If there’s no classic portfolio margin bankruptcy loan, the amount would be 0
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanAmountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryPortfolioMarginProBankruptcyLoanAmount(
        requestParameters?: QueryPortfolioMarginProBankruptcyLoanAmountRequest
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanAmountResponse>>;
    /**
     * Query repay history of pmloan for portfolio margin pro.
     *
     * `startTime` and `endTime` cannot be longer than 360 days
     * If `startTime` and `endTime` not sent, return records of the last 30 days by default.
     * If `startTime`is sent and `endTime` is not sent, return records of [startTime, startTime+30d].
     * If `startTime` is not sent and `endTime` is sent, return records of [endTime-30d, endTime].
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryPortfolioMarginProBankruptcyLoanRepayHistory(
        requestParameters?: QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>>;
    /**
     * Query interest history of negative balance for portfolio margin.
     *
     * Weight: 50
     *
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryPortfolioMarginProNegativeBalanceInterestHistory(
        requestParameters?: QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest
    ): Promise<RestApiResponse<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>>;
    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {RedeemBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    redeemBfusdForPortfolioMargin(
        requestParameters: RedeemBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<RedeemBfusdForPortfolioMarginResponse>>;
    /**
     * Repay futures Negative Balance
     *
     * Weight: 1500
     *
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {RepayFuturesNegativeBalanceRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    repayFuturesNegativeBalance(
        requestParameters?: RepayFuturesNegativeBalanceRequest
    ): Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>>;
    /**
     * Transfer LDUSDT as collateral for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Transfer LDUSDT for Portfolio Margin(TRADE)
     * @param {TransferLdusdtForPortfolioMarginRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    transferLdusdtForPortfolioMargin(
        requestParameters: TransferLdusdtForPortfolioMarginRequest
    ): Promise<RestApiResponse<TransferLdusdtForPortfolioMarginResponse>>;
}

/**
 * Request parameters for bnbTransfer operation in AccountApi.
 * @interface BnbTransferRequest
 */
export interface BnbTransferRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiBnbTransfer
     */
    readonly amount: number;

    /**
     * "TO_UM","FROM_UM"
     * @type {string}
     * @memberof AccountApiBnbTransfer
     */
    readonly transferSide: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiBnbTransfer
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for changeAutoRepayFuturesStatus operation in AccountApi.
 * @interface ChangeAutoRepayFuturesStatusRequest
 */
export interface ChangeAutoRepayFuturesStatusRequest {
    /**
     * Default: `true`; `false` for turn off the auto-repay futures negative balance function
     * @type {string}
     * @memberof AccountApiChangeAutoRepayFuturesStatus
     */
    readonly autoRepay: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiChangeAutoRepayFuturesStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for fundAutoCollection operation in AccountApi.
 * @interface FundAutoCollectionRequest
 */
export interface FundAutoCollectionRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiFundAutoCollection
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for fundCollectionByAsset operation in AccountApi.
 * @interface FundCollectionByAssetRequest
 */
export interface FundCollectionByAssetRequest {
    /**
     * `LDUSDT` only
     * @type {string}
     * @memberof AccountApiFundCollectionByAsset
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiFundCollectionByAsset
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getAutoRepayFuturesStatus operation in AccountApi.
 * @interface GetAutoRepayFuturesStatusRequest
 */
export interface GetAutoRepayFuturesStatusRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetAutoRepayFuturesStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getPortfolioMarginProAccountBalance operation in AccountApi.
 * @interface GetPortfolioMarginProAccountBalanceRequest
 */
export interface GetPortfolioMarginProAccountBalanceRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetPortfolioMarginProAccountBalance
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetPortfolioMarginProAccountBalance
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getPortfolioMarginProAccountInfo operation in AccountApi.
 * @interface GetPortfolioMarginProAccountInfoRequest
 */
export interface GetPortfolioMarginProAccountInfoRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetPortfolioMarginProAccountInfo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getPortfolioMarginProSpanAccountInfo operation in AccountApi.
 * @interface GetPortfolioMarginProSpanAccountInfoRequest
 */
export interface GetPortfolioMarginProSpanAccountInfoRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetPortfolioMarginProSpanAccountInfo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getTransferableEarnAssetBalanceForPortfolioMargin operation in AccountApi.
 * @interface GetTransferableEarnAssetBalanceForPortfolioMarginRequest
 */
export interface GetTransferableEarnAssetBalanceForPortfolioMarginRequest {
    /**
     * `LDUSDT` only
     * @type {string}
     * @memberof AccountApiGetTransferableEarnAssetBalanceForPortfolioMargin
     */
    readonly asset: string;

    /**
     * `EARN_TO_FUTURE` /`FUTURE_TO_EARN`
     * @type {string}
     * @memberof AccountApiGetTransferableEarnAssetBalanceForPortfolioMargin
     */
    readonly transferType: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetTransferableEarnAssetBalanceForPortfolioMargin
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for mintBfusdForPortfolioMargin operation in AccountApi.
 * @interface MintBfusdForPortfolioMarginRequest
 */
export interface MintBfusdForPortfolioMarginRequest {
    /**
     * `BFUSD` only
     * @type {string}
     * @memberof AccountApiMintBfusdForPortfolioMargin
     */
    readonly fromAsset: string;

    /**
     * `USDT` only
     * @type {string}
     * @memberof AccountApiMintBfusdForPortfolioMargin
     */
    readonly targetAsset: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMintBfusdForPortfolioMargin
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMintBfusdForPortfolioMargin
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for portfolioMarginProBankruptcyLoanRepay operation in AccountApi.
 * @interface PortfolioMarginProBankruptcyLoanRepayRequest
 */
export interface PortfolioMarginProBankruptcyLoanRepayRequest {
    /**
     * SPOT or MARGIN，default SPOT
     * @type {string}
     * @memberof AccountApiPortfolioMarginProBankruptcyLoanRepay
     */
    readonly from?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiPortfolioMarginProBankruptcyLoanRepay
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryPortfolioMarginProBankruptcyLoanAmount operation in AccountApi.
 * @interface QueryPortfolioMarginProBankruptcyLoanAmountRequest
 */
export interface QueryPortfolioMarginProBankruptcyLoanAmountRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanAmount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryPortfolioMarginProBankruptcyLoanRepayHistory operation in AccountApi.
 * @interface QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest
 */
export interface QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanRepayHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanRepayHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanRepayHistory
     */
    readonly current?: number;

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanRepayHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProBankruptcyLoanRepayHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryPortfolioMarginProNegativeBalanceInterestHistory operation in AccountApi.
 * @interface QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest
 */
export interface QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiQueryPortfolioMarginProNegativeBalanceInterestHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProNegativeBalanceInterestHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProNegativeBalanceInterestHistory
     */
    readonly endTime?: number;

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProNegativeBalanceInterestHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryPortfolioMarginProNegativeBalanceInterestHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemBfusdForPortfolioMargin operation in AccountApi.
 * @interface RedeemBfusdForPortfolioMarginRequest
 */
export interface RedeemBfusdForPortfolioMarginRequest {
    /**
     * `BFUSD` only
     * @type {string}
     * @memberof AccountApiRedeemBfusdForPortfolioMargin
     */
    readonly fromAsset: string;

    /**
     * `USDT` only
     * @type {string}
     * @memberof AccountApiRedeemBfusdForPortfolioMargin
     */
    readonly targetAsset: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiRedeemBfusdForPortfolioMargin
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiRedeemBfusdForPortfolioMargin
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for repayFuturesNegativeBalance operation in AccountApi.
 * @interface RepayFuturesNegativeBalanceRequest
 */
export interface RepayFuturesNegativeBalanceRequest {
    /**
     * SPOT or MARGIN，default SPOT
     * @type {string}
     * @memberof AccountApiRepayFuturesNegativeBalance
     */
    readonly from?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiRepayFuturesNegativeBalance
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for transferLdusdtForPortfolioMargin operation in AccountApi.
 * @interface TransferLdusdtForPortfolioMarginRequest
 */
export interface TransferLdusdtForPortfolioMarginRequest {
    /**
     * `LDUSDT` only
     * @type {string}
     * @memberof AccountApiTransferLdusdtForPortfolioMargin
     */
    readonly asset: string;

    /**
     * `EARN_TO_FUTURE` /`FUTURE_TO_EARN`
     * @type {string}
     * @memberof AccountApiTransferLdusdtForPortfolioMargin
     */
    readonly transferType: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiTransferLdusdtForPortfolioMargin
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiTransferLdusdtForPortfolioMargin
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * BNB transfer can be between Margin Account and USDM Account
     *
     *
     * You can only use this function 2 times per 10 minutes in a rolling manner
     *
     * Weight: 1500
     *
     * @summary BNB transfer(USER_DATA)
     * @param {BnbTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BnbTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/BNB-transfer Binance API Documentation}
     */
    public async bnbTransfer(
        requestParameters: BnbTransferRequest
    ): Promise<RestApiResponse<BnbTransferResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.bnbTransfer(
            requestParameters?.amount,
            requestParameters?.transferSide,
            requestParameters?.recvWindow
        );
        return sendRequest<BnbTransferResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Change Auto-repay-futures Status
     *
     * Weight: 1500
     *
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {ChangeAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Change-Auto-repay-futures-Status Binance API Documentation}
     */
    public async changeAutoRepayFuturesStatus(
        requestParameters: ChangeAutoRepayFuturesStatusRequest
    ): Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.changeAutoRepayFuturesStatus(
            requestParameters?.autoRepay,
            requestParameters?.recvWindow
        );
        return sendRequest<ChangeAutoRepayFuturesStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Transfers all assets from Futures Account to Margin account
     *
     * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
     * You can only use this function 500 times per hour in a rolling manner.
     *
     * Weight: 1500
     *
     * @summary Fund Auto-collection(USER_DATA)
     * @param {FundAutoCollectionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundAutoCollectionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Fund-Auto-collection Binance API Documentation}
     */
    public async fundAutoCollection(
        requestParameters: FundAutoCollectionRequest = {}
    ): Promise<RestApiResponse<FundAutoCollectionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.fundAutoCollection(
            requestParameters?.recvWindow
        );
        return sendRequest<FundAutoCollectionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Transfers specific asset from Futures Account to Margin account
     *
     * The BNB transfer is not be supported
     *
     * Weight: 60
     *
     * @summary Fund Collection by Asset(USER_DATA)
     * @param {FundCollectionByAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundCollectionByAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Fund-Collection-by-Asset Binance API Documentation}
     */
    public async fundCollectionByAsset(
        requestParameters: FundCollectionByAssetRequest
    ): Promise<RestApiResponse<FundCollectionByAssetResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.fundCollectionByAsset(
            requestParameters?.asset,
            requestParameters?.recvWindow
        );
        return sendRequest<FundCollectionByAssetResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Auto-repay-futures Status
     *
     * Weight: 30
     *
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {GetAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Auto-repay-futures-Status Binance API Documentation}
     */
    public async getAutoRepayFuturesStatus(
        requestParameters: GetAutoRepayFuturesStatusRequest = {}
    ): Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getAutoRepayFuturesStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<GetAutoRepayFuturesStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Portfolio Margin Pro account balance
     *
     * Weight: 20
     *
     * @summary Get Portfolio Margin Pro Account Balance(USER_DATA)
     * @param {GetPortfolioMarginProAccountBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProAccountBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Balance-Info Binance API Documentation}
     */
    public async getPortfolioMarginProAccountBalance(
        requestParameters: GetPortfolioMarginProAccountBalanceRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountBalanceResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getPortfolioMarginProAccountBalance(
                requestParameters?.asset,
                requestParameters?.recvWindow
            );
        return sendRequest<GetPortfolioMarginProAccountBalanceResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Portfolio Margin Pro Account Info
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro Account Info(USER_DATA)
     * @param {GetPortfolioMarginProAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Account-Info Binance API Documentation}
     */
    public async getPortfolioMarginProAccountInfo(
        requestParameters: GetPortfolioMarginProAccountInfoRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProAccountInfoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getPortfolioMarginProAccountInfo(
                requestParameters?.recvWindow
            );
        return sendRequest<GetPortfolioMarginProAccountInfoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Portfolio Margin Pro SPAN Account Info (For Portfolio Margin Pro SPAN users only)
     *
     * Weight: 5
     *
     * @summary Get Portfolio Margin Pro SPAN Account Info(USER_DATA)
     * @param {GetPortfolioMarginProSpanAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPortfolioMarginProSpanAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Classic-Portfolio-Margin-Account-Info-V2 Binance API Documentation}
     */
    public async getPortfolioMarginProSpanAccountInfo(
        requestParameters: GetPortfolioMarginProSpanAccountInfoRequest = {}
    ): Promise<RestApiResponse<GetPortfolioMarginProSpanAccountInfoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getPortfolioMarginProSpanAccountInfo(
                requestParameters?.recvWindow
            );
        return sendRequest<GetPortfolioMarginProSpanAccountInfoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get transferable earn asset balance for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Get Transferable Earn Asset Balance for Portfolio Margin (USER_DATA)
     * @param {GetTransferableEarnAssetBalanceForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTransferableEarnAssetBalanceForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Get-Transferable-Earn-Asset-Balance-for-Portfolio-Margin Binance API Documentation}
     */
    public async getTransferableEarnAssetBalanceForPortfolioMargin(
        requestParameters: GetTransferableEarnAssetBalanceForPortfolioMarginRequest
    ): Promise<RestApiResponse<GetTransferableEarnAssetBalanceForPortfolioMarginResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getTransferableEarnAssetBalanceForPortfolioMargin(
                requestParameters?.asset,
                requestParameters?.transferType,
                requestParameters?.recvWindow
            );
        return sendRequest<GetTransferableEarnAssetBalanceForPortfolioMarginResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Mint BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Mint BFUSD for Portfolio Margin(TRADE)
     * @param {MintBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MintBfusdForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Mint-BFUSD-Portfolio-Margin Binance API Documentation}
     */
    public async mintBfusdForPortfolioMargin(
        requestParameters: MintBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<MintBfusdForPortfolioMarginResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.mintBfusdForPortfolioMargin(
            requestParameters?.fromAsset,
            requestParameters?.targetAsset,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<MintBfusdForPortfolioMarginResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Repay Portfolio Margin Pro Bankruptcy Loan
     *
     * Weight: 3000
     *
     * @summary Portfolio Margin Pro Bankruptcy Loan Repay
     * @param {PortfolioMarginProBankruptcyLoanRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PortfolioMarginProBankruptcyLoanRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Classic-Portfolio-Margin-Bankruptcy-Loan-Repay Binance API Documentation}
     */
    public async portfolioMarginProBankruptcyLoanRepay(
        requestParameters: PortfolioMarginProBankruptcyLoanRepayRequest = {}
    ): Promise<RestApiResponse<PortfolioMarginProBankruptcyLoanRepayResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.portfolioMarginProBankruptcyLoanRepay(
                requestParameters?.from,
                requestParameters?.recvWindow
            );
        return sendRequest<PortfolioMarginProBankruptcyLoanRepayResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query Portfolio Margin Pro Bankruptcy Loan Amount
     *
     * If there’s no classic portfolio margin bankruptcy loan, the amount would be 0
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Amount(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanAmountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanAmountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Classic-Portfolio-Margin-Bankruptcy-Loan-Amount Binance API Documentation}
     */
    public async queryPortfolioMarginProBankruptcyLoanAmount(
        requestParameters: QueryPortfolioMarginProBankruptcyLoanAmountRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanAmountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryPortfolioMarginProBankruptcyLoanAmount(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryPortfolioMarginProBankruptcyLoanAmountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query repay history of pmloan for portfolio margin pro.
     *
     * `startTime` and `endTime` cannot be longer than 360 days
     * If `startTime` and `endTime` not sent, return records of the last 30 days by default.
     * If `startTime`is sent and `endTime` is not sent, return records of [startTime, startTime+30d].
     * If `startTime` is not sent and `endTime` is sent, return records of [endTime-30d, endTime].
     *
     * Weight: 500
     *
     * @summary Query Portfolio Margin Pro Bankruptcy Loan Repay History(USER_DATA)
     * @param {QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Portfolio-Margin-Pro-Bankruptcy-Loan-Repay-History Binance API Documentation}
     */
    public async queryPortfolioMarginProBankruptcyLoanRepayHistory(
        requestParameters: QueryPortfolioMarginProBankruptcyLoanRepayHistoryRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryPortfolioMarginProBankruptcyLoanRepayHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query interest history of negative balance for portfolio margin.
     *
     * Weight: 50
     *
     * @summary Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)
     * @param {QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Query-Classic-Portfolio-Margin-Negative-Balance-Interest-History Binance API Documentation}
     */
    public async queryPortfolioMarginProNegativeBalanceInterestHistory(
        requestParameters: QueryPortfolioMarginProNegativeBalanceInterestHistoryRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryPortfolioMarginProNegativeBalanceInterestHistory(
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem BFUSD for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Redeem BFUSD for Portfolio Margin(TRADE)
     * @param {RedeemBfusdForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemBfusdForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Redeem-BFUSD-Portfolio-Margin Binance API Documentation}
     */
    public async redeemBfusdForPortfolioMargin(
        requestParameters: RedeemBfusdForPortfolioMarginRequest
    ): Promise<RestApiResponse<RedeemBfusdForPortfolioMarginResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.redeemBfusdForPortfolioMargin(
                requestParameters?.fromAsset,
                requestParameters?.targetAsset,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<RedeemBfusdForPortfolioMarginResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Repay futures Negative Balance
     *
     * Weight: 1500
     *
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {RepayFuturesNegativeBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Repay-futures-Negative-Balance Binance API Documentation}
     */
    public async repayFuturesNegativeBalance(
        requestParameters: RepayFuturesNegativeBalanceRequest = {}
    ): Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.repayFuturesNegativeBalance(
            requestParameters?.from,
            requestParameters?.recvWindow
        );
        return sendRequest<RepayFuturesNegativeBalanceResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Transfer LDUSDT as collateral for all types of Portfolio Margin account
     *
     * Weight: 1500
     *
     * @summary Transfer LDUSDT for Portfolio Margin(TRADE)
     * @param {TransferLdusdtForPortfolioMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TransferLdusdtForPortfolioMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin-pro/account/Transfer-LDUSDT-for-Portfolio-Margin Binance API Documentation}
     */
    public async transferLdusdtForPortfolioMargin(
        requestParameters: TransferLdusdtForPortfolioMarginRequest
    ): Promise<RestApiResponse<TransferLdusdtForPortfolioMarginResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.transferLdusdtForPortfolioMargin(
                requestParameters?.asset,
                requestParameters?.transferType,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<TransferLdusdtForPortfolioMarginResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
