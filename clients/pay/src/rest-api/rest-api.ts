/**
 * Binance Public Pay REST API
 *
 * OpenAPI Specification for the Binance Public Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { PayApi } from './modules/pay-api';

import type { GetPayTradeHistoryRequest } from './modules/pay-api';

import type { GetPayTradeHistoryResponse } from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private payApi: PayApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.payApi = new PayApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Get Pay Trade History
     *
     * If startTime and endTime are not sent, the recent 90 days' data will be returned.
     * The max interval between startTime and endTime is 90 days.
     * Support for querying orders within the last 18 months.
     * For payerInfo and receiverInfoï¼Œthere are different return values in different orderTypes.
     * Sender's perspective when orderType is C2C
     * payerInfo : binanceId
     * receiverInfo : name, binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input)
     * Receiver's perspective when orderType is C2C
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is CRYPTO_BOX
     * payerInfo : binanceId
     * receiverInfo : name(the value is always "Crypto Box")
     * Receiver's perspective when orderType is CRYPTO_BOX
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is PAY
     * payerInfo : binanceId
     * receiverInfo : name
     * Receiver's perspective when orderType is PAY
     * payerInfo : name, accountId
     * receiverInfo : binanceId, name
     * Sender's perspective when orderType is PAY_REFUND
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAY_REFUND
     * payerInfo : name
     * receiverInfo :  binanceId
     * Sender's perspective when orderType is PAYOUT
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAYOUT
     * payerInfo : name
     * receiverInfo :  binanceId
     * Receiver's perspective when orderType is CRYPTO_BOX_RF
     * payerInfo : name(the value is always "Crypto Box")
     * receiverInfo : binanceId
     * Sender's perspective when orderType is REMITTANCE
     * payerInfo : binanceId
     * receiverInfo : name, institutionName, cardNumber, digitalWalletId
     *
     * Weight: 3000
     *
     * @summary Get Pay Trade History
     * @param {GetPayTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPayTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/pay/rest-api/Get-Pay-Trade-History Binance API Documentation}
     */
    getPayTradeHistory(
        requestParameters: GetPayTradeHistoryRequest = {}
    ): Promise<RestApiResponse<GetPayTradeHistoryResponse>> {
        return this.payApi.getPayTradeHistory(requestParameters);
    }
}
