/**
 * Binance Public Pay REST API
 *
 * OpenAPI Specification for the Binance Public Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { GetPayTradeHistoryResponse } from '../types';

/**
 * PayApi - axios parameter creator
 */
const PayApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Pay Trade History
         *
         * If startTime and endTime are not sent, the recent 90 days' data will be returned.
         * The max interval between startTime and endTime is 90 days.
         * Support for querying orders within the last 18 months.
         * For payerInfo and receiverInfo，there are different return values in different orderTypes.
         * Sender's perspective when orderType is C2C
         * payerInfo : binanceId
         * receiverInfo : name, binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input)
         * Receiver's perspective when orderType is C2C
         * payerInfo : name, accountId
         * receiverInfo : binanceId
         * Sender's perspective when orderType is CRYPTO_BOX
         * payerInfo : binanceId
         * receiverInfo : name(the value is always "Crypto Box")
         * Receiver's perspective when orderType is CRYPTO_BOX
         * payerInfo : name, accountId
         * receiverInfo : binanceId
         * Sender's perspective when orderType is PAY
         * payerInfo : binanceId
         * receiverInfo : name
         * Receiver's perspective when orderType is PAY
         * payerInfo : name, accountId
         * receiverInfo : binanceId, name
         * Sender's perspective when orderType is PAY_REFUND
         * payerInfo : binanceId, name
         * receiverInfo : name, accountId
         * Receiver's perspective when orderType is PAY_REFUND
         * payerInfo : name
         * receiverInfo :  binanceId
         * Sender's perspective when orderType is PAYOUT
         * payerInfo : binanceId, name
         * receiverInfo : name, accountId
         * Receiver's perspective when orderType is PAYOUT
         * payerInfo : name
         * receiverInfo :  binanceId
         * Receiver's perspective when orderType is CRYPTO_BOX_RF
         * payerInfo : name(the value is always "Crypto Box")
         * receiverInfo : binanceId
         * Sender's perspective when orderType is REMITTANCE
         * payerInfo : binanceId
         * receiverInfo : name, institutionName, cardNumber, digitalWalletId
         *
         * Weight: 3000
         *
         * @summary Get Pay Trade History
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] default 100, max 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getPayTradeHistory: async (
            startTime?: number,
            endTime?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/pay/transactions',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * PayApi - interface
 * @interface PayApi
 */
export interface PayApiInterface {
    /**
     * Get Pay Trade History
     *
     * If startTime and endTime are not sent, the recent 90 days' data will be returned.
     * The max interval between startTime and endTime is 90 days.
     * Support for querying orders within the last 18 months.
     * For payerInfo and receiverInfo，there are different return values in different orderTypes.
     * Sender's perspective when orderType is C2C
     * payerInfo : binanceId
     * receiverInfo : name, binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input)
     * Receiver's perspective when orderType is C2C
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is CRYPTO_BOX
     * payerInfo : binanceId
     * receiverInfo : name(the value is always "Crypto Box")
     * Receiver's perspective when orderType is CRYPTO_BOX
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is PAY
     * payerInfo : binanceId
     * receiverInfo : name
     * Receiver's perspective when orderType is PAY
     * payerInfo : name, accountId
     * receiverInfo : binanceId, name
     * Sender's perspective when orderType is PAY_REFUND
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAY_REFUND
     * payerInfo : name
     * receiverInfo :  binanceId
     * Sender's perspective when orderType is PAYOUT
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAYOUT
     * payerInfo : name
     * receiverInfo :  binanceId
     * Receiver's perspective when orderType is CRYPTO_BOX_RF
     * payerInfo : name(the value is always "Crypto Box")
     * receiverInfo : binanceId
     * Sender's perspective when orderType is REMITTANCE
     * payerInfo : binanceId
     * receiverInfo : name, institutionName, cardNumber, digitalWalletId
     *
     * Weight: 3000
     *
     * @summary Get Pay Trade History
     * @param {GetPayTradeHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof PayApiInterface
     */
    getPayTradeHistory(
        requestParameters?: GetPayTradeHistoryRequest
    ): Promise<RestApiResponse<GetPayTradeHistoryResponse>>;
}

/**
 * Request parameters for getPayTradeHistory operation in PayApi.
 * @interface GetPayTradeHistoryRequest
 */
export interface GetPayTradeHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof PayApiGetPayTradeHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof PayApiGetPayTradeHistory
     */
    readonly endTime?: number;

    /**
     * default 100, max 100
     * @type {number}
     * @memberof PayApiGetPayTradeHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof PayApiGetPayTradeHistory
     */
    readonly recvWindow?: number;
}

/**
 * PayApi - object-oriented interface
 * @class PayApi
 */
export class PayApi implements PayApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = PayApiAxiosParamCreator(configuration);
    }

    /**
     * Get Pay Trade History
     *
     * If startTime and endTime are not sent, the recent 90 days' data will be returned.
     * The max interval between startTime and endTime is 90 days.
     * Support for querying orders within the last 18 months.
     * For payerInfo and receiverInfo，there are different return values in different orderTypes.
     * Sender's perspective when orderType is C2C
     * payerInfo : binanceId
     * receiverInfo : name, binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input)
     * Receiver's perspective when orderType is C2C
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is CRYPTO_BOX
     * payerInfo : binanceId
     * receiverInfo : name(the value is always "Crypto Box")
     * Receiver's perspective when orderType is CRYPTO_BOX
     * payerInfo : name, accountId
     * receiverInfo : binanceId
     * Sender's perspective when orderType is PAY
     * payerInfo : binanceId
     * receiverInfo : name
     * Receiver's perspective when orderType is PAY
     * payerInfo : name, accountId
     * receiverInfo : binanceId, name
     * Sender's perspective when orderType is PAY_REFUND
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAY_REFUND
     * payerInfo : name
     * receiverInfo :  binanceId
     * Sender's perspective when orderType is PAYOUT
     * payerInfo : binanceId, name
     * receiverInfo : name, accountId
     * Receiver's perspective when orderType is PAYOUT
     * payerInfo : name
     * receiverInfo :  binanceId
     * Receiver's perspective when orderType is CRYPTO_BOX_RF
     * payerInfo : name(the value is always "Crypto Box")
     * receiverInfo : binanceId
     * Sender's perspective when orderType is REMITTANCE
     * payerInfo : binanceId
     * receiverInfo : name, institutionName, cardNumber, digitalWalletId
     *
     * Weight: 3000
     *
     * @summary Get Pay Trade History
     * @param {GetPayTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPayTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof PayApi
     * @see {@link https://developers.binance.com/docs/pay/rest-api/Get-Pay-Trade-History Binance API Documentation}
     */
    public async getPayTradeHistory(
        requestParameters: GetPayTradeHistoryRequest = {}
    ): Promise<RestApiResponse<GetPayTradeHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getPayTradeHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<GetPayTradeHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
