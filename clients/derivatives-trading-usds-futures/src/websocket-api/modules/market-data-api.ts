/**
 * Binance Derivatives Trading USDS Futures WebSocket API
 *
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    OrderBookResponse,
    SymbolOrderBookTickerResponse,
    SymbolPriceTickerResponse,
} from '../types';

/**
 * MarketDataApi - interface
 *
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get current order book. Note that this request returns limited market depth.
     * If you need to continuously monitor order book updates, please consider using Websocket Market Streams:
     * `<symbol>@depth<levels>`
     * `<symbol>@depth`
     *
     * You can use `depth` request together with `<symbol>@depth` streams to maintain a local order book.
     *
     * Weight: Adjusted based on the limit:
     * | Limit         | Weight |
     * | ------------- | ------ |
     * | 5, 10, 20, 50 | 2      |
     * | 100           | 5      |
     * | 500           | 10     |
     * | 1000          | 20     |
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderBookResponse>}
     * @memberof MarketDataApiInterface
     */
    orderBook(
        requestParameters: OrderBookRequest
    ): Promise<WebsocketApiResponse<OrderBookResponse>>;

    /**
     * Best price/qty on the order book for a symbol or symbols.
     *
     * If the symbol is not sent, bookTickers for all symbols will be returned in an array.
     * The field `X-MBX-USED-WEIGHT-1M` in response header is not accurate from this endpoint, please ignore.
     *
     * Weight: 2 for a single symbol;
     * 5 when the symbol parameter is omitted
     *
     * @summary Symbol Order Book Ticker
     * @param {SymbolOrderBookTickerRequest} requestParameters Request parameters.
     *
     * @returns {Promise<SymbolOrderBookTickerResponse>}
     * @memberof MarketDataApiInterface
     */
    symbolOrderBookTicker(
        requestParameters?: SymbolOrderBookTickerRequest
    ): Promise<WebsocketApiResponse<SymbolOrderBookTickerResponse>>;

    /**
     * Latest price for a symbol or symbols.
     *
     * If the symbol is not sent, prices for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol;
     * 2 when the symbol parameter is omitted
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     *
     * @returns {Promise<SymbolPriceTickerResponse>}
     * @memberof MarketDataApiInterface
     */
    symbolPriceTicker(
        requestParameters?: SymbolPriceTickerRequest
    ): Promise<WebsocketApiResponse<SymbolPriceTickerResponse>>;
}

/**
 * Request parameters for orderBook operation in MarketDataApi.
 * @interface OrderBookRequest
 */
export interface OrderBookRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiOrderBook
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketDataApiOrderBook
     */
    readonly id?: string;

    /**
     * Default 500; Valid limits:[5, 10, 20, 50, 100, 500, 1000]
     * @type {number}
     * @memberof MarketDataApiOrderBook
     */
    readonly limit?: number;
}

/**
 * Request parameters for symbolOrderBookTicker operation in MarketDataApi.
 * @interface SymbolOrderBookTickerRequest
 */
export interface SymbolOrderBookTickerRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketDataApiSymbolOrderBookTicker
     */
    readonly id?: string;

    /**
     *
     * @type {string}
     * @memberof MarketDataApiSymbolOrderBookTicker
     */
    readonly symbol?: string;
}

/**
 * Request parameters for symbolPriceTicker operation in MarketDataApi.
 * @interface SymbolPriceTickerRequest
 */
export interface SymbolPriceTickerRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketDataApiSymbolPriceTicker
     */
    readonly id?: string;

    /**
     *
     * @type {string}
     * @memberof MarketDataApiSymbolPriceTicker
     */
    readonly symbol?: string;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 * @extends {WebsocketAPIBase}
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Get current order book. Note that this request returns limited market depth.
     * If you need to continuously monitor order book updates, please consider using Websocket Market Streams:
     * `<symbol>@depth<levels>`
     * `<symbol>@depth`
     *
     * You can use `depth` request together with `<symbol>@depth` streams to maintain a local order book.
     *
     * Weight: Adjusted based on the limit:
     * | Limit         | Weight |
     * | ------------- | ------ |
     * | 5, 10, 20, 50 | 2      |
     * | 100           | 5      |
     * | 500           | 10     |
     * | 1000          | 20     |
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     * @returns {Promise<OrderBookResponse>}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/websocket-api/Order-Book Binance API Documentation}
     */
    public orderBook(
        requestParameters: OrderBookRequest
    ): Promise<WebsocketApiResponse<OrderBookResponse>> {
        return this.websocketBase.sendMessage<OrderBookResponse>(
            '/depth'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Best price/qty on the order book for a symbol or symbols.
     *
     * If the symbol is not sent, bookTickers for all symbols will be returned in an array.
     * The field `X-MBX-USED-WEIGHT-1M` in response header is not accurate from this endpoint, please ignore.
     *
     * Weight: 2 for a single symbol;
     * 5 when the symbol parameter is omitted
     *
     * @summary Symbol Order Book Ticker
     * @param {SymbolOrderBookTickerRequest} requestParameters Request parameters.
     * @returns {Promise<SymbolOrderBookTickerResponse>}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/websocket-api/Symbol-Order-Book-Ticker Binance API Documentation}
     */
    public symbolOrderBookTicker(
        requestParameters: SymbolOrderBookTickerRequest = {}
    ): Promise<WebsocketApiResponse<SymbolOrderBookTickerResponse>> {
        return this.websocketBase.sendMessage<SymbolOrderBookTickerResponse>(
            '/ticker.book'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Latest price for a symbol or symbols.
     *
     * If the symbol is not sent, prices for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol;
     * 2 when the symbol parameter is omitted
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     * @returns {Promise<SymbolPriceTickerResponse>}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/websocket-api/Symbol-Price-Ticker Binance API Documentation}
     */
    public symbolPriceTicker(
        requestParameters: SymbolPriceTickerRequest = {}
    ): Promise<WebsocketApiResponse<SymbolPriceTickerResponse>> {
        return this.websocketBase.sendMessage<SymbolPriceTickerResponse>(
            '/ticker.price'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }
}
