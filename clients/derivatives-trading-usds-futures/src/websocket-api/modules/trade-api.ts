/**
 * Binance Public Derivatives Trading USDS Futures WebSocket API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    CancelOrderResponse,
    ModifyOrderResponse,
    NewOrderResponse,
    PositionInformationResponse,
    PositionInformationV2Response,
    QueryOrderResponse,
} from '../types';

/**
 * TradeApi - interface
 *
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * Cancel an active order.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Order (TRADE)
     * @param {CancelOrderRequest} requestParameters Request parameters.
     *
     * @returns {Promise<CancelOrderResponse>}
     * @memberof TradeApiInterface
     */
    cancelOrder(
        requestParameters: CancelOrderRequest
    ): Promise<WebsocketApiResponse<CancelOrderResponse>>;

    /**
     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     * Both `quantity` and `price` must be sent, which is different from dapi modify order endpoint.
     * When the new `quantity` or `price` doesn't satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment will be rejected and the order will stay as it is.
     * However the order will be cancelled by the amendment in the following situations:
     * when the order is in partially filled status and the new `quantity` <= `executedQty`
     * When the order is `GTX` and the new price will cause it to be executed immediately
     * One order can only be modfied for less than 10000 times
     *
     * Weight: 1 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 1 on IP rate limit(x-mbx-used-weight-1m)
     *
     * @summary Modify Order (TRADE)
     * @param {ModifyOrderRequest} requestParameters Request parameters.
     *
     * @returns {Promise<ModifyOrderResponse>}
     * @memberof TradeApiInterface
     */
    modifyOrder(
        requestParameters: ModifyOrderRequest
    ): Promise<WebsocketApiResponse<ModifyOrderResponse>>;

    /**
     * Send in a new order.
     *
     * Order with type `STOP`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Order with type `TAKE_PROFIT`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     *
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     *
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest price after order placed `<= `activationPrice`, and the latest price >`= the lowest price * (1 + `callbackRate`)
     * SELL: the highest price after order placed >= `activationPrice`, and the latest price <= the highest price * (1 - `callbackRate`)
     *
     * For `TRAILING_STOP_MARKET`, if you got such error code.
     * ``{"code": -2021, "msg": "Order would immediately trigger."}``
     * means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest price.
     * SELL: `activationPrice` should be larger than latest price.
     *
     * If `newOrderRespType ` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     *
     * `STOP_MARKET`, `TAKE_PROFIT_MARKET` with `closePosition`=`true`:
     * Follow the same rules for condition orders.
     * If triggered，**close all** current long position( if `SELL`) or current short position( if `BUY`).
     * Cannot be used with `quantity` paremeter
     * Cannot be used with `reduceOnly` parameter
     * In Hedge Mode,cannot be used with `BUY` orders in `LONG` position side. and cannot be used with `SELL` orders in `SHORT` position side
     *
     * Weight: 0
     *
     * @summary New Order(TRADE)
     * @param {NewOrderRequest} requestParameters Request parameters.
     *
     * @returns {Promise<NewOrderResponse>}
     * @memberof TradeApiInterface
     */
    newOrder(requestParameters: NewOrderRequest): Promise<WebsocketApiResponse<NewOrderResponse>>;

    /**
     * Get current position information.
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information (USER_DATA)
     * @param {PositionInformationRequest} requestParameters Request parameters.
     *
     * @returns {Promise<PositionInformationResponse>}
     * @memberof TradeApiInterface
     */
    positionInformation(
        requestParameters?: PositionInformationRequest
    ): Promise<WebsocketApiResponse<PositionInformationResponse>>;

    /**
     * Get current position information(only symbol that has position or open orders will be returned).
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information V2 (USER_DATA)
     * @param {PositionInformationV2Request} requestParameters Request parameters.
     *
     * @returns {Promise<PositionInformationV2Response>}
     * @memberof TradeApiInterface
     */
    positionInformationV2(
        requestParameters?: PositionInformationV2Request
    ): Promise<WebsocketApiResponse<PositionInformationV2Response>>;

    /**
     * Check an order's status.
     *
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED` **AND** order has NO filled trade **AND** created time + 3 days < current time
     * order create time + 90 days < current time
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * `orderId` is self-increment for each specific `symbol`
     *
     * Weight: 1
     *
     * @summary Query Order (USER_DATA)
     * @param {QueryOrderRequest} requestParameters Request parameters.
     *
     * @returns {Promise<QueryOrderResponse>}
     * @memberof TradeApiInterface
     */
    queryOrder(
        requestParameters: QueryOrderRequest
    ): Promise<WebsocketApiResponse<QueryOrderResponse>>;
}

/**
 * Request parameters for cancelOrder operation in TradeApi.
 * @interface CancelOrderRequest
 */
export interface CancelOrderRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiCancelOrder
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiCancelOrder
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiCancelOrder
     */
    readonly orderId?: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiCancelOrder
     */
    readonly origClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiCancelOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for modifyOrder operation in TradeApi.
 * @interface ModifyOrderRequest
 */
export interface ModifyOrderRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiModifyOrder
     */
    readonly symbol: string;

    /**
     * `SELL`, `BUY`
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiModifyOrder
     */
    readonly side: ModifyOrderSideEnum;

    /**
     * Order quantity, cannot be sent with `closePosition=true`
     * @type {number}
     * @memberof TradeApiModifyOrder
     */
    readonly quantity: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiModifyOrder
     */
    readonly price: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiModifyOrder
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiModifyOrder
     */
    readonly orderId?: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiModifyOrder
     */
    readonly origClientOrderId?: string;

    /**
     * only avaliable for `LIMIT`/`STOP`/`TAKE_PROFIT` order; can be set to `OPPONENT`/ `OPPONENT_5`/ `OPPONENT_10`/ `OPPONENT_20`: /`QUEUE`/ `QUEUE_5`/ `QUEUE_10`/ `QUEUE_20`; Can't be passed together with `price`
     * @type {'NONE' | 'OPPONENT' | 'OPPONENT_5' | 'OPPONENT_10' | 'OPPONENT_20' | 'QUEUE' | 'QUEUE_5' | 'QUEUE_10' | 'QUEUE_20'}
     * @memberof TradeApiModifyOrder
     */
    readonly priceMatch?: ModifyOrderPriceMatchEnum;

    /**
     *
     * @type {number}
     * @memberof TradeApiModifyOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for newOrder operation in TradeApi.
 * @interface NewOrderRequest
 */
export interface NewOrderRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly symbol: string;

    /**
     * `SELL`, `BUY`
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiNewOrder
     */
    readonly side: NewOrderSideEnum;

    /**
     *
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly type: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly id?: string;

    /**
     * Default `BOTH` for One-way Mode ; `LONG` or `SHORT` for Hedge Mode. It must be sent in Hedge Mode.
     * @type {'BOTH' | 'LONG' | 'SHORT'}
     * @memberof TradeApiNewOrder
     */
    readonly positionSide?: NewOrderPositionSideEnum;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK' | 'GTX' | 'GTD'}
     * @memberof TradeApiNewOrder
     */
    readonly timeInForce?: NewOrderTimeInForceEnum;

    /**
     * Cannot be sent with `closePosition`=`true`(Close-All)
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly quantity?: number;

    /**
     * "true" or "false". default "false". Cannot be sent in Hedge Mode; cannot be sent with `closePosition`=`true`
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly reduceOnly?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly price?: number;

    /**
     * A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: `^[\.A-Z\:/a-z0-9_-]{1,36}$`
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly newClientOrderId?: string;

    /**
     * Used with `STOP/STOP_MARKET` or `TAKE_PROFIT/TAKE_PROFIT_MARKET` orders.
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly stopPrice?: number;

    /**
     * `true`, `false`；Close-All，used with `STOP_MARKET` or `TAKE_PROFIT_MARKET`.
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly closePosition?: string;

    /**
     * Used with `TRAILING_STOP_MARKET` orders, default as the latest price(supporting different `workingType`)
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly activationPrice?: number;

    /**
     * Used with `TRAILING_STOP_MARKET` orders, min 0.1, max 5 where 1 for 1%
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly callbackRate?: number;

    /**
     * stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE". Default "CONTRACT_PRICE"
     * @type {'MARK_PRICE' | 'CONTRACT_PRICE'}
     * @memberof TradeApiNewOrder
     */
    readonly workingType?: NewOrderWorkingTypeEnum;

    /**
     * "TRUE" or "FALSE", default "FALSE". Used with `STOP/STOP_MARKET` or `TAKE_PROFIT/TAKE_PROFIT_MARKET` orders.
     * @type {string}
     * @memberof TradeApiNewOrder
     */
    readonly priceProtect?: string;

    /**
     * "ACK", "RESULT", default "ACK"
     * @type {'ACK' | 'RESULT'}
     * @memberof TradeApiNewOrder
     */
    readonly newOrderRespType?: NewOrderNewOrderRespTypeEnum;

    /**
     * only avaliable for `LIMIT`/`STOP`/`TAKE_PROFIT` order; can be set to `OPPONENT`/ `OPPONENT_5`/ `OPPONENT_10`/ `OPPONENT_20`: /`QUEUE`/ `QUEUE_5`/ `QUEUE_10`/ `QUEUE_20`; Can't be passed together with `price`
     * @type {'NONE' | 'OPPONENT' | 'OPPONENT_5' | 'OPPONENT_10' | 'OPPONENT_20' | 'QUEUE' | 'QUEUE_5' | 'QUEUE_10' | 'QUEUE_20'}
     * @memberof TradeApiNewOrder
     */
    readonly priceMatch?: NewOrderPriceMatchEnum;

    /**
     * `NONE`:No STP / `EXPIRE_TAKER`:expire taker order when STP triggers/ `EXPIRE_MAKER`:expire taker order when STP triggers/ `EXPIRE_BOTH`:expire both orders when STP triggers; default `NONE`
     * @type {'EXPIRE_TAKER' | 'EXPIRE_BOTH' | 'EXPIRE_MAKER'}
     * @memberof TradeApiNewOrder
     */
    readonly selfTradePreventionMode?: NewOrderSelfTradePreventionModeEnum;

    /**
     * order cancel time for timeInForce `GTD`, mandatory when `timeInforce` set to `GTD`; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly goodTillDate?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiNewOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for positionInformation operation in TradeApi.
 * @interface PositionInformationRequest
 */
export interface PositionInformationRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiPositionInformation
     */
    readonly id?: string;

    /**
     *
     * @type {string}
     * @memberof TradeApiPositionInformation
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiPositionInformation
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for positionInformationV2 operation in TradeApi.
 * @interface PositionInformationV2Request
 */
export interface PositionInformationV2Request {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiPositionInformationV2
     */
    readonly id?: string;

    /**
     *
     * @type {string}
     * @memberof TradeApiPositionInformationV2
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiPositionInformationV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryOrder operation in TradeApi.
 * @interface QueryOrderRequest
 */
export interface QueryOrderRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiQueryOrder
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiQueryOrder
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiQueryOrder
     */
    readonly orderId?: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiQueryOrder
     */
    readonly origClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiQueryOrder
     */
    readonly recvWindow?: number;
}

/**
 * TradeApi - object-oriented interface
 * @class TradeApi
 * @extends {WebsocketAPIBase}
 */
export class TradeApi implements TradeApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Cancel an active order.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Order (TRADE)
     * @param {CancelOrderRequest} requestParameters Request parameters.
     * @returns {Promise<CancelOrderResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Cancel-Order Binance API Documentation}
     */
    public cancelOrder(
        requestParameters: CancelOrderRequest
    ): Promise<WebsocketApiResponse<CancelOrderResponse>> {
        return this.websocketBase.sendMessage<CancelOrderResponse>(
            '/order.cancel'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     * Both `quantity` and `price` must be sent, which is different from dapi modify order endpoint.
     * When the new `quantity` or `price` doesn't satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment will be rejected and the order will stay as it is.
     * However the order will be cancelled by the amendment in the following situations:
     * when the order is in partially filled status and the new `quantity` <= `executedQty`
     * When the order is `GTX` and the new price will cause it to be executed immediately
     * One order can only be modfied for less than 10000 times
     *
     * Weight: 1 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 1 on IP rate limit(x-mbx-used-weight-1m)
     *
     * @summary Modify Order (TRADE)
     * @param {ModifyOrderRequest} requestParameters Request parameters.
     * @returns {Promise<ModifyOrderResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Modify-Order Binance API Documentation}
     */
    public modifyOrder(
        requestParameters: ModifyOrderRequest
    ): Promise<WebsocketApiResponse<ModifyOrderResponse>> {
        return this.websocketBase.sendMessage<ModifyOrderResponse>(
            '/order.modify'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Send in a new order.
     *
     * Order with type `STOP`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Order with type `TAKE_PROFIT`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     *
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     *
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest price after order placed `<= `activationPrice`, and the latest price >`= the lowest price * (1 + `callbackRate`)
     * SELL: the highest price after order placed >= `activationPrice`, and the latest price <= the highest price * (1 - `callbackRate`)
     *
     * For `TRAILING_STOP_MARKET`, if you got such error code.
     * ``{"code": -2021, "msg": "Order would immediately trigger."}``
     * means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest price.
     * SELL: `activationPrice` should be larger than latest price.
     *
     * If `newOrderRespType ` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     *
     * `STOP_MARKET`, `TAKE_PROFIT_MARKET` with `closePosition`=`true`:
     * Follow the same rules for condition orders.
     * If triggered，**close all** current long position( if `SELL`) or current short position( if `BUY`).
     * Cannot be used with `quantity` paremeter
     * Cannot be used with `reduceOnly` parameter
     * In Hedge Mode,cannot be used with `BUY` orders in `LONG` position side. and cannot be used with `SELL` orders in `SHORT` position side
     *
     * Weight: 0
     *
     * @summary New Order(TRADE)
     * @param {NewOrderRequest} requestParameters Request parameters.
     * @returns {Promise<NewOrderResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/New-Order Binance API Documentation}
     */
    public newOrder(
        requestParameters: NewOrderRequest
    ): Promise<WebsocketApiResponse<NewOrderResponse>> {
        return this.websocketBase.sendMessage<NewOrderResponse>(
            '/order.place'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Get current position information.
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information (USER_DATA)
     * @param {PositionInformationRequest} requestParameters Request parameters.
     * @returns {Promise<PositionInformationResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Information Binance API Documentation}
     */
    public positionInformation(
        requestParameters: PositionInformationRequest = {}
    ): Promise<WebsocketApiResponse<PositionInformationResponse>> {
        return this.websocketBase.sendMessage<PositionInformationResponse>(
            '/account.position'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Get current position information(only symbol that has position or open orders will be returned).
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information V2 (USER_DATA)
     * @param {PositionInformationV2Request} requestParameters Request parameters.
     * @returns {Promise<PositionInformationV2Response>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Info-V2 Binance API Documentation}
     */
    public positionInformationV2(
        requestParameters: PositionInformationV2Request = {}
    ): Promise<WebsocketApiResponse<PositionInformationV2Response>> {
        return this.websocketBase.sendMessage<PositionInformationV2Response>(
            '/v2/account.position'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Check an order's status.
     *
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED` **AND** order has NO filled trade **AND** created time + 3 days < current time
     * order create time + 90 days < current time
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * `orderId` is self-increment for each specific `symbol`
     *
     * Weight: 1
     *
     * @summary Query Order (USER_DATA)
     * @param {QueryOrderRequest} requestParameters Request parameters.
     * @returns {Promise<QueryOrderResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Query-Order Binance API Documentation}
     */
    public queryOrder(
        requestParameters: QueryOrderRequest
    ): Promise<WebsocketApiResponse<QueryOrderResponse>> {
        return this.websocketBase.sendMessage<QueryOrderResponse>(
            '/order.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }
}

/**
 * @enum {string}
 */
export const ModifyOrderSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type ModifyOrderSideEnum = (typeof ModifyOrderSideEnum)[keyof typeof ModifyOrderSideEnum];

/**
 * @enum {string}
 */
export const ModifyOrderPriceMatchEnum = {
    NONE: 'NONE',
    OPPONENT: 'OPPONENT',
    OPPONENT_5: 'OPPONENT_5',
    OPPONENT_10: 'OPPONENT_10',
    OPPONENT_20: 'OPPONENT_20',
    QUEUE: 'QUEUE',
    QUEUE_5: 'QUEUE_5',
    QUEUE_10: 'QUEUE_10',
    QUEUE_20: 'QUEUE_20',
} as const;
export type ModifyOrderPriceMatchEnum =
    (typeof ModifyOrderPriceMatchEnum)[keyof typeof ModifyOrderPriceMatchEnum];

/**
 * @enum {string}
 */
export const NewOrderSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type NewOrderSideEnum = (typeof NewOrderSideEnum)[keyof typeof NewOrderSideEnum];

/**
 * @enum {string}
 */
export const NewOrderPositionSideEnum = {
    BOTH: 'BOTH',
    LONG: 'LONG',
    SHORT: 'SHORT',
} as const;
export type NewOrderPositionSideEnum =
    (typeof NewOrderPositionSideEnum)[keyof typeof NewOrderPositionSideEnum];

/**
 * @enum {string}
 */
export const NewOrderTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
    GTX: 'GTX',
    GTD: 'GTD',
} as const;
export type NewOrderTimeInForceEnum =
    (typeof NewOrderTimeInForceEnum)[keyof typeof NewOrderTimeInForceEnum];

/**
 * @enum {string}
 */
export const NewOrderWorkingTypeEnum = {
    MARK_PRICE: 'MARK_PRICE',
    CONTRACT_PRICE: 'CONTRACT_PRICE',
} as const;
export type NewOrderWorkingTypeEnum =
    (typeof NewOrderWorkingTypeEnum)[keyof typeof NewOrderWorkingTypeEnum];

/**
 * @enum {string}
 */
export const NewOrderNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
} as const;
export type NewOrderNewOrderRespTypeEnum =
    (typeof NewOrderNewOrderRespTypeEnum)[keyof typeof NewOrderNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const NewOrderPriceMatchEnum = {
    NONE: 'NONE',
    OPPONENT: 'OPPONENT',
    OPPONENT_5: 'OPPONENT_5',
    OPPONENT_10: 'OPPONENT_10',
    OPPONENT_20: 'OPPONENT_20',
    QUEUE: 'QUEUE',
    QUEUE_5: 'QUEUE_5',
    QUEUE_10: 'QUEUE_10',
    QUEUE_20: 'QUEUE_20',
} as const;
export type NewOrderPriceMatchEnum =
    (typeof NewOrderPriceMatchEnum)[keyof typeof NewOrderPriceMatchEnum];

/**
 * @enum {string}
 */
export const NewOrderSelfTradePreventionModeEnum = {
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
} as const;
export type NewOrderSelfTradePreventionModeEnum =
    (typeof NewOrderSelfTradePreventionModeEnum)[keyof typeof NewOrderSelfTradePreventionModeEnum];
