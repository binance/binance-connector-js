/**
 * Binance Derivatives Trading USDS Futures REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { ConvertApi } from './modules/convert-api';
import { MarketDataApi } from './modules/market-data-api';
import { PortfolioMarginEndpointsApi } from './modules/portfolio-margin-endpoints-api';
import { TradeApi } from './modules/trade-api';
import { UserDataStreamsApi } from './modules/user-data-streams-api';

import type {
    AccountInformationV2Request,
    AccountInformationV3Request,
    FuturesAccountBalanceV2Request,
    FuturesAccountBalanceV3Request,
    FuturesAccountConfigurationRequest,
    FuturesTradingQuantitativeRulesIndicatorsRequest,
    GetBnbBurnStatusRequest,
    GetCurrentMultiAssetsModeRequest,
    GetCurrentPositionModeRequest,
    GetDownloadIdForFuturesOrderHistoryRequest,
    GetDownloadIdForFuturesTradeHistoryRequest,
    GetDownloadIdForFuturesTransactionHistoryRequest,
    GetFuturesOrderHistoryDownloadLinkByIdRequest,
    GetFuturesTradeDownloadLinkByIdRequest,
    GetFuturesTransactionHistoryDownloadLinkByIdRequest,
    GetIncomeHistoryRequest,
    NotionalAndLeverageBracketsRequest,
    QueryUserRateLimitRequest,
    SymbolConfigurationRequest,
    ToggleBnbBurnOnFuturesTradeRequest,
    UserCommissionRateRequest,
} from './modules/account-api';
import type {
    AcceptTheOfferedQuoteRequest,
    ListAllConvertPairsRequest,
    OrderStatusRequest,
    SendQuoteRequestRequest,
} from './modules/convert-api';
import type {
    BasisRequest,
    CompositeIndexSymbolInformationRequest,
    CompressedAggregateTradesListRequest,
    ContinuousContractKlineCandlestickDataRequest,
    GetFundingRateHistoryRequest,
    HistoricalBlvtNavKlineCandlestickRequest,
    IndexPriceKlineCandlestickDataRequest,
    KlineCandlestickDataRequest,
    LongShortRatioRequest,
    MarkPriceRequest,
    MarkPriceKlineCandlestickDataRequest,
    MultiAssetsModeAssetIndexRequest,
    OldTradesLookupRequest,
    OpenInterestRequest,
    OpenInterestStatisticsRequest,
    OrderBookRequest,
    PremiumIndexKlineDataRequest,
    QuarterlyContractSettlementPriceRequest,
    QueryIndexPriceConstituentsRequest,
    QueryInsuranceFundBalanceSnapshotRequest,
    RecentTradesListRequest,
    SymbolOrderBookTickerRequest,
    SymbolPriceTickerRequest,
    SymbolPriceTickerV2Request,
    TakerBuySellVolumeRequest,
    Ticker24hrPriceChangeStatisticsRequest,
    TopTraderLongShortRatioAccountsRequest,
    TopTraderLongShortRatioPositionsRequest,
} from './modules/market-data-api';
import type { ClassicPortfolioMarginAccountInformationRequest } from './modules/portfolio-margin-endpoints-api';
import type {
    AccountTradeListRequest,
    AllOrdersRequest,
    AutoCancelAllOpenOrdersRequest,
    CancelAllOpenOrdersRequest,
    CancelMultipleOrdersRequest,
    CancelOrderRequest,
    ChangeInitialLeverageRequest,
    ChangeMarginTypeRequest,
    ChangeMultiAssetsModeRequest,
    ChangePositionModeRequest,
    CurrentAllOpenOrdersRequest,
    GetOrderModifyHistoryRequest,
    GetPositionMarginChangeHistoryRequest,
    ModifyIsolatedPositionMarginRequest,
    ModifyMultipleOrdersRequest,
    ModifyOrderRequest,
    NewOrderRequest,
    PlaceMultipleOrdersRequest,
    PositionAdlQuantileEstimationRequest,
    PositionInformationV2Request,
    PositionInformationV3Request,
    QueryCurrentOpenOrderRequest,
    QueryOrderRequest,
    TestOrderRequest,
    UsersForceOrdersRequest,
} from './modules/trade-api';
import type {} from './modules/user-data-streams-api';

import type {
    AccountInformationV2Response,
    AccountInformationV3Response,
    FuturesAccountBalanceV2Response,
    FuturesAccountBalanceV3Response,
    FuturesAccountConfigurationResponse,
    FuturesTradingQuantitativeRulesIndicatorsResponse,
    GetBnbBurnStatusResponse,
    GetCurrentMultiAssetsModeResponse,
    GetCurrentPositionModeResponse,
    GetDownloadIdForFuturesOrderHistoryResponse,
    GetDownloadIdForFuturesTradeHistoryResponse,
    GetDownloadIdForFuturesTransactionHistoryResponse,
    GetFuturesOrderHistoryDownloadLinkByIdResponse,
    GetFuturesTradeDownloadLinkByIdResponse,
    GetFuturesTransactionHistoryDownloadLinkByIdResponse,
    GetIncomeHistoryResponse,
    NotionalAndLeverageBracketsResponse,
    QueryUserRateLimitResponse,
    SymbolConfigurationResponse,
    ToggleBnbBurnOnFuturesTradeResponse,
    UserCommissionRateResponse,
} from './types';
import type {
    AcceptTheOfferedQuoteResponse,
    ListAllConvertPairsResponse,
    OrderStatusResponse,
    SendQuoteRequestResponse,
} from './types';
import type {
    BasisResponse,
    CheckServerTimeResponse,
    CompositeIndexSymbolInformationResponse,
    CompressedAggregateTradesListResponse,
    ContinuousContractKlineCandlestickDataResponse,
    ExchangeInformationResponse,
    GetFundingRateHistoryResponse,
    GetFundingRateInfoResponse,
    HistoricalBlvtNavKlineCandlestickResponse,
    IndexPriceKlineCandlestickDataResponse,
    KlineCandlestickDataResponse,
    LongShortRatioResponse,
    MarkPriceResponse,
    MarkPriceKlineCandlestickDataResponse,
    MultiAssetsModeAssetIndexResponse,
    OldTradesLookupResponse,
    OpenInterestResponse,
    OpenInterestStatisticsResponse,
    OrderBookResponse,
    PremiumIndexKlineDataResponse,
    QuarterlyContractSettlementPriceResponse,
    QueryIndexPriceConstituentsResponse,
    QueryInsuranceFundBalanceSnapshotResponse,
    RecentTradesListResponse,
    SymbolOrderBookTickerResponse,
    SymbolPriceTickerResponse,
    SymbolPriceTickerV2Response,
    TakerBuySellVolumeResponse,
    Ticker24hrPriceChangeStatisticsResponse,
    TopTraderLongShortRatioAccountsResponse,
    TopTraderLongShortRatioPositionsResponse,
} from './types';
import type { ClassicPortfolioMarginAccountInformationResponse } from './types';
import type {
    AccountTradeListResponse,
    AllOrdersResponse,
    AutoCancelAllOpenOrdersResponse,
    CancelAllOpenOrdersResponse,
    CancelMultipleOrdersResponse,
    CancelOrderResponse,
    ChangeInitialLeverageResponse,
    ChangeMarginTypeResponse,
    ChangeMultiAssetsModeResponse,
    ChangePositionModeResponse,
    CurrentAllOpenOrdersResponse,
    GetOrderModifyHistoryResponse,
    GetPositionMarginChangeHistoryResponse,
    ModifyIsolatedPositionMarginResponse,
    ModifyMultipleOrdersResponse,
    ModifyOrderResponse,
    NewOrderResponse,
    PlaceMultipleOrdersResponse,
    PositionAdlQuantileEstimationResponse,
    PositionInformationV2Response,
    PositionInformationV3Response,
    QueryCurrentOpenOrderResponse,
    QueryOrderResponse,
    TestOrderResponse,
    UsersForceOrdersResponse,
} from './types';
import type { KeepaliveUserDataStreamResponse, StartUserDataStreamResponse } from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private convertApi: ConvertApi;
    private marketDataApi: MarketDataApi;
    private portfolioMarginEndpointsApi: PortfolioMarginEndpointsApi;
    private tradeApi: TradeApi;
    private userDataStreamsApi: UserDataStreamsApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.convertApi = new ConvertApi(configuration);
        this.marketDataApi = new MarketDataApi(configuration);
        this.portfolioMarginEndpointsApi = new PortfolioMarginEndpointsApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.userDataStreamsApi = new UserDataStreamsApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V2(USER_DATA)
     * @param {AccountInformationV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2 Binance API Documentation}
     */
    accountInformationV2(
        requestParameters: AccountInformationV2Request = {}
    ): Promise<RestApiResponse<AccountInformationV2Response>> {
        return this.accountApi.accountInformationV2(requestParameters);
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V3(USER_DATA)
     * @param {AccountInformationV3Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationV3Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V3 Binance API Documentation}
     */
    accountInformationV3(
        requestParameters: AccountInformationV3Request = {}
    ): Promise<RestApiResponse<AccountInformationV3Response>> {
        return this.accountApi.accountInformationV3(requestParameters);
    }

    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V2 (USER_DATA)
     * @param {FuturesAccountBalanceV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountBalanceV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Account-Balance-V2 Binance API Documentation}
     */
    futuresAccountBalanceV2(
        requestParameters: FuturesAccountBalanceV2Request = {}
    ): Promise<RestApiResponse<FuturesAccountBalanceV2Response>> {
        return this.accountApi.futuresAccountBalanceV2(requestParameters);
    }

    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V3 (USER_DATA)
     * @param {FuturesAccountBalanceV3Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountBalanceV3Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Account-Balance-V3 Binance API Documentation}
     */
    futuresAccountBalanceV3(
        requestParameters: FuturesAccountBalanceV3Request = {}
    ): Promise<RestApiResponse<FuturesAccountBalanceV3Response>> {
        return this.accountApi.futuresAccountBalanceV3(requestParameters);
    }

    /**
     * Query account configuration
     *
     * Weight: 5
     *
     * @summary Futures Account Configuration(USER_DATA)
     * @param {FuturesAccountConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Config Binance API Documentation}
     */
    futuresAccountConfiguration(
        requestParameters: FuturesAccountConfigurationRequest = {}
    ): Promise<RestApiResponse<FuturesAccountConfigurationResponse>> {
        return this.accountApi.futuresAccountConfiguration(requestParameters);
    }

    /**
     * Futures trading quantitative rules indicators, for more information on this, please refer to the [Futures Trading Quantitative Rules](https://www.binance.com/en/support/faq/4f462ebe6ff445d4a170be7d9e897272)
     *
     * Weight: - 1 for a single symbol
     * - 10 when the symbol parameter is omitted
     *
     * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
     * @param {FuturesTradingQuantitativeRulesIndicatorsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesTradingQuantitativeRulesIndicatorsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Trading-Quantitative-Rules-Indicators Binance API Documentation}
     */
    futuresTradingQuantitativeRulesIndicators(
        requestParameters: FuturesTradingQuantitativeRulesIndicatorsRequest = {}
    ): Promise<RestApiResponse<FuturesTradingQuantitativeRulesIndicatorsResponse>> {
        return this.accountApi.futuresTradingQuantitativeRulesIndicators(requestParameters);
    }

    /**
     * Get user's BNB Fee Discount (Fee Discount On or Fee Discount Off )
     *
     * Weight: 30
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnbBurnStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-BNB-Burn-Status Binance API Documentation}
     */
    getBnbBurnStatus(
        requestParameters: GetBnbBurnStatusRequest = {}
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>> {
        return this.accountApi.getBnbBurnStatus(requestParameters);
    }

    /**
     * Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on ***Every symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Multi-Assets Mode (USER_DATA)
     * @param {GetCurrentMultiAssetsModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentMultiAssetsModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Current-Multi-Assets-Mode Binance API Documentation}
     */
    getCurrentMultiAssetsMode(
        requestParameters: GetCurrentMultiAssetsModeRequest = {}
    ): Promise<RestApiResponse<GetCurrentMultiAssetsModeResponse>> {
        return this.accountApi.getCurrentMultiAssetsMode(requestParameters);
    }

    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Position Mode(USER_DATA)
     * @param {GetCurrentPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Current-Position-Mode Binance API Documentation}
     */
    getCurrentPositionMode(
        requestParameters: GetCurrentPositionModeRequest = {}
    ): Promise<RestApiResponse<GetCurrentPositionModeResponse>> {
        return this.accountApi.getCurrentPositionMode(requestParameters);
    }

    /**
     * Get Download Id For Futures Order History
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {GetDownloadIdForFuturesOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Order-History Binance API Documentation}
     */
    getDownloadIdForFuturesOrderHistory(
        requestParameters: GetDownloadIdForFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>> {
        return this.accountApi.getDownloadIdForFuturesOrderHistory(requestParameters);
    }

    /**
     * Get download id for futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForFuturesTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Trade-History Binance API Documentation}
     */
    getDownloadIdForFuturesTradeHistory(
        requestParameters: GetDownloadIdForFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>> {
        return this.accountApi.getDownloadIdForFuturesTradeHistory(requestParameters);
    }

    /**
     * Get download id for futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {GetDownloadIdForFuturesTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Transaction-History Binance API Documentation}
     */
    getDownloadIdForFuturesTransactionHistory(
        requestParameters: GetDownloadIdForFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>> {
        return this.accountApi.getDownloadIdForFuturesTransactionHistory(requestParameters);
    }

    /**
     * Get futures order history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {GetFuturesOrderHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Order-History-Download-Link-by-Id Binance API Documentation}
     */
    getFuturesOrderHistoryDownloadLinkById(
        requestParameters: GetFuturesOrderHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>> {
        return this.accountApi.getFuturesOrderHistoryDownloadLinkById(requestParameters);
    }

    /**
     * Get futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {GetFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Trade-Download-Link-by-Id Binance API Documentation}
     */
    getFuturesTradeDownloadLinkById(
        requestParameters: GetFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>> {
        return this.accountApi.getFuturesTradeDownloadLinkById(requestParameters);
    }

    /**
     * Get futures transaction history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {GetFuturesTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Transaction-History-Download-Link-by-Id Binance API Documentation}
     */
    getFuturesTransactionHistoryDownloadLinkById(
        requestParameters: GetFuturesTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>> {
        return this.accountApi.getFuturesTransactionHistoryDownloadLinkById(requestParameters);
    }

    /**
     * Query income history
     *
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * If `incomeType ` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same incomeType for a user
     * Income history only contains data for the last three months
     *
     * Weight: 30
     *
     * @summary Get Income History (USER_DATA)
     * @param {GetIncomeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetIncomeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Income-History Binance API Documentation}
     */
    getIncomeHistory(
        requestParameters: GetIncomeHistoryRequest = {}
    ): Promise<RestApiResponse<GetIncomeHistoryResponse>> {
        return this.accountApi.getIncomeHistory(requestParameters);
    }

    /**
     * Query user notional and leverage bracket on speicfic symbol
     *
     * Weight: 1
     *
     * @summary Notional and Leverage Brackets (USER_DATA)
     * @param {NotionalAndLeverageBracketsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NotionalAndLeverageBracketsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Notional-and-Leverage-Brackets Binance API Documentation}
     */
    notionalAndLeverageBrackets(
        requestParameters: NotionalAndLeverageBracketsRequest = {}
    ): Promise<RestApiResponse<NotionalAndLeverageBracketsResponse>> {
        return this.accountApi.notionalAndLeverageBrackets(requestParameters);
    }

    /**
     * Query User Rate Limit
     *
     * Weight: 1
     *
     * @summary Query User Rate Limit (USER_DATA)
     * @param {QueryUserRateLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserRateLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Query-Rate-Limit Binance API Documentation}
     */
    queryUserRateLimit(
        requestParameters: QueryUserRateLimitRequest = {}
    ): Promise<RestApiResponse<QueryUserRateLimitResponse>> {
        return this.accountApi.queryUserRateLimit(requestParameters);
    }

    /**
     * Get current account symbol configuration.
     *
     * Weight: 5
     *
     * @summary Symbol Configuration(USER_DATA)
     * @param {SymbolConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Symbol-Config Binance API Documentation}
     */
    symbolConfiguration(
        requestParameters: SymbolConfigurationRequest = {}
    ): Promise<RestApiResponse<SymbolConfigurationResponse>> {
        return this.accountApi.symbolConfiguration(requestParameters);
    }

    /**
     * Change user's BNB Fee Discount (Fee Discount On or Fee Discount Off ) on ***EVERY symbol***
     *
     * Weight: 1
     *
     * @summary Toggle BNB Burn On Futures Trade (TRADE)
     * @param {ToggleBnbBurnOnFuturesTradeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ToggleBnbBurnOnFuturesTradeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Toggle-BNB-Burn-On-Futures-Trade Binance API Documentation}
     */
    toggleBnbBurnOnFuturesTrade(
        requestParameters: ToggleBnbBurnOnFuturesTradeRequest
    ): Promise<RestApiResponse<ToggleBnbBurnOnFuturesTradeResponse>> {
        return this.accountApi.toggleBnbBurnOnFuturesTrade(requestParameters);
    }

    /**
     * Get User Commission Rate
     *
     * Weight: 20
     *
     * @summary User Commission Rate (USER_DATA)
     * @param {UserCommissionRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserCommissionRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/User-Commission-Rate Binance API Documentation}
     */
    userCommissionRate(
        requestParameters: UserCommissionRateRequest
    ): Promise<RestApiResponse<UserCommissionRateResponse>> {
        return this.accountApi.userCommissionRate(requestParameters);
    }

    /**
     * Accept the offered quote by quote ID.
     *
     * Weight: 200(IP)
     *
     * @summary Accept the offered quote (USER_DATA)
     * @param {AcceptTheOfferedQuoteRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AcceptTheOfferedQuoteResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/convert/Accept-Quote Binance API Documentation}
     */
    acceptTheOfferedQuote(
        requestParameters: AcceptTheOfferedQuoteRequest
    ): Promise<RestApiResponse<AcceptTheOfferedQuoteResponse>> {
        return this.convertApi.acceptTheOfferedQuote(requestParameters);
    }

    /**
     * Query for all convertible token pairs and the tokens’ respective upper/lower limits
     *
     * User needs to supply either or both of the input parameter
     * If not defined for both fromAsset and toAsset, only partial token pairs will be returned
     * Asset BNFCR is only available to convert for MICA region users.
     *
     * Weight: 20(IP)
     *
     * @summary List All Convert Pairs
     * @param {ListAllConvertPairsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ListAllConvertPairsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/convert/List-All-Convert-Pairs Binance API Documentation}
     */
    listAllConvertPairs(
        requestParameters: ListAllConvertPairsRequest = {}
    ): Promise<RestApiResponse<ListAllConvertPairsResponse>> {
        return this.convertApi.listAllConvertPairs(requestParameters);
    }

    /**
     * Query order status by order ID.
     *
     * Weight: 50(IP)
     *
     * @summary Order status(USER_DATA)
     * @param {OrderStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/convert/Order-Status Binance API Documentation}
     */
    orderStatus(
        requestParameters: OrderStatusRequest = {}
    ): Promise<RestApiResponse<OrderStatusResponse>> {
        return this.convertApi.orderStatus(requestParameters);
    }

    /**
     * Request a quote for the requested token pairs
     *
     * Either fromAmount or toAmount should be sent
     * `quoteId` will be returned only if you have enough funds to convert
     *
     * Weight: 50(IP)
     *
     * @summary Send Quote Request(USER_DATA)
     * @param {SendQuoteRequestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SendQuoteRequestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/convert/Send-quote-request Binance API Documentation}
     */
    sendQuoteRequest(
        requestParameters: SendQuoteRequestRequest
    ): Promise<RestApiResponse<SendQuoteRequestResponse>> {
        return this.convertApi.sendQuoteRequest(requestParameters);
    }

    /**
     * Query future basis
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 30 days is available.
     *
     * Weight: 0
     *
     * @summary Basis
     * @param {BasisRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BasisResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Basis Binance API Documentation}
     */
    basis(requestParameters: BasisRequest): Promise<RestApiResponse<BasisResponse>> {
        return this.marketDataApi.basis(requestParameters);
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     *
     * Weight: 1
     *
     * @summary Check Server Time
     * @returns {Promise<RestApiResponse<CheckServerTimeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Check-Server-Time Binance API Documentation}
     */
    checkServerTime(): Promise<RestApiResponse<CheckServerTimeResponse>> {
        return this.marketDataApi.checkServerTime();
    }

    /**
     * Query composite index symbol information
     *
     * Only for composite index symbols
     *
     * Weight: 1
     *
     * @summary Composite Index Symbol Information
     * @param {CompositeIndexSymbolInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CompositeIndexSymbolInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Composite-Index-Symbol-Information Binance API Documentation}
     */
    compositeIndexSymbolInformation(
        requestParameters: CompositeIndexSymbolInformationRequest = {}
    ): Promise<RestApiResponse<CompositeIndexSymbolInformationResponse>> {
        return this.marketDataApi.compositeIndexSymbolInformation(requestParameters);
    }

    /**
     * Get compressed, aggregate market trades. Market trades that fill in 100ms with the same price and the same taking side will have the quantity aggregated.
     *
     *
     * support querying futures trade histories that are not older than one year
     * If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 1 hour.
     * If `fromId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.
     * Only market trades will be aggregated and returned, which means the insurance fund trades and ADL trades won't be aggregated.
     * Sending both `startTime`/`endTime` and `fromId` might cause response timeout, please send either `fromId` or `startTime`/`endTime`
     *
     * Weight: 20
     *
     * @summary Compressed/Aggregate Trades List
     * @param {CompressedAggregateTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CompressedAggregateTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Compressed-Aggregate-Trades-List Binance API Documentation}
     */
    compressedAggregateTradesList(
        requestParameters: CompressedAggregateTradesListRequest
    ): Promise<RestApiResponse<CompressedAggregateTradesListResponse>> {
        return this.marketDataApi.compressedAggregateTradesList(requestParameters);
    }

    /**
     * Kline/candlestick bars for a specific contract type.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     * Contract type:
     * PERPETUAL
     * CURRENT_QUARTER
     * NEXT_QUARTER
     *
     * Weight: based on parameter LIMIT
     * | LIMIT       | weight |
     * | ----------- | ------ |
     * | [1,100)     | 1      |
     * | [100, 500)  | 2      |
     * | [500, 1000] | 5      |
     * | > 1000      | 10     |
     *
     * @summary Continuous Contract Kline/Candlestick Data
     * @param {ContinuousContractKlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ContinuousContractKlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Continuous-Contract-Kline-Candlestick-Data Binance API Documentation}
     */
    continuousContractKlineCandlestickData(
        requestParameters: ContinuousContractKlineCandlestickDataRequest
    ): Promise<RestApiResponse<ContinuousContractKlineCandlestickDataResponse>> {
        return this.marketDataApi.continuousContractKlineCandlestickData(requestParameters);
    }

    /**
     * Current exchange trading rules and symbol information
     *
     * Weight: 1
     *
     * @summary Exchange Information
     * @returns {Promise<RestApiResponse<ExchangeInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Exchange-Information Binance API Documentation}
     */
    exchangeInformation(): Promise<RestApiResponse<ExchangeInformationResponse>> {
        return this.marketDataApi.exchangeInformation();
    }

    /**
     * Get Funding Rate History
     *
     *
     * If `startTime` and `endTime` are not sent, the most recent `limit` datas are returned.
     * If the number of data between `startTime` and `endTime` is larger than `limit`, return as `startTime` + `limit`.
     * In ascending order.
     *
     * Weight: share 500/5min/IP rate limit with GET /fapi/v1/fundingInfo
     *
     * @summary Get Funding Rate History
     * @param {GetFundingRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFundingRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Get-Funding-Rate-History Binance API Documentation}
     */
    getFundingRateHistory(
        requestParameters: GetFundingRateHistoryRequest = {}
    ): Promise<RestApiResponse<GetFundingRateHistoryResponse>> {
        return this.marketDataApi.getFundingRateHistory(requestParameters);
    }

    /**
     * Query funding rate info for symbols that had FundingRateCap/ FundingRateFloor / fundingIntervalHours adjustment
     *
     * Weight: 0
     * share 500/5min/IP rate limit with GET /fapi/v1/fundingInfo
     *
     * @summary Get Funding Rate Info
     * @returns {Promise<RestApiResponse<GetFundingRateInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Get-Funding-Rate-Info Binance API Documentation}
     */
    getFundingRateInfo(): Promise<RestApiResponse<GetFundingRateInfoResponse>> {
        return this.marketDataApi.getFundingRateInfo();
    }

    /**
     * The BLVT NAV system is based on Binance Futures, so the endpoint is based on fapi
     *
     * Weight: 1
     *
     * @summary Historical BLVT NAV Kline/Candlestick
     * @param {HistoricalBlvtNavKlineCandlestickRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HistoricalBlvtNavKlineCandlestickResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Historical-BLVT-NAV-Kline-Candlestick Binance API Documentation}
     */
    historicalBlvtNavKlineCandlestick(
        requestParameters: HistoricalBlvtNavKlineCandlestickRequest
    ): Promise<RestApiResponse<HistoricalBlvtNavKlineCandlestickResponse>> {
        return this.marketDataApi.historicalBlvtNavKlineCandlestick(requestParameters);
    }

    /**
     * Kline/candlestick bars for the index price of a pair.
     * Klines are uniquely identified by their open time.
     *
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: based on parameter LIMIT
     * | LIMIT       | weight |
     * | ----------- | ------ |
     * | [1,100)     | 1      |
     * | [100, 500)  | 2      |
     * | [500, 1000] | 5      |
     * | > 1000      | 10     |
     *
     * @summary Index Price Kline/Candlestick Data
     * @param {IndexPriceKlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexPriceKlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Index-Price-Kline-Candlestick-Data Binance API Documentation}
     */
    indexPriceKlineCandlestickData(
        requestParameters: IndexPriceKlineCandlestickDataRequest
    ): Promise<RestApiResponse<IndexPriceKlineCandlestickDataResponse>> {
        return this.marketDataApi.indexPriceKlineCandlestickData(requestParameters);
    }

    /**
     * Kline/candlestick bars for a symbol.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: based on parameter LIMIT
     * | LIMIT       | weight |
     * | ----------- | ------ |
     * | [1,100)     | 1      |
     * | [100, 500)  | 2      |
     * | [500, 1000] | 5      |
     * | > 1000      | 10     |
     *
     * @summary Kline/Candlestick Data
     * @param {KlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<KlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Kline-Candlestick-Data Binance API Documentation}
     */
    klineCandlestickData(
        requestParameters: KlineCandlestickDataRequest
    ): Promise<RestApiResponse<KlineCandlestickDataResponse>> {
        return this.marketDataApi.klineCandlestickData(requestParameters);
    }

    /**
     * Query symbol Long/Short Ratio
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 30 days is available.
     * IP rate limit 1000 requests/5min
     *
     * Weight: 0
     *
     * @summary Long/Short Ratio
     * @param {LongShortRatioRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<LongShortRatioResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Long-Short-Ratio Binance API Documentation}
     */
    longShortRatio(
        requestParameters: LongShortRatioRequest
    ): Promise<RestApiResponse<LongShortRatioResponse>> {
        return this.marketDataApi.longShortRatio(requestParameters);
    }

    /**
     * Mark Price and Funding Rate
     *
     * Weight: 1
     *
     * @summary Mark Price
     * @param {MarkPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarkPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Mark-Price Binance API Documentation}
     */
    markPrice(
        requestParameters: MarkPriceRequest = {}
    ): Promise<RestApiResponse<MarkPriceResponse>> {
        return this.marketDataApi.markPrice(requestParameters);
    }

    /**
     * Kline/candlestick bars for the mark price of a symbol.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: based on parameter LIMIT
     * | LIMIT       | weight |
     * | ----------- | ------ |
     * | [1,100)     | 1      |
     * | [100, 500)  | 2      |
     * | [500, 1000] | 5      |
     * | > 1000      | 10     |
     *
     * @summary Mark Price Kline/Candlestick Data
     * @param {MarkPriceKlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarkPriceKlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Mark-Price-Kline-Candlestick-Data Binance API Documentation}
     */
    markPriceKlineCandlestickData(
        requestParameters: MarkPriceKlineCandlestickDataRequest
    ): Promise<RestApiResponse<MarkPriceKlineCandlestickDataResponse>> {
        return this.marketDataApi.markPriceKlineCandlestickData(requestParameters);
    }

    /**
     * asset index for Multi-Assets mode
     *
     * Weight: 1 for a single symbol; 10 when the symbol parameter is omitted
     *
     * @summary Multi-Assets Mode Asset Index
     * @param {MultiAssetsModeAssetIndexRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MultiAssetsModeAssetIndexResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Multi-Assets-Mode-Asset-Index Binance API Documentation}
     */
    multiAssetsModeAssetIndex(
        requestParameters: MultiAssetsModeAssetIndexRequest = {}
    ): Promise<RestApiResponse<MultiAssetsModeAssetIndexResponse>> {
        return this.marketDataApi.multiAssetsModeAssetIndex(requestParameters);
    }

    /**
     * Get older market historical trades.
     *
     * Market trades means trades filled in the order book. Only market trades will be returned, which means the insurance fund trades and ADL trades won't be returned.
     * Only supports data from within the last three months
     *
     * Weight: 20
     *
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {OldTradesLookupRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OldTradesLookupResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Old-Trades-Lookup Binance API Documentation}
     */
    oldTradesLookup(
        requestParameters: OldTradesLookupRequest
    ): Promise<RestApiResponse<OldTradesLookupResponse>> {
        return this.marketDataApi.oldTradesLookup(requestParameters);
    }

    /**
     * Get present open interest of a specific symbol.
     *
     * Weight: 1
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OpenInterestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Open-Interest Binance API Documentation}
     */
    openInterest(
        requestParameters: OpenInterestRequest
    ): Promise<RestApiResponse<OpenInterestResponse>> {
        return this.marketDataApi.openInterest(requestParameters);
    }

    /**
     * Open Interest Statistics
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 1 month is available.
     * IP rate limit 1000 requests/5min
     *
     * Weight: 0
     *
     * @summary Open Interest Statistics
     * @param {OpenInterestStatisticsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OpenInterestStatisticsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Open-Interest-Statistics Binance API Documentation}
     */
    openInterestStatistics(
        requestParameters: OpenInterestStatisticsRequest
    ): Promise<RestApiResponse<OpenInterestStatisticsResponse>> {
        return this.marketDataApi.openInterestStatistics(requestParameters);
    }

    /**
     * Query symbol orderbook
     *
     * Weight: Adjusted based on the limit:
     * | Limit         | Weight |
     * | ------------- | ------ |
     * | 5, 10, 20, 50 | 2      |
     * | 100           | 5      |
     * | 500           | 10     |
     * | 1000          | 20     |
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderBookResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Order-Book Binance API Documentation}
     */
    orderBook(requestParameters: OrderBookRequest): Promise<RestApiResponse<OrderBookResponse>> {
        return this.marketDataApi.orderBook(requestParameters);
    }

    /**
     * Premium index kline bars of a symbol. Klines are uniquely identified by their open time.
     *
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: based on parameter LIMIT
     * | LIMIT       | weight |
     * | ----------- | ------ |
     * | [1,100)     | 1      |
     * | [100, 500)  | 2      |
     * | [500, 1000] | 5      |
     * | > 1000      | 10     |
     *
     * @summary Premium index Kline Data
     * @param {PremiumIndexKlineDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PremiumIndexKlineDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Premium-index-Kline-Data Binance API Documentation}
     */
    premiumIndexKlineData(
        requestParameters: PremiumIndexKlineDataRequest
    ): Promise<RestApiResponse<PremiumIndexKlineDataResponse>> {
        return this.marketDataApi.premiumIndexKlineData(requestParameters);
    }

    /**
     * Latest price for a symbol or symbols.
     *
     * Weight: 0
     *
     * @summary Quarterly Contract Settlement Price
     * @param {QuarterlyContractSettlementPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuarterlyContractSettlementPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Delivery-Price Binance API Documentation}
     */
    quarterlyContractSettlementPrice(
        requestParameters: QuarterlyContractSettlementPriceRequest
    ): Promise<RestApiResponse<QuarterlyContractSettlementPriceResponse>> {
        return this.marketDataApi.quarterlyContractSettlementPrice(requestParameters);
    }

    /**
     * Query index price constituents
     *
     * Weight: 2
     *
     * @summary Query Index Price Constituents
     * @param {QueryIndexPriceConstituentsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIndexPriceConstituentsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Index-Constituents Binance API Documentation}
     */
    queryIndexPriceConstituents(
        requestParameters: QueryIndexPriceConstituentsRequest
    ): Promise<RestApiResponse<QueryIndexPriceConstituentsResponse>> {
        return this.marketDataApi.queryIndexPriceConstituents(requestParameters);
    }

    /**
     * Query Insurance Fund Balance Snapshot
     *
     * Weight: 1
     *
     * @summary Query Insurance Fund Balance Snapshot
     * @param {QueryInsuranceFundBalanceSnapshotRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryInsuranceFundBalanceSnapshotResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Query-Insurance-Fund-Balance-Snapshot Binance API Documentation}
     */
    queryInsuranceFundBalanceSnapshot(
        requestParameters: QueryInsuranceFundBalanceSnapshotRequest = {}
    ): Promise<RestApiResponse<QueryInsuranceFundBalanceSnapshotResponse>> {
        return this.marketDataApi.queryInsuranceFundBalanceSnapshot(requestParameters);
    }

    /**
     * Get recent market trades
     *
     * Market trades means trades filled in the order book. Only market trades will be returned, which means the insurance fund trades and ADL trades won't be returned.
     *
     * Weight: 5
     *
     * @summary Recent Trades List
     * @param {RecentTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RecentTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Recent-Trades-List Binance API Documentation}
     */
    recentTradesList(
        requestParameters: RecentTradesListRequest
    ): Promise<RestApiResponse<RecentTradesListResponse>> {
        return this.marketDataApi.recentTradesList(requestParameters);
    }

    /**
     * Best price/qty on the order book for a symbol or symbols.
     *
     * If the symbol is not sent, bookTickers for all symbols will be returned in an array.
     * The field `X-MBX-USED-WEIGHT-1M` in response header is not accurate from this endpoint, please ignore.
     *
     * Weight: 2 for a single symbol;
     * 5 when the symbol parameter is omitted
     *
     * @summary Symbol Order Book Ticker
     * @param {SymbolOrderBookTickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolOrderBookTickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Symbol-Order-Book-Ticker Binance API Documentation}
     */
    symbolOrderBookTicker(
        requestParameters: SymbolOrderBookTickerRequest = {}
    ): Promise<RestApiResponse<SymbolOrderBookTickerResponse>> {
        return this.marketDataApi.symbolOrderBookTicker(requestParameters);
    }

    /**
     * Latest price for a symbol or symbols.
     *
     * If the symbol is not sent, prices for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol;
     * 2 when the symbol parameter is omitted
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolPriceTickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Symbol-Price-Ticker Binance API Documentation}
     */
    symbolPriceTicker(
        requestParameters: SymbolPriceTickerRequest = {}
    ): Promise<RestApiResponse<SymbolPriceTickerResponse>> {
        return this.marketDataApi.symbolPriceTicker(requestParameters);
    }

    /**
     * Latest price for a symbol or symbols.
     *
     * If the symbol is not sent, prices for all symbols will be returned in an array.
     * The field `X-MBX-USED-WEIGHT-1M` in response header is not accurate from this endpoint, please ignore.
     *
     * Weight: 1 for a single symbol;
     * 2 when the symbol parameter is omitted
     *
     * @summary Symbol Price Ticker V2
     * @param {SymbolPriceTickerV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolPriceTickerV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Symbol-Price-Ticker-V2 Binance API Documentation}
     */
    symbolPriceTickerV2(
        requestParameters: SymbolPriceTickerV2Request = {}
    ): Promise<RestApiResponse<SymbolPriceTickerV2Response>> {
        return this.marketDataApi.symbolPriceTickerV2(requestParameters);
    }

    /**
     * Taker Buy/Sell Volume
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 30 days is available.
     * IP rate limit 1000 requests/5min
     *
     * Weight: 0
     *
     * @summary Taker Buy/Sell Volume
     * @param {TakerBuySellVolumeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TakerBuySellVolumeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Taker-BuySell-Volume Binance API Documentation}
     */
    takerBuySellVolume(
        requestParameters: TakerBuySellVolumeRequest
    ): Promise<RestApiResponse<TakerBuySellVolumeResponse>> {
        return this.marketDataApi.takerBuySellVolume(requestParameters);
    }

    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     *
     * @summary Test Connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Test-Connectivity Binance API Documentation}
     */
    testConnectivity(): Promise<RestApiResponse<void>> {
        return this.marketDataApi.testConnectivity();
    }

    /**
     * 24 hour rolling window price change statistics.
     **Careful** when accessing this with no symbol.
     *
     * If the symbol is not sent, tickers for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol;
     * 40 when the symbol parameter is omitted
     *
     * @summary 24hr Ticker Price Change Statistics
     * @param {Ticker24hrPriceChangeStatisticsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/24hr-Ticker-Price-Change-Statistics Binance API Documentation}
     */
    ticker24hrPriceChangeStatistics(
        requestParameters: Ticker24hrPriceChangeStatisticsRequest = {}
    ): Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>> {
        return this.marketDataApi.ticker24hrPriceChangeStatistics(requestParameters);
    }

    /**
     * The proportion of net long and net short accounts to total accounts of the top 20% users with the highest margin balance. Each account is counted once only.
     * Long Account % = Accounts of top traders with net long positions / Total accounts of top traders with open positions
     * Short Account % = Accounts of top traders with net short positions / Total accounts of top traders with open positions
     * Long/Short Ratio (Accounts) = Long Account % / Short Account %
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 30 days is available.
     * IP rate limit 1000 requests/5min
     *
     * Weight: 0
     *
     * @summary Top Trader Long/Short Ratio (Accounts)
     * @param {TopTraderLongShortRatioAccountsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TopTraderLongShortRatioAccountsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Top-Long-Short-Account-Ratio Binance API Documentation}
     */
    topTraderLongShortRatioAccounts(
        requestParameters: TopTraderLongShortRatioAccountsRequest
    ): Promise<RestApiResponse<TopTraderLongShortRatioAccountsResponse>> {
        return this.marketDataApi.topTraderLongShortRatioAccounts(requestParameters);
    }

    /**
     * The proportion of net long and net short positions to total open positions of the top 20% users with the highest margin balance.
     * Long Position % = Long positions of top traders / Total open positions of top traders
     * Short Position % = Short positions of top traders / Total open positions of top traders
     * Long/Short Ratio (Positions) = Long Position % / Short Position %
     *
     * If startTime and endTime are not sent, the most recent data is returned.
     * Only the data of the latest 30 days is available.
     * IP rate limit 1000 requests/5min
     *
     * Weight: 0
     *
     * @summary Top Trader Long/Short Ratio (Positions)
     * @param {TopTraderLongShortRatioPositionsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TopTraderLongShortRatioPositionsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Top-Trader-Long-Short-Ratio Binance API Documentation}
     */
    topTraderLongShortRatioPositions(
        requestParameters: TopTraderLongShortRatioPositionsRequest
    ): Promise<RestApiResponse<TopTraderLongShortRatioPositionsResponse>> {
        return this.marketDataApi.topTraderLongShortRatioPositions(requestParameters);
    }

    /**
     * Get Classic Portfolio Margin current account information.
     *
     *
     * maxWithdrawAmount is for asset transfer out to the spot wallet.
     *
     * Weight: 5
     *
     * @summary Classic Portfolio Margin Account Information (USER_DATA)
     * @param {ClassicPortfolioMarginAccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/portfolio-margin-endpoints/Classic-Portfolio-Margin-Account-Information Binance API Documentation}
     */
    classicPortfolioMarginAccountInformation(
        requestParameters: ClassicPortfolioMarginAccountInformationRequest
    ): Promise<RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>> {
        return this.portfolioMarginEndpointsApi.classicPortfolioMarginAccountInformation(
            requestParameters
        );
    }

    /**
     * Get trades for a specific account and symbol.
     *
     * If `startTime` and `endTime` are both not sent, then the last 7 days' data will be returned.
     * The time between `startTime` and `endTime` cannot be longer than 7 days.
     * The parameter `fromId` cannot be sent with `startTime` or `endTime`.
     * Only support querying trade in the past 6 months
     *
     * Weight: 5
     *
     * @summary Account Trade List (USER_DATA)
     * @param {AccountTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Account-Trade-List Binance API Documentation}
     */
    accountTradeList(
        requestParameters: AccountTradeListRequest
    ): Promise<RestApiResponse<AccountTradeListResponse>> {
        return this.tradeApi.accountTradeList(requestParameters);
    }

    /**
     * Get all account orders; active, canceled, or filled.
     *
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED` **AND** order has NO filled trade **AND** created time + 3 days < current time
     * order create time + 90 days < current time
     *
     * If `orderId` is set, it will get orders >= that `orderId`. Otherwise most recent orders are returned.
     * The query time period must be less then 7 days( default as the recent 7 days).
     *
     * Weight: 5
     *
     * @summary All Orders (USER_DATA)
     * @param {AllOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AllOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/All-Orders Binance API Documentation}
     */
    allOrders(requestParameters: AllOrdersRequest): Promise<RestApiResponse<AllOrdersResponse>> {
        return this.tradeApi.allOrders(requestParameters);
    }

    /**
     * Cancel all open orders of the specified symbol at the end of the specified countdown.
     * The endpoint should be called repeatedly as heartbeats so that the existing countdown time can be canceled and replaced by a new one.
     *
     * Example usage:
     * Call this endpoint at 30s intervals with an countdownTime of 120000 (120s).
     * If this endpoint is not called within 120 seconds, all your orders of the specified symbol will be automatically canceled.
     * If this endpoint is called with an countdownTime of 0, the countdown timer will be stopped.
     *
     * The system will check all countdowns **approximately every 10 milliseconds**, so please note that sufficient redundancy should be considered when using this function. We do not recommend setting the countdown time to be too precise or too small.
     *
     * Weight: 10
     *
     * @summary Auto-Cancel All Open Orders (TRADE)
     * @param {AutoCancelAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AutoCancelAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Auto-Cancel-All-Open-Orders Binance API Documentation}
     */
    autoCancelAllOpenOrders(
        requestParameters: AutoCancelAllOpenOrdersRequest
    ): Promise<RestApiResponse<AutoCancelAllOpenOrdersResponse>> {
        return this.tradeApi.autoCancelAllOpenOrders(requestParameters);
    }

    /**
     * Cancel All Open Orders
     *
     * Weight: 1
     *
     * @summary Cancel All Open Orders (TRADE)
     * @param {CancelAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-All-Open-Orders Binance API Documentation}
     */
    cancelAllOpenOrders(
        requestParameters: CancelAllOpenOrdersRequest
    ): Promise<RestApiResponse<CancelAllOpenOrdersResponse>> {
        return this.tradeApi.cancelAllOpenOrders(requestParameters);
    }

    /**
     * Cancel Multiple Orders
     *
     * Either `orderIdList` or `origClientOrderIdList ` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Multiple Orders (TRADE)
     * @param {CancelMultipleOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelMultipleOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-Multiple-Orders Binance API Documentation}
     */
    cancelMultipleOrders(
        requestParameters: CancelMultipleOrdersRequest
    ): Promise<RestApiResponse<CancelMultipleOrdersResponse>> {
        return this.tradeApi.cancelMultipleOrders(requestParameters);
    }

    /**
     * Cancel an active order.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Order (TRADE)
     * @param {CancelOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-Order Binance API Documentation}
     */
    cancelOrder(
        requestParameters: CancelOrderRequest
    ): Promise<RestApiResponse<CancelOrderResponse>> {
        return this.tradeApi.cancelOrder(requestParameters);
    }

    /**
     * Change user's initial leverage of specific symbol market.
     *
     * Weight: 1
     *
     * @summary Change Initial Leverage(TRADE)
     * @param {ChangeInitialLeverageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeInitialLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Initial-Leverage Binance API Documentation}
     */
    changeInitialLeverage(
        requestParameters: ChangeInitialLeverageRequest
    ): Promise<RestApiResponse<ChangeInitialLeverageResponse>> {
        return this.tradeApi.changeInitialLeverage(requestParameters);
    }

    /**
     * Change symbol level margin type
     *
     * Weight: 1
     *
     * @summary Change Margin Type(TRADE)
     * @param {ChangeMarginTypeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeMarginTypeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Margin-Type Binance API Documentation}
     */
    changeMarginType(
        requestParameters: ChangeMarginTypeRequest
    ): Promise<RestApiResponse<ChangeMarginTypeResponse>> {
        return this.tradeApi.changeMarginType(requestParameters);
    }

    /**
     * Change user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on ***Every symbol***
     *
     * Weight: 1
     *
     * @summary Change Multi-Assets Mode (TRADE)
     * @param {ChangeMultiAssetsModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeMultiAssetsModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Multi-Assets-Mode Binance API Documentation}
     */
    changeMultiAssetsMode(
        requestParameters: ChangeMultiAssetsModeRequest
    ): Promise<RestApiResponse<ChangeMultiAssetsModeResponse>> {
        return this.tradeApi.changeMultiAssetsMode(requestParameters);
    }

    /**
     * Change user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 1
     *
     * @summary Change Position Mode(TRADE)
     * @param {ChangePositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangePositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Position-Mode Binance API Documentation}
     */
    changePositionMode(
        requestParameters: ChangePositionModeRequest
    ): Promise<RestApiResponse<ChangePositionModeResponse>> {
        return this.tradeApi.changePositionMode(requestParameters);
    }

    /**
     * Get all open orders on a symbol.
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     * Careful when accessing this with no symbol.
     *
     * @summary Current All Open Orders (USER_DATA)
     * @param {CurrentAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CurrentAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Current-All-Open-Orders Binance API Documentation}
     */
    currentAllOpenOrders(
        requestParameters: CurrentAllOpenOrdersRequest = {}
    ): Promise<RestApiResponse<CurrentAllOpenOrdersResponse>> {
        return this.tradeApi.currentAllOpenOrders(requestParameters);
    }

    /**
     * Get order modification history
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     * Order modify history longer than 3 month is not avaliable
     *
     * Weight: 1
     *
     * @summary Get Order Modify History (USER_DATA)
     * @param {GetOrderModifyHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOrderModifyHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Get-Order-Modify-History Binance API Documentation}
     */
    getOrderModifyHistory(
        requestParameters: GetOrderModifyHistoryRequest
    ): Promise<RestApiResponse<GetOrderModifyHistoryResponse>> {
        return this.tradeApi.getOrderModifyHistory(requestParameters);
    }

    /**
     * Get Position Margin Change History
     *
     * Support querying future histories that are not older than 30 days
     * The time between `startTime` and `endTime`can't be more than 30 days
     *
     * Weight: 1
     *
     * @summary Get Position Margin Change History (TRADE)
     * @param {GetPositionMarginChangeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetPositionMarginChangeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Get-Position-Margin-Change-History Binance API Documentation}
     */
    getPositionMarginChangeHistory(
        requestParameters: GetPositionMarginChangeHistoryRequest
    ): Promise<RestApiResponse<GetPositionMarginChangeHistoryResponse>> {
        return this.tradeApi.getPositionMarginChangeHistory(requestParameters);
    }

    /**
     * Modify Isolated Position Margin
     *
     *
     * Only for isolated symbol
     *
     * Weight: 1
     *
     * @summary Modify Isolated Position Margin(TRADE)
     * @param {ModifyIsolatedPositionMarginRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ModifyIsolatedPositionMarginResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Isolated-Position-Margin Binance API Documentation}
     */
    modifyIsolatedPositionMargin(
        requestParameters: ModifyIsolatedPositionMarginRequest
    ): Promise<RestApiResponse<ModifyIsolatedPositionMarginResponse>> {
        return this.tradeApi.modifyIsolatedPositionMargin(requestParameters);
    }

    /**
     * Modify Multiple Orders (TRADE)
     *
     * Parameter rules are same with `Modify Order`
     * Batch modify orders are processed concurrently, and the order of matching is not guaranteed.
     * The order of returned contents for batch modify orders is the same as the order of the order list.
     * One order can only be modfied for less than 10000 times
     *
     * Weight: 5 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 5 on IP rate limit(x-mbx-used-weight-1m);
     *
     * @summary Modify Multiple Orders(TRADE)
     * @param {ModifyMultipleOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ModifyMultipleOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Multiple-Orders Binance API Documentation}
     */
    modifyMultipleOrders(
        requestParameters: ModifyMultipleOrdersRequest
    ): Promise<RestApiResponse<ModifyMultipleOrdersResponse>> {
        return this.tradeApi.modifyMultipleOrders(requestParameters);
    }

    /**
     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue
     *
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     * Both `quantity` and `price` must be sent, which is different from dapi modify order endpoint.
     * When the new `quantity` or `price` doesn't satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment will be rejected and the order will stay as it is.
     * However the order will be cancelled by the amendment in the following situations:
     * when the order is in partially filled status and the new `quantity` <= `executedQty`
     * When the order is `GTX` and the new price will cause it to be executed immediately
     * One order can only be modfied for less than 10000 times
     * Modify order will set `selfTradePreventionMode` to `NONE`
     *
     * Weight: 1 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 1 on IP rate limit(x-mbx-used-weight-1m)
     *
     * @summary Modify Order (TRADE)
     * @param {ModifyOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ModifyOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Order Binance API Documentation}
     */
    modifyOrder(
        requestParameters: ModifyOrderRequest
    ): Promise<RestApiResponse<ModifyOrderResponse>> {
        return this.tradeApi.modifyOrder(requestParameters);
    }

    /**
     * Send in a new order.
     *
     * Order with type `STOP`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Order with type `TAKE_PROFIT`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     *
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     *
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest price after order placed `<= `activationPrice`, and the latest price >`= the lowest price * (1 + `callbackRate`)
     * SELL: the highest price after order placed >= `activationPrice`, and the latest price <= the highest price * (1 - `callbackRate`)
     *
     * For `TRAILING_STOP_MARKET`, if you got such error code.
     * ``{"code": -2021, "msg": "Order would immediately trigger."}``
     * means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest price.
     * SELL: `activationPrice` should be larger than latest price.
     *
     * If `newOrderRespType ` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     *
     * `STOP_MARKET`, `TAKE_PROFIT_MARKET` with `closePosition`=`true`:
     * Follow the same rules for condition orders.
     * If triggered，**close all** current long position( if `SELL`) or current short position( if `BUY`).
     * Cannot be used with `quantity` paremeter
     * Cannot be used with `reduceOnly` parameter
     * In Hedge Mode,cannot be used with `BUY` orders in `LONG` position side. and cannot be used with `SELL` orders in `SHORT` position side
     * `selfTradePreventionMode` is only effective when `timeInForce` set to `IOC` or `GTC` or `GTD`.
     * In extreme market conditions, timeInForce `GTD` order auto cancel time might be delayed comparing to `goodTillDate`
     *
     * Weight: 1 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 0 on IP rate limit(x-mbx-used-weight-1m)
     *
     * @summary New Order(TRADE)
     * @param {NewOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/New-Order Binance API Documentation}
     */
    newOrder(requestParameters: NewOrderRequest): Promise<RestApiResponse<NewOrderResponse>> {
        return this.tradeApi.newOrder(requestParameters);
    }

    /**
     * Place Multiple Orders
     *
     * Paremeter rules are same with `New Order`
     * Batch orders are processed concurrently, and the order of matching is not guaranteed.
     * The order of returned contents for batch orders is the same as the order of the order list.
     *
     * Weight: 5 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);
     * 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M);
     * 5 on IP rate limit(x-mbx-used-weight-1m);
     *
     * @summary Place Multiple Orders(TRADE)
     * @param {PlaceMultipleOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PlaceMultipleOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Place-Multiple-Orders Binance API Documentation}
     */
    placeMultipleOrders(
        requestParameters: PlaceMultipleOrdersRequest
    ): Promise<RestApiResponse<PlaceMultipleOrdersResponse>> {
        return this.tradeApi.placeMultipleOrders(requestParameters);
    }

    /**
     * Position ADL Quantile Estimation
     *
     * Values update every 30s.
     * Values 0, 1, 2, 3, 4 shows the queue position and possibility of ADL from low to high.
     * For positions of the symbol are in One-way Mode or isolated margined in Hedge Mode, "LONG", "SHORT", and "BOTH" will be returned to show the positions' adl quantiles of different position sides.
     * If the positions of the symbol are crossed margined in Hedge Mode:
     * "HEDGE" as a sign will be returned instead of "BOTH";
     * A same value caculated on unrealized pnls on long and short sides' positions will be shown for "LONG" and "SHORT" when there are positions in both of long and short sides.
     *
     * Weight: 5
     *
     * @summary Position ADL Quantile Estimation(USER_DATA)
     * @param {PositionAdlQuantileEstimationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PositionAdlQuantileEstimationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-ADL-Quantile-Estimation Binance API Documentation}
     */
    positionAdlQuantileEstimation(
        requestParameters: PositionAdlQuantileEstimationRequest = {}
    ): Promise<RestApiResponse<PositionAdlQuantileEstimationResponse>> {
        return this.tradeApi.positionAdlQuantileEstimation(requestParameters);
    }

    /**
     * Get current position information.
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information V2 (USER_DATA)
     * @param {PositionInformationV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PositionInformationV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2 Binance API Documentation}
     */
    positionInformationV2(
        requestParameters: PositionInformationV2Request = {}
    ): Promise<RestApiResponse<PositionInformationV2Response>> {
        return this.tradeApi.positionInformationV2(requestParameters);
    }

    /**
     * Get current position information(only symbol that has position or open orders will be returned).
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 5
     *
     * @summary Position Information V3 (USER_DATA)
     * @param {PositionInformationV3Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PositionInformationV3Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V3 Binance API Documentation}
     */
    positionInformationV3(
        requestParameters: PositionInformationV3Request = {}
    ): Promise<RestApiResponse<PositionInformationV3Response>> {
        return this.tradeApi.positionInformationV3(requestParameters);
    }

    /**
     * Query open order
     *
     *
     * Either`orderId` or `origClientOrderId` must be sent
     * If the queried order has been filled or cancelled, the error message "Order does not exist" will be returned.
     *
     * Weight: 1
     *
     * @summary Query Current Open Order (USER_DATA)
     * @param {QueryCurrentOpenOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentOpenOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Query-Current-Open-Order Binance API Documentation}
     */
    queryCurrentOpenOrder(
        requestParameters: QueryCurrentOpenOrderRequest
    ): Promise<RestApiResponse<QueryCurrentOpenOrderResponse>> {
        return this.tradeApi.queryCurrentOpenOrder(requestParameters);
    }

    /**
     * Check an order's status.
     *
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED` **AND** order has NO filled trade **AND** created time + 3 days < current time
     * order create time + 90 days < current time
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * `orderId` is self-increment for each specific `symbol`
     *
     * Weight: 1
     *
     * @summary Query Order (USER_DATA)
     * @param {QueryOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Query-Order Binance API Documentation}
     */
    queryOrder(requestParameters: QueryOrderRequest): Promise<RestApiResponse<QueryOrderResponse>> {
        return this.tradeApi.queryOrder(requestParameters);
    }

    /**
     * Testing order request, this order will not be submitted to matching engine
     *
     * Order with type `STOP`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Order with type `TAKE_PROFIT`,  parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     *
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     *
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest price after order placed `<= `activationPrice`, and the latest price >`= the lowest price * (1 + `callbackRate`)
     * SELL: the highest price after order placed >= `activationPrice`, and the latest price <= the highest price * (1 - `callbackRate`)
     *
     * For `TRAILING_STOP_MARKET`, if you got such error code.
     * ``{"code": -2021, "msg": "Order would immediately trigger."}``
     * means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest price.
     * SELL: `activationPrice` should be larger than latest price.
     *
     * If `newOrderRespType ` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     *
     * `STOP_MARKET`, `TAKE_PROFIT_MARKET` with `closePosition`=`true`:
     * Follow the same rules for condition orders.
     * If triggered，**close all** current long position( if `SELL`) or current short position( if `BUY`).
     * Cannot be used with `quantity` paremeter
     * Cannot be used with `reduceOnly` parameter
     * In Hedge Mode,cannot be used with `BUY` orders in `LONG` position side. and cannot be used with `SELL` orders in `SHORT` position side
     * `selfTradePreventionMode` is only effective when `timeInForce` set to `IOC` or `GTC` or `GTD`.
     * In extreme market conditions, timeInForce `GTD` order auto cancel time might be delayed comparing to `goodTillDate`
     *
     * Weight: 0
     *
     * @summary Test Order(TRADE)
     * @param {TestOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TestOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/New-Order-Test Binance API Documentation}
     */
    testOrder(requestParameters: TestOrderRequest): Promise<RestApiResponse<TestOrderResponse>> {
        return this.tradeApi.testOrder(requestParameters);
    }

    /**
     * Query user's Force Orders
     *
     * If "autoCloseType" is not sent, orders with both of the types will be returned
     * If "startTime" is not sent, data within 7 days before "endTime" can be queried
     *
     * Weight: 20 with symbol, 50 without symbol
     *
     * @summary User\'s Force Orders (USER_DATA)
     * @param {UsersForceOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UsersForceOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Users-Force-Orders Binance API Documentation}
     */
    usersForceOrders(
        requestParameters: UsersForceOrdersRequest = {}
    ): Promise<RestApiResponse<UsersForceOrdersResponse>> {
        return this.tradeApi.usersForceOrders(requestParameters);
    }

    /**
     * Close out a user data stream.
     *
     * Weight: 1
     *
     * @summary Close User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Close-User-Data-Stream Binance API Documentation}
     */
    closeUserDataStream(): Promise<RestApiResponse<void>> {
        return this.userDataStreamsApi.closeUserDataStream();
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 60 minutes.
     *
     * Weight: 1
     *
     * @summary Keepalive User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<KeepaliveUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Keepalive-User-Data-Stream Binance API Documentation}
     */
    keepaliveUserDataStream(): Promise<RestApiResponse<KeepaliveUserDataStreamResponse>> {
        return this.userDataStreamsApi.keepaliveUserDataStream();
    }

    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<StartUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/user-data-streams/Start-User-Data-Stream Binance API Documentation}
     */
    startUserDataStream(): Promise<RestApiResponse<StartUserDataStreamResponse>> {
        return this.userDataStreamsApi.startUserDataStream();
    }
}
