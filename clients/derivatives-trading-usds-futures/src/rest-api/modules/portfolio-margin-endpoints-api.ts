/**
 * Binance Public Derivatives Trading USDS Futures REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { ClassicPortfolioMarginAccountInformationResponse } from '../types';

/**
 * PortfolioMarginEndpointsApi - axios parameter creator
 */
const PortfolioMarginEndpointsApiAxiosParamCreator = function (
    configuration: ConfigurationRestAPI
) {
    return {
        /**
         * Get Classic Portfolio Margin current account information.
         *
         *
         * maxWithdrawAmount is for asset transfer out to the spot wallet.
         *
         * Weight: 5
         *
         * @summary Classic Portfolio Margin Account Information (USER_DATA)
         * @param {string} asset
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        classicPortfolioMarginAccountInformation: async (
            asset: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('classicPortfolioMarginAccountInformation', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/pmAccountInfo',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * PortfolioMarginEndpointsApi - interface
 * @interface PortfolioMarginEndpointsApi
 */
export interface PortfolioMarginEndpointsApiInterface {
    /**
     * Get Classic Portfolio Margin current account information.
     *
     *
     * maxWithdrawAmount is for asset transfer out to the spot wallet.
     *
     * Weight: 5
     *
     * @summary Classic Portfolio Margin Account Information (USER_DATA)
     * @param {ClassicPortfolioMarginAccountInformationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof PortfolioMarginEndpointsApiInterface
     */
    classicPortfolioMarginAccountInformation(
        requestParameters: ClassicPortfolioMarginAccountInformationRequest
    ): Promise<RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>>;
}

/**
 * Request parameters for classicPortfolioMarginAccountInformation operation in PortfolioMarginEndpointsApi.
 * @interface ClassicPortfolioMarginAccountInformationRequest
 */
export interface ClassicPortfolioMarginAccountInformationRequest {
    /**
     *
     * @type {string}
     * @memberof PortfolioMarginEndpointsApiClassicPortfolioMarginAccountInformation
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof PortfolioMarginEndpointsApiClassicPortfolioMarginAccountInformation
     */
    readonly recvWindow?: number;
}

/**
 * PortfolioMarginEndpointsApi - object-oriented interface
 * @class PortfolioMarginEndpointsApi
 */
export class PortfolioMarginEndpointsApi implements PortfolioMarginEndpointsApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator =
            PortfolioMarginEndpointsApiAxiosParamCreator(configuration);
    }

    /**
     * Get Classic Portfolio Margin current account information.
     *
     *
     * maxWithdrawAmount is for asset transfer out to the spot wallet.
     *
     * Weight: 5
     *
     * @summary Classic Portfolio Margin Account Information (USER_DATA)
     * @param {ClassicPortfolioMarginAccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof PortfolioMarginEndpointsApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/portfolio-margin-endpoints/Classic-Portfolio-Margin-Account-Information Binance API Documentation}
     */
    public async classicPortfolioMarginAccountInformation(
        requestParameters: ClassicPortfolioMarginAccountInformationRequest
    ): Promise<RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.classicPortfolioMarginAccountInformation(
                requestParameters?.asset,
                requestParameters?.recvWindow
            );
        return sendRequest<ClassicPortfolioMarginAccountInformationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
