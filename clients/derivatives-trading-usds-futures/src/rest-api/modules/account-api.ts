/**
 * Binance Derivatives Trading USDS Futures REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountInformationV2Response,
    AccountInformationV3Response,
    FuturesAccountBalanceV2Response,
    FuturesAccountBalanceV3Response,
    FuturesAccountConfigurationResponse,
    FuturesTradingQuantitativeRulesIndicatorsResponse,
    GetBnbBurnStatusResponse,
    GetCurrentMultiAssetsModeResponse,
    GetCurrentPositionModeResponse,
    GetDownloadIdForFuturesOrderHistoryResponse,
    GetDownloadIdForFuturesTradeHistoryResponse,
    GetDownloadIdForFuturesTransactionHistoryResponse,
    GetFuturesOrderHistoryDownloadLinkByIdResponse,
    GetFuturesTradeDownloadLinkByIdResponse,
    GetFuturesTransactionHistoryDownloadLinkByIdResponse,
    GetIncomeHistoryResponse,
    NotionalAndLeverageBracketsResponse,
    QueryUserRateLimitResponse,
    SymbolConfigurationResponse,
    ToggleBnbBurnOnFuturesTradeResponse,
    UserCommissionRateResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         *
         * Weight: 5
         *
         * @summary Account Information V2(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountInformationV2: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v2/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
         *
         * Weight: 5
         *
         * @summary Account Information V3(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountInformationV3: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v3/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query account balance info
         *
         * Weight: 5
         *
         * @summary Futures Account Balance V2 (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresAccountBalanceV2: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v2/balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query account balance info
         *
         * Weight: 5
         *
         * @summary Futures Account Balance V3 (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresAccountBalanceV3: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v3/balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query account configuration
         *
         * Weight: 5
         *
         * @summary Futures Account Configuration(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresAccountConfiguration: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/accountConfig',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Futures trading quantitative rules indicators, for more information on this, please refer to the [Futures Trading Quantitative Rules](https://www.binance.com/en/support/faq/4f462ebe6ff445d4a170be7d9e897272)
         *
         * Weight: - 1 for a single symbol
         * - 10 when the symbol parameter is omitted
         *
         * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
         * @param {string} [symbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresTradingQuantitativeRulesIndicators: async (
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/apiTradingStatus',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get user's BNB Fee Discount (Fee Discount On or Fee Discount Off )
         *
         * Weight: 30
         *
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getBnbBurnStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/feeBurn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on ***Every symbol***
         *
         * Weight: 30
         *
         * @summary Get Current Multi-Assets Mode (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCurrentMultiAssetsMode: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/multiAssetsMargin',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
         *
         * Weight: 30
         *
         * @summary Get Current Position Mode(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCurrentPositionMode: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/positionSide/dual',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Download Id For Futures Order History
         *
         * Request Limitation is 10 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 1000
         *
         * @summary Get Download Id For Futures Order History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesOrderHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesOrderHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesOrderHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/order/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get download id for futures trade history
         *
         * Request Limitation is 5 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 1000
         *
         * @summary Get Download Id For Futures Trade History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesTradeHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTradeHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTradeHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/trade/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get download id for futures transaction history
         *
         * Request Limitation is 5 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 1000
         *
         * @summary Get Download Id For Futures Transaction History(USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesTransactionHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTransactionHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTransactionHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/income/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures order history download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 10
         *
         * @summary Get Futures Order History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesOrderHistoryDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('getFuturesOrderHistoryDownloadLinkById', 'downloadId', downloadId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/order/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures trade download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 10
         *
         * @summary Get Futures Trade Download Link by Id(USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesTradeDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('getFuturesTradeDownloadLinkById', 'downloadId', downloadId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/trade/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures transaction history download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 10
         *
         * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesTransactionHistoryDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists(
                'getFuturesTransactionHistoryDownloadLinkById',
                'downloadId',
                downloadId
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/income/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query income history
         *
         * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
         * If `incomeType ` is not sent, all kinds of flow will be returned
         * "trandId" is unique in the same incomeType for a user
         * Income history only contains data for the last three months
         *
         * Weight: 30
         *
         * @summary Get Income History (USER_DATA)
         * @param {string} [symbol]
         * @param {string} [incomeType] TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE, STRATEGY_UMFUTURES_TRANSFER，FEE_RETURN，BFUSD_REWARD
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [page]
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getIncomeHistory: async (
            symbol?: string,
            incomeType?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (incomeType !== undefined && incomeType !== null) {
                localVarQueryParameter['incomeType'] = incomeType;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/income',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query user notional and leverage bracket on speicfic symbol
         *
         * Weight: 1
         *
         * @summary Notional and Leverage Brackets (USER_DATA)
         * @param {string} [symbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        notionalAndLeverageBrackets: async (
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/leverageBracket',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query User Rate Limit
         *
         * Weight: 1
         *
         * @summary Query User Rate Limit (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryUserRateLimit: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/rateLimit/order',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get current account symbol configuration.
         *
         * Weight: 5
         *
         * @summary Symbol Configuration(USER_DATA)
         * @param {string} [symbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        symbolConfiguration: async (symbol?: string, recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/symbolConfig',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Change user's BNB Fee Discount (Fee Discount On or Fee Discount Off ) on ***EVERY symbol***
         *
         * Weight: 1
         *
         * @summary Toggle BNB Burn On Futures Trade (TRADE)
         * @param {string} feeBurn "true": Fee Discount On; "false": Fee Discount Off
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        toggleBnbBurnOnFuturesTrade: async (
            feeBurn: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'feeBurn' is not null or undefined
            assertParamExists('toggleBnbBurnOnFuturesTrade', 'feeBurn', feeBurn);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (feeBurn !== undefined && feeBurn !== null) {
                localVarQueryParameter['feeBurn'] = feeBurn;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/feeBurn',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get User Commission Rate
         *
         * Weight: 20
         *
         * @summary User Commission Rate (USER_DATA)
         * @param {string} symbol
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        userCommissionRate: async (symbol: string, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('userCommissionRate', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/fapi/v1/commissionRate',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V2(USER_DATA)
     * @param {AccountInformationV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountInformationV2(
        requestParameters?: AccountInformationV2Request
    ): Promise<RestApiResponse<AccountInformationV2Response>>;
    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V3(USER_DATA)
     * @param {AccountInformationV3Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountInformationV3(
        requestParameters?: AccountInformationV3Request
    ): Promise<RestApiResponse<AccountInformationV3Response>>;
    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V2 (USER_DATA)
     * @param {FuturesAccountBalanceV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    futuresAccountBalanceV2(
        requestParameters?: FuturesAccountBalanceV2Request
    ): Promise<RestApiResponse<FuturesAccountBalanceV2Response>>;
    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V3 (USER_DATA)
     * @param {FuturesAccountBalanceV3Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    futuresAccountBalanceV3(
        requestParameters?: FuturesAccountBalanceV3Request
    ): Promise<RestApiResponse<FuturesAccountBalanceV3Response>>;
    /**
     * Query account configuration
     *
     * Weight: 5
     *
     * @summary Futures Account Configuration(USER_DATA)
     * @param {FuturesAccountConfigurationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    futuresAccountConfiguration(
        requestParameters?: FuturesAccountConfigurationRequest
    ): Promise<RestApiResponse<FuturesAccountConfigurationResponse>>;
    /**
     * Futures trading quantitative rules indicators, for more information on this, please refer to the [Futures Trading Quantitative Rules](https://www.binance.com/en/support/faq/4f462ebe6ff445d4a170be7d9e897272)
     *
     * Weight: - 1 for a single symbol
     * - 10 when the symbol parameter is omitted
     *
     * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
     * @param {FuturesTradingQuantitativeRulesIndicatorsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    futuresTradingQuantitativeRulesIndicators(
        requestParameters?: FuturesTradingQuantitativeRulesIndicatorsRequest
    ): Promise<RestApiResponse<FuturesTradingQuantitativeRulesIndicatorsResponse>>;
    /**
     * Get user's BNB Fee Discount (Fee Discount On or Fee Discount Off )
     *
     * Weight: 30
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getBnbBurnStatus(
        requestParameters?: GetBnbBurnStatusRequest
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>>;
    /**
     * Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on ***Every symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Multi-Assets Mode (USER_DATA)
     * @param {GetCurrentMultiAssetsModeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getCurrentMultiAssetsMode(
        requestParameters?: GetCurrentMultiAssetsModeRequest
    ): Promise<RestApiResponse<GetCurrentMultiAssetsModeResponse>>;
    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Position Mode(USER_DATA)
     * @param {GetCurrentPositionModeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getCurrentPositionMode(
        requestParameters?: GetCurrentPositionModeRequest
    ): Promise<RestApiResponse<GetCurrentPositionModeResponse>>;
    /**
     * Get Download Id For Futures Order History
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {GetDownloadIdForFuturesOrderHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesOrderHistory(
        requestParameters: GetDownloadIdForFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>>;
    /**
     * Get download id for futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForFuturesTradeHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesTradeHistory(
        requestParameters: GetDownloadIdForFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>>;
    /**
     * Get download id for futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {GetDownloadIdForFuturesTransactionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesTransactionHistory(
        requestParameters: GetDownloadIdForFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>>;
    /**
     * Get futures order history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {GetFuturesOrderHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesOrderHistoryDownloadLinkById(
        requestParameters: GetFuturesOrderHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>>;
    /**
     * Get futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {GetFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesTradeDownloadLinkById(
        requestParameters: GetFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>>;
    /**
     * Get futures transaction history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {GetFuturesTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesTransactionHistoryDownloadLinkById(
        requestParameters: GetFuturesTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>>;
    /**
     * Query income history
     *
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * If `incomeType ` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same incomeType for a user
     * Income history only contains data for the last three months
     *
     * Weight: 30
     *
     * @summary Get Income History (USER_DATA)
     * @param {GetIncomeHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getIncomeHistory(
        requestParameters?: GetIncomeHistoryRequest
    ): Promise<RestApiResponse<GetIncomeHistoryResponse>>;
    /**
     * Query user notional and leverage bracket on speicfic symbol
     *
     * Weight: 1
     *
     * @summary Notional and Leverage Brackets (USER_DATA)
     * @param {NotionalAndLeverageBracketsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    notionalAndLeverageBrackets(
        requestParameters?: NotionalAndLeverageBracketsRequest
    ): Promise<RestApiResponse<NotionalAndLeverageBracketsResponse>>;
    /**
     * Query User Rate Limit
     *
     * Weight: 1
     *
     * @summary Query User Rate Limit (USER_DATA)
     * @param {QueryUserRateLimitRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryUserRateLimit(
        requestParameters?: QueryUserRateLimitRequest
    ): Promise<RestApiResponse<QueryUserRateLimitResponse>>;
    /**
     * Get current account symbol configuration.
     *
     * Weight: 5
     *
     * @summary Symbol Configuration(USER_DATA)
     * @param {SymbolConfigurationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    symbolConfiguration(
        requestParameters?: SymbolConfigurationRequest
    ): Promise<RestApiResponse<SymbolConfigurationResponse>>;
    /**
     * Change user's BNB Fee Discount (Fee Discount On or Fee Discount Off ) on ***EVERY symbol***
     *
     * Weight: 1
     *
     * @summary Toggle BNB Burn On Futures Trade (TRADE)
     * @param {ToggleBnbBurnOnFuturesTradeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    toggleBnbBurnOnFuturesTrade(
        requestParameters: ToggleBnbBurnOnFuturesTradeRequest
    ): Promise<RestApiResponse<ToggleBnbBurnOnFuturesTradeResponse>>;
    /**
     * Get User Commission Rate
     *
     * Weight: 20
     *
     * @summary User Commission Rate (USER_DATA)
     * @param {UserCommissionRateRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    userCommissionRate(
        requestParameters: UserCommissionRateRequest
    ): Promise<RestApiResponse<UserCommissionRateResponse>>;
}

/**
 * Request parameters for accountInformationV2 operation in AccountApi.
 * @interface AccountInformationV2Request
 */
export interface AccountInformationV2Request {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountInformationV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for accountInformationV3 operation in AccountApi.
 * @interface AccountInformationV3Request
 */
export interface AccountInformationV3Request {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountInformationV3
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for futuresAccountBalanceV2 operation in AccountApi.
 * @interface FuturesAccountBalanceV2Request
 */
export interface FuturesAccountBalanceV2Request {
    /**
     *
     * @type {number}
     * @memberof AccountApiFuturesAccountBalanceV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for futuresAccountBalanceV3 operation in AccountApi.
 * @interface FuturesAccountBalanceV3Request
 */
export interface FuturesAccountBalanceV3Request {
    /**
     *
     * @type {number}
     * @memberof AccountApiFuturesAccountBalanceV3
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for futuresAccountConfiguration operation in AccountApi.
 * @interface FuturesAccountConfigurationRequest
 */
export interface FuturesAccountConfigurationRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiFuturesAccountConfiguration
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for futuresTradingQuantitativeRulesIndicators operation in AccountApi.
 * @interface FuturesTradingQuantitativeRulesIndicatorsRequest
 */
export interface FuturesTradingQuantitativeRulesIndicatorsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiFuturesTradingQuantitativeRulesIndicators
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiFuturesTradingQuantitativeRulesIndicators
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBnbBurnStatus operation in AccountApi.
 * @interface GetBnbBurnStatusRequest
 */
export interface GetBnbBurnStatusRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetBnbBurnStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCurrentMultiAssetsMode operation in AccountApi.
 * @interface GetCurrentMultiAssetsModeRequest
 */
export interface GetCurrentMultiAssetsModeRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetCurrentMultiAssetsMode
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCurrentPositionMode operation in AccountApi.
 * @interface GetCurrentPositionModeRequest
 */
export interface GetCurrentPositionModeRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetCurrentPositionMode
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesOrderHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesOrderHistoryRequest
 */
export interface GetDownloadIdForFuturesOrderHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesTradeHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesTradeHistoryRequest
 */
export interface GetDownloadIdForFuturesTradeHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesTransactionHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesTransactionHistoryRequest
 */
export interface GetDownloadIdForFuturesTransactionHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesOrderHistoryDownloadLinkById operation in AccountApi.
 * @interface GetFuturesOrderHistoryDownloadLinkByIdRequest
 */
export interface GetFuturesOrderHistoryDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesOrderHistoryDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesOrderHistoryDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesTradeDownloadLinkById operation in AccountApi.
 * @interface GetFuturesTradeDownloadLinkByIdRequest
 */
export interface GetFuturesTradeDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesTradeDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesTradeDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesTransactionHistoryDownloadLinkById operation in AccountApi.
 * @interface GetFuturesTransactionHistoryDownloadLinkByIdRequest
 */
export interface GetFuturesTransactionHistoryDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesTransactionHistoryDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesTransactionHistoryDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getIncomeHistory operation in AccountApi.
 * @interface GetIncomeHistoryRequest
 */
export interface GetIncomeHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly symbol?: string;

    /**
     * TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE, STRATEGY_UMFUTURES_TRANSFER，FEE_RETURN，BFUSD_REWARD
     * @type {string}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly incomeType?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly page?: number;

    /**
     * Default 100; max 1000
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for notionalAndLeverageBrackets operation in AccountApi.
 * @interface NotionalAndLeverageBracketsRequest
 */
export interface NotionalAndLeverageBracketsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiNotionalAndLeverageBrackets
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiNotionalAndLeverageBrackets
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryUserRateLimit operation in AccountApi.
 * @interface QueryUserRateLimitRequest
 */
export interface QueryUserRateLimitRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiQueryUserRateLimit
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for symbolConfiguration operation in AccountApi.
 * @interface SymbolConfigurationRequest
 */
export interface SymbolConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiSymbolConfiguration
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiSymbolConfiguration
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for toggleBnbBurnOnFuturesTrade operation in AccountApi.
 * @interface ToggleBnbBurnOnFuturesTradeRequest
 */
export interface ToggleBnbBurnOnFuturesTradeRequest {
    /**
     * "true": Fee Discount On; "false": Fee Discount Off
     * @type {string}
     * @memberof AccountApiToggleBnbBurnOnFuturesTrade
     */
    readonly feeBurn: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiToggleBnbBurnOnFuturesTrade
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for userCommissionRate operation in AccountApi.
 * @interface UserCommissionRateRequest
 */
export interface UserCommissionRateRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiUserCommissionRate
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiUserCommissionRate
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V2(USER_DATA)
     * @param {AccountInformationV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2 Binance API Documentation}
     */
    public async accountInformationV2(
        requestParameters: AccountInformationV2Request = {}
    ): Promise<RestApiResponse<AccountInformationV2Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountInformationV2(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountInformationV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get current account information. User in single-asset/ multi-assets mode will see different value, see comments in response section for detail.
     *
     * Weight: 5
     *
     * @summary Account Information V3(USER_DATA)
     * @param {AccountInformationV3Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationV3Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V3 Binance API Documentation}
     */
    public async accountInformationV3(
        requestParameters: AccountInformationV3Request = {}
    ): Promise<RestApiResponse<AccountInformationV3Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountInformationV3(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountInformationV3Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V2 (USER_DATA)
     * @param {FuturesAccountBalanceV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountBalanceV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Account-Balance-V2 Binance API Documentation}
     */
    public async futuresAccountBalanceV2(
        requestParameters: FuturesAccountBalanceV2Request = {}
    ): Promise<RestApiResponse<FuturesAccountBalanceV2Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.futuresAccountBalanceV2(
            requestParameters?.recvWindow
        );
        return sendRequest<FuturesAccountBalanceV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query account balance info
     *
     * Weight: 5
     *
     * @summary Futures Account Balance V3 (USER_DATA)
     * @param {FuturesAccountBalanceV3Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountBalanceV3Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Account-Balance-V3 Binance API Documentation}
     */
    public async futuresAccountBalanceV3(
        requestParameters: FuturesAccountBalanceV3Request = {}
    ): Promise<RestApiResponse<FuturesAccountBalanceV3Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.futuresAccountBalanceV3(
            requestParameters?.recvWindow
        );
        return sendRequest<FuturesAccountBalanceV3Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query account configuration
     *
     * Weight: 5
     *
     * @summary Futures Account Configuration(USER_DATA)
     * @param {FuturesAccountConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Config Binance API Documentation}
     */
    public async futuresAccountConfiguration(
        requestParameters: FuturesAccountConfigurationRequest = {}
    ): Promise<RestApiResponse<FuturesAccountConfigurationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.futuresAccountConfiguration(
            requestParameters?.recvWindow
        );
        return sendRequest<FuturesAccountConfigurationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Futures trading quantitative rules indicators, for more information on this, please refer to the [Futures Trading Quantitative Rules](https://www.binance.com/en/support/faq/4f462ebe6ff445d4a170be7d9e897272)
     *
     * Weight: - 1 for a single symbol
     * - 10 when the symbol parameter is omitted
     *
     * @summary Futures Trading Quantitative Rules Indicators (USER_DATA)
     * @param {FuturesTradingQuantitativeRulesIndicatorsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesTradingQuantitativeRulesIndicatorsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Trading-Quantitative-Rules-Indicators Binance API Documentation}
     */
    public async futuresTradingQuantitativeRulesIndicators(
        requestParameters: FuturesTradingQuantitativeRulesIndicatorsRequest = {}
    ): Promise<RestApiResponse<FuturesTradingQuantitativeRulesIndicatorsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.futuresTradingQuantitativeRulesIndicators(
                requestParameters?.symbol,
                requestParameters?.recvWindow
            );
        return sendRequest<FuturesTradingQuantitativeRulesIndicatorsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get user's BNB Fee Discount (Fee Discount On or Fee Discount Off )
     *
     * Weight: 30
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnbBurnStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-BNB-Burn-Status Binance API Documentation}
     */
    public async getBnbBurnStatus(
        requestParameters: GetBnbBurnStatusRequest = {}
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBnbBurnStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<GetBnbBurnStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on ***Every symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Multi-Assets Mode (USER_DATA)
     * @param {GetCurrentMultiAssetsModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentMultiAssetsModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Current-Multi-Assets-Mode Binance API Documentation}
     */
    public async getCurrentMultiAssetsMode(
        requestParameters: GetCurrentMultiAssetsModeRequest = {}
    ): Promise<RestApiResponse<GetCurrentMultiAssetsModeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCurrentMultiAssetsMode(
            requestParameters?.recvWindow
        );
        return sendRequest<GetCurrentMultiAssetsModeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Position Mode(USER_DATA)
     * @param {GetCurrentPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Current-Position-Mode Binance API Documentation}
     */
    public async getCurrentPositionMode(
        requestParameters: GetCurrentPositionModeRequest = {}
    ): Promise<RestApiResponse<GetCurrentPositionModeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCurrentPositionMode(
            requestParameters?.recvWindow
        );
        return sendRequest<GetCurrentPositionModeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Download Id For Futures Order History
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {GetDownloadIdForFuturesOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Order-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesOrderHistory(
        requestParameters: GetDownloadIdForFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesOrderHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesOrderHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get download id for futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForFuturesTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Trade-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesTradeHistory(
        requestParameters: GetDownloadIdForFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesTradeHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesTradeHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get download id for futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1000
     *
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {GetDownloadIdForFuturesTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Transaction-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesTransactionHistory(
        requestParameters: GetDownloadIdForFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesTransactionHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesTransactionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures order history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {GetFuturesOrderHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Order-History-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesOrderHistoryDownloadLinkById(
        requestParameters: GetFuturesOrderHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesOrderHistoryDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesOrderHistoryDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {GetFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Trade-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesTradeDownloadLinkById(
        requestParameters: GetFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesTradeDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesTradeDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures transaction history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {GetFuturesTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Futures-Transaction-History-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesTransactionHistoryDownloadLinkById(
        requestParameters: GetFuturesTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesTransactionHistoryDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesTransactionHistoryDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query income history
     *
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * If `incomeType ` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same incomeType for a user
     * Income history only contains data for the last three months
     *
     * Weight: 30
     *
     * @summary Get Income History (USER_DATA)
     * @param {GetIncomeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetIncomeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Income-History Binance API Documentation}
     */
    public async getIncomeHistory(
        requestParameters: GetIncomeHistoryRequest = {}
    ): Promise<RestApiResponse<GetIncomeHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getIncomeHistory(
            requestParameters?.symbol,
            requestParameters?.incomeType,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.page,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<GetIncomeHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query user notional and leverage bracket on speicfic symbol
     *
     * Weight: 1
     *
     * @summary Notional and Leverage Brackets (USER_DATA)
     * @param {NotionalAndLeverageBracketsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NotionalAndLeverageBracketsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Notional-and-Leverage-Brackets Binance API Documentation}
     */
    public async notionalAndLeverageBrackets(
        requestParameters: NotionalAndLeverageBracketsRequest = {}
    ): Promise<RestApiResponse<NotionalAndLeverageBracketsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.notionalAndLeverageBrackets(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<NotionalAndLeverageBracketsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query User Rate Limit
     *
     * Weight: 1
     *
     * @summary Query User Rate Limit (USER_DATA)
     * @param {QueryUserRateLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserRateLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Query-Rate-Limit Binance API Documentation}
     */
    public async queryUserRateLimit(
        requestParameters: QueryUserRateLimitRequest = {}
    ): Promise<RestApiResponse<QueryUserRateLimitResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryUserRateLimit(
            requestParameters?.recvWindow
        );
        return sendRequest<QueryUserRateLimitResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get current account symbol configuration.
     *
     * Weight: 5
     *
     * @summary Symbol Configuration(USER_DATA)
     * @param {SymbolConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Symbol-Config Binance API Documentation}
     */
    public async symbolConfiguration(
        requestParameters: SymbolConfigurationRequest = {}
    ): Promise<RestApiResponse<SymbolConfigurationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.symbolConfiguration(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<SymbolConfigurationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Change user's BNB Fee Discount (Fee Discount On or Fee Discount Off ) on ***EVERY symbol***
     *
     * Weight: 1
     *
     * @summary Toggle BNB Burn On Futures Trade (TRADE)
     * @param {ToggleBnbBurnOnFuturesTradeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ToggleBnbBurnOnFuturesTradeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Toggle-BNB-Burn-On-Futures-Trade Binance API Documentation}
     */
    public async toggleBnbBurnOnFuturesTrade(
        requestParameters: ToggleBnbBurnOnFuturesTradeRequest
    ): Promise<RestApiResponse<ToggleBnbBurnOnFuturesTradeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.toggleBnbBurnOnFuturesTrade(
            requestParameters?.feeBurn,
            requestParameters?.recvWindow
        );
        return sendRequest<ToggleBnbBurnOnFuturesTradeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get User Commission Rate
     *
     * Weight: 20
     *
     * @summary User Commission Rate (USER_DATA)
     * @param {UserCommissionRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserCommissionRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/User-Commission-Rate Binance API Documentation}
     */
    public async userCommissionRate(
        requestParameters: UserCommissionRateRequest
    ): Promise<RestApiResponse<UserCommissionRateResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.userCommissionRate(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<UserCommissionRateResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
