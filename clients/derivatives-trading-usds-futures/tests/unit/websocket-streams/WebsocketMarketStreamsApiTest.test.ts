/**
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, describe, it } from '@jest/globals';
import {
    ConfigurationWebsocketStreams,
    WebsocketStreamsBase,
    replaceWebsocketStreamsPlaceholders,
} from '@binance/common';
import {
    AggregateTradeStreamsRequest,
    AllBookTickersStreamRequest,
    AllMarketLiquidationOrderStreamsRequest,
    AllMarketMiniTickersStreamRequest,
    AllMarketTickersStreamsRequest,
    CompositeIndexSymbolInformationStreamsRequest,
    ContinuousContractKlineCandlestickStreamsRequest,
    ContractInfoStreamRequest,
    DiffBookDepthStreamsRequest,
    IndividualSymbolBookTickerStreamsRequest,
    IndividualSymbolMiniTickerStreamRequest,
    IndividualSymbolTickerStreamsRequest,
    KlineCandlestickStreamsRequest,
    LiquidationOrderStreamsRequest,
    MarkPriceStreamRequest,
    MarkPriceStreamForAllMarketRequest,
    MultiAssetsModeAssetIndexRequest,
    PartialBookDepthStreamsRequest,
} from '../../../src/websocket-streams';
import { WebsocketMarketStreamsApi } from '../../../src/websocket-streams';
import { mockSubscription } from './utils';

describe('WebsocketMarketStreamsApi', () => {
    describe('aggregateTradeStreams()', () => {
        it('should execute aggregateTradeStreams() successfully', async () => {
            const params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 123456789,
                s: 'BTCUSDT',
                a: 5933014,
                p: '0.001',
                q: '100',
                f: 100,
                l: 105,
                T: 123456785,
                m: true,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@aggTrade'.slice(1), params as unknown as Record<string, AggregateTradeStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle aggregateTradeStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 123456789,
                s: 'BTCUSDT',
                a: 5933014,
                p: '0.001',
                q: '100',
                f: 100,
                l: 105,
                T: 123456785,
                m: true,
            };

            const stream = websocketStreamApi.aggregateTradeStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@aggTrade'.slice(1),
                        params as unknown as Record<string, AggregateTradeStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.aggregateTradeStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling aggregateTradeStreams.'
            );
        });
    });

    describe('allBookTickersStream()', () => {
        it('should execute allBookTickersStream() successfully', async () => {
            const params: AllBookTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 400900217,
                E: 1568014460893,
                T: 1568014460891,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!bookTicker'.slice(1), params as unknown as Record<string, AllBookTickersStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle allBookTickersStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllBookTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 400900217,
                E: 1568014460893,
                T: 1568014460891,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            const stream = websocketStreamApi.allBookTickersStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!bookTicker'.slice(1),
                        params as unknown as Record<string, AllBookTickersStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketLiquidationOrderStreams()', () => {
        it('should execute allMarketLiquidationOrderStreams() successfully', async () => {
            const params: AllMarketLiquidationOrderStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1568014460893,
                o: {
                    s: 'BTCUSDT',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '0.014',
                    p: '9910',
                    ap: '9910',
                    X: 'FILLED',
                    l: '0.014',
                    z: '0.014',
                    T: 1568014460893,
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!forceOrder@arr'.slice(1), params as unknown as Record<string, AllMarketLiquidationOrderStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketLiquidationOrderStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketLiquidationOrderStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1568014460893,
                o: {
                    s: 'BTCUSDT',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '0.014',
                    p: '9910',
                    ap: '9910',
                    X: 'FILLED',
                    l: '0.014',
                    z: '0.014',
                    T: 1568014460893,
                },
            };

            const stream = websocketStreamApi.allMarketLiquidationOrderStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!forceOrder@arr'.slice(1),
                        params as unknown as Record<string, AllMarketLiquidationOrderStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketMiniTickersStream()', () => {
        it('should execute allMarketMiniTickersStream() successfully', async () => {
            const params: AllMarketMiniTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 123456789,
                    s: 'BTCUSDT',
                    c: '0.0025',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!miniTicker@arr'.slice(1), params as unknown as Record<string, AllMarketMiniTickersStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketMiniTickersStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketMiniTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 123456789,
                    s: 'BTCUSDT',
                    c: '0.0025',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                },
            ];

            const stream = websocketStreamApi.allMarketMiniTickersStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!miniTicker@arr'.slice(1),
                        params as unknown as Record<string, AllMarketMiniTickersStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketTickersStreams()', () => {
        it('should execute allMarketTickersStreams() successfully', async () => {
            const params: AllMarketTickersStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 123456789,
                    s: 'BTCUSDT',
                    p: '0.0015',
                    P: '250.00',
                    w: '0.0018',
                    c: '0.0025',
                    Q: '10',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 86400000,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!ticker@arr'.slice(1), params as unknown as Record<string, AllMarketTickersStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketTickersStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketTickersStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 123456789,
                    s: 'BTCUSDT',
                    p: '0.0015',
                    P: '250.00',
                    w: '0.0018',
                    c: '0.0025',
                    Q: '10',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 86400000,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            const stream = websocketStreamApi.allMarketTickersStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!ticker@arr'.slice(1),
                        params as unknown as Record<string, AllMarketTickersStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('compositeIndexSymbolInformationStreams()', () => {
        it('should execute compositeIndexSymbolInformationStreams() successfully', async () => {
            const params: CompositeIndexSymbolInformationStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'compositeIndex',
                E: 1602310596000,
                s: 'DEFIUSDT',
                p: '554.41604065',
                C: 'baseAsset',
                c: [
                    { b: 'BAL', q: 'USDT', w: '1.04884844', W: '0.01457800', i: '24.33521021' },
                    { b: 'BAND', q: 'USDT', w: '3.53782729', W: '0.03935200', i: '7.26420084' },
                ],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@compositeIndex'.slice(1), params as unknown as Record<string, CompositeIndexSymbolInformationStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle compositeIndexSymbolInformationStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: CompositeIndexSymbolInformationStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'compositeIndex',
                E: 1602310596000,
                s: 'DEFIUSDT',
                p: '554.41604065',
                C: 'baseAsset',
                c: [
                    { b: 'BAL', q: 'USDT', w: '1.04884844', W: '0.01457800', i: '24.33521021' },
                    { b: 'BAND', q: 'USDT', w: '3.53782729', W: '0.03935200', i: '7.26420084' },
                ],
            };

            const stream = websocketStreamApi.compositeIndexSymbolInformationStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@compositeIndex'.slice(1),
                        params as unknown as Record<
                            string,
                            CompositeIndexSymbolInformationStreamsRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: CompositeIndexSymbolInformationStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.compositeIndexSymbolInformationStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling compositeIndexSymbolInformationStreams.'
            );
        });
    });

    describe('continuousContractKlineCandlestickStreams()', () => {
        it('should execute continuousContractKlineCandlestickStreams() successfully', async () => {
            const params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'continuous_kline',
                E: 1607443058651,
                ps: 'BTCUSDT',
                ct: 'PERPETUAL',
                k: {
                    t: 1607443020000,
                    T: 1607443079999,
                    i: '1m',
                    f: 116467658886,
                    L: 116468012423,
                    o: '18787.00',
                    c: '18804.04',
                    h: '18804.04',
                    l: '18786.54',
                    v: '197.664',
                    n: 543,
                    x: false,
                    q: '3715253.19494',
                    V: '184.769',
                    Q: '3472925.84746',
                    B: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<pair>_<contractType>@continuousKline_<interval>'.slice(1), params as unknown as Record<string, ContinuousContractKlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle continuousContractKlineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'continuous_kline',
                E: 1607443058651,
                ps: 'BTCUSDT',
                ct: 'PERPETUAL',
                k: {
                    t: 1607443020000,
                    T: 1607443079999,
                    i: '1m',
                    f: 116467658886,
                    L: 116468012423,
                    o: '18787.00',
                    c: '18804.04',
                    h: '18804.04',
                    l: '18786.54',
                    v: '197.664',
                    n: 543,
                    x: false,
                    q: '3715253.19494',
                    V: '184.769',
                    Q: '3472925.84746',
                    B: '0',
                },
            };

            const stream = websocketStreamApi.continuousContractKlineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<pair>_<contractType>@continuousKline_<interval>'.slice(1),
                        params as unknown as Record<
                            string,
                            ContinuousContractKlineCandlestickStreamsRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when pair is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.pair;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter pair was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when contractType is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.contractType;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter contractType was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter interval was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });
    });

    describe('contractInfoStream()', () => {
        it('should execute contractInfoStream() successfully', async () => {
            const params: ContractInfoStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'contractInfo',
                E: 1669356423908,
                s: 'IOTAUSDT',
                ps: 'IOTAUSDT',
                ct: 'PERPETUAL',
                dt: 4133404800000,
                ot: 1569398400000,
                cs: 'TRADING',
                bks: [
                    { bs: 1, bnf: 0, bnc: 5000, mmr: 0.01, cf: 0, mi: 21, ma: 50 },
                    { bs: 2, bnf: 5000, bnc: 25000, mmr: 0.025, cf: 75, mi: 11, ma: 20 },
                ],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!contractInfo'.slice(1), params as unknown as Record<string, ContractInfoStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle contractInfoStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: ContractInfoStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'contractInfo',
                E: 1669356423908,
                s: 'IOTAUSDT',
                ps: 'IOTAUSDT',
                ct: 'PERPETUAL',
                dt: 4133404800000,
                ot: 1569398400000,
                cs: 'TRADING',
                bks: [
                    { bs: 1, bnf: 0, bnc: 5000, mmr: 0.01, cf: 0, mi: 21, ma: 50 },
                    { bs: 2, bnf: 5000, bnc: 25000, mmr: 0.025, cf: 75, mi: 11, ma: 20 },
                ],
            };

            const stream = websocketStreamApi.contractInfoStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!contractInfo'.slice(1),
                        params as unknown as Record<string, ContractInfoStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('diffBookDepthStreams()', () => {
        it('should execute diffBookDepthStreams() successfully', async () => {
            const params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 123456789,
                T: 123456788,
                s: 'BTCUSDT',
                U: 157,
                u: 160,
                pu: 149,
                b: [['0.0024', '10']],
                a: [['0.0026', '100']],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<updateSpeed>'.slice(1), params as unknown as Record<string, DiffBookDepthStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle diffBookDepthStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 123456789,
                T: 123456788,
                s: 'BTCUSDT',
                U: 157,
                u: 160,
                pu: 149,
                b: [['0.0024', '10']],
                a: [['0.0026', '100']],
            };

            const stream = websocketStreamApi.diffBookDepthStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<updateSpeed>'.slice(1),
                        params as unknown as Record<string, DiffBookDepthStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.diffBookDepthStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling diffBookDepthStreams.'
            );
        });
    });

    describe('individualSymbolBookTickerStreams()', () => {
        it('should execute individualSymbolBookTickerStreams() successfully', async () => {
            const params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 400900217,
                E: 1568014460893,
                T: 1568014460891,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@bookTicker'.slice(1), params as unknown as Record<string, IndividualSymbolBookTickerStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolBookTickerStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 400900217,
                E: 1568014460893,
                T: 1568014460891,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            const stream = websocketStreamApi.individualSymbolBookTickerStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@bookTicker'.slice(1),
                        params as unknown as Record<
                            string,
                            IndividualSymbolBookTickerStreamsRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolBookTickerStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolBookTickerStreams.'
            );
        });
    });

    describe('individualSymbolMiniTickerStream()', () => {
        it('should execute individualSymbolMiniTickerStream() successfully', async () => {
            const params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 123456789,
                s: 'BTCUSDT',
                c: '0.0025',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@miniTicker'.slice(1), params as unknown as Record<string, IndividualSymbolMiniTickerStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolMiniTickerStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 123456789,
                s: 'BTCUSDT',
                c: '0.0025',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
            };

            const stream = websocketStreamApi.individualSymbolMiniTickerStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@miniTicker'.slice(1),
                        params as unknown as Record<string, IndividualSymbolMiniTickerStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolMiniTickerStream(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolMiniTickerStream.'
            );
        });
    });

    describe('individualSymbolTickerStreams()', () => {
        it('should execute individualSymbolTickerStreams() successfully', async () => {
            const params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 123456789,
                s: 'BTCUSDT',
                p: '0.0015',
                P: '250.00',
                w: '0.0018',
                c: '0.0025',
                Q: '10',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
                O: 0,
                C: 86400000,
                F: 0,
                L: 18150,
                n: 18151,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), params as unknown as Record<string, IndividualSymbolTickerStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolTickerStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 123456789,
                s: 'BTCUSDT',
                p: '0.0015',
                P: '250.00',
                w: '0.0018',
                c: '0.0025',
                Q: '10',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
                O: 0,
                C: 86400000,
                F: 0,
                L: 18150,
                n: 18151,
            };

            const stream = websocketStreamApi.individualSymbolTickerStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@ticker'.slice(1),
                        params as unknown as Record<string, IndividualSymbolTickerStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolTickerStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolTickerStreams.'
            );
        });
    });

    describe('klineCandlestickStreams()', () => {
        it('should execute klineCandlestickStreams() successfully', async () => {
            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1638747660000,
                s: 'BTCUSDT',
                k: {
                    t: 1638747660000,
                    T: 1638747719999,
                    s: 'BTCUSDT',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), params as unknown as Record<string, KlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle klineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1638747660000,
                s: 'BTCUSDT',
                k: {
                    t: 1638747660000,
                    T: 1638747719999,
                    s: 'BTCUSDT',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            const stream = websocketStreamApi.klineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@kline_<interval>'.slice(1),
                        params as unknown as Record<string, KlineCandlestickStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling klineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter interval was null or undefined when calling klineCandlestickStreams.'
            );
        });
    });

    describe('liquidationOrderStreams()', () => {
        it('should execute liquidationOrderStreams() successfully', async () => {
            const params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1568014460893,
                o: {
                    s: 'BTCUSDT',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '0.014',
                    p: '9910',
                    ap: '9910',
                    X: 'FILLED',
                    l: '0.014',
                    z: '0.014',
                    T: 1568014460893,
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@forceOrder'.slice(1), params as unknown as Record<string, LiquidationOrderStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle liquidationOrderStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1568014460893,
                o: {
                    s: 'BTCUSDT',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '0.014',
                    p: '9910',
                    ap: '9910',
                    X: 'FILLED',
                    l: '0.014',
                    z: '0.014',
                    T: 1568014460893,
                },
            };

            const stream = websocketStreamApi.liquidationOrderStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@forceOrder'.slice(1),
                        params as unknown as Record<string, LiquidationOrderStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.liquidationOrderStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling liquidationOrderStreams.'
            );
        });
    });

    describe('markPriceStream()', () => {
        it('should execute markPriceStream() successfully', async () => {
            const params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'markPriceUpdate',
                E: 1562305380000,
                s: 'BTCUSDT',
                p: '11794.15000000',
                i: '11784.62659091',
                P: '11784.25641265',
                r: '0.00038167',
                T: 1562306400000,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@markPrice<updateSpeed>'.slice(1), params as unknown as Record<string, MarkPriceStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPriceStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'markPriceUpdate',
                E: 1562305380000,
                s: 'BTCUSDT',
                p: '11794.15000000',
                i: '11784.62659091',
                P: '11784.25641265',
                r: '0.00038167',
                T: 1562306400000,
            };

            const stream = websocketStreamApi.markPriceStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@markPrice<updateSpeed>'.slice(1),
                        params as unknown as Record<string, MarkPriceStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.markPriceStream(params)).toThrow(
                'Required parameter symbol was null or undefined when calling markPriceStream.'
            );
        });
    });

    describe('markPriceStreamForAllMarket()', () => {
        it('should execute markPriceStreamForAllMarket() successfully', async () => {
            const params: MarkPriceStreamForAllMarketRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = [
                {
                    e: 'markPriceUpdate',
                    E: 1562305380000,
                    s: 'BTCUSDT',
                    p: '11185.87786614',
                    i: '11784.62659091',
                    P: '11784.25641265',
                    r: '0.00030000',
                    T: 1562306400000,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!markPrice@arr<updateSpeed>'.slice(1), params as unknown as Record<string, MarkPriceStreamForAllMarketRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPriceStreamForAllMarket() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceStreamForAllMarketRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = [
                {
                    e: 'markPriceUpdate',
                    E: 1562305380000,
                    s: 'BTCUSDT',
                    p: '11185.87786614',
                    i: '11784.62659091',
                    P: '11784.25641265',
                    r: '0.00030000',
                    T: 1562306400000,
                },
            ];

            const stream = websocketStreamApi.markPriceStreamForAllMarket(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!markPrice@arr<updateSpeed>'.slice(1),
                        params as unknown as Record<string, MarkPriceStreamForAllMarketRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('multiAssetsModeAssetIndex()', () => {
        it('should execute multiAssetsModeAssetIndex() successfully', async () => {
            const params: MultiAssetsModeAssetIndexRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: 'assetIndexUpdate',
                    E: 1686749230000,
                    s: 'ADAUSD',
                    i: '0.27462452',
                    b: '0.10000000',
                    a: '0.10000000',
                    B: '0.24716207',
                    A: '0.30208698',
                    q: '0.05000000',
                    g: '0.05000000',
                    Q: '0.26089330',
                    G: '0.28835575',
                },
                {
                    e: 'assetIndexUpdate',
                    E: 1686749230000,
                    s: 'USDTUSD',
                    i: '0.99987691',
                    b: '0.00010000',
                    a: '0.00010000',
                    B: '0.99977692',
                    A: '0.99997689',
                    q: '0.00010000',
                    g: '0.00010000',
                    Q: '0.99977692',
                    G: '0.99997689',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!assetIndex@arr'.slice(1), params as unknown as Record<string, MultiAssetsModeAssetIndexRequest>)}`,
                mockResponse
            );
        });

        it('should handle multiAssetsModeAssetIndex() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MultiAssetsModeAssetIndexRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: 'assetIndexUpdate',
                    E: 1686749230000,
                    s: 'ADAUSD',
                    i: '0.27462452',
                    b: '0.10000000',
                    a: '0.10000000',
                    B: '0.24716207',
                    A: '0.30208698',
                    q: '0.05000000',
                    g: '0.05000000',
                    Q: '0.26089330',
                    G: '0.28835575',
                },
                {
                    e: 'assetIndexUpdate',
                    E: 1686749230000,
                    s: 'USDTUSD',
                    i: '0.99987691',
                    b: '0.00010000',
                    a: '0.00010000',
                    B: '0.99977692',
                    A: '0.99997689',
                    q: '0.00010000',
                    g: '0.00010000',
                    Q: '0.99977692',
                    G: '0.99997689',
                },
            ];

            const stream = websocketStreamApi.multiAssetsModeAssetIndex(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!assetIndex@arr'.slice(1),
                        params as unknown as Record<string, MultiAssetsModeAssetIndexRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('partialBookDepthStreams()', () => {
        it('should execute partialBookDepthStreams() successfully', async () => {
            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1571889248277,
                T: 1571889248276,
                s: 'BTCUSDT',
                U: 390497796,
                u: 390497878,
                pu: 390497794,
                b: [
                    ['7403.89', '0.002'],
                    ['7403.90', '3.906'],
                    ['7404.00', '1.428'],
                    ['7404.85', '5.239'],
                    ['7405.43', '2.562'],
                ],
                a: [
                    ['7405.96', '3.340'],
                    ['7406.63', '4.525'],
                    ['7407.08', '2.475'],
                    ['7407.15', '4.800'],
                    ['7407.20', '0.175'],
                ],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<levels><updateSpeed>'.slice(1), params as unknown as Record<string, PartialBookDepthStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle partialBookDepthStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1571889248277,
                T: 1571889248276,
                s: 'BTCUSDT',
                U: 390497796,
                u: 390497878,
                pu: 390497794,
                b: [
                    ['7403.89', '0.002'],
                    ['7403.90', '3.906'],
                    ['7404.00', '1.428'],
                    ['7404.85', '5.239'],
                    ['7405.43', '2.562'],
                ],
                a: [
                    ['7405.96', '3.340'],
                    ['7406.63', '4.525'],
                    ['7407.08', '2.475'],
                    ['7407.15', '4.800'],
                    ['7407.20', '0.175'],
                ],
            };

            const stream = websocketStreamApi.partialBookDepthStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<levels><updateSpeed>'.slice(1),
                        params as unknown as Record<string, PartialBookDepthStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling partialBookDepthStreams.'
            );
        });

        it('should throw RequiredError when levels is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.levels;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter levels was null or undefined when calling partialBookDepthStreams.'
            );
        });
    });
});
