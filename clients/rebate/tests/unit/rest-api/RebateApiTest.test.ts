/**
 * Binance Public Rebate REST API
 *
 * OpenAPI Specification for the Binance Public Rebate REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { RebateApi } from '../../../src/rest-api';
import { GetSpotRebateHistoryRecordsRequest } from '../../../src/rest-api';
import type { GetSpotRebateHistoryRecordsResponse } from '../../../src/rest-api/types';

describe('RebateApi', () => {
    let client: RebateApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new RebateApi(config);
    });

    describe('getSpotRebateHistoryRecords()', () => {
        it('should execute getSpotRebateHistoryRecords() successfully with required parameters only', async () => {
            mockResponse = {
                status: 'OK',
                type: 'GENERAL',
                code: '000000000',
                data: {
                    page: 1,
                    totalRecords: 2,
                    totalPageNum: 1,
                    data: [
                        { asset: 'USDT', type: 1, amount: '0.0001126', updateTime: 1637651320000 },
                        { asset: 'ETH', type: 1, amount: '0.00000056', updateTime: 1637928379000 },
                    ],
                },
            };

            const spy = jest.spyOn(client, 'getSpotRebateHistoryRecords').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetSpotRebateHistoryRecordsResponse>)
            );
            const response = await client.getSpotRebateHistoryRecords();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getSpotRebateHistoryRecords() successfully with optional parameters', async () => {
            const params: GetSpotRebateHistoryRecordsRequest = {
                startTime: 1623319461670,
                endTime: 1641782889000,
                page: 1,
                recvWindow: 5000,
            };

            mockResponse = {
                status: 'OK',
                type: 'GENERAL',
                code: '000000000',
                data: {
                    page: 1,
                    totalRecords: 2,
                    totalPageNum: 1,
                    data: [
                        { asset: 'USDT', type: 1, amount: '0.0001126', updateTime: 1637651320000 },
                        { asset: 'ETH', type: 1, amount: '0.00000056', updateTime: 1637928379000 },
                    ],
                },
            };

            const spy = jest.spyOn(client, 'getSpotRebateHistoryRecords').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetSpotRebateHistoryRecordsResponse>)
            );
            const response = await client.getSpotRebateHistoryRecords(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getSpotRebateHistoryRecords')
                .mockRejectedValueOnce(mockError);
            await expect(client.getSpotRebateHistoryRecords()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
