/**
 * Binance Public NFT REST API
 *
 * OpenAPI Specification for the Binance Public NFT REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetNFTAssetResponse,
    GetNFTDepositHistoryResponse,
    GetNFTTransactionHistoryResponse,
    GetNFTWithdrawHistoryResponse,
} from '../types';

/**
 * NftApi - axios parameter creator
 */
const NftApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get NFT Asset
         *
         * Weight: 3000
         *
         * @summary Get NFT Asset(USER_DATA)
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getNFTAsset: async (
            limit?: number,
            page?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/nft/user/getAsset',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * et NFT Deposit History
         *
         *
         * The max interval between startTime and endTime is 90 days.
         * If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         * Weight: 3000
         *
         * @summary Get NFT Deposit History(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getNFTDepositHistory: async (
            startTime?: number,
            endTime?: number,
            limit?: number,
            page?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/nft/history/deposit',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get NFT Transaction History
         *
         * The max interval between startTime and endTime is 90 days.
         * If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         * Weight: 3000
         *
         * @summary Get NFT Transaction History(USER_DATA)
         * @param {number} orderType 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getNFTTransactionHistory: async (
            orderType: number,
            startTime?: number,
            endTime?: number,
            limit?: number,
            page?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'orderType' is not null or undefined
            assertParamExists('getNFTTransactionHistory', 'orderType', orderType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (orderType !== undefined && orderType !== null) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/nft/history/transactions',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get NFT Withdraw History
         *
         * The max interval between startTime and endTime is 90 days.
         * If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         * Weight: 3000
         *
         * @summary Get NFT Withdraw History(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default 50, Max 50
         * @param {number} [page] Default 1
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getNFTWithdrawHistory: async (
            startTime?: number,
            endTime?: number,
            limit?: number,
            page?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/nft/history/withdraw',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * NftApi - interface
 * @interface NftApi
 */
export interface NftApiInterface {
    /**
     * Get NFT Asset
     *
     * Weight: 3000
     *
     * @summary Get NFT Asset(USER_DATA)
     * @param {GetNFTAssetRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApiInterface
     */
    getNFTAsset(
        requestParameters?: GetNFTAssetRequest
    ): Promise<RestApiResponse<GetNFTAssetResponse>>;
    /**
     * et NFT Deposit History
     *
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Deposit History(USER_DATA)
     * @param {GetNFTDepositHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApiInterface
     */
    getNFTDepositHistory(
        requestParameters?: GetNFTDepositHistoryRequest
    ): Promise<RestApiResponse<GetNFTDepositHistoryResponse>>;
    /**
     * Get NFT Transaction History
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Transaction History(USER_DATA)
     * @param {GetNFTTransactionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApiInterface
     */
    getNFTTransactionHistory(
        requestParameters: GetNFTTransactionHistoryRequest
    ): Promise<RestApiResponse<GetNFTTransactionHistoryResponse>>;
    /**
     * Get NFT Withdraw History
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Withdraw History(USER_DATA)
     * @param {GetNFTWithdrawHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApiInterface
     */
    getNFTWithdrawHistory(
        requestParameters?: GetNFTWithdrawHistoryRequest
    ): Promise<RestApiResponse<GetNFTWithdrawHistoryResponse>>;
}

/**
 * Request parameters for getNFTAsset operation in NftApi.
 * @interface GetNFTAssetRequest
 */
export interface GetNFTAssetRequest {
    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNFTAsset
     */
    readonly limit?: number;

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNFTAsset
     */
    readonly page?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTAsset
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getNFTDepositHistory operation in NftApi.
 * @interface GetNFTDepositHistoryRequest
 */
export interface GetNFTDepositHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTDepositHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTDepositHistory
     */
    readonly endTime?: number;

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNFTDepositHistory
     */
    readonly limit?: number;

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNFTDepositHistory
     */
    readonly page?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTDepositHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getNFTTransactionHistory operation in NftApi.
 * @interface GetNFTTransactionHistoryRequest
 */
export interface GetNFTTransactionHistoryRequest {
    /**
     * 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly orderType: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly endTime?: number;

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly limit?: number;

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly page?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTTransactionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getNFTWithdrawHistory operation in NftApi.
 * @interface GetNFTWithdrawHistoryRequest
 */
export interface GetNFTWithdrawHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTWithdrawHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTWithdrawHistory
     */
    readonly endTime?: number;

    /**
     * Default 50, Max 50
     * @type {number}
     * @memberof NftApiGetNFTWithdrawHistory
     */
    readonly limit?: number;

    /**
     * Default 1
     * @type {number}
     * @memberof NftApiGetNFTWithdrawHistory
     */
    readonly page?: number;

    /**
     *
     * @type {number}
     * @memberof NftApiGetNFTWithdrawHistory
     */
    readonly recvWindow?: number;
}

/**
 * NftApi - object-oriented interface
 * @class NftApi
 */
export class NftApi implements NftApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = NftApiAxiosParamCreator(configuration);
    }

    /**
     * Get NFT Asset
     *
     * Weight: 3000
     *
     * @summary Get NFT Asset(USER_DATA)
     * @param {GetNFTAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetNFTAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApi
     * @see {@link https://developers.binance.com/docs/nft/rest-api/Get-NFT-Asset Binance API Documentation}
     */
    public async getNFTAsset(
        requestParameters: GetNFTAssetRequest = {}
    ): Promise<RestApiResponse<GetNFTAssetResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getNFTAsset(
            requestParameters?.limit,
            requestParameters?.page,
            requestParameters?.recvWindow
        );
        return sendRequest<GetNFTAssetResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * et NFT Deposit History
     *
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Deposit History(USER_DATA)
     * @param {GetNFTDepositHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetNFTDepositHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApi
     * @see {@link https://developers.binance.com/docs/nft/rest-api/Get-NFT-Deposit-History Binance API Documentation}
     */
    public async getNFTDepositHistory(
        requestParameters: GetNFTDepositHistoryRequest = {}
    ): Promise<RestApiResponse<GetNFTDepositHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getNFTDepositHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.page,
            requestParameters?.recvWindow
        );
        return sendRequest<GetNFTDepositHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get NFT Transaction History
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Transaction History(USER_DATA)
     * @param {GetNFTTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetNFTTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApi
     * @see {@link https://developers.binance.com/docs/nft/rest-api/Get-NFT-Transaction-History Binance API Documentation}
     */
    public async getNFTTransactionHistory(
        requestParameters: GetNFTTransactionHistoryRequest
    ): Promise<RestApiResponse<GetNFTTransactionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getNFTTransactionHistory(
            requestParameters?.orderType,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.page,
            requestParameters?.recvWindow
        );
        return sendRequest<GetNFTTransactionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get NFT Withdraw History
     *
     * The max interval between startTime and endTime is 90 days.
     * If startTime and endTime are not sent, the recent 7 days' data will be returned.
     *
     * Weight: 3000
     *
     * @summary Get NFT Withdraw History(USER_DATA)
     * @param {GetNFTWithdrawHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetNFTWithdrawHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof NftApi
     * @see {@link https://developers.binance.com/docs/nft/rest-api/Get-NFT-Withdraw-History Binance API Documentation}
     */
    public async getNFTWithdrawHistory(
        requestParameters: GetNFTWithdrawHistoryRequest = {}
    ): Promise<RestApiResponse<GetNFTWithdrawHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getNFTWithdrawHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.page,
            requestParameters?.recvWindow
        );
        return sendRequest<GetNFTWithdrawHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
