/**
 * Binance Public Sub Account REST API
 *
 * OpenAPI Specification for the Binance Public Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { ApiManagementApi } from '../../../src/rest-api';
import {
    AddIpRestrictionForSubAccountApiKeyRequest,
    DeleteIpListForASubAccountApiKeyRequest,
    GetIpRestrictionForASubAccountApiKeyRequest,
} from '../../../src/rest-api';
import type {
    AddIpRestrictionForSubAccountApiKeyResponse,
    DeleteIpListForASubAccountApiKeyResponse,
    GetIpRestrictionForASubAccountApiKeyResponse,
} from '../../../src/rest-api/types';

describe('ApiManagementApi', () => {
    let client: ApiManagementApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new ApiManagementApi(config);
    });

    describe('addIpRestrictionForSubAccountApiKey()', () => {
        it('should execute addIpRestrictionForSubAccountApiKey() successfully with required parameters only', async () => {
            const params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
            };

            mockResponse = {
                status: '2',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'addIpRestrictionForSubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>)
            );
            const response = await client.addIpRestrictionForSubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute addIpRestrictionForSubAccountApiKey() successfully with optional parameters', async () => {
            const params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
                ipAddress: 'ipAddress_example',
                recvWindow: 5000,
            };

            mockResponse = {
                status: '2',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'addIpRestrictionForSubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>)
            );
            const response = await client.addIpRestrictionForSubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when email is missing', async () => {
            const _params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.email;

            await expect(client.addIpRestrictionForSubAccountApiKey(params)).rejects.toThrow(
                'Required parameter email was null or undefined when calling addIpRestrictionForSubAccountApiKey.'
            );
        });

        it('should throw RequiredError when subAccountApiKey is missing', async () => {
            const _params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.subAccountApiKey;

            await expect(client.addIpRestrictionForSubAccountApiKey(params)).rejects.toThrow(
                'Required parameter subAccountApiKey was null or undefined when calling addIpRestrictionForSubAccountApiKey.'
            );
        });

        it('should throw RequiredError when status is missing', async () => {
            const _params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.status;

            await expect(client.addIpRestrictionForSubAccountApiKey(params)).rejects.toThrow(
                'Required parameter status was null or undefined when calling addIpRestrictionForSubAccountApiKey.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: AddIpRestrictionForSubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                status: 'status_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'addIpRestrictionForSubAccountApiKey')
                .mockRejectedValueOnce(mockError);
            await expect(client.addIpRestrictionForSubAccountApiKey(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });

    describe('deleteIpListForASubAccountApiKey()', () => {
        it('should execute deleteIpListForASubAccountApiKey() successfully with required parameters only', async () => {
            const params: DeleteIpListForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };

            mockResponse = {
                ipRestrict: 'true',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'deleteIpListForASubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<DeleteIpListForASubAccountApiKeyResponse>)
            );
            const response = await client.deleteIpListForASubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute deleteIpListForASubAccountApiKey() successfully with optional parameters', async () => {
            const params: DeleteIpListForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                ipAddress: 'ipAddress_example',
                recvWindow: 5000,
            };

            mockResponse = {
                ipRestrict: 'true',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'deleteIpListForASubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<DeleteIpListForASubAccountApiKeyResponse>)
            );
            const response = await client.deleteIpListForASubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when email is missing', async () => {
            const _params: DeleteIpListForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.email;

            await expect(client.deleteIpListForASubAccountApiKey(params)).rejects.toThrow(
                'Required parameter email was null or undefined when calling deleteIpListForASubAccountApiKey.'
            );
        });

        it('should throw RequiredError when subAccountApiKey is missing', async () => {
            const _params: DeleteIpListForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.subAccountApiKey;

            await expect(client.deleteIpListForASubAccountApiKey(params)).rejects.toThrow(
                'Required parameter subAccountApiKey was null or undefined when calling deleteIpListForASubAccountApiKey.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: DeleteIpListForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'deleteIpListForASubAccountApiKey')
                .mockRejectedValueOnce(mockError);
            await expect(client.deleteIpListForASubAccountApiKey(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });

    describe('getIpRestrictionForASubAccountApiKey()', () => {
        it('should execute getIpRestrictionForASubAccountApiKey() successfully with required parameters only', async () => {
            const params: GetIpRestrictionForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };

            mockResponse = {
                ipRestrict: 'true',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'getIpRestrictionForASubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>)
            );
            const response = await client.getIpRestrictionForASubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getIpRestrictionForASubAccountApiKey() successfully with optional parameters', async () => {
            const params: GetIpRestrictionForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
                recvWindow: 5000,
            };

            mockResponse = {
                ipRestrict: 'true',
                ipList: ['69.210.67.14', '8.34.21.10'],
                updateTime: 1636371437000,
                apiKey: 'k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf',
            };

            const spy = jest.spyOn(client, 'getIpRestrictionForASubAccountApiKey').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>)
            );
            const response = await client.getIpRestrictionForASubAccountApiKey(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when email is missing', async () => {
            const _params: GetIpRestrictionForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.email;

            await expect(client.getIpRestrictionForASubAccountApiKey(params)).rejects.toThrow(
                'Required parameter email was null or undefined when calling getIpRestrictionForASubAccountApiKey.'
            );
        });

        it('should throw RequiredError when subAccountApiKey is missing', async () => {
            const _params: GetIpRestrictionForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.subAccountApiKey;

            await expect(client.getIpRestrictionForASubAccountApiKey(params)).rejects.toThrow(
                'Required parameter subAccountApiKey was null or undefined when calling getIpRestrictionForASubAccountApiKey.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: GetIpRestrictionForASubAccountApiKeyRequest = {
                email: 'sub-account-email@email.com',
                subAccountApiKey: 'subAccountApiKey_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getIpRestrictionForASubAccountApiKey')
                .mockRejectedValueOnce(mockError);
            await expect(client.getIpRestrictionForASubAccountApiKey(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });
});
