/**
 * Binance Public Sub Account REST API
 *
 * OpenAPI Specification for the Binance Public Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CreateAVirtualSubAccountResponse,
    EnableFuturesForSubAccountResponse,
    EnableLeverageTokenForSubAccountResponse,
    EnableMarginForSubAccountResponse,
    EnableOptionsForSubAccountResponse,
    GetFuturesPositionRiskOfSubAccountResponse,
    GetFuturesPositionRiskOfSubAccountV2Response,
    GetSubAccountsStatusOnMarginOrFuturesResponse,
    QuerySubAccountListResponse,
    QuerySubAccountTransactionStatisticsResponse,
} from '../types';

/**
 * AccountManagementApi - axios parameter creator
 */
const AccountManagementApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Create a Virtual Sub-account
         *
         * This request will generate a virtual sub account under your master account.
         * You need to enable "trade" option for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString Please input a string. We will create a virtual email using that string for you to register
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        createAVirtualSubAccount: async (
            subAccountString: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'subAccountString' is not null or undefined
            assertParamExists('createAVirtualSubAccount', 'subAccountString', subAccountString);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (subAccountString !== undefined && subAccountString !== null) {
                localVarQueryParameter['subAccountString'] = subAccountString;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/virtualSubAccount',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable Futures for Sub-account for Master Account
         *
         * Weight: 1
         *
         * @summary Enable Futures for Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        enableFuturesForSubAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('enableFuturesForSubAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/enable',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable Leverage Token for Sub-account
         *
         * Weight: 1
         *
         * @summary Enable Leverage Token for Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {boolean} enableBlvt Only true for now
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        enableLeverageTokenForSubAccount: async (
            email: string,
            enableBlvt: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('enableLeverageTokenForSubAccount', 'email', email);
            // verify required parameter 'enableBlvt' is not null or undefined
            assertParamExists('enableLeverageTokenForSubAccount', 'enableBlvt', enableBlvt);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (enableBlvt !== undefined && enableBlvt !== null) {
                localVarQueryParameter['enableBlvt'] = enableBlvt;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/blvt/enable',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable Margin for Sub-account
         *
         * Weight: 1
         *
         * @summary Enable Margin for Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        enableMarginForSubAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('enableMarginForSubAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/margin/enable',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable Options for Sub-account (For Master Account).
         *
         * Weight: 1
         *
         * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        enableOptionsForSubAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('enableOptionsForSubAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/eoptions/enable',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account
         *
         * Weight: 10
         *
         * @summary Get Futures Position-Risk of Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesPositionRiskOfSubAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getFuturesPositionRiskOfSubAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/positionRisk',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Futures Position-Risk of Sub-account V2
         *
         * Weight: 1
         *
         * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} futuresType 1:USDT-margined Futures，2: Coin-margined Futures
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesPositionRiskOfSubAccountV2: async (
            email: string,
            futuresType: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getFuturesPositionRiskOfSubAccountV2', 'email', email);
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getFuturesPositionRiskOfSubAccountV2', 'futuresType', futuresType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined && futuresType !== null) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/sub-account/futures/positionRisk',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Sub-account's Status on Margin Or Futures
         *
         * If no email sent, all sub-accounts' information will be returned.
         *
         * Weight: 10
         *
         * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
         * @param {string} [email] Managed sub-account email
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSubAccountsStatusOnMarginOrFutures: async (
            email?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/status',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Sub-account List
         *
         * Weight: 1
         *
         * @summary Query Sub-account List(For Master Account)
         * @param {string} [email] Managed sub-account email
         * @param {string} [isFreeze] true or false
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountList: async (
            email?: string,
            isFreeze?: string,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (isFreeze !== undefined && isFreeze !== null) {
                localVarQueryParameter['isFreeze'] = isFreeze;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).
         *
         * Weight: 60
         *
         * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountTransactionStatistics: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('querySubAccountTransactionStatistics', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/transaction-statistics',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountManagementApi - interface
 * @interface AccountManagementApi
 */
export interface AccountManagementApiInterface {
    /**
     * Create a Virtual Sub-account
     *
     * This request will generate a virtual sub account under your master account.
     * You need to enable "trade" option for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {CreateAVirtualSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    createAVirtualSubAccount(
        requestParameters: CreateAVirtualSubAccountRequest
    ): Promise<RestApiResponse<CreateAVirtualSubAccountResponse>>;
    /**
     * Enable Futures for Sub-account for Master Account
     *
     * Weight: 1
     *
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {EnableFuturesForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    enableFuturesForSubAccount(
        requestParameters: EnableFuturesForSubAccountRequest
    ): Promise<RestApiResponse<EnableFuturesForSubAccountResponse>>;
    /**
     * Enable Leverage Token for Sub-account
     *
     * Weight: 1
     *
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {EnableLeverageTokenForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    enableLeverageTokenForSubAccount(
        requestParameters: EnableLeverageTokenForSubAccountRequest
    ): Promise<RestApiResponse<EnableLeverageTokenForSubAccountResponse>>;
    /**
     * Enable Margin for Sub-account
     *
     * Weight: 1
     *
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {EnableMarginForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    enableMarginForSubAccount(
        requestParameters: EnableMarginForSubAccountRequest
    ): Promise<RestApiResponse<EnableMarginForSubAccountResponse>>;
    /**
     * Enable Options for Sub-account (For Master Account).
     *
     * Weight: 1
     *
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {EnableOptionsForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    enableOptionsForSubAccount(
        requestParameters: EnableOptionsForSubAccountRequest
    ): Promise<RestApiResponse<EnableOptionsForSubAccountResponse>>;
    /**
     * Get Futures Position-Risk of Sub-account
     *
     * Weight: 10
     *
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {GetFuturesPositionRiskOfSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    getFuturesPositionRiskOfSubAccount(
        requestParameters: GetFuturesPositionRiskOfSubAccountRequest
    ): Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountResponse>>;
    /**
     * Get Futures Position-Risk of Sub-account V2
     *
     * Weight: 1
     *
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {GetFuturesPositionRiskOfSubAccountV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    getFuturesPositionRiskOfSubAccountV2(
        requestParameters: GetFuturesPositionRiskOfSubAccountV2Request
    ): Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountV2Response>>;
    /**
     * Get Sub-account's Status on Margin Or Futures
     *
     * If no email sent, all sub-accounts' information will be returned.
     *
     * Weight: 10
     *
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {GetSubAccountsStatusOnMarginOrFuturesRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    getSubAccountsStatusOnMarginOrFutures(
        requestParameters?: GetSubAccountsStatusOnMarginOrFuturesRequest
    ): Promise<RestApiResponse<GetSubAccountsStatusOnMarginOrFuturesResponse>>;
    /**
     * Query Sub-account List
     *
     * Weight: 1
     *
     * @summary Query Sub-account List(For Master Account)
     * @param {QuerySubAccountListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    querySubAccountList(
        requestParameters?: QuerySubAccountListRequest
    ): Promise<RestApiResponse<QuerySubAccountListResponse>>;
    /**
     * Query Sub-account Transaction statistics (For Master Account).
     *
     * Weight: 60
     *
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {QuerySubAccountTransactionStatisticsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApiInterface
     */
    querySubAccountTransactionStatistics(
        requestParameters: QuerySubAccountTransactionStatisticsRequest
    ): Promise<RestApiResponse<QuerySubAccountTransactionStatisticsResponse>>;
}

/**
 * Request parameters for createAVirtualSubAccount operation in AccountManagementApi.
 * @interface CreateAVirtualSubAccountRequest
 */
export interface CreateAVirtualSubAccountRequest {
    /**
     * Please input a string. We will create a virtual email using that string for you to register
     * @type {string}
     * @memberof AccountManagementApiCreateAVirtualSubAccount
     */
    readonly subAccountString: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiCreateAVirtualSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableFuturesForSubAccount operation in AccountManagementApi.
 * @interface EnableFuturesForSubAccountRequest
 */
export interface EnableFuturesForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiEnableFuturesForSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiEnableFuturesForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableLeverageTokenForSubAccount operation in AccountManagementApi.
 * @interface EnableLeverageTokenForSubAccountRequest
 */
export interface EnableLeverageTokenForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiEnableLeverageTokenForSubAccount
     */
    readonly email: string;

    /**
     * Only true for now
     * @type {boolean}
     * @memberof AccountManagementApiEnableLeverageTokenForSubAccount
     */
    readonly enableBlvt: boolean;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiEnableLeverageTokenForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableMarginForSubAccount operation in AccountManagementApi.
 * @interface EnableMarginForSubAccountRequest
 */
export interface EnableMarginForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiEnableMarginForSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiEnableMarginForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableOptionsForSubAccount operation in AccountManagementApi.
 * @interface EnableOptionsForSubAccountRequest
 */
export interface EnableOptionsForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiEnableOptionsForSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiEnableOptionsForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesPositionRiskOfSubAccount operation in AccountManagementApi.
 * @interface GetFuturesPositionRiskOfSubAccountRequest
 */
export interface GetFuturesPositionRiskOfSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiGetFuturesPositionRiskOfSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiGetFuturesPositionRiskOfSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesPositionRiskOfSubAccountV2 operation in AccountManagementApi.
 * @interface GetFuturesPositionRiskOfSubAccountV2Request
 */
export interface GetFuturesPositionRiskOfSubAccountV2Request {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiGetFuturesPositionRiskOfSubAccountV2
     */
    readonly email: string;

    /**
     * 1:USDT-margined Futures，2: Coin-margined Futures
     * @type {number}
     * @memberof AccountManagementApiGetFuturesPositionRiskOfSubAccountV2
     */
    readonly futuresType: number;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiGetFuturesPositionRiskOfSubAccountV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSubAccountsStatusOnMarginOrFutures operation in AccountManagementApi.
 * @interface GetSubAccountsStatusOnMarginOrFuturesRequest
 */
export interface GetSubAccountsStatusOnMarginOrFuturesRequest {
    /**
     * Managed sub-account email
     * @type {string}
     * @memberof AccountManagementApiGetSubAccountsStatusOnMarginOrFutures
     */
    readonly email?: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiGetSubAccountsStatusOnMarginOrFutures
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountList operation in AccountManagementApi.
 * @interface QuerySubAccountListRequest
 */
export interface QuerySubAccountListRequest {
    /**
     * Managed sub-account email
     * @type {string}
     * @memberof AccountManagementApiQuerySubAccountList
     */
    readonly email?: string;

    /**
     * true or false
     * @type {string}
     * @memberof AccountManagementApiQuerySubAccountList
     */
    readonly isFreeze?: string;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AccountManagementApiQuerySubAccountList
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AccountManagementApiQuerySubAccountList
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiQuerySubAccountList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountTransactionStatistics operation in AccountManagementApi.
 * @interface QuerySubAccountTransactionStatisticsRequest
 */
export interface QuerySubAccountTransactionStatisticsRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AccountManagementApiQuerySubAccountTransactionStatistics
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AccountManagementApiQuerySubAccountTransactionStatistics
     */
    readonly recvWindow?: number;
}

/**
 * AccountManagementApi - object-oriented interface
 * @class AccountManagementApi
 */
export class AccountManagementApi implements AccountManagementApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountManagementApiAxiosParamCreator(configuration);
    }

    /**
     * Create a Virtual Sub-account
     *
     * This request will generate a virtual sub account under your master account.
     * You need to enable "trade" option for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {CreateAVirtualSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CreateAVirtualSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Create-a-Virtual-Sub-account Binance API Documentation}
     */
    public async createAVirtualSubAccount(
        requestParameters: CreateAVirtualSubAccountRequest
    ): Promise<RestApiResponse<CreateAVirtualSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.createAVirtualSubAccount(
            requestParameters?.subAccountString,
            requestParameters?.recvWindow
        );
        return sendRequest<CreateAVirtualSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Enable Futures for Sub-account for Master Account
     *
     * Weight: 1
     *
     * @summary Enable Futures for Sub-account(For Master Account)
     * @param {EnableFuturesForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableFuturesForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Enable-Futures-for-Sub-account Binance API Documentation}
     */
    public async enableFuturesForSubAccount(
        requestParameters: EnableFuturesForSubAccountRequest
    ): Promise<RestApiResponse<EnableFuturesForSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.enableFuturesForSubAccount(
            requestParameters?.email,
            requestParameters?.recvWindow
        );
        return sendRequest<EnableFuturesForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Enable Leverage Token for Sub-account
     *
     * Weight: 1
     *
     * @summary Enable Leverage Token for Sub-account(For Master Account)
     * @param {EnableLeverageTokenForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableLeverageTokenForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Enable-Leverage-Token-for-Sub-account Binance API Documentation}
     */
    public async enableLeverageTokenForSubAccount(
        requestParameters: EnableLeverageTokenForSubAccountRequest
    ): Promise<RestApiResponse<EnableLeverageTokenForSubAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.enableLeverageTokenForSubAccount(
                requestParameters?.email,
                requestParameters?.enableBlvt,
                requestParameters?.recvWindow
            );
        return sendRequest<EnableLeverageTokenForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Enable Margin for Sub-account
     *
     * Weight: 1
     *
     * @summary Enable Margin for Sub-account(For Master Account)
     * @param {EnableMarginForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableMarginForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Enable-Margin-for-Sub-account Binance API Documentation}
     */
    public async enableMarginForSubAccount(
        requestParameters: EnableMarginForSubAccountRequest
    ): Promise<RestApiResponse<EnableMarginForSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.enableMarginForSubAccount(
            requestParameters?.email,
            requestParameters?.recvWindow
        );
        return sendRequest<EnableMarginForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Enable Options for Sub-account (For Master Account).
     *
     * Weight: 1
     *
     * @summary Enable Options for Sub-account(For Master Account)(USER_DATA)
     * @param {EnableOptionsForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableOptionsForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Enable-Options-for-Sub-account Binance API Documentation}
     */
    public async enableOptionsForSubAccount(
        requestParameters: EnableOptionsForSubAccountRequest
    ): Promise<RestApiResponse<EnableOptionsForSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.enableOptionsForSubAccount(
            requestParameters?.email,
            requestParameters?.recvWindow
        );
        return sendRequest<EnableOptionsForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Futures Position-Risk of Sub-account
     *
     * Weight: 10
     *
     * @summary Get Futures Position-Risk of Sub-account(For Master Account)
     * @param {GetFuturesPositionRiskOfSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account Binance API Documentation}
     */
    public async getFuturesPositionRiskOfSubAccount(
        requestParameters: GetFuturesPositionRiskOfSubAccountRequest
    ): Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesPositionRiskOfSubAccount(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesPositionRiskOfSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Futures Position-Risk of Sub-account V2
     *
     * Weight: 1
     *
     * @summary Get Futures Position-Risk of Sub-account V2(For Master Account)
     * @param {GetFuturesPositionRiskOfSubAccountV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2 Binance API Documentation}
     */
    public async getFuturesPositionRiskOfSubAccountV2(
        requestParameters: GetFuturesPositionRiskOfSubAccountV2Request
    ): Promise<RestApiResponse<GetFuturesPositionRiskOfSubAccountV2Response>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesPositionRiskOfSubAccountV2(
                requestParameters?.email,
                requestParameters?.futuresType,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesPositionRiskOfSubAccountV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Sub-account's Status on Margin Or Futures
     *
     * If no email sent, all sub-accounts' information will be returned.
     *
     * Weight: 10
     *
     * @summary Get Sub-account\'s Status on Margin Or Futures(For Master Account)
     * @param {GetSubAccountsStatusOnMarginOrFuturesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSubAccountsStatusOnMarginOrFuturesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures Binance API Documentation}
     */
    public async getSubAccountsStatusOnMarginOrFutures(
        requestParameters: GetSubAccountsStatusOnMarginOrFuturesRequest = {}
    ): Promise<RestApiResponse<GetSubAccountsStatusOnMarginOrFuturesResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSubAccountsStatusOnMarginOrFutures(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSubAccountsStatusOnMarginOrFuturesResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query Sub-account List
     *
     * Weight: 1
     *
     * @summary Query Sub-account List(For Master Account)
     * @param {QuerySubAccountListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-List Binance API Documentation}
     */
    public async querySubAccountList(
        requestParameters: QuerySubAccountListRequest = {}
    ): Promise<RestApiResponse<QuerySubAccountListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.querySubAccountList(
            requestParameters?.email,
            requestParameters?.isFreeze,
            requestParameters?.page,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<QuerySubAccountListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query Sub-account Transaction statistics (For Master Account).
     *
     * Weight: 60
     *
     * @summary Query Sub-account Transaction Statistics(For Master Account)(USER_DATA)
     * @param {QuerySubAccountTransactionStatisticsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountTransactionStatisticsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-Transaction-Statistics Binance API Documentation}
     */
    public async querySubAccountTransactionStatistics(
        requestParameters: QuerySubAccountTransactionStatisticsRequest
    ): Promise<RestApiResponse<QuerySubAccountTransactionStatisticsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubAccountTransactionStatistics(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubAccountTransactionStatisticsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
