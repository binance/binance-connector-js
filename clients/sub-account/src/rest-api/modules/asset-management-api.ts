/**
 * Binance Public Sub Account REST API
 *
 * OpenAPI Specification for the Binance Public Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    FuturesTransferForSubAccountResponse,
    GetDetailOnSubAccountsFuturesAccountResponse,
    GetDetailOnSubAccountsFuturesAccountV2Response,
    GetDetailOnSubAccountsMarginAccountResponse,
    GetSubAccountDepositAddressResponse,
    GetSubAccountDepositHistoryResponse,
    GetSummaryOfSubAccountsFuturesAccountResponse,
    GetSummaryOfSubAccountsFuturesAccountV2Response,
    GetSummaryOfSubAccountsMarginAccountResponse,
    MarginTransferForSubAccountResponse,
    QuerySubAccountAssetsAssetManagementResponse,
    QuerySubAccountAssetsResponse,
    QuerySubAccountFuturesAssetTransferHistoryResponse,
    QuerySubAccountSpotAssetTransferHistoryResponse,
    QuerySubAccountSpotAssetsSummaryResponse,
    QueryUniversalTransferHistoryResponse,
    SubAccountFuturesAssetTransferResponse,
    SubAccountTransferHistoryResponse,
    TransferToMasterResponse,
    TransferToSubAccountOfSameMasterResponse,
    UniversalTransferResponse,
} from '../types';

/**
 * AssetManagementApi - axios parameter creator
 */
const AssetManagementApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Futures Transfer for Sub-account
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Futures Transfer for Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} asset
         * @param {number} amount
         * @param {number} type 1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresTransferForSubAccount: async (
            email: string,
            asset: string,
            amount: number,
            type: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('futuresTransferForSubAccount', 'email', email);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('futuresTransferForSubAccount', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('futuresTransferForSubAccount', 'amount', amount);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('futuresTransferForSubAccount', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/transfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Detail on Sub-account's Futures Account
         *
         * Weight: 10
         *
         * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDetailOnSubAccountsFuturesAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getDetailOnSubAccountsFuturesAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Detail on Sub-account's Futures Account
         *
         * Weight: 1
         *
         * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} futuresType 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDetailOnSubAccountsFuturesAccountV2: async (
            email: string,
            futuresType: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getDetailOnSubAccountsFuturesAccountV2', 'email', email);
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('getDetailOnSubAccountsFuturesAccountV2', 'futuresType', futuresType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined && futuresType !== null) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/sub-account/futures/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Detail on Sub-account's Margin Account
         *
         * Weight: 10
         *
         * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDetailOnSubAccountsMarginAccount: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getDetailOnSubAccountsMarginAccount', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/margin/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch sub-account deposit address
         *
         * `amount` needs to be sent if using LIGHTNING network
         *
         * Weight: 1
         *
         * @summary Get Sub-account Deposit Address(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} coin
         * @param {string} [network] networks can be found in `GET /sapi/v1/capital/deposit/address`
         * @param {number} [amount]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSubAccountDepositAddress: async (
            email: string,
            coin: string,
            network?: string,
            amount?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountDepositAddress', 'email', email);
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getSubAccountDepositAddress', 'coin', coin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/subAddress',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch sub-account deposit history
         *
         * Weight: 1
         *
         * @summary Get Sub-account Deposit History(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} [coin]
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [offset] default:0
         * @param {number} [recvWindow]
         * @param {string} [txId]
         *
         * @throws {RequiredError}
         */
        getSubAccountDepositHistory: async (
            email: string,
            coin?: string,
            status?: number,
            startTime?: number,
            endTime?: number,
            limit?: number,
            offset?: number,
            recvWindow?: number,
            txId?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getSubAccountDepositHistory', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/subHisrec',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Summary of Sub-account's Futures Account
         *
         * Weight: 1
         *
         * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSummaryOfSubAccountsFuturesAccount: async (
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/accountSummary',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Summary of Sub-account's Futures Account
         *
         * Weight: 10
         *
         * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
         * @param {number} futuresType 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSummaryOfSubAccountsFuturesAccountV2: async (
            futuresType: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists(
                'getSummaryOfSubAccountsFuturesAccountV2',
                'futuresType',
                futuresType
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (futuresType !== undefined && futuresType !== null) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/sub-account/futures/accountSummary',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Summary of Sub-account's Margin Account
         *
         * Weight: 10
         *
         * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSummaryOfSubAccountsMarginAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/margin/accountSummary',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Margin Transfer for Sub-account
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Margin Transfer for Sub-account(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} asset
         * @param {number} amount
         * @param {number} type 1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        marginTransferForSubAccount: async (
            email: string,
            asset: string,
            amount: number,
            type: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('marginTransferForSubAccount', 'email', email);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginTransferForSubAccount', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('marginTransferForSubAccount', 'amount', amount);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginTransferForSubAccount', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/margin/transfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch sub-account assets
         *
         * Weight: 60
         *
         * @summary Query Sub-account Assets(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountAssets: async (email: string, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('querySubAccountAssets', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v3/sub-account/assets',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch sub-account assets
         *
         * Weight: 60
         *
         * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountAssetsAssetManagement: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('querySubAccountAssetsAssetManagement', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v4/sub-account/assets',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Sub-account Futures Asset Transfer History
         *
         * Weight: 1
         *
         * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} futuresType 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountFuturesAssetTransferHistory: async (
            email: string,
            futuresType: number,
            startTime?: number,
            endTime?: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('querySubAccountFuturesAssetTransferHistory', 'email', email);
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists(
                'querySubAccountFuturesAssetTransferHistory',
                'futuresType',
                futuresType
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined && futuresType !== null) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/internalTransfer',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Sub-account Spot Asset Transfer History
         *
         * fromEmail and toEmail cannot be sent at the same time.
         * Return fromEmail equal master account email by default.
         *
         * Weight: 1
         *
         * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
         * @param {string} [fromEmail]
         * @param {string} [toEmail]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountSpotAssetTransferHistory: async (
            fromEmail?: string,
            toEmail?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromEmail !== undefined && fromEmail !== null) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/sub/transfer/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BTC valued asset summary of subaccounts.
         *
         * Weight: 1
         *
         * @summary Query Sub-account Spot Assets Summary(For Master Account)
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [size] default 10, max 20
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubAccountSpotAssetsSummary: async (
            email?: string,
            page?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/spotSummary',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Universal Transfer History
         *
         * fromEmail and toEmail cannot be sent at the same time.
         * Return fromEmail equal master account email by default.
         * The query time period must be less than 7 days.
         * If startTime and endTime not sent, return records of the last 7 days by default.
         *
         * Weight: 1
         *
         * @summary Query Universal Transfer History(For Master Account)
         * @param {string} [fromEmail]
         * @param {string} [toEmail]
         * @param {string} [clientTranId]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryUniversalTransferHistory: async (
            fromEmail?: string,
            toEmail?: string,
            clientTranId?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromEmail !== undefined && fromEmail !== null) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (clientTranId !== undefined && clientTranId !== null) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/universalTransfer',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Sub-account Futures Asset Transfer
         *
         *
         * Master account can transfer max 2000 times a minute
         * There must be sufficient margin balance in futures wallet to execute transferring.
         *
         * Weight: 1
         *
         * @summary Sub-account Futures Asset Transfer(For Master Account)
         * @param {string} fromEmail
         * @param {string} toEmail
         * @param {number} futuresType 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
         * @param {string} asset
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subAccountFuturesAssetTransfer: async (
            fromEmail: string,
            toEmail: string,
            futuresType: number,
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('subAccountFuturesAssetTransfer', 'fromEmail', fromEmail);
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('subAccountFuturesAssetTransfer', 'toEmail', toEmail);
            // verify required parameter 'futuresType' is not null or undefined
            assertParamExists('subAccountFuturesAssetTransfer', 'futuresType', futuresType);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('subAccountFuturesAssetTransfer', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subAccountFuturesAssetTransfer', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromEmail !== undefined && fromEmail !== null) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (futuresType !== undefined && futuresType !== null) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/futures/internalTransfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Sub-account Transfer History
         *
         * If type is not sent, the records of type 2: transfer out will be returned by default.
         * If startTime and endTime are not sent, the recent 30-day data will be returned.
         *
         * Weight: 1
         *
         * @summary Sub-account Transfer History(For Sub-account)
         * @param {string} [asset] If not sent, result of all assets will be returned
         * @param {number} [type] 1: transfer in, 2: transfer out
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {boolean} [returnFailHistory] Default `False`, return PROCESS and SUCCESS status history; If `True`,return PROCESS and SUCCESS and FAILURE status history
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subAccountTransferHistory: async (
            asset?: string,
            type?: number,
            startTime?: number,
            endTime?: number,
            limit?: number,
            returnFailHistory?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (returnFailHistory !== undefined && returnFailHistory !== null) {
                localVarQueryParameter['returnFailHistory'] = returnFailHistory;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/transfer/subUserHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transfer to Master
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Transfer to Master(For Sub-account)
         * @param {string} asset
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        transferToMaster: async (
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('transferToMaster', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('transferToMaster', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/transfer/subToMaster',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transfer to Sub-account of Same Master
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Transfer to Sub-account of Same Master(For Sub-account)
         * @param {string} toEmail
         * @param {string} asset
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        transferToSubAccountOfSameMaster: async (
            toEmail: string,
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('transferToSubAccountOfSameMaster', 'toEmail', toEmail);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('transferToSubAccountOfSameMaster', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('transferToSubAccountOfSameMaster', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/transfer/subToSub',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Universal Transfer
         *
         * You need to enable "internal transfer" option for the api key which requests this endpoint.
         * Transfer from master account by default if fromEmail is not sent.
         * Transfer to master account by default if toEmail is not sent.
         * At least either fromEmail or toEmail need to be sent when the fromAccountType and the toAccountType are the same.
         * Supported transfer scenarios:
         * `SPOT` transfer to `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` (regardless of master or sub)
         * `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` transfer to `SPOT`  (regardless of master or sub)
         * Master account `SPOT` transfer to sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN`
         * Sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN` transfer to master account `SPOT`
         * Sub-account `MARGIN(Cross)` transfer to Sub-account `MARGIN(Cross)`
         *
         * Weight: 1
         *
         * @summary Universal Transfer(For Master Account)
         * @param {string} fromAccountType "SPOT","USDT_FUTURE","COIN_FUTURE","MARGIN"(Cross),"ISOLATED_MARGIN"
         * @param {string} toAccountType "SPOT","USDT_FUTURE","COIN_FUTURE","MARGIN"(Cross),"ISOLATED_MARGIN"
         * @param {string} asset
         * @param {number} amount
         * @param {string} [fromEmail]
         * @param {string} [toEmail]
         * @param {string} [clientTranId]
         * @param {string} [symbol] Only supported under ISOLATED_MARGIN type
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        universalTransfer: async (
            fromAccountType: string,
            toAccountType: string,
            asset: string,
            amount: number,
            fromEmail?: string,
            toEmail?: string,
            clientTranId?: string,
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'fromAccountType' is not null or undefined
            assertParamExists('universalTransfer', 'fromAccountType', fromAccountType);
            // verify required parameter 'toAccountType' is not null or undefined
            assertParamExists('universalTransfer', 'toAccountType', toAccountType);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('universalTransfer', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('universalTransfer', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromEmail !== undefined && fromEmail !== null) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (fromAccountType !== undefined && fromAccountType !== null) {
                localVarQueryParameter['fromAccountType'] = fromAccountType;
            }

            if (toAccountType !== undefined && toAccountType !== null) {
                localVarQueryParameter['toAccountType'] = toAccountType;
            }

            if (clientTranId !== undefined && clientTranId !== null) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/universalTransfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AssetManagementApi - interface
 * @interface AssetManagementApi
 */
export interface AssetManagementApiInterface {
    /**
     * Futures Transfer for Sub-account
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {FuturesTransferForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    futuresTransferForSubAccount(
        requestParameters: FuturesTransferForSubAccountRequest
    ): Promise<RestApiResponse<FuturesTransferForSubAccountResponse>>;
    /**
     * Get Detail on Sub-account's Futures Account
     *
     * Weight: 10
     *
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {GetDetailOnSubAccountsFuturesAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getDetailOnSubAccountsFuturesAccount(
        requestParameters: GetDetailOnSubAccountsFuturesAccountRequest
    ): Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountResponse>>;
    /**
     * Get Detail on Sub-account's Futures Account
     *
     * Weight: 1
     *
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {GetDetailOnSubAccountsFuturesAccountV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getDetailOnSubAccountsFuturesAccountV2(
        requestParameters: GetDetailOnSubAccountsFuturesAccountV2Request
    ): Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountV2Response>>;
    /**
     * Get Detail on Sub-account's Margin Account
     *
     * Weight: 10
     *
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {GetDetailOnSubAccountsMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getDetailOnSubAccountsMarginAccount(
        requestParameters: GetDetailOnSubAccountsMarginAccountRequest
    ): Promise<RestApiResponse<GetDetailOnSubAccountsMarginAccountResponse>>;
    /**
     * Fetch sub-account deposit address
     *
     * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 1
     *
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {GetSubAccountDepositAddressRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getSubAccountDepositAddress(
        requestParameters: GetSubAccountDepositAddressRequest
    ): Promise<RestApiResponse<GetSubAccountDepositAddressResponse>>;
    /**
     * Fetch sub-account deposit history
     *
     * Weight: 1
     *
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {GetSubAccountDepositHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getSubAccountDepositHistory(
        requestParameters: GetSubAccountDepositHistoryRequest
    ): Promise<RestApiResponse<GetSubAccountDepositHistoryResponse>>;
    /**
     * Get Summary of Sub-account's Futures Account
     *
     * Weight: 1
     *
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {GetSummaryOfSubAccountsFuturesAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getSummaryOfSubAccountsFuturesAccount(
        requestParameters?: GetSummaryOfSubAccountsFuturesAccountRequest
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountResponse>>;
    /**
     * Get Summary of Sub-account's Futures Account
     *
     * Weight: 10
     *
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {GetSummaryOfSubAccountsFuturesAccountV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getSummaryOfSubAccountsFuturesAccountV2(
        requestParameters: GetSummaryOfSubAccountsFuturesAccountV2Request
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountV2Response>>;
    /**
     * Get Summary of Sub-account's Margin Account
     *
     * Weight: 10
     *
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {GetSummaryOfSubAccountsMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    getSummaryOfSubAccountsMarginAccount(
        requestParameters?: GetSummaryOfSubAccountsMarginAccountRequest
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsMarginAccountResponse>>;
    /**
     * Margin Transfer for Sub-account
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {MarginTransferForSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    marginTransferForSubAccount(
        requestParameters: MarginTransferForSubAccountRequest
    ): Promise<RestApiResponse<MarginTransferForSubAccountResponse>>;
    /**
     * Fetch sub-account assets
     *
     * Weight: 60
     *
     * @summary Query Sub-account Assets(For Master Account)
     * @param {QuerySubAccountAssetsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    querySubAccountAssets(
        requestParameters: QuerySubAccountAssetsRequest
    ): Promise<RestApiResponse<QuerySubAccountAssetsResponse>>;
    /**
     * Fetch sub-account assets
     *
     * Weight: 60
     *
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {QuerySubAccountAssetsAssetManagementRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    querySubAccountAssetsAssetManagement(
        requestParameters: QuerySubAccountAssetsAssetManagementRequest
    ): Promise<RestApiResponse<QuerySubAccountAssetsAssetManagementResponse>>;
    /**
     * Query Sub-account Futures Asset Transfer History
     *
     * Weight: 1
     *
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {QuerySubAccountFuturesAssetTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    querySubAccountFuturesAssetTransferHistory(
        requestParameters: QuerySubAccountFuturesAssetTransferHistoryRequest
    ): Promise<RestApiResponse<QuerySubAccountFuturesAssetTransferHistoryResponse>>;
    /**
     * Query Sub-account Spot Asset Transfer History
     *
     * fromEmail and toEmail cannot be sent at the same time.
     * Return fromEmail equal master account email by default.
     *
     * Weight: 1
     *
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {QuerySubAccountSpotAssetTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    querySubAccountSpotAssetTransferHistory(
        requestParameters?: QuerySubAccountSpotAssetTransferHistoryRequest
    ): Promise<RestApiResponse<QuerySubAccountSpotAssetTransferHistoryResponse>>;
    /**
     * Get BTC valued asset summary of subaccounts.
     *
     * Weight: 1
     *
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {QuerySubAccountSpotAssetsSummaryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    querySubAccountSpotAssetsSummary(
        requestParameters?: QuerySubAccountSpotAssetsSummaryRequest
    ): Promise<RestApiResponse<QuerySubAccountSpotAssetsSummaryResponse>>;
    /**
     * Query Universal Transfer History
     *
     * fromEmail and toEmail cannot be sent at the same time.
     * Return fromEmail equal master account email by default.
     * The query time period must be less than 7 days.
     * If startTime and endTime not sent, return records of the last 7 days by default.
     *
     * Weight: 1
     *
     * @summary Query Universal Transfer History(For Master Account)
     * @param {QueryUniversalTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    queryUniversalTransferHistory(
        requestParameters?: QueryUniversalTransferHistoryRequest
    ): Promise<RestApiResponse<QueryUniversalTransferHistoryResponse>>;
    /**
     * Sub-account Futures Asset Transfer
     *
     *
     * Master account can transfer max 2000 times a minute
     * There must be sufficient margin balance in futures wallet to execute transferring.
     *
     * Weight: 1
     *
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {SubAccountFuturesAssetTransferRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    subAccountFuturesAssetTransfer(
        requestParameters: SubAccountFuturesAssetTransferRequest
    ): Promise<RestApiResponse<SubAccountFuturesAssetTransferResponse>>;
    /**
     * Sub-account Transfer History
     *
     * If type is not sent, the records of type 2: transfer out will be returned by default.
     * If startTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 1
     *
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {SubAccountTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    subAccountTransferHistory(
        requestParameters?: SubAccountTransferHistoryRequest
    ): Promise<RestApiResponse<SubAccountTransferHistoryResponse>>;
    /**
     * Transfer to Master
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Transfer to Master(For Sub-account)
     * @param {TransferToMasterRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    transferToMaster(
        requestParameters: TransferToMasterRequest
    ): Promise<RestApiResponse<TransferToMasterResponse>>;
    /**
     * Transfer to Sub-account of Same Master
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {TransferToSubAccountOfSameMasterRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    transferToSubAccountOfSameMaster(
        requestParameters: TransferToSubAccountOfSameMasterRequest
    ): Promise<RestApiResponse<TransferToSubAccountOfSameMasterResponse>>;
    /**
     * Universal Transfer
     *
     * You need to enable "internal transfer" option for the api key which requests this endpoint.
     * Transfer from master account by default if fromEmail is not sent.
     * Transfer to master account by default if toEmail is not sent.
     * At least either fromEmail or toEmail need to be sent when the fromAccountType and the toAccountType are the same.
     * Supported transfer scenarios:
     * `SPOT` transfer to `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` (regardless of master or sub)
     * `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` transfer to `SPOT`  (regardless of master or sub)
     * Master account `SPOT` transfer to sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN`
     * Sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN` transfer to master account `SPOT`
     * Sub-account `MARGIN(Cross)` transfer to Sub-account `MARGIN(Cross)`
     *
     * Weight: 1
     *
     * @summary Universal Transfer(For Master Account)
     * @param {UniversalTransferRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApiInterface
     */
    universalTransfer(
        requestParameters: UniversalTransferRequest
    ): Promise<RestApiResponse<UniversalTransferResponse>>;
}

/**
 * Request parameters for futuresTransferForSubAccount operation in AssetManagementApi.
 * @interface FuturesTransferForSubAccountRequest
 */
export interface FuturesTransferForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiFuturesTransferForSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiFuturesTransferForSubAccount
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiFuturesTransferForSubAccount
     */
    readonly amount: number;

    /**
     * 1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account
     * @type {number}
     * @memberof AssetManagementApiFuturesTransferForSubAccount
     */
    readonly type: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiFuturesTransferForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDetailOnSubAccountsFuturesAccount operation in AssetManagementApi.
 * @interface GetDetailOnSubAccountsFuturesAccountRequest
 */
export interface GetDetailOnSubAccountsFuturesAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiGetDetailOnSubAccountsFuturesAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetDetailOnSubAccountsFuturesAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDetailOnSubAccountsFuturesAccountV2 operation in AssetManagementApi.
 * @interface GetDetailOnSubAccountsFuturesAccountV2Request
 */
export interface GetDetailOnSubAccountsFuturesAccountV2Request {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiGetDetailOnSubAccountsFuturesAccountV2
     */
    readonly email: string;

    /**
     * 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
     * @type {number}
     * @memberof AssetManagementApiGetDetailOnSubAccountsFuturesAccountV2
     */
    readonly futuresType: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetDetailOnSubAccountsFuturesAccountV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDetailOnSubAccountsMarginAccount operation in AssetManagementApi.
 * @interface GetDetailOnSubAccountsMarginAccountRequest
 */
export interface GetDetailOnSubAccountsMarginAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiGetDetailOnSubAccountsMarginAccount
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetDetailOnSubAccountsMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSubAccountDepositAddress operation in AssetManagementApi.
 * @interface GetSubAccountDepositAddressRequest
 */
export interface GetSubAccountDepositAddressRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositAddress
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositAddress
     */
    readonly coin: string;

    /**
     * networks can be found in `GET /sapi/v1/capital/deposit/address`
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositAddress
     */
    readonly network?: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositAddress
     */
    readonly amount?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositAddress
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSubAccountDepositHistory operation in AssetManagementApi.
 * @interface GetSubAccountDepositHistoryRequest
 */
export interface GetSubAccountDepositHistoryRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly coin?: string;

    /**
     * 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly status?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly endTime?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly limit?: number;

    /**
     * default:0
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly offset?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly recvWindow?: number;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiGetSubAccountDepositHistory
     */
    readonly txId?: string;
}

/**
 * Request parameters for getSummaryOfSubAccountsFuturesAccount operation in AssetManagementApi.
 * @interface GetSummaryOfSubAccountsFuturesAccountRequest
 */
export interface GetSummaryOfSubAccountsFuturesAccountRequest {
    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsFuturesAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSummaryOfSubAccountsFuturesAccountV2 operation in AssetManagementApi.
 * @interface GetSummaryOfSubAccountsFuturesAccountV2Request
 */
export interface GetSummaryOfSubAccountsFuturesAccountV2Request {
    /**
     * 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsFuturesAccountV2
     */
    readonly futuresType: number;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsFuturesAccountV2
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsFuturesAccountV2
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsFuturesAccountV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSummaryOfSubAccountsMarginAccount operation in AssetManagementApi.
 * @interface GetSummaryOfSubAccountsMarginAccountRequest
 */
export interface GetSummaryOfSubAccountsMarginAccountRequest {
    /**
     *
     * @type {number}
     * @memberof AssetManagementApiGetSummaryOfSubAccountsMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for marginTransferForSubAccount operation in AssetManagementApi.
 * @interface MarginTransferForSubAccountRequest
 */
export interface MarginTransferForSubAccountRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiMarginTransferForSubAccount
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiMarginTransferForSubAccount
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiMarginTransferForSubAccount
     */
    readonly amount: number;

    /**
     * 1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account
     * @type {number}
     * @memberof AssetManagementApiMarginTransferForSubAccount
     */
    readonly type: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiMarginTransferForSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountAssets operation in AssetManagementApi.
 * @interface QuerySubAccountAssetsRequest
 */
export interface QuerySubAccountAssetsRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountAssets
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountAssets
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountAssetsAssetManagement operation in AssetManagementApi.
 * @interface QuerySubAccountAssetsAssetManagementRequest
 */
export interface QuerySubAccountAssetsAssetManagementRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountAssetsAssetManagement
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountAssetsAssetManagement
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountFuturesAssetTransferHistory operation in AssetManagementApi.
 * @interface QuerySubAccountFuturesAssetTransferHistoryRequest
 */
export interface QuerySubAccountFuturesAssetTransferHistoryRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly email: string;

    /**
     * 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly futuresType: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly endTime?: number;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountFuturesAssetTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountSpotAssetTransferHistory operation in AssetManagementApi.
 * @interface QuerySubAccountSpotAssetTransferHistoryRequest
 */
export interface QuerySubAccountSpotAssetTransferHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly fromEmail?: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly toEmail?: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly endTime?: number;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubAccountSpotAssetsSummary operation in AssetManagementApi.
 * @interface QuerySubAccountSpotAssetsSummaryRequest
 */
export interface QuerySubAccountSpotAssetsSummaryRequest {
    /**
     * Managed sub-account email
     * @type {string}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetsSummary
     */
    readonly email?: string;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetsSummary
     */
    readonly page?: number;

    /**
     * default 10, max 20
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetsSummary
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQuerySubAccountSpotAssetsSummary
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryUniversalTransferHistory operation in AssetManagementApi.
 * @interface QueryUniversalTransferHistoryRequest
 */
export interface QueryUniversalTransferHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly fromEmail?: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly toEmail?: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly clientTranId?: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly endTime?: number;

    /**
     * Default value: 1
     * @type {number}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiQueryUniversalTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subAccountFuturesAssetTransfer operation in AssetManagementApi.
 * @interface SubAccountFuturesAssetTransferRequest
 */
export interface SubAccountFuturesAssetTransferRequest {
    /**
     *
     * @type {string}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly fromEmail: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly toEmail: string;

    /**
     * 1:USDT-margined Futuresï¼Œ2: Coin-margined Futures
     * @type {number}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly futuresType: number;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiSubAccountFuturesAssetTransfer
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subAccountTransferHistory operation in AssetManagementApi.
 * @interface SubAccountTransferHistoryRequest
 */
export interface SubAccountTransferHistoryRequest {
    /**
     * If not sent, result of all assets will be returned
     * @type {string}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly asset?: string;

    /**
     * 1: transfer in, 2: transfer out
     * @type {number}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly type?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly endTime?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly limit?: number;

    /**
     * Default `False`, return PROCESS and SUCCESS status history; If `True`,return PROCESS and SUCCESS and FAILURE status history
     * @type {boolean}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly returnFailHistory?: boolean;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiSubAccountTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for transferToMaster operation in AssetManagementApi.
 * @interface TransferToMasterRequest
 */
export interface TransferToMasterRequest {
    /**
     *
     * @type {string}
     * @memberof AssetManagementApiTransferToMaster
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiTransferToMaster
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiTransferToMaster
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for transferToSubAccountOfSameMaster operation in AssetManagementApi.
 * @interface TransferToSubAccountOfSameMasterRequest
 */
export interface TransferToSubAccountOfSameMasterRequest {
    /**
     *
     * @type {string}
     * @memberof AssetManagementApiTransferToSubAccountOfSameMaster
     */
    readonly toEmail: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiTransferToSubAccountOfSameMaster
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiTransferToSubAccountOfSameMaster
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiTransferToSubAccountOfSameMaster
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for universalTransfer operation in AssetManagementApi.
 * @interface UniversalTransferRequest
 */
export interface UniversalTransferRequest {
    /**
     * "SPOT","USDT_FUTURE","COIN_FUTURE","MARGIN"(Cross),"ISOLATED_MARGIN"
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly fromAccountType: string;

    /**
     * "SPOT","USDT_FUTURE","COIN_FUTURE","MARGIN"(Cross),"ISOLATED_MARGIN"
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly toAccountType: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly amount: number;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly fromEmail?: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly toEmail?: string;

    /**
     *
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly clientTranId?: string;

    /**
     * Only supported under ISOLATED_MARGIN type
     * @type {string}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AssetManagementApiUniversalTransfer
     */
    readonly recvWindow?: number;
}

/**
 * AssetManagementApi - object-oriented interface
 * @class AssetManagementApi
 */
export class AssetManagementApi implements AssetManagementApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AssetManagementApiAxiosParamCreator(configuration);
    }

    /**
     * Futures Transfer for Sub-account
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Futures Transfer for Sub-account(For Master Account)
     * @param {FuturesTransferForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesTransferForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Futures-Transfer-for-Sub-account Binance API Documentation}
     */
    public async futuresTransferForSubAccount(
        requestParameters: FuturesTransferForSubAccountRequest
    ): Promise<RestApiResponse<FuturesTransferForSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.futuresTransferForSubAccount(
            requestParameters?.email,
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.type,
            requestParameters?.recvWindow
        );
        return sendRequest<FuturesTransferForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Detail on Sub-account's Futures Account
     *
     * Weight: 10
     *
     * @summary Get Detail on Sub-account\'s Futures Account(For Master Account)
     * @param {GetDetailOnSubAccountsFuturesAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account Binance API Documentation}
     */
    public async getDetailOnSubAccountsFuturesAccount(
        requestParameters: GetDetailOnSubAccountsFuturesAccountRequest
    ): Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDetailOnSubAccountsFuturesAccount(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDetailOnSubAccountsFuturesAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Detail on Sub-account's Futures Account
     *
     * Weight: 1
     *
     * @summary Get Detail on Sub-account\'s Futures Account V2(For Master Account)
     * @param {GetDetailOnSubAccountsFuturesAccountV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2 Binance API Documentation}
     */
    public async getDetailOnSubAccountsFuturesAccountV2(
        requestParameters: GetDetailOnSubAccountsFuturesAccountV2Request
    ): Promise<RestApiResponse<GetDetailOnSubAccountsFuturesAccountV2Response>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDetailOnSubAccountsFuturesAccountV2(
                requestParameters?.email,
                requestParameters?.futuresType,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDetailOnSubAccountsFuturesAccountV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Detail on Sub-account's Margin Account
     *
     * Weight: 10
     *
     * @summary Get Detail on Sub-account\'s Margin Account(For Master Account)
     * @param {GetDetailOnSubAccountsMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDetailOnSubAccountsMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account Binance API Documentation}
     */
    public async getDetailOnSubAccountsMarginAccount(
        requestParameters: GetDetailOnSubAccountsMarginAccountRequest
    ): Promise<RestApiResponse<GetDetailOnSubAccountsMarginAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDetailOnSubAccountsMarginAccount(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDetailOnSubAccountsMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Fetch sub-account deposit address
     *
     * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 1
     *
     * @summary Get Sub-account Deposit Address(For Master Account)
     * @param {GetSubAccountDepositAddressRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSubAccountDepositAddressResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-Address Binance API Documentation}
     */
    public async getSubAccountDepositAddress(
        requestParameters: GetSubAccountDepositAddressRequest
    ): Promise<RestApiResponse<GetSubAccountDepositAddressResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSubAccountDepositAddress(
            requestParameters?.email,
            requestParameters?.coin,
            requestParameters?.network,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<GetSubAccountDepositAddressResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Fetch sub-account deposit history
     *
     * Weight: 1
     *
     * @summary Get Sub-account Deposit History(For Master Account)
     * @param {GetSubAccountDepositHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSubAccountDepositHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-History Binance API Documentation}
     */
    public async getSubAccountDepositHistory(
        requestParameters: GetSubAccountDepositHistoryRequest
    ): Promise<RestApiResponse<GetSubAccountDepositHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSubAccountDepositHistory(
            requestParameters?.email,
            requestParameters?.coin,
            requestParameters?.status,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.offset,
            requestParameters?.recvWindow,
            requestParameters?.txId
        );
        return sendRequest<GetSubAccountDepositHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Summary of Sub-account's Futures Account
     *
     * Weight: 1
     *
     * @summary Get Summary of Sub-account\'s Futures Account(For Master Account)
     * @param {GetSummaryOfSubAccountsFuturesAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account Binance API Documentation}
     */
    public async getSummaryOfSubAccountsFuturesAccount(
        requestParameters: GetSummaryOfSubAccountsFuturesAccountRequest = {}
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSummaryOfSubAccountsFuturesAccount(
                requestParameters?.recvWindow
            );
        return sendRequest<GetSummaryOfSubAccountsFuturesAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Summary of Sub-account's Futures Account
     *
     * Weight: 10
     *
     * @summary Get Summary of Sub-account\'s Futures Account V2(For Master Account)
     * @param {GetSummaryOfSubAccountsFuturesAccountV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account-V2 Binance API Documentation}
     */
    public async getSummaryOfSubAccountsFuturesAccountV2(
        requestParameters: GetSummaryOfSubAccountsFuturesAccountV2Request
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsFuturesAccountV2Response>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSummaryOfSubAccountsFuturesAccountV2(
                requestParameters?.futuresType,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSummaryOfSubAccountsFuturesAccountV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get Summary of Sub-account's Margin Account
     *
     * Weight: 10
     *
     * @summary Get Summary of Sub-account\'s Margin Account(For Master Account)
     * @param {GetSummaryOfSubAccountsMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSummaryOfSubAccountsMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Margin-Account Binance API Documentation}
     */
    public async getSummaryOfSubAccountsMarginAccount(
        requestParameters: GetSummaryOfSubAccountsMarginAccountRequest = {}
    ): Promise<RestApiResponse<GetSummaryOfSubAccountsMarginAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSummaryOfSubAccountsMarginAccount(
                requestParameters?.recvWindow
            );
        return sendRequest<GetSummaryOfSubAccountsMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Margin Transfer for Sub-account
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Margin Transfer for Sub-account(For Master Account)
     * @param {MarginTransferForSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginTransferForSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Margin-Transfer-for-Sub-account Binance API Documentation}
     */
    public async marginTransferForSubAccount(
        requestParameters: MarginTransferForSubAccountRequest
    ): Promise<RestApiResponse<MarginTransferForSubAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.marginTransferForSubAccount(
            requestParameters?.email,
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.type,
            requestParameters?.recvWindow
        );
        return sendRequest<MarginTransferForSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Fetch sub-account assets
     *
     * Weight: 60
     *
     * @summary Query Sub-account Assets(For Master Account)
     * @param {QuerySubAccountAssetsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountAssetsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V3 Binance API Documentation}
     */
    public async querySubAccountAssets(
        requestParameters: QuerySubAccountAssetsRequest
    ): Promise<RestApiResponse<QuerySubAccountAssetsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.querySubAccountAssets(
            requestParameters?.email,
            requestParameters?.recvWindow
        );
        return sendRequest<QuerySubAccountAssetsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Fetch sub-account assets
     *
     * Weight: 60
     *
     * @summary Query Sub-account Assets (For Master Account)(USER_DATA)
     * @param {QuerySubAccountAssetsAssetManagementRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountAssetsAssetManagementResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V4 Binance API Documentation}
     */
    public async querySubAccountAssetsAssetManagement(
        requestParameters: QuerySubAccountAssetsAssetManagementRequest
    ): Promise<RestApiResponse<QuerySubAccountAssetsAssetManagementResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubAccountAssetsAssetManagement(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubAccountAssetsAssetManagementResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Sub-account Futures Asset Transfer History
     *
     * Weight: 1
     *
     * @summary Query Sub-account Futures Asset Transfer History(For Master Account)
     * @param {QuerySubAccountFuturesAssetTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountFuturesAssetTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History Binance API Documentation}
     */
    public async querySubAccountFuturesAssetTransferHistory(
        requestParameters: QuerySubAccountFuturesAssetTransferHistoryRequest
    ): Promise<RestApiResponse<QuerySubAccountFuturesAssetTransferHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubAccountFuturesAssetTransferHistory(
                requestParameters?.email,
                requestParameters?.futuresType,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubAccountFuturesAssetTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query Sub-account Spot Asset Transfer History
     *
     * fromEmail and toEmail cannot be sent at the same time.
     * Return fromEmail equal master account email by default.
     *
     * Weight: 1
     *
     * @summary Query Sub-account Spot Asset Transfer History(For Master Account)
     * @param {QuerySubAccountSpotAssetTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountSpotAssetTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Asset-Transfer-History Binance API Documentation}
     */
    public async querySubAccountSpotAssetTransferHistory(
        requestParameters: QuerySubAccountSpotAssetTransferHistoryRequest = {}
    ): Promise<RestApiResponse<QuerySubAccountSpotAssetTransferHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubAccountSpotAssetTransferHistory(
                requestParameters?.fromEmail,
                requestParameters?.toEmail,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubAccountSpotAssetTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get BTC valued asset summary of subaccounts.
     *
     * Weight: 1
     *
     * @summary Query Sub-account Spot Assets Summary(For Master Account)
     * @param {QuerySubAccountSpotAssetsSummaryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubAccountSpotAssetsSummaryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Assets-Summary Binance API Documentation}
     */
    public async querySubAccountSpotAssetsSummary(
        requestParameters: QuerySubAccountSpotAssetsSummaryRequest = {}
    ): Promise<RestApiResponse<QuerySubAccountSpotAssetsSummaryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubAccountSpotAssetsSummary(
                requestParameters?.email,
                requestParameters?.page,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubAccountSpotAssetsSummaryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query Universal Transfer History
     *
     * fromEmail and toEmail cannot be sent at the same time.
     * Return fromEmail equal master account email by default.
     * The query time period must be less than 7 days.
     * If startTime and endTime not sent, return records of the last 7 days by default.
     *
     * Weight: 1
     *
     * @summary Query Universal Transfer History(For Master Account)
     * @param {QueryUniversalTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUniversalTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Query-Universal-Transfer-History Binance API Documentation}
     */
    public async queryUniversalTransferHistory(
        requestParameters: QueryUniversalTransferHistoryRequest = {}
    ): Promise<RestApiResponse<QueryUniversalTransferHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryUniversalTransferHistory(
                requestParameters?.fromEmail,
                requestParameters?.toEmail,
                requestParameters?.clientTranId,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryUniversalTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Sub-account Futures Asset Transfer
     *
     *
     * Master account can transfer max 2000 times a minute
     * There must be sufficient margin balance in futures wallet to execute transferring.
     *
     * Weight: 1
     *
     * @summary Sub-account Futures Asset Transfer(For Master Account)
     * @param {SubAccountFuturesAssetTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubAccountFuturesAssetTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Futures-Asset-Transfer Binance API Documentation}
     */
    public async subAccountFuturesAssetTransfer(
        requestParameters: SubAccountFuturesAssetTransferRequest
    ): Promise<RestApiResponse<SubAccountFuturesAssetTransferResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.subAccountFuturesAssetTransfer(
                requestParameters?.fromEmail,
                requestParameters?.toEmail,
                requestParameters?.futuresType,
                requestParameters?.asset,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<SubAccountFuturesAssetTransferResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Sub-account Transfer History
     *
     * If type is not sent, the records of type 2: transfer out will be returned by default.
     * If startTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 1
     *
     * @summary Sub-account Transfer History(For Sub-account)
     * @param {SubAccountTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubAccountTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Transfer-History Binance API Documentation}
     */
    public async subAccountTransferHistory(
        requestParameters: SubAccountTransferHistoryRequest = {}
    ): Promise<RestApiResponse<SubAccountTransferHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subAccountTransferHistory(
            requestParameters?.asset,
            requestParameters?.type,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.returnFailHistory,
            requestParameters?.recvWindow
        );
        return sendRequest<SubAccountTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Transfer to Master
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Transfer to Master(For Sub-account)
     * @param {TransferToMasterRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TransferToMasterResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Master Binance API Documentation}
     */
    public async transferToMaster(
        requestParameters: TransferToMasterRequest
    ): Promise<RestApiResponse<TransferToMasterResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.transferToMaster(
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<TransferToMasterResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Transfer to Sub-account of Same Master
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Transfer to Sub-account of Same Master(For Sub-account)
     * @param {TransferToSubAccountOfSameMasterRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TransferToSubAccountOfSameMasterResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Sub-account-of-Same-Master Binance API Documentation}
     */
    public async transferToSubAccountOfSameMaster(
        requestParameters: TransferToSubAccountOfSameMasterRequest
    ): Promise<RestApiResponse<TransferToSubAccountOfSameMasterResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.transferToSubAccountOfSameMaster(
                requestParameters?.toEmail,
                requestParameters?.asset,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<TransferToSubAccountOfSameMasterResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Universal Transfer
     *
     * You need to enable "internal transfer" option for the api key which requests this endpoint.
     * Transfer from master account by default if fromEmail is not sent.
     * Transfer to master account by default if toEmail is not sent.
     * At least either fromEmail or toEmail need to be sent when the fromAccountType and the toAccountType are the same.
     * Supported transfer scenarios:
     * `SPOT` transfer to `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` (regardless of master or sub)
     * `SPOT`, `USDT_FUTURE`, `COIN_FUTURE` transfer to `SPOT`  (regardless of master or sub)
     * Master account `SPOT` transfer to sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN`
     * Sub-account `MARGIN(Cross)`, `ISOLATED_MARGIN` transfer to master account `SPOT`
     * Sub-account `MARGIN(Cross)` transfer to Sub-account `MARGIN(Cross)`
     *
     * Weight: 1
     *
     * @summary Universal Transfer(For Master Account)
     * @param {UniversalTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UniversalTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/asset-management/Universal-Transfer Binance API Documentation}
     */
    public async universalTransfer(
        requestParameters: UniversalTransferRequest
    ): Promise<RestApiResponse<UniversalTransferResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.universalTransfer(
            requestParameters?.fromAccountType,
            requestParameters?.toAccountType,
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.fromEmail,
            requestParameters?.toEmail,
            requestParameters?.clientTranId,
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<UniversalTransferResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
