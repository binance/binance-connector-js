/**
 * Binance Sub Account REST API
 *
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AddIpRestrictionForSubAccountApiKeyResponse,
    DeleteIpListForASubAccountApiKeyResponse,
    GetIpRestrictionForASubAccountApiKeyResponse,
} from '../types';

/**
 * ApiManagementApi - axios parameter creator
 */
const ApiManagementApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Add IP Restriction for Sub-Account API key
         *
         * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
         *
         * Weight: 3000
         *
         * @summary Add IP Restriction for Sub-Account API key(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} subAccountApiKey
         * @param {string} status IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only.
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        addIpRestrictionForSubAccountApiKey: async (
            email: string,
            subAccountApiKey: string,
            status: string,
            ipAddress?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('addIpRestrictionForSubAccountApiKey', 'email', email);
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists(
                'addIpRestrictionForSubAccountApiKey',
                'subAccountApiKey',
                subAccountApiKey
            );
            // verify required parameter 'status' is not null or undefined
            assertParamExists('addIpRestrictionForSubAccountApiKey', 'status', status);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined && subAccountApiKey !== null) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (ipAddress !== undefined && ipAddress !== null) {
                localVarQueryParameter['ipAddress'] = ipAddress;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/sub-account/subAccountApi/ipRestriction',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Delete IP List For a Sub-account API Key
         *
         * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
         *
         * Weight: 3000
         *
         * @summary Delete IP List For a Sub-account API Key(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} subAccountApiKey
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        deleteIpListForASubAccountApiKey: async (
            email: string,
            subAccountApiKey: string,
            ipAddress?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('deleteIpListForASubAccountApiKey', 'email', email);
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists(
                'deleteIpListForASubAccountApiKey',
                'subAccountApiKey',
                subAccountApiKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined && subAccountApiKey !== null) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (ipAddress !== undefined && ipAddress !== null) {
                localVarQueryParameter['ipAddress'] = ipAddress;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get IP Restriction for a Sub-account API Key
         *
         * Weight: 3000
         *
         * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} subAccountApiKey
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getIpRestrictionForASubAccountApiKey: async (
            email: string,
            subAccountApiKey: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getIpRestrictionForASubAccountApiKey', 'email', email);
            // verify required parameter 'subAccountApiKey' is not null or undefined
            assertParamExists(
                'getIpRestrictionForASubAccountApiKey',
                'subAccountApiKey',
                subAccountApiKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined && subAccountApiKey !== null) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sub-account/subAccountApi/ipRestriction',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * ApiManagementApi - interface
 * @interface ApiManagementApi
 */
export interface ApiManagementApiInterface {
    /**
     * Add IP Restriction for Sub-Account API key
     *
     * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
     *
     * Weight: 3000
     *
     * @summary Add IP Restriction for Sub-Account API key(For Master Account)
     * @param {AddIpRestrictionForSubAccountApiKeyRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApiInterface
     */
    addIpRestrictionForSubAccountApiKey(
        requestParameters: AddIpRestrictionForSubAccountApiKeyRequest
    ): Promise<RestApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>>;
    /**
     * Delete IP List For a Sub-account API Key
     *
     * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
     *
     * Weight: 3000
     *
     * @summary Delete IP List For a Sub-account API Key(For Master Account)
     * @param {DeleteIpListForASubAccountApiKeyRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApiInterface
     */
    deleteIpListForASubAccountApiKey(
        requestParameters: DeleteIpListForASubAccountApiKeyRequest
    ): Promise<RestApiResponse<DeleteIpListForASubAccountApiKeyResponse>>;
    /**
     * Get IP Restriction for a Sub-account API Key
     *
     * Weight: 3000
     *
     * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
     * @param {GetIpRestrictionForASubAccountApiKeyRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApiInterface
     */
    getIpRestrictionForASubAccountApiKey(
        requestParameters: GetIpRestrictionForASubAccountApiKeyRequest
    ): Promise<RestApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>>;
}

/**
 * Request parameters for addIpRestrictionForSubAccountApiKey operation in ApiManagementApi.
 * @interface AddIpRestrictionForSubAccountApiKeyRequest
 */
export interface AddIpRestrictionForSubAccountApiKeyRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ApiManagementApiAddIpRestrictionForSubAccountApiKey
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof ApiManagementApiAddIpRestrictionForSubAccountApiKey
     */
    readonly subAccountApiKey: string;

    /**
     * IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only.
     * @type {string}
     * @memberof ApiManagementApiAddIpRestrictionForSubAccountApiKey
     */
    readonly status: string;

    /**
     * Can be added in batches, separated by commas
     * @type {string}
     * @memberof ApiManagementApiAddIpRestrictionForSubAccountApiKey
     */
    readonly ipAddress?: string;

    /**
     *
     * @type {number}
     * @memberof ApiManagementApiAddIpRestrictionForSubAccountApiKey
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for deleteIpListForASubAccountApiKey operation in ApiManagementApi.
 * @interface DeleteIpListForASubAccountApiKeyRequest
 */
export interface DeleteIpListForASubAccountApiKeyRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ApiManagementApiDeleteIpListForASubAccountApiKey
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof ApiManagementApiDeleteIpListForASubAccountApiKey
     */
    readonly subAccountApiKey: string;

    /**
     * Can be added in batches, separated by commas
     * @type {string}
     * @memberof ApiManagementApiDeleteIpListForASubAccountApiKey
     */
    readonly ipAddress?: string;

    /**
     *
     * @type {number}
     * @memberof ApiManagementApiDeleteIpListForASubAccountApiKey
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getIpRestrictionForASubAccountApiKey operation in ApiManagementApi.
 * @interface GetIpRestrictionForASubAccountApiKeyRequest
 */
export interface GetIpRestrictionForASubAccountApiKeyRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ApiManagementApiGetIpRestrictionForASubAccountApiKey
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof ApiManagementApiGetIpRestrictionForASubAccountApiKey
     */
    readonly subAccountApiKey: string;

    /**
     *
     * @type {number}
     * @memberof ApiManagementApiGetIpRestrictionForASubAccountApiKey
     */
    readonly recvWindow?: number;
}

/**
 * ApiManagementApi - object-oriented interface
 * @class ApiManagementApi
 */
export class ApiManagementApi implements ApiManagementApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = ApiManagementApiAxiosParamCreator(configuration);
    }

    /**
     * Add IP Restriction for Sub-Account API key
     *
     * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
     *
     * Weight: 3000
     *
     * @summary Add IP Restriction for Sub-Account API key(For Master Account)
     * @param {AddIpRestrictionForSubAccountApiKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/api-management/Add-IP-Restriction-for-Sub-Account-API-key Binance API Documentation}
     */
    public async addIpRestrictionForSubAccountApiKey(
        requestParameters: AddIpRestrictionForSubAccountApiKeyRequest
    ): Promise<RestApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.addIpRestrictionForSubAccountApiKey(
                requestParameters?.email,
                requestParameters?.subAccountApiKey,
                requestParameters?.status,
                requestParameters?.ipAddress,
                requestParameters?.recvWindow
            );
        return sendRequest<AddIpRestrictionForSubAccountApiKeyResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Delete IP List For a Sub-account API Key
     *
     * You need to enable Enable Spot & Margin Trading option for the api key which requests this endpoint
     *
     * Weight: 3000
     *
     * @summary Delete IP List For a Sub-account API Key(For Master Account)
     * @param {DeleteIpListForASubAccountApiKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DeleteIpListForASubAccountApiKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key Binance API Documentation}
     */
    public async deleteIpListForASubAccountApiKey(
        requestParameters: DeleteIpListForASubAccountApiKeyRequest
    ): Promise<RestApiResponse<DeleteIpListForASubAccountApiKeyResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.deleteIpListForASubAccountApiKey(
                requestParameters?.email,
                requestParameters?.subAccountApiKey,
                requestParameters?.ipAddress,
                requestParameters?.recvWindow
            );
        return sendRequest<DeleteIpListForASubAccountApiKeyResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get IP Restriction for a Sub-account API Key
     *
     * Weight: 3000
     *
     * @summary Get IP Restriction for a Sub-account API Key(For Master Account)
     * @param {GetIpRestrictionForASubAccountApiKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ApiManagementApi
     * @see {@link https://developers.binance.com/docs/sub_account/api-management/Get-IP-Restriction-for-a-Sub-account-API-Key Binance API Documentation}
     */
    public async getIpRestrictionForASubAccountApiKey(
        requestParameters: GetIpRestrictionForASubAccountApiKeyRequest
    ): Promise<RestApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getIpRestrictionForASubAccountApiKey(
                requestParameters?.email,
                requestParameters?.subAccountApiKey,
                requestParameters?.recvWindow
            );
        return sendRequest<GetIpRestrictionForASubAccountApiKeyResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
