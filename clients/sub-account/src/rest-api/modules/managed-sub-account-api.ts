/**
 * Binance Sub Account REST API
 *
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    DepositAssetsIntoTheManagedSubAccountResponse,
    GetManagedSubAccountDepositAddressResponse,
    QueryManagedSubAccountAssetDetailsResponse,
    QueryManagedSubAccountFuturesAssetDetailsResponse,
    QueryManagedSubAccountListResponse,
    QueryManagedSubAccountMarginAssetDetailsResponse,
    QueryManagedSubAccountSnapshotResponse,
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponse,
    QueryManagedSubAccountTransferLogMasterAccountTradingResponse,
    QueryManagedSubAccountTransferLogSubAccountTradingResponse,
    WithdrawlAssetsFromTheManagedSubAccountResponse,
} from '../types';

/**
 * ManagedSubAccountApi - axios parameter creator
 */
const ManagedSubAccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Deposit Assets Into The Managed Sub-account
         *
         * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
         *
         * Weight: 1
         *
         * @summary Deposit Assets Into The Managed Sub-account (For Investor Master Account) (USER_DATA)
         * @param {string} toEmail
         * @param {string} asset
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        depositAssetsIntoTheManagedSubAccount: async (
            toEmail: string,
            asset: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('depositAssetsIntoTheManagedSubAccount', 'toEmail', toEmail);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('depositAssetsIntoTheManagedSubAccount', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('depositAssetsIntoTheManagedSubAccount', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (toEmail !== undefined && toEmail !== null) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/deposit',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get investor's managed sub-account deposit address.
         *
         * If `network` is not send, return with default `network` of the `coin`.
         * * `amount` needs to be sent if using LIGHTNING network
         *
         * Weight: 1
         *
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} coin
         * @param {string} [network] networks can be found in `GET /sapi/v1/capital/deposit/address`
         * @param {number} [amount]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getManagedSubAccountDepositAddress: async (
            email: string,
            coin: string,
            network?: string,
            amount?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getManagedSubAccountDepositAddress', 'email', email);
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('getManagedSubAccountDepositAddress', 'coin', coin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/deposit/address',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Managed Sub-account Asset Details
         *
         * Weight: 1
         *
         * @summary Query Managed Sub-account Asset Details (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountAssetDetails: async (
            email: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('queryManagedSubAccountAssetDetails', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/asset',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         *
         * Weight: 60
         *
         * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} [accountType] No input or input "MARGIN" to get Cross Margin account details. Input "ISOLATED_MARGIN" to get Isolated Margin account details.
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountFuturesAssetDetails: async (
            email: string,
            accountType?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('queryManagedSubAccountFuturesAssetDetails', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined && accountType !== null) {
                localVarQueryParameter['accountType'] = accountType;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/fetch-future-asset',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get investor's managed sub-account list.
         *
         * Weight: 60
         *
         * @summary Query Managed Sub-account List (For Investor) (USER_DATA)
         * @param {string} [email] Managed sub-account email
         * @param {number} [page] Default value: 1
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountList: async (
            email?: string,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/info',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         *
         * Weight: 1
         *
         * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} [accountType] No input or input "MARGIN" to get Cross Margin account details. Input "ISOLATED_MARGIN" to get Isolated Margin account details.
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountMarginAssetDetails: async (
            email: string,
            accountType?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('queryManagedSubAccountMarginAssetDetails', 'email', email);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (accountType !== undefined && accountType !== null) {
                localVarQueryParameter['accountType'] = accountType;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/marginAsset',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Managed Sub-account Snapshot
         *
         * The query time period must be less then 30 days
         * Support query within the last one month only
         * If startTimeand endTime not sent, return records of the last 7 days by default
         *
         * Weight: 2400
         *
         * @summary Query Managed Sub-account Snapshot (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {string} type "SPOT", "MARGIN"（cross）, "FUTURES"（UM）
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] Default value: 1, Max value: 200
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountSnapshot: async (
            email: string,
            type: string,
            startTime?: number,
            endTime?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('queryManagedSubAccountSnapshot', 'email', email);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('queryManagedSubAccountSnapshot', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/accountSnapshot',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
         * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
         *
         * Weight: 1
         *
         * @summary Query Managed Sub Account Transfer Log (For Investor Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountTransferLogMasterAccountInvestor: async (
            email: string,
            startTime: number,
            endTime: number,
            page: number,
            limit: number,
            transfers?: string,
            transferFunctionAccountType?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountInvestor',
                'email',
                email
            );
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountInvestor',
                'startTime',
                startTime
            );
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountInvestor',
                'endTime',
                endTime
            );
            // verify required parameter 'page' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountInvestor',
                'page',
                page
            );
            // verify required parameter 'limit' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountInvestor',
                'limit',
                limit
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined && transfers !== null) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined && transferFunctionAccountType !== null) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/queryTransLogForInvestor',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
         * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
         *
         * Weight: 60
         *
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account) (USER_DATA)
         * @param {string} email [Sub-account email](#email-address)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountTransferLogMasterAccountTrading: async (
            email: string,
            startTime: number,
            endTime: number,
            page: number,
            limit: number,
            transfers?: string,
            transferFunctionAccountType?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountTrading',
                'email',
                email
            );
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountTrading',
                'startTime',
                startTime
            );
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountTrading',
                'endTime',
                endTime
            );
            // verify required parameter 'page' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountTrading',
                'page',
                page
            );
            // verify required parameter 'limit' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogMasterAccountTrading',
                'limit',
                limit
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined && transfers !== null) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined && transferFunctionAccountType !== null) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/queryTransLogForTradeParent',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         *
         * Weight: 60
         *
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account) (USER_DATA)
         * @param {number} startTime Start Time
         * @param {number} endTime End Time (The start time and end time interval cannot exceed half a year)
         * @param {number} page Page
         * @param {number} limit Limit (Max: 500)
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryManagedSubAccountTransferLogSubAccountTrading: async (
            startTime: number,
            endTime: number,
            page: number,
            limit: number,
            transfers?: string,
            transferFunctionAccountType?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogSubAccountTrading',
                'startTime',
                startTime
            );
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists(
                'queryManagedSubAccountTransferLogSubAccountTrading',
                'endTime',
                endTime
            );
            // verify required parameter 'page' is not null or undefined
            assertParamExists('queryManagedSubAccountTransferLogSubAccountTrading', 'page', page);
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('queryManagedSubAccountTransferLogSubAccountTrading', 'limit', limit);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined && transfers !== null) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined && transferFunctionAccountType !== null) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/query-trans-log',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Withdrawl Assets From The Managed Sub-account
         *
         * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
         *
         * Weight: 1
         *
         * @summary Withdrawl Assets From The Managed Sub-account (For Investor Master Account) (USER_DATA)
         * @param {string} fromEmail
         * @param {string} asset
         * @param {number} amount
         * @param {number} [transferDate] Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdrawlAssetsFromTheManagedSubAccount: async (
            fromEmail: string,
            asset: string,
            amount: number,
            transferDate?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'fromEmail' is not null or undefined
            assertParamExists('withdrawlAssetsFromTheManagedSubAccount', 'fromEmail', fromEmail);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('withdrawlAssetsFromTheManagedSubAccount', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('withdrawlAssetsFromTheManagedSubAccount', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (fromEmail !== undefined && fromEmail !== null) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (transferDate !== undefined && transferDate !== null) {
                localVarQueryParameter['transferDate'] = transferDate;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/managed-subaccount/withdraw',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * ManagedSubAccountApi - interface
 * @interface ManagedSubAccountApi
 */
export interface ManagedSubAccountApiInterface {
    /**
     * Deposit Assets Into The Managed Sub-account
     *
     * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
     *
     * Weight: 1
     *
     * @summary Deposit Assets Into The Managed Sub-account (For Investor Master Account) (USER_DATA)
     * @param {DepositAssetsIntoTheManagedSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    depositAssetsIntoTheManagedSubAccount(
        requestParameters: DepositAssetsIntoTheManagedSubAccountRequest
    ): Promise<RestApiResponse<DepositAssetsIntoTheManagedSubAccountResponse>>;
    /**
     * Get investor's managed sub-account deposit address.
     *
     * If `network` is not send, return with default `network` of the `coin`.
     * * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 1
     *
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account) (USER_DATA)
     * @param {GetManagedSubAccountDepositAddressRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    getManagedSubAccountDepositAddress(
        requestParameters: GetManagedSubAccountDepositAddressRequest
    ): Promise<RestApiResponse<GetManagedSubAccountDepositAddressResponse>>;
    /**
     * Query Managed Sub-account Asset Details
     *
     * Weight: 1
     *
     * @summary Query Managed Sub-account Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountAssetDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountAssetDetails(
        requestParameters: QueryManagedSubAccountAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountAssetDetailsResponse>>;
    /**
     * Investor can use this api to query managed sub account futures asset details
     *
     * Weight: 60
     *
     * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountFuturesAssetDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountFuturesAssetDetails(
        requestParameters: QueryManagedSubAccountFuturesAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountFuturesAssetDetailsResponse>>;
    /**
     * Get investor's managed sub-account list.
     *
     * Weight: 60
     *
     * @summary Query Managed Sub-account List (For Investor) (USER_DATA)
     * @param {QueryManagedSubAccountListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountList(
        requestParameters?: QueryManagedSubAccountListRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountListResponse>>;
    /**
     * Investor can use this api to query managed sub account margin asset details
     *
     * Weight: 1
     *
     * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountMarginAssetDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountMarginAssetDetails(
        requestParameters: QueryManagedSubAccountMarginAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountMarginAssetDetailsResponse>>;
    /**
     * Query Managed Sub-account Snapshot
     *
     * The query time period must be less then 30 days
     * Support query within the last one month only
     * If startTimeand endTime not sent, return records of the last 7 days by default
     *
     * Weight: 2400
     *
     * @summary Query Managed Sub-account Snapshot (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountSnapshotRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountSnapshot(
        requestParameters: QueryManagedSubAccountSnapshotRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountSnapshotResponse>>;
    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
     * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     *
     * Weight: 1
     *
     * @summary Query Managed Sub Account Transfer Log (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogMasterAccountInvestorRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountTransferLogMasterAccountInvestor(
        requestParameters: QueryManagedSubAccountTransferLogMasterAccountInvestorRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>>;
    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
     * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     *
     * Weight: 60
     *
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogMasterAccountTradingRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountTransferLogMasterAccountTrading(
        requestParameters: QueryManagedSubAccountTransferLogMasterAccountTradingRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountTradingResponse>>;
    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     *
     * Weight: 60
     *
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogSubAccountTradingRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    queryManagedSubAccountTransferLogSubAccountTrading(
        requestParameters: QueryManagedSubAccountTransferLogSubAccountTradingRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogSubAccountTradingResponse>>;
    /**
     * Withdrawl Assets From The Managed Sub-account
     *
     * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
     *
     * Weight: 1
     *
     * @summary Withdrawl Assets From The Managed Sub-account (For Investor Master Account) (USER_DATA)
     * @param {WithdrawlAssetsFromTheManagedSubAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApiInterface
     */
    withdrawlAssetsFromTheManagedSubAccount(
        requestParameters: WithdrawlAssetsFromTheManagedSubAccountRequest
    ): Promise<RestApiResponse<WithdrawlAssetsFromTheManagedSubAccountResponse>>;
}

/**
 * Request parameters for depositAssetsIntoTheManagedSubAccount operation in ManagedSubAccountApi.
 * @interface DepositAssetsIntoTheManagedSubAccountRequest
 */
export interface DepositAssetsIntoTheManagedSubAccountRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedSubAccountApiDepositAssetsIntoTheManagedSubAccount
     */
    readonly toEmail: string;

    /**
     *
     * @type {string}
     * @memberof ManagedSubAccountApiDepositAssetsIntoTheManagedSubAccount
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiDepositAssetsIntoTheManagedSubAccount
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiDepositAssetsIntoTheManagedSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getManagedSubAccountDepositAddress operation in ManagedSubAccountApi.
 * @interface GetManagedSubAccountDepositAddressRequest
 */
export interface GetManagedSubAccountDepositAddressRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiGetManagedSubAccountDepositAddress
     */
    readonly email: string;

    /**
     *
     * @type {string}
     * @memberof ManagedSubAccountApiGetManagedSubAccountDepositAddress
     */
    readonly coin: string;

    /**
     * networks can be found in `GET /sapi/v1/capital/deposit/address`
     * @type {string}
     * @memberof ManagedSubAccountApiGetManagedSubAccountDepositAddress
     */
    readonly network?: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiGetManagedSubAccountDepositAddress
     */
    readonly amount?: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiGetManagedSubAccountDepositAddress
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryManagedSubAccountAssetDetails operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountAssetDetailsRequest
 */
export interface QueryManagedSubAccountAssetDetailsRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountAssetDetails
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountAssetDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryManagedSubAccountFuturesAssetDetails operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountFuturesAssetDetailsRequest
 */
export interface QueryManagedSubAccountFuturesAssetDetailsRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountFuturesAssetDetails
     */
    readonly email: string;

    /**
     * No input or input "MARGIN" to get Cross Margin account details. Input "ISOLATED_MARGIN" to get Isolated Margin account details.
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountFuturesAssetDetails
     */
    readonly accountType?: string;
}

/**
 * Request parameters for queryManagedSubAccountList operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountListRequest
 */
export interface QueryManagedSubAccountListRequest {
    /**
     * Managed sub-account email
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountList
     */
    readonly email?: string;

    /**
     * Default value: 1
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountList
     */
    readonly page?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountList
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryManagedSubAccountMarginAssetDetails operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountMarginAssetDetailsRequest
 */
export interface QueryManagedSubAccountMarginAssetDetailsRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountMarginAssetDetails
     */
    readonly email: string;

    /**
     * No input or input "MARGIN" to get Cross Margin account details. Input "ISOLATED_MARGIN" to get Isolated Margin account details.
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountMarginAssetDetails
     */
    readonly accountType?: string;
}

/**
 * Request parameters for queryManagedSubAccountSnapshot operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountSnapshotRequest
 */
export interface QueryManagedSubAccountSnapshotRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly email: string;

    /**
     * "SPOT", "MARGIN"（cross）, "FUTURES"（UM）
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly type: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly endTime?: number;

    /**
     * Default value: 1, Max value: 200
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountSnapshot
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryManagedSubAccountTransferLogMasterAccountInvestor operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountTransferLogMasterAccountInvestorRequest
 */
export interface QueryManagedSubAccountTransferLogMasterAccountInvestorRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly email: string;

    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly startTime: number;

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly endTime: number;

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly page: number;

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly limit: number;

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly transfers?: string;

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountInvestor
     */
    readonly transferFunctionAccountType?: string;
}

/**
 * Request parameters for queryManagedSubAccountTransferLogMasterAccountTrading operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountTransferLogMasterAccountTradingRequest
 */
export interface QueryManagedSubAccountTransferLogMasterAccountTradingRequest {
    /**
     * [Sub-account email](#email-address)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly email: string;

    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly startTime: number;

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly endTime: number;

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly page: number;

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly limit: number;

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly transfers?: string;

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogMasterAccountTrading
     */
    readonly transferFunctionAccountType?: string;
}

/**
 * Request parameters for queryManagedSubAccountTransferLogSubAccountTrading operation in ManagedSubAccountApi.
 * @interface QueryManagedSubAccountTransferLogSubAccountTradingRequest
 */
export interface QueryManagedSubAccountTransferLogSubAccountTradingRequest {
    /**
     * Start Time
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly startTime: number;

    /**
     * End Time (The start time and end time interval cannot exceed half a year)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly endTime: number;

    /**
     * Page
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly page: number;

    /**
     * Limit (Max: 500)
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly limit: number;

    /**
     * Transfer Direction (FROM/TO)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly transfers?: string;

    /**
     * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @type {string}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly transferFunctionAccountType?: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiQueryManagedSubAccountTransferLogSubAccountTrading
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for withdrawlAssetsFromTheManagedSubAccount operation in ManagedSubAccountApi.
 * @interface WithdrawlAssetsFromTheManagedSubAccountRequest
 */
export interface WithdrawlAssetsFromTheManagedSubAccountRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedSubAccountApiWithdrawlAssetsFromTheManagedSubAccount
     */
    readonly fromEmail: string;

    /**
     *
     * @type {string}
     * @memberof ManagedSubAccountApiWithdrawlAssetsFromTheManagedSubAccount
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiWithdrawlAssetsFromTheManagedSubAccount
     */
    readonly amount: number;

    /**
     * Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
     * @type {number}
     * @memberof ManagedSubAccountApiWithdrawlAssetsFromTheManagedSubAccount
     */
    readonly transferDate?: number;

    /**
     *
     * @type {number}
     * @memberof ManagedSubAccountApiWithdrawlAssetsFromTheManagedSubAccount
     */
    readonly recvWindow?: number;
}

/**
 * ManagedSubAccountApi - object-oriented interface
 * @class ManagedSubAccountApi
 */
export class ManagedSubAccountApi implements ManagedSubAccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = ManagedSubAccountApiAxiosParamCreator(configuration);
    }

    /**
     * Deposit Assets Into The Managed Sub-account
     *
     * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
     *
     * Weight: 1
     *
     * @summary Deposit Assets Into The Managed Sub-account (For Investor Master Account) (USER_DATA)
     * @param {DepositAssetsIntoTheManagedSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositAssetsIntoTheManagedSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Deposit-Assets-Into-The-Managed-Sub-account Binance API Documentation}
     */
    public async depositAssetsIntoTheManagedSubAccount(
        requestParameters: DepositAssetsIntoTheManagedSubAccountRequest
    ): Promise<RestApiResponse<DepositAssetsIntoTheManagedSubAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.depositAssetsIntoTheManagedSubAccount(
                requestParameters?.toEmail,
                requestParameters?.asset,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<DepositAssetsIntoTheManagedSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get investor's managed sub-account deposit address.
     *
     * If `network` is not send, return with default `network` of the `coin`.
     * * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 1
     *
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account) (USER_DATA)
     * @param {GetManagedSubAccountDepositAddressRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetManagedSubAccountDepositAddressResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Get-Managed-Sub-account-Deposit-Address Binance API Documentation}
     */
    public async getManagedSubAccountDepositAddress(
        requestParameters: GetManagedSubAccountDepositAddressRequest
    ): Promise<RestApiResponse<GetManagedSubAccountDepositAddressResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getManagedSubAccountDepositAddress(
                requestParameters?.email,
                requestParameters?.coin,
                requestParameters?.network,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<GetManagedSubAccountDepositAddressResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Managed Sub-account Asset Details
     *
     * Weight: 1
     *
     * @summary Query Managed Sub-account Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountAssetDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountAssetDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Asset-Details Binance API Documentation}
     */
    public async queryManagedSubAccountAssetDetails(
        requestParameters: QueryManagedSubAccountAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountAssetDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountAssetDetails(
                requestParameters?.email,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryManagedSubAccountAssetDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Investor can use this api to query managed sub account futures asset details
     *
     * Weight: 60
     *
     * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountFuturesAssetDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountFuturesAssetDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Futures-Asset-Details Binance API Documentation}
     */
    public async queryManagedSubAccountFuturesAssetDetails(
        requestParameters: QueryManagedSubAccountFuturesAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountFuturesAssetDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountFuturesAssetDetails(
                requestParameters?.email,
                requestParameters?.accountType
            );
        return sendRequest<QueryManagedSubAccountFuturesAssetDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get investor's managed sub-account list.
     *
     * Weight: 60
     *
     * @summary Query Managed Sub-account List (For Investor) (USER_DATA)
     * @param {QueryManagedSubAccountListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-List Binance API Documentation}
     */
    public async queryManagedSubAccountList(
        requestParameters: QueryManagedSubAccountListRequest = {}
    ): Promise<RestApiResponse<QueryManagedSubAccountListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryManagedSubAccountList(
            requestParameters?.email,
            requestParameters?.page,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryManagedSubAccountListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Investor can use this api to query managed sub account margin asset details
     *
     * Weight: 1
     *
     * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountMarginAssetDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountMarginAssetDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Margin-Asset-Details Binance API Documentation}
     */
    public async queryManagedSubAccountMarginAssetDetails(
        requestParameters: QueryManagedSubAccountMarginAssetDetailsRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountMarginAssetDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountMarginAssetDetails(
                requestParameters?.email,
                requestParameters?.accountType
            );
        return sendRequest<QueryManagedSubAccountMarginAssetDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Managed Sub-account Snapshot
     *
     * The query time period must be less then 30 days
     * Support query within the last one month only
     * If startTimeand endTime not sent, return records of the last 7 days by default
     *
     * Weight: 2400
     *
     * @summary Query Managed Sub-account Snapshot (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountSnapshotRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountSnapshotResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Snapshot Binance API Documentation}
     */
    public async queryManagedSubAccountSnapshot(
        requestParameters: QueryManagedSubAccountSnapshotRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountSnapshotResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountSnapshot(
                requestParameters?.email,
                requestParameters?.type,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryManagedSubAccountSnapshotResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
     * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     *
     * Weight: 1
     *
     * @summary Query Managed Sub Account Transfer Log (For Investor Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogMasterAccountInvestorRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Investor Binance API Documentation}
     */
    public async queryManagedSubAccountTransferLogMasterAccountInvestor(
        requestParameters: QueryManagedSubAccountTransferLogMasterAccountInvestorRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountTransferLogMasterAccountInvestor(
                requestParameters?.email,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.transfers,
                requestParameters?.transferFunctionAccountType
            );
        return sendRequest<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
     * Please refer to [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     *
     * Weight: 60
     *
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogMasterAccountTradingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountTradingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Master Binance API Documentation}
     */
    public async queryManagedSubAccountTransferLogMasterAccountTrading(
        requestParameters: QueryManagedSubAccountTransferLogMasterAccountTradingRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogMasterAccountTradingResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountTransferLogMasterAccountTrading(
                requestParameters?.email,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.transfers,
                requestParameters?.transferFunctionAccountType
            );
        return sendRequest<QueryManagedSubAccountTransferLogMasterAccountTradingResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
     *
     * Weight: 60
     *
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account) (USER_DATA)
     * @param {QueryManagedSubAccountTransferLogSubAccountTradingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryManagedSubAccountTransferLogSubAccountTradingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Sub Binance API Documentation}
     */
    public async queryManagedSubAccountTransferLogSubAccountTrading(
        requestParameters: QueryManagedSubAccountTransferLogSubAccountTradingRequest
    ): Promise<RestApiResponse<QueryManagedSubAccountTransferLogSubAccountTradingResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryManagedSubAccountTransferLogSubAccountTrading(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.limit,
                requestParameters?.transfers,
                requestParameters?.transferFunctionAccountType,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryManagedSubAccountTransferLogSubAccountTradingResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Withdrawl Assets From The Managed Sub-account
     *
     * You need to enable `Enable Spot & Margin Trading` option for the api key which requests this endpoint
     *
     * Weight: 1
     *
     * @summary Withdrawl Assets From The Managed Sub-account (For Investor Master Account) (USER_DATA)
     * @param {WithdrawlAssetsFromTheManagedSubAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawlAssetsFromTheManagedSubAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof ManagedSubAccountApi
     * @see {@link https://developers.binance.com/docs/sub_account/managed-sub-account/Withdrawl-Assets-From-The-Managed-Sub-account Binance API Documentation}
     */
    public async withdrawlAssetsFromTheManagedSubAccount(
        requestParameters: WithdrawlAssetsFromTheManagedSubAccountRequest
    ): Promise<RestApiResponse<WithdrawlAssetsFromTheManagedSubAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.withdrawlAssetsFromTheManagedSubAccount(
                requestParameters?.fromEmail,
                requestParameters?.asset,
                requestParameters?.amount,
                requestParameters?.transferDate,
                requestParameters?.recvWindow
            );
        return sendRequest<WithdrawlAssetsFromTheManagedSubAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
