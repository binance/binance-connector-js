/**
 * Binance Algo REST API
 *
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CancelAlgoOrderSpotAlgoResponse,
    QueryCurrentAlgoOpenOrdersSpotAlgoResponse,
    QueryHistoricalAlgoOrdersSpotAlgoResponse,
    QuerySubOrdersSpotAlgoResponse,
    TimeWeightedAveragePriceSpotAlgoResponse,
} from '../types';

/**
 * SpotAlgoApi - axios parameter creator
 */
const SpotAlgoApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Cancel an open TWAP order
         *
         * Weight: 1
         *
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        cancelAlgoOrderSpotAlgo: async (
            algoId: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('cancelAlgoOrderSpotAlgo', 'algoId', algoId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algoId !== undefined && algoId !== null) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/spot/order',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get all open SPOT TWAP orders
         *
         * Weight: 1
         *
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryCurrentAlgoOpenOrdersSpotAlgo: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/spot/openOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get all historical SPOT TWAP orders
         *
         * Weight: 1
         *
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryHistoricalAlgoOrdersSpotAlgo: async (
            symbol?: string,
            side?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/spot/historicalOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         *
         * Weight: 1
         *
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId eg. 14511
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubOrdersSpotAlgo: async (
            algoId: number,
            page?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('querySubOrdersSpotAlgo', 'algoId', algoId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algoId !== undefined && algoId !== null) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/spot/subOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Place a new spot TWAP order with Algo service.
         *
         * Total Algo open orders max allowed: `20` orders.
         *
         * Weight: 3000
         *
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {string} symbol Trading symbol eg. BTCUSDT
         * @param {string} side Trading side ( BUY or SELL )
         * @param {number} quantity Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
         * @param {number} duration Duration for TWAP orders in seconds. [300, 86400]
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)ï¼Œ If it is not sent, we will give default value
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         *
         * @throws {RequiredError}
         */
        timeWeightedAveragePriceSpotAlgo: async (
            symbol: string,
            side: string,
            quantity: number,
            duration: number,
            clientAlgoId?: string,
            limitPrice?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('timeWeightedAveragePriceSpotAlgo', 'symbol', symbol);
            // verify required parameter 'side' is not null or undefined
            assertParamExists('timeWeightedAveragePriceSpotAlgo', 'side', side);
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('timeWeightedAveragePriceSpotAlgo', 'quantity', quantity);
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('timeWeightedAveragePriceSpotAlgo', 'duration', duration);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (quantity !== undefined && quantity !== null) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (duration !== undefined && duration !== null) {
                localVarQueryParameter['duration'] = duration;
            }

            if (clientAlgoId !== undefined && clientAlgoId !== null) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (limitPrice !== undefined && limitPrice !== null) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/spot/newOrderTwap',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * SpotAlgoApi - interface
 * @interface SpotAlgoApi
 */
export interface SpotAlgoApiInterface {
    /**
     * Cancel an open TWAP order
     *
     * Weight: 1
     *
     * @summary Cancel Algo Order(TRADE)
     * @param {CancelAlgoOrderSpotAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApiInterface
     */
    cancelAlgoOrderSpotAlgo(
        requestParameters: CancelAlgoOrderSpotAlgoRequest
    ): Promise<RestApiResponse<CancelAlgoOrderSpotAlgoResponse>>;
    /**
     * Get all open SPOT TWAP orders
     *
     * Weight: 1
     *
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {QueryCurrentAlgoOpenOrdersSpotAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApiInterface
     */
    queryCurrentAlgoOpenOrdersSpotAlgo(
        requestParameters?: QueryCurrentAlgoOpenOrdersSpotAlgoRequest
    ): Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>>;
    /**
     * Get all historical SPOT TWAP orders
     *
     * Weight: 1
     *
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {QueryHistoricalAlgoOrdersSpotAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApiInterface
     */
    queryHistoricalAlgoOrdersSpotAlgo(
        requestParameters?: QueryHistoricalAlgoOrdersSpotAlgoRequest
    ): Promise<RestApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse>>;
    /**
     * Get respective sub orders for a specified algoId
     *
     * Weight: 1
     *
     * @summary Query Sub Orders(USER_DATA)
     * @param {QuerySubOrdersSpotAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApiInterface
     */
    querySubOrdersSpotAlgo(
        requestParameters: QuerySubOrdersSpotAlgoRequest
    ): Promise<RestApiResponse<QuerySubOrdersSpotAlgoResponse>>;
    /**
     * Place a new spot TWAP order with Algo service.
     *
     * Total Algo open orders max allowed: `20` orders.
     *
     * Weight: 3000
     *
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {TimeWeightedAveragePriceSpotAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApiInterface
     */
    timeWeightedAveragePriceSpotAlgo(
        requestParameters: TimeWeightedAveragePriceSpotAlgoRequest
    ): Promise<RestApiResponse<TimeWeightedAveragePriceSpotAlgoResponse>>;
}

/**
 * Request parameters for cancelAlgoOrderSpotAlgo operation in SpotAlgoApi.
 * @interface CancelAlgoOrderSpotAlgoRequest
 */
export interface CancelAlgoOrderSpotAlgoRequest {
    /**
     * eg. 14511
     * @type {number}
     * @memberof SpotAlgoApiCancelAlgoOrderSpotAlgo
     */
    readonly algoId: number;

    /**
     *
     * @type {number}
     * @memberof SpotAlgoApiCancelAlgoOrderSpotAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryCurrentAlgoOpenOrdersSpotAlgo operation in SpotAlgoApi.
 * @interface QueryCurrentAlgoOpenOrdersSpotAlgoRequest
 */
export interface QueryCurrentAlgoOpenOrdersSpotAlgoRequest {
    /**
     *
     * @type {number}
     * @memberof SpotAlgoApiQueryCurrentAlgoOpenOrdersSpotAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryHistoricalAlgoOrdersSpotAlgo operation in SpotAlgoApi.
 * @interface QueryHistoricalAlgoOrdersSpotAlgoRequest
 */
export interface QueryHistoricalAlgoOrdersSpotAlgoRequest {
    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly symbol?: string;

    /**
     * BUY or SELL
     * @type {string}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly side?: string;

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly startTime?: number;

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly endTime?: number;

    /**
     * Default is 1
     * @type {number}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly page?: number;

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof SpotAlgoApiQueryHistoricalAlgoOrdersSpotAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubOrdersSpotAlgo operation in SpotAlgoApi.
 * @interface QuerySubOrdersSpotAlgoRequest
 */
export interface QuerySubOrdersSpotAlgoRequest {
    /**
     * eg. 14511
     * @type {number}
     * @memberof SpotAlgoApiQuerySubOrdersSpotAlgo
     */
    readonly algoId: number;

    /**
     * Default is 1
     * @type {number}
     * @memberof SpotAlgoApiQuerySubOrdersSpotAlgo
     */
    readonly page?: number;

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof SpotAlgoApiQuerySubOrdersSpotAlgo
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof SpotAlgoApiQuerySubOrdersSpotAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for timeWeightedAveragePriceSpotAlgo operation in SpotAlgoApi.
 * @interface TimeWeightedAveragePriceSpotAlgoRequest
 */
export interface TimeWeightedAveragePriceSpotAlgoRequest {
    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly symbol: string;

    /**
     * Trading side ( BUY or SELL )
     * @type {string}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly side: string;

    /**
     * Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
     * @type {number}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly quantity: number;

    /**
     * Duration for TWAP orders in seconds. [300, 86400]
     * @type {number}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly duration: number;

    /**
     * A unique id among Algo orders (length should be 32 characters)ï¼Œ If it is not sent, we will give default value
     * @type {string}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly clientAlgoId?: string;

    /**
     * Limit price of the order; If it is not sent, will place order by market price by default
     * @type {number}
     * @memberof SpotAlgoApiTimeWeightedAveragePriceSpotAlgo
     */
    readonly limitPrice?: number;
}

/**
 * SpotAlgoApi - object-oriented interface
 * @class SpotAlgoApi
 */
export class SpotAlgoApi implements SpotAlgoApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = SpotAlgoApiAxiosParamCreator(configuration);
    }

    /**
     * Cancel an open TWAP order
     *
     * Weight: 1
     *
     * @summary Cancel Algo Order(TRADE)
     * @param {CancelAlgoOrderSpotAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAlgoOrderSpotAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/spot-algo/Cancel-Algo-Order Binance API Documentation}
     */
    public async cancelAlgoOrderSpotAlgo(
        requestParameters: CancelAlgoOrderSpotAlgoRequest
    ): Promise<RestApiResponse<CancelAlgoOrderSpotAlgoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.cancelAlgoOrderSpotAlgo(
            requestParameters?.algoId,
            requestParameters?.recvWindow
        );
        return sendRequest<CancelAlgoOrderSpotAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get all open SPOT TWAP orders
     *
     * Weight: 1
     *
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {QueryCurrentAlgoOpenOrdersSpotAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/spot-algo/Query-Current-Algo-Open-Orders Binance API Documentation}
     */
    public async queryCurrentAlgoOpenOrdersSpotAlgo(
        requestParameters: QueryCurrentAlgoOpenOrdersSpotAlgoRequest = {}
    ): Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryCurrentAlgoOpenOrdersSpotAlgo(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryCurrentAlgoOpenOrdersSpotAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get all historical SPOT TWAP orders
     *
     * Weight: 1
     *
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {QueryHistoricalAlgoOrdersSpotAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/spot-algo/Query-Historical-Algo-Orders Binance API Documentation}
     */
    public async queryHistoricalAlgoOrdersSpotAlgo(
        requestParameters: QueryHistoricalAlgoOrdersSpotAlgoRequest = {}
    ): Promise<RestApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryHistoricalAlgoOrdersSpotAlgo(
                requestParameters?.symbol,
                requestParameters?.side,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.pageSize,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryHistoricalAlgoOrdersSpotAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get respective sub orders for a specified algoId
     *
     * Weight: 1
     *
     * @summary Query Sub Orders(USER_DATA)
     * @param {QuerySubOrdersSpotAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubOrdersSpotAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/spot-algo/Query-Sub-Orders Binance API Documentation}
     */
    public async querySubOrdersSpotAlgo(
        requestParameters: QuerySubOrdersSpotAlgoRequest
    ): Promise<RestApiResponse<QuerySubOrdersSpotAlgoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.querySubOrdersSpotAlgo(
            requestParameters?.algoId,
            requestParameters?.page,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<QuerySubOrdersSpotAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Place a new spot TWAP order with Algo service.
     *
     * Total Algo open orders max allowed: `20` orders.
     *
     * Weight: 3000
     *
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {TimeWeightedAveragePriceSpotAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TimeWeightedAveragePriceSpotAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SpotAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/spot-algo/Time-Weighted-Average-Price-New-Order Binance API Documentation}
     */
    public async timeWeightedAveragePriceSpotAlgo(
        requestParameters: TimeWeightedAveragePriceSpotAlgoRequest
    ): Promise<RestApiResponse<TimeWeightedAveragePriceSpotAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.timeWeightedAveragePriceSpotAlgo(
                requestParameters?.symbol,
                requestParameters?.side,
                requestParameters?.quantity,
                requestParameters?.duration,
                requestParameters?.clientAlgoId,
                requestParameters?.limitPrice
            );
        return sendRequest<TimeWeightedAveragePriceSpotAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
