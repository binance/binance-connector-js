/**
 * Binance Algo REST API
 *
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CancelAlgoOrderFutureAlgoResponse,
    QueryCurrentAlgoOpenOrdersFutureAlgoResponse,
    QueryHistoricalAlgoOrdersFutureAlgoResponse,
    QuerySubOrdersFutureAlgoResponse,
    TimeWeightedAveragePriceFutureAlgoResponse,
    VolumeParticipationFutureAlgoResponse,
} from '../types';

/**
 * FutureAlgoApi - axios parameter creator
 */
const FutureAlgoApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Cancel an active order.
         *
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 1
         *
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId eg. 14511
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        cancelAlgoOrderFutureAlgo: async (
            algoId: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('cancelAlgoOrderFutureAlgo', 'algoId', algoId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algoId !== undefined && algoId !== null) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/order',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Current Algo Open Orders
         *
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 1
         *
         * @summary Query Current Algo Open Orders(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryCurrentAlgoOpenOrdersFutureAlgo: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/openOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Historical Algo Order
         *
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 1
         *
         * @summary Query Historical Algo Orders(USER_DATA)
         * @param {string} [symbol] Trading symbol eg. BTCUSDT
         * @param {string} [side] BUY or SELL
         * @param {number} [startTime] in milliseconds  eg.1641522717552
         * @param {number} [endTime] in milliseconds  eg.1641522526562
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryHistoricalAlgoOrdersFutureAlgo: async (
            symbol?: string,
            side?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/historicalOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get respective sub orders for a specified algoId
         *
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 1
         *
         * @summary Query Sub Orders(USER_DATA)
         * @param {number} algoId eg. 14511
         * @param {number} [page] Default is 1
         * @param {number} [pageSize] MIN 1, MAX 100; Default 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        querySubOrdersFutureAlgo: async (
            algoId: number,
            page?: number,
            pageSize?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            assertParamExists('querySubOrdersFutureAlgo', 'algoId', algoId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (algoId !== undefined && algoId !== null) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/subOrders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Send in a Twap new order.
         * Only support on USDⓈ-M Contracts.
         *
         * Total Algo open orders max allowed: `30` orders.
         * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
         * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
         * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
         * `quantity` * 60 / `duration` should be larger than minQty
         * `duration` cannot be less than 5 mins or more than 24 hours.
         * For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 3000
         *
         * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
         * @param {string} symbol Trading symbol eg. BTCUSDT
         * @param {string} side Trading side ( BUY or SELL )
         * @param {number} quantity Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
         * @param {number} duration Duration for TWAP orders in seconds. [300, 86400]
         * @param {string} [positionSide] Default `BOTH` for One-way Mode ; `LONG` or `SHORT` for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] "true" or "false". Default "false"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        timeWeightedAveragePriceFutureAlgo: async (
            symbol: string,
            side: string,
            quantity: number,
            duration: number,
            positionSide?: string,
            clientAlgoId?: string,
            reduceOnly?: boolean,
            limitPrice?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('timeWeightedAveragePriceFutureAlgo', 'symbol', symbol);
            // verify required parameter 'side' is not null or undefined
            assertParamExists('timeWeightedAveragePriceFutureAlgo', 'side', side);
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('timeWeightedAveragePriceFutureAlgo', 'quantity', quantity);
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('timeWeightedAveragePriceFutureAlgo', 'duration', duration);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (positionSide !== undefined && positionSide !== null) {
                localVarQueryParameter['positionSide'] = positionSide;
            }

            if (quantity !== undefined && quantity !== null) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (duration !== undefined && duration !== null) {
                localVarQueryParameter['duration'] = duration;
            }

            if (clientAlgoId !== undefined && clientAlgoId !== null) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (reduceOnly !== undefined && reduceOnly !== null) {
                localVarQueryParameter['reduceOnly'] = reduceOnly;
            }

            if (limitPrice !== undefined && limitPrice !== null) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/newOrderTwap',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Send in a VP new order.
         * Only support on USDⓈ-M Contracts.
         *
         * Total Algo open orders max allowed: `10` orders.
         * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
         * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
         * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
         * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         * Base URL: https://api.binance.com
         *
         * Weight: 300
         *
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} symbol Trading symbol eg. BTCUSDT
         * @param {string} side Trading side ( BUY or SELL )
         * @param {number} quantity Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
         * @param {string} urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
         * @param {string} [positionSide] Default `BOTH` for One-way Mode ; `LONG` or `SHORT` for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] "true" or "false". Default "false"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        volumeParticipationFutureAlgo: async (
            symbol: string,
            side: string,
            quantity: number,
            urgency: string,
            positionSide?: string,
            clientAlgoId?: string,
            reduceOnly?: boolean,
            limitPrice?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('volumeParticipationFutureAlgo', 'symbol', symbol);
            // verify required parameter 'side' is not null or undefined
            assertParamExists('volumeParticipationFutureAlgo', 'side', side);
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('volumeParticipationFutureAlgo', 'quantity', quantity);
            // verify required parameter 'urgency' is not null or undefined
            assertParamExists('volumeParticipationFutureAlgo', 'urgency', urgency);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (positionSide !== undefined && positionSide !== null) {
                localVarQueryParameter['positionSide'] = positionSide;
            }

            if (quantity !== undefined && quantity !== null) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (urgency !== undefined && urgency !== null) {
                localVarQueryParameter['urgency'] = urgency;
            }

            if (clientAlgoId !== undefined && clientAlgoId !== null) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (reduceOnly !== undefined && reduceOnly !== null) {
                localVarQueryParameter['reduceOnly'] = reduceOnly;
            }

            if (limitPrice !== undefined && limitPrice !== null) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/algo/futures/newOrderVp',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * FutureAlgoApi - interface
 * @interface FutureAlgoApi
 */
export interface FutureAlgoApiInterface {
    /**
     * Cancel an active order.
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Cancel Algo Order(TRADE)
     * @param {CancelAlgoOrderFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    cancelAlgoOrderFutureAlgo(
        requestParameters: CancelAlgoOrderFutureAlgoRequest
    ): Promise<RestApiResponse<CancelAlgoOrderFutureAlgoResponse>>;
    /**
     * Query Current Algo Open Orders
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {QueryCurrentAlgoOpenOrdersFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    queryCurrentAlgoOpenOrdersFutureAlgo(
        requestParameters?: QueryCurrentAlgoOpenOrdersFutureAlgoRequest
    ): Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>>;
    /**
     * Query Historical Algo Order
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {QueryHistoricalAlgoOrdersFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    queryHistoricalAlgoOrdersFutureAlgo(
        requestParameters?: QueryHistoricalAlgoOrdersFutureAlgoRequest
    ): Promise<RestApiResponse<QueryHistoricalAlgoOrdersFutureAlgoResponse>>;
    /**
     * Get respective sub orders for a specified algoId
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Sub Orders(USER_DATA)
     * @param {QuerySubOrdersFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    querySubOrdersFutureAlgo(
        requestParameters: QuerySubOrdersFutureAlgoRequest
    ): Promise<RestApiResponse<QuerySubOrdersFutureAlgoResponse>>;
    /**
     * Send in a Twap new order.
     * Only support on USDⓈ-M Contracts.
     *
     * Total Algo open orders max allowed: `30` orders.
     * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
     * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
     * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
     * `quantity` * 60 / `duration` should be larger than minQty
     * `duration` cannot be less than 5 mins or more than 24 hours.
     * For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 3000
     *
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {TimeWeightedAveragePriceFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    timeWeightedAveragePriceFutureAlgo(
        requestParameters: TimeWeightedAveragePriceFutureAlgoRequest
    ): Promise<RestApiResponse<TimeWeightedAveragePriceFutureAlgoResponse>>;
    /**
     * Send in a VP new order.
     * Only support on USDⓈ-M Contracts.
     *
     * Total Algo open orders max allowed: `10` orders.
     * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
     * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
     * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 300
     *
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {VolumeParticipationFutureAlgoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApiInterface
     */
    volumeParticipationFutureAlgo(
        requestParameters: VolumeParticipationFutureAlgoRequest
    ): Promise<RestApiResponse<VolumeParticipationFutureAlgoResponse>>;
}

/**
 * Request parameters for cancelAlgoOrderFutureAlgo operation in FutureAlgoApi.
 * @interface CancelAlgoOrderFutureAlgoRequest
 */
export interface CancelAlgoOrderFutureAlgoRequest {
    /**
     * eg. 14511
     * @type {number}
     * @memberof FutureAlgoApiCancelAlgoOrderFutureAlgo
     */
    readonly algoId: number;

    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiCancelAlgoOrderFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryCurrentAlgoOpenOrdersFutureAlgo operation in FutureAlgoApi.
 * @interface QueryCurrentAlgoOpenOrdersFutureAlgoRequest
 */
export interface QueryCurrentAlgoOpenOrdersFutureAlgoRequest {
    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiQueryCurrentAlgoOpenOrdersFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryHistoricalAlgoOrdersFutureAlgo operation in FutureAlgoApi.
 * @interface QueryHistoricalAlgoOrdersFutureAlgoRequest
 */
export interface QueryHistoricalAlgoOrdersFutureAlgoRequest {
    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly symbol?: string;

    /**
     * BUY or SELL
     * @type {string}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly side?: string;

    /**
     * in milliseconds  eg.1641522717552
     * @type {number}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly startTime?: number;

    /**
     * in milliseconds  eg.1641522526562
     * @type {number}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly endTime?: number;

    /**
     * Default is 1
     * @type {number}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly page?: number;

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiQueryHistoricalAlgoOrdersFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubOrdersFutureAlgo operation in FutureAlgoApi.
 * @interface QuerySubOrdersFutureAlgoRequest
 */
export interface QuerySubOrdersFutureAlgoRequest {
    /**
     * eg. 14511
     * @type {number}
     * @memberof FutureAlgoApiQuerySubOrdersFutureAlgo
     */
    readonly algoId: number;

    /**
     * Default is 1
     * @type {number}
     * @memberof FutureAlgoApiQuerySubOrdersFutureAlgo
     */
    readonly page?: number;

    /**
     * MIN 1, MAX 100; Default 100
     * @type {number}
     * @memberof FutureAlgoApiQuerySubOrdersFutureAlgo
     */
    readonly pageSize?: number;

    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiQuerySubOrdersFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for timeWeightedAveragePriceFutureAlgo operation in FutureAlgoApi.
 * @interface TimeWeightedAveragePriceFutureAlgoRequest
 */
export interface TimeWeightedAveragePriceFutureAlgoRequest {
    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly symbol: string;

    /**
     * Trading side ( BUY or SELL )
     * @type {string}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly side: string;

    /**
     * Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
     * @type {number}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly quantity: number;

    /**
     * Duration for TWAP orders in seconds. [300, 86400]
     * @type {number}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly duration: number;

    /**
     * Default `BOTH` for One-way Mode ; `LONG` or `SHORT` for Hedge Mode. It must be sent in Hedge Mode.
     * @type {string}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly positionSide?: string;

    /**
     * A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
     * @type {string}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly clientAlgoId?: string;

    /**
     * "true" or "false". Default "false"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
     * @type {boolean}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly reduceOnly?: boolean;

    /**
     * Limit price of the order; If it is not sent, will place order by market price by default
     * @type {number}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly limitPrice?: number;

    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiTimeWeightedAveragePriceFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for volumeParticipationFutureAlgo operation in FutureAlgoApi.
 * @interface VolumeParticipationFutureAlgoRequest
 */
export interface VolumeParticipationFutureAlgoRequest {
    /**
     * Trading symbol eg. BTCUSDT
     * @type {string}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly symbol: string;

    /**
     * Trading side ( BUY or SELL )
     * @type {string}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly side: string;

    /**
     * Quantity of base asset; Maximum notional per order is 200k, 2mm or 10mm, depending on symbol. Please reduce your size if you order is above the maximum notional per order.
     * @type {number}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly quantity: number;

    /**
     * Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
     * @type {string}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly urgency: string;

    /**
     * Default `BOTH` for One-way Mode ; `LONG` or `SHORT` for Hedge Mode. It must be sent in Hedge Mode.
     * @type {string}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly positionSide?: string;

    /**
     * A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
     * @type {string}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly clientAlgoId?: string;

    /**
     * "true" or "false". Default "false"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
     * @type {boolean}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly reduceOnly?: boolean;

    /**
     * Limit price of the order; If it is not sent, will place order by market price by default
     * @type {number}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly limitPrice?: number;

    /**
     *
     * @type {number}
     * @memberof FutureAlgoApiVolumeParticipationFutureAlgo
     */
    readonly recvWindow?: number;
}

/**
 * FutureAlgoApi - object-oriented interface
 * @class FutureAlgoApi
 */
export class FutureAlgoApi implements FutureAlgoApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = FutureAlgoApiAxiosParamCreator(configuration);
    }

    /**
     * Cancel an active order.
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Cancel Algo Order(TRADE)
     * @param {CancelAlgoOrderFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAlgoOrderFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Cancel-Algo-Order Binance API Documentation}
     */
    public async cancelAlgoOrderFutureAlgo(
        requestParameters: CancelAlgoOrderFutureAlgoRequest
    ): Promise<RestApiResponse<CancelAlgoOrderFutureAlgoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.cancelAlgoOrderFutureAlgo(
            requestParameters?.algoId,
            requestParameters?.recvWindow
        );
        return sendRequest<CancelAlgoOrderFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Current Algo Open Orders
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Current Algo Open Orders(USER_DATA)
     * @param {QueryCurrentAlgoOpenOrdersFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Query-Current-Algo-Open-Orders Binance API Documentation}
     */
    public async queryCurrentAlgoOpenOrdersFutureAlgo(
        requestParameters: QueryCurrentAlgoOpenOrdersFutureAlgoRequest = {}
    ): Promise<RestApiResponse<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryCurrentAlgoOpenOrdersFutureAlgo(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Historical Algo Order
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Historical Algo Orders(USER_DATA)
     * @param {QueryHistoricalAlgoOrdersFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryHistoricalAlgoOrdersFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Query-Historical-Algo-Orders Binance API Documentation}
     */
    public async queryHistoricalAlgoOrdersFutureAlgo(
        requestParameters: QueryHistoricalAlgoOrdersFutureAlgoRequest = {}
    ): Promise<RestApiResponse<QueryHistoricalAlgoOrdersFutureAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryHistoricalAlgoOrdersFutureAlgo(
                requestParameters?.symbol,
                requestParameters?.side,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.pageSize,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryHistoricalAlgoOrdersFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get respective sub orders for a specified algoId
     *
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 1
     *
     * @summary Query Sub Orders(USER_DATA)
     * @param {QuerySubOrdersFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubOrdersFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Query-Sub-Orders Binance API Documentation}
     */
    public async querySubOrdersFutureAlgo(
        requestParameters: QuerySubOrdersFutureAlgoRequest
    ): Promise<RestApiResponse<QuerySubOrdersFutureAlgoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.querySubOrdersFutureAlgo(
            requestParameters?.algoId,
            requestParameters?.page,
            requestParameters?.pageSize,
            requestParameters?.recvWindow
        );
        return sendRequest<QuerySubOrdersFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Send in a Twap new order.
     * Only support on USDⓈ-M Contracts.
     *
     * Total Algo open orders max allowed: `30` orders.
     * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
     * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
     * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
     * `quantity` * 60 / `duration` should be larger than minQty
     * `duration` cannot be less than 5 mins or more than 24 hours.
     * For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 3000
     *
     * @summary Time-Weighted Average Price(Twap) New Order(TRADE)
     * @param {TimeWeightedAveragePriceFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TimeWeightedAveragePriceFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Time-Weighted-Average-Price-New-Order Binance API Documentation}
     */
    public async timeWeightedAveragePriceFutureAlgo(
        requestParameters: TimeWeightedAveragePriceFutureAlgoRequest
    ): Promise<RestApiResponse<TimeWeightedAveragePriceFutureAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.timeWeightedAveragePriceFutureAlgo(
                requestParameters?.symbol,
                requestParameters?.side,
                requestParameters?.quantity,
                requestParameters?.duration,
                requestParameters?.positionSide,
                requestParameters?.clientAlgoId,
                requestParameters?.reduceOnly,
                requestParameters?.limitPrice,
                requestParameters?.recvWindow
            );
        return sendRequest<TimeWeightedAveragePriceFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Send in a VP new order.
     * Only support on USDⓈ-M Contracts.
     *
     * Total Algo open orders max allowed: `10` orders.
     * Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
     * Receiving `"success": true` does not mean that your order will be executed. Please use the query order endpoints（`GET sapi/v1/algo/futures/openOrders` or `GET sapi/v1/algo/futures/historicalOrders`） to check the order status.
     * For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive `"success": true`, but the order status will be `expired` after we check it.
     * You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
     * Base URL: https://api.binance.com
     *
     * Weight: 300
     *
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {VolumeParticipationFutureAlgoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VolumeParticipationFutureAlgoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureAlgoApi
     * @see {@link https://developers.binance.com/docs/algo/future-algo/Volume-Participation-New-Order Binance API Documentation}
     */
    public async volumeParticipationFutureAlgo(
        requestParameters: VolumeParticipationFutureAlgoRequest
    ): Promise<RestApiResponse<VolumeParticipationFutureAlgoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.volumeParticipationFutureAlgo(
                requestParameters?.symbol,
                requestParameters?.side,
                requestParameters?.quantity,
                requestParameters?.urgency,
                requestParameters?.positionSide,
                requestParameters?.clientAlgoId,
                requestParameters?.reduceOnly,
                requestParameters?.limitPrice,
                requestParameters?.recvWindow
            );
        return sendRequest<VolumeParticipationFutureAlgoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
