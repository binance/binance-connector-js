/**
 * Binance Public VIP Loan REST API
 *
 * OpenAPI Specification for the Binance Public VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { TradeApi } from '../../../src/rest-api';
import {
    VipLoanBorrowRequest,
    VipLoanRenewRequest,
    VipLoanRepayRequest,
} from '../../../src/rest-api';
import type {
    VipLoanBorrowResponse,
    VipLoanRenewResponse,
    VipLoanRepayResponse,
} from '../../../src/rest-api/types';

describe('TradeApi', () => {
    let client: TradeApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new TradeApi(config);
    });

    describe('vipLoanBorrow()', () => {
        it('should execute vipLoanBorrow() successfully with required parameters only', async () => {
            const params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };

            mockResponse = {
                loanAccountId: '12345678',
                requestId: '12345678',
                loanCoin: 'BTC',
                isFlexibleRate: 'No',
                loanAmount: '100.55',
                collateralAccountId: '12345678,12345678,12345678',
                collateralCoin: 'BUSD,USDT,ETH',
                loanTerm: '30',
            };

            const spy = jest.spyOn(client, 'vipLoanBorrow').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanBorrowResponse>)
            );
            const response = await client.vipLoanBorrow(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute vipLoanBorrow() successfully with optional parameters', async () => {
            const params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
                recvWindow: 5000,
            };

            mockResponse = {
                loanAccountId: '12345678',
                requestId: '12345678',
                loanCoin: 'BTC',
                isFlexibleRate: 'No',
                loanAmount: '100.55',
                collateralAccountId: '12345678,12345678,12345678',
                collateralCoin: 'BUSD,USDT,ETH',
                loanTerm: '30',
            };

            const spy = jest.spyOn(client, 'vipLoanBorrow').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanBorrowResponse>)
            );
            const response = await client.vipLoanBorrow(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when loanAccountId is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.loanAccountId;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter loanAccountId was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw RequiredError when loanCoin is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.loanCoin;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter loanCoin was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw RequiredError when loanAmount is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.loanAmount;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter loanAmount was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw RequiredError when collateralAccountId is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.collateralAccountId;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter collateralAccountId was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw RequiredError when collateralCoin is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.collateralCoin;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter collateralCoin was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw RequiredError when isFlexibleRate is missing', async () => {
            const _params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };
            const params = Object.assign({ ..._params });
            delete params?.isFlexibleRate;

            await expect(client.vipLoanBorrow(params)).rejects.toThrow(
                'Required parameter isFlexibleRate was null or undefined when calling vipLoanBorrow.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: VipLoanBorrowRequest = {
                loanAccountId: 1,
                loanCoin: 'loanCoin_example',
                loanAmount: 1,
                collateralAccountId: '1',
                collateralCoin: 'collateralCoin_example',
                isFlexibleRate: true,
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'vipLoanBorrow').mockRejectedValueOnce(mockError);
            await expect(client.vipLoanBorrow(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('vipLoanRenew()', () => {
        it('should execute vipLoanRenew() successfully with required parameters only', async () => {
            const params: VipLoanRenewRequest = {
                orderId: 1,
                loanTerm: 789,
            };

            mockResponse = {
                loanAccountId: '12345678',
                loanCoin: 'BTC',
                loanAmount: '100.55',
                collateralAccountId: '12345677,12345678,12345679',
                collateralCoin: 'BUSD,USDT,ETH',
                loanTerm: '30',
            };

            const spy = jest.spyOn(client, 'vipLoanRenew').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanRenewResponse>)
            );
            const response = await client.vipLoanRenew(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute vipLoanRenew() successfully with optional parameters', async () => {
            const params: VipLoanRenewRequest = {
                orderId: 1,
                loanTerm: 789,
                recvWindow: 5000,
            };

            mockResponse = {
                loanAccountId: '12345678',
                loanCoin: 'BTC',
                loanAmount: '100.55',
                collateralAccountId: '12345677,12345678,12345679',
                collateralCoin: 'BUSD,USDT,ETH',
                loanTerm: '30',
            };

            const spy = jest.spyOn(client, 'vipLoanRenew').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanRenewResponse>)
            );
            const response = await client.vipLoanRenew(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when orderId is missing', async () => {
            const _params: VipLoanRenewRequest = {
                orderId: 1,
                loanTerm: 789,
            };
            const params = Object.assign({ ..._params });
            delete params?.orderId;

            await expect(client.vipLoanRenew(params)).rejects.toThrow(
                'Required parameter orderId was null or undefined when calling vipLoanRenew.'
            );
        });

        it('should throw RequiredError when loanTerm is missing', async () => {
            const _params: VipLoanRenewRequest = {
                orderId: 1,
                loanTerm: 789,
            };
            const params = Object.assign({ ..._params });
            delete params?.loanTerm;

            await expect(client.vipLoanRenew(params)).rejects.toThrow(
                'Required parameter loanTerm was null or undefined when calling vipLoanRenew.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: VipLoanRenewRequest = {
                orderId: 1,
                loanTerm: 789,
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'vipLoanRenew').mockRejectedValueOnce(mockError);
            await expect(client.vipLoanRenew(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('vipLoanRepay()', () => {
        it('should execute vipLoanRepay() successfully with required parameters only', async () => {
            const params: VipLoanRepayRequest = {
                orderId: 1,
                amount: 1,
            };

            mockResponse = {
                loanCoin: 'BUSD',
                repayAmount: '200.5',
                remainingPrincipal: '100.5',
                remainingInterest: '0',
                collateralCoin: 'BNB,BTC,ETH',
                currentLTV: '0.25',
                repayStatus: 'Repaid',
            };

            const spy = jest.spyOn(client, 'vipLoanRepay').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanRepayResponse>)
            );
            const response = await client.vipLoanRepay(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute vipLoanRepay() successfully with optional parameters', async () => {
            const params: VipLoanRepayRequest = {
                orderId: 1,
                amount: 1,
                recvWindow: 5000,
            };

            mockResponse = {
                loanCoin: 'BUSD',
                repayAmount: '200.5',
                remainingPrincipal: '100.5',
                remainingInterest: '0',
                collateralCoin: 'BNB,BTC,ETH',
                currentLTV: '0.25',
                repayStatus: 'Repaid',
            };

            const spy = jest.spyOn(client, 'vipLoanRepay').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<VipLoanRepayResponse>)
            );
            const response = await client.vipLoanRepay(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when orderId is missing', async () => {
            const _params: VipLoanRepayRequest = {
                orderId: 1,
                amount: 1,
            };
            const params = Object.assign({ ..._params });
            delete params?.orderId;

            await expect(client.vipLoanRepay(params)).rejects.toThrow(
                'Required parameter orderId was null or undefined when calling vipLoanRepay.'
            );
        });

        it('should throw RequiredError when amount is missing', async () => {
            const _params: VipLoanRepayRequest = {
                orderId: 1,
                amount: 1,
            };
            const params = Object.assign({ ..._params });
            delete params?.amount;

            await expect(client.vipLoanRepay(params)).rejects.toThrow(
                'Required parameter amount was null or undefined when calling vipLoanRepay.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: VipLoanRepayRequest = {
                orderId: 1,
                amount: 1,
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'vipLoanRepay').mockRejectedValueOnce(mockError);
            await expect(client.vipLoanRepay(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
