/**
 * Binance Public VIP Loan REST API
 *
 * OpenAPI Specification for the Binance Public VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { MarketDataApi } from '../../../src/rest-api';
import {
    GetBorrowInterestRateRequest,
    GetCollateralAssetDataRequest,
    GetLoanableAssetsDataRequest,
} from '../../../src/rest-api';
import type {
    GetBorrowInterestRateResponse,
    GetCollateralAssetDataResponse,
    GetLoanableAssetsDataResponse,
} from '../../../src/rest-api/types';

describe('MarketDataApi', () => {
    let client: MarketDataApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new MarketDataApi(config);
    });

    describe('getBorrowInterestRate()', () => {
        it('should execute getBorrowInterestRate() successfully with required parameters only', async () => {
            const params: GetBorrowInterestRateRequest = {
                loanCoin: 'loanCoin_example',
            };

            mockResponse = [
                {
                    asset: 'BUSD',
                    flexibleDailyInterestRate: '0.001503',
                    flexibleYearlyInterestRate: '0.548595',
                    time: 1577233578000,
                },
                {
                    asset: 'BTC',
                    flexibleDailyInterestRate: '0.001503',
                    flexibleYearlyInterestRate: '0.548595',
                    time: 1577233562000,
                },
            ];

            const spy = jest.spyOn(client, 'getBorrowInterestRate').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBorrowInterestRateResponse>)
            );
            const response = await client.getBorrowInterestRate(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getBorrowInterestRate() successfully with optional parameters', async () => {
            const params: GetBorrowInterestRateRequest = {
                loanCoin: 'loanCoin_example',
                recvWindow: 5000,
            };

            mockResponse = [
                {
                    asset: 'BUSD',
                    flexibleDailyInterestRate: '0.001503',
                    flexibleYearlyInterestRate: '0.548595',
                    time: 1577233578000,
                },
                {
                    asset: 'BTC',
                    flexibleDailyInterestRate: '0.001503',
                    flexibleYearlyInterestRate: '0.548595',
                    time: 1577233562000,
                },
            ];

            const spy = jest.spyOn(client, 'getBorrowInterestRate').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetBorrowInterestRateResponse>)
            );
            const response = await client.getBorrowInterestRate(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when loanCoin is missing', async () => {
            const _params: GetBorrowInterestRateRequest = {
                loanCoin: 'loanCoin_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.loanCoin;

            await expect(client.getBorrowInterestRate(params)).rejects.toThrow(
                'Required parameter loanCoin was null or undefined when calling getBorrowInterestRate.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: GetBorrowInterestRateRequest = {
                loanCoin: 'loanCoin_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getBorrowInterestRate')
                .mockRejectedValueOnce(mockError);
            await expect(client.getBorrowInterestRate(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getCollateralAssetData()', () => {
        it('should execute getCollateralAssetData() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        collateralCoin: 'BUSD',
                        _1stCollateralRatio: '100%',
                        _1stCollateralRange: '1-10000000',
                        _2ndCollateralRatio: '80%',
                        _2ndCollateralRange: '10000000-100000000',
                        _3rdCollateralRatio: '60%',
                        _3rdCollateralRange: '100000000-1000000000',
                        _4thCollateralRatio: '0%',
                        _4thCollateralRange: '>10000000000',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getCollateralAssetData').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCollateralAssetDataResponse>)
            );
            const response = await client.getCollateralAssetData();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getCollateralAssetData() successfully with optional parameters', async () => {
            const params: GetCollateralAssetDataRequest = {
                collateralCoin: 'collateralCoin_example',
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        collateralCoin: 'BUSD',
                        _1stCollateralRatio: '100%',
                        _1stCollateralRange: '1-10000000',
                        _2ndCollateralRatio: '80%',
                        _2ndCollateralRange: '10000000-100000000',
                        _3rdCollateralRatio: '60%',
                        _3rdCollateralRange: '100000000-1000000000',
                        _4thCollateralRatio: '0%',
                        _4thCollateralRange: '>10000000000',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getCollateralAssetData').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCollateralAssetDataResponse>)
            );
            const response = await client.getCollateralAssetData(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getCollateralAssetData')
                .mockRejectedValueOnce(mockError);
            await expect(client.getCollateralAssetData()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getLoanableAssetsData()', () => {
        it('should execute getLoanableAssetsData() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        _flexibleDailyInterestRate: '0.001503',
                        _flexibleYearlyInterestRate: '0.548595',
                        _30dDailyInterestRate: '0.000136',
                        _30dYearlyInterestRate: '0.03450',
                        _60dDailyInterestRate: '0.000145',
                        _60dYearlyInterestRate: '0.04103',
                        minLimit: '100',
                        maxLimit: '1000000',
                        vipLevel: 1,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanableAssetsData').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanableAssetsDataResponse>)
            );
            const response = await client.getLoanableAssetsData();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getLoanableAssetsData() successfully with optional parameters', async () => {
            const params: GetLoanableAssetsDataRequest = {
                loanCoin: 'loanCoin_example',
                vipLevel: 1,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        _flexibleDailyInterestRate: '0.001503',
                        _flexibleYearlyInterestRate: '0.548595',
                        _30dDailyInterestRate: '0.000136',
                        _30dYearlyInterestRate: '0.03450',
                        _60dDailyInterestRate: '0.000145',
                        _60dYearlyInterestRate: '0.04103',
                        minLimit: '100',
                        maxLimit: '1000000',
                        vipLevel: 1,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanableAssetsData').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanableAssetsDataResponse>)
            );
            const response = await client.getLoanableAssetsData(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getLoanableAssetsData')
                .mockRejectedValueOnce(mockError);
            await expect(client.getLoanableAssetsData()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
