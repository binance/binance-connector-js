/**
 * Binance Public VIP Loan REST API
 *
 * OpenAPI Specification for the Binance Public VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { VipLoanBorrowResponse, VipLoanRenewResponse, VipLoanRepayResponse } from '../types';

/**
 * TradeApi - axios parameter creator
 */
const TradeApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * VIP loan is available for VIP users only.
         *
         * loanAccountId refer to loan receiving account
         * Only master account applications are supported
         * loanAccountId and collateralAccountId under same master account
         * loanTerm is mandatory if user choose stable rate
         *
         * Weight: 0
         *
         * @summary VIP Loan Borrow(TRADE)
         * @param {number} loanAccountId
         * @param {string} loanCoin
         * @param {number} loanAmount
         * @param {string} collateralAccountId Multiple split by `,`
         * @param {string} collateralCoin Multiple split by `,`
         * @param {boolean} isFlexibleRate Default: TRUE. TRUE : flexible rate; FALSE: fixed rate
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        vipLoanBorrow: async (
            loanAccountId: number,
            loanCoin: string,
            loanAmount: number,
            collateralAccountId: string,
            collateralCoin: string,
            isFlexibleRate: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanAccountId' is not null or undefined
            assertParamExists('vipLoanBorrow', 'loanAccountId', loanAccountId);
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('vipLoanBorrow', 'loanCoin', loanCoin);
            // verify required parameter 'loanAmount' is not null or undefined
            assertParamExists('vipLoanBorrow', 'loanAmount', loanAmount);
            // verify required parameter 'collateralAccountId' is not null or undefined
            assertParamExists('vipLoanBorrow', 'collateralAccountId', collateralAccountId);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('vipLoanBorrow', 'collateralCoin', collateralCoin);
            // verify required parameter 'isFlexibleRate' is not null or undefined
            assertParamExists('vipLoanBorrow', 'isFlexibleRate', isFlexibleRate);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanAccountId !== undefined && loanAccountId !== null) {
                localVarQueryParameter['loanAccountId'] = loanAccountId;
            }

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (loanAmount !== undefined && loanAmount !== null) {
                localVarQueryParameter['loanAmount'] = loanAmount;
            }

            if (collateralAccountId !== undefined && collateralAccountId !== null) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (isFlexibleRate !== undefined && isFlexibleRate !== null) {
                localVarQueryParameter['isFlexibleRate'] = isFlexibleRate;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/borrow',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * VIP loan is available for VIP users only.
         *
         * Weight: 6000
         *
         * @summary VIP Loan Renew(TRADE)
         * @param {number} orderId
         * @param {number} loanTerm 30/60 days
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        vipLoanRenew: async (
            orderId: number,
            loanTerm: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('vipLoanRenew', 'orderId', orderId);
            // verify required parameter 'loanTerm' is not null or undefined
            assertParamExists('vipLoanRenew', 'loanTerm', loanTerm);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanTerm !== undefined && loanTerm !== null) {
                localVarQueryParameter['loanTerm'] = loanTerm;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/renew',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * VIP loan is available for VIP users only.
         *
         * Weight: 6000
         *
         * @summary VIP Loan Repay(TRADE)
         * @param {number} orderId
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        vipLoanRepay: async (
            orderId: number,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('vipLoanRepay', 'orderId', orderId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('vipLoanRepay', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/repay',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TradeApi - interface
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * VIP loan is available for VIP users only.
     *
     * loanAccountId refer to loan receiving account
     * Only master account applications are supported
     * loanAccountId and collateralAccountId under same master account
     * loanTerm is mandatory if user choose stable rate
     *
     * Weight: 0
     *
     * @summary VIP Loan Borrow(TRADE)
     * @param {VipLoanBorrowRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    vipLoanBorrow(
        requestParameters: VipLoanBorrowRequest
    ): Promise<RestApiResponse<VipLoanBorrowResponse>>;
    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Renew(TRADE)
     * @param {VipLoanRenewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    vipLoanRenew(
        requestParameters: VipLoanRenewRequest
    ): Promise<RestApiResponse<VipLoanRenewResponse>>;
    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Repay(TRADE)
     * @param {VipLoanRepayRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    vipLoanRepay(
        requestParameters: VipLoanRepayRequest
    ): Promise<RestApiResponse<VipLoanRepayResponse>>;
}

/**
 * Request parameters for vipLoanBorrow operation in TradeApi.
 * @interface VipLoanBorrowRequest
 */
export interface VipLoanBorrowRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly loanAccountId: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly loanCoin: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly loanAmount: number;

    /**
     * Multiple split by `,`
     * @type {string}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly collateralAccountId: string;

    /**
     * Multiple split by `,`
     * @type {string}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly collateralCoin: string;

    /**
     * Default: TRUE. TRUE : flexible rate; FALSE: fixed rate
     * @type {boolean}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly isFlexibleRate: boolean;

    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanBorrow
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for vipLoanRenew operation in TradeApi.
 * @interface VipLoanRenewRequest
 */
export interface VipLoanRenewRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanRenew
     */
    readonly orderId: number;

    /**
     * 30/60 days
     * @type {number}
     * @memberof TradeApiVipLoanRenew
     */
    readonly loanTerm: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanRenew
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for vipLoanRepay operation in TradeApi.
 * @interface VipLoanRepayRequest
 */
export interface VipLoanRepayRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanRepay
     */
    readonly orderId: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanRepay
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiVipLoanRepay
     */
    readonly recvWindow?: number;
}

/**
 * TradeApi - object-oriented interface
 * @class TradeApi
 */
export class TradeApi implements TradeApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration);
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * loanAccountId refer to loan receiving account
     * Only master account applications are supported
     * loanAccountId and collateralAccountId under same master account
     * loanTerm is mandatory if user choose stable rate
     *
     * Weight: 0
     *
     * @summary VIP Loan Borrow(TRADE)
     * @param {VipLoanBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Borrow Binance API Documentation}
     */
    public async vipLoanBorrow(
        requestParameters: VipLoanBorrowRequest
    ): Promise<RestApiResponse<VipLoanBorrowResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.vipLoanBorrow(
            requestParameters?.loanAccountId,
            requestParameters?.loanCoin,
            requestParameters?.loanAmount,
            requestParameters?.collateralAccountId,
            requestParameters?.collateralCoin,
            requestParameters?.isFlexibleRate,
            requestParameters?.recvWindow
        );
        return sendRequest<VipLoanBorrowResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Renew(TRADE)
     * @param {VipLoanRenewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanRenewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Renew Binance API Documentation}
     */
    public async vipLoanRenew(
        requestParameters: VipLoanRenewRequest
    ): Promise<RestApiResponse<VipLoanRenewResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.vipLoanRenew(
            requestParameters?.orderId,
            requestParameters?.loanTerm,
            requestParameters?.recvWindow
        );
        return sendRequest<VipLoanRenewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Repay(TRADE)
     * @param {VipLoanRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Repay Binance API Documentation}
     */
    public async vipLoanRepay(
        requestParameters: VipLoanRepayRequest
    ): Promise<RestApiResponse<VipLoanRepayResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.vipLoanRepay(
            requestParameters?.orderId,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<VipLoanRepayResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
