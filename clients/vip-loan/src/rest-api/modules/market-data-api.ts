/**
 * Binance Public VIP Loan REST API
 *
 * OpenAPI Specification for the Binance Public VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetBorrowInterestRateResponse,
    GetCollateralAssetDataResponse,
    GetLoanableAssetsDataResponse,
} from '../types';

/**
 * MarketDataApi - axios parameter creator
 */
const MarketDataApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Borrow Interest Rate
         *
         * Weight: 400
         *
         * @summary Get Borrow Interest Rate(USER_DATA)
         * @param {string} loanCoin
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getBorrowInterestRate: async (
            loanCoin: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('getBorrowInterestRate', 'loanCoin', loanCoin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/request/interestRate',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Collateral Asset Data
         *
         * Weight: 400
         *
         * @summary Get Collateral Asset Data(USER_DATA)
         * @param {string} [collateralCoin]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCollateralAssetData: async (
            collateralCoin?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/collateral/data',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         *
         * Weight: 400
         *
         * @summary Get Loanable Assets Data(USER_DATA)
         * @param {string} [loanCoin]
         * @param {number} [vipLevel] default:user's vip level
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLoanableAssetsData: async (
            loanCoin?: string,
            vipLevel?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (vipLevel !== undefined && vipLevel !== null) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/loan/vip/loanable/data',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketDataApi - interface
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get Borrow Interest Rate
     *
     * Weight: 400
     *
     * @summary Get Borrow Interest Rate(USER_DATA)
     * @param {GetBorrowInterestRateRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getBorrowInterestRate(
        requestParameters: GetBorrowInterestRateRequest
    ): Promise<RestApiResponse<GetBorrowInterestRateResponse>>;
    /**
     * Get Collateral Asset Data
     *
     * Weight: 400
     *
     * @summary Get Collateral Asset Data(USER_DATA)
     * @param {GetCollateralAssetDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getCollateralAssetData(
        requestParameters?: GetCollateralAssetDataRequest
    ): Promise<RestApiResponse<GetCollateralAssetDataResponse>>;
    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Loanable Assets Data(USER_DATA)
     * @param {GetLoanableAssetsDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getLoanableAssetsData(
        requestParameters?: GetLoanableAssetsDataRequest
    ): Promise<RestApiResponse<GetLoanableAssetsDataResponse>>;
}

/**
 * Request parameters for getBorrowInterestRate operation in MarketDataApi.
 * @interface GetBorrowInterestRateRequest
 */
export interface GetBorrowInterestRateRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiGetBorrowInterestRate
     */
    readonly loanCoin: string;

    /**
     *
     * @type {number}
     * @memberof MarketDataApiGetBorrowInterestRate
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCollateralAssetData operation in MarketDataApi.
 * @interface GetCollateralAssetDataRequest
 */
export interface GetCollateralAssetDataRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiGetCollateralAssetData
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof MarketDataApiGetCollateralAssetData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLoanableAssetsData operation in MarketDataApi.
 * @interface GetLoanableAssetsDataRequest
 */
export interface GetLoanableAssetsDataRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiGetLoanableAssetsData
     */
    readonly loanCoin?: string;

    /**
     * default:user's vip level
     * @type {number}
     * @memberof MarketDataApiGetLoanableAssetsData
     */
    readonly vipLevel?: number;

    /**
     *
     * @type {number}
     * @memberof MarketDataApiGetLoanableAssetsData
     */
    readonly recvWindow?: number;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration);
    }

    /**
     * Get Borrow Interest Rate
     *
     * Weight: 400
     *
     * @summary Get Borrow Interest Rate(USER_DATA)
     * @param {GetBorrowInterestRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBorrowInterestRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Borrow-Interest-Rate Binance API Documentation}
     */
    public async getBorrowInterestRate(
        requestParameters: GetBorrowInterestRateRequest
    ): Promise<RestApiResponse<GetBorrowInterestRateResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBorrowInterestRate(
            requestParameters?.loanCoin,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBorrowInterestRateResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Collateral Asset Data
     *
     * Weight: 400
     *
     * @summary Get Collateral Asset Data(USER_DATA)
     * @param {GetCollateralAssetDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCollateralAssetDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Collateral-Asset-Data Binance API Documentation}
     */
    public async getCollateralAssetData(
        requestParameters: GetCollateralAssetDataRequest = {}
    ): Promise<RestApiResponse<GetCollateralAssetDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCollateralAssetData(
            requestParameters?.collateralCoin,
            requestParameters?.recvWindow
        );
        return sendRequest<GetCollateralAssetDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Loanable Assets Data(USER_DATA)
     * @param {GetLoanableAssetsDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLoanableAssetsDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Loanable-Assets-Data Binance API Documentation}
     */
    public async getLoanableAssetsData(
        requestParameters: GetLoanableAssetsDataRequest = {}
    ): Promise<RestApiResponse<GetLoanableAssetsDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLoanableAssetsData(
            requestParameters?.loanCoin,
            requestParameters?.vipLevel,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLoanableAssetsDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
