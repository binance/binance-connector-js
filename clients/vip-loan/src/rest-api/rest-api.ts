/**
 * Binance Public VIP Loan REST API
 *
 * OpenAPI Specification for the Binance Public VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { MarketDataApi } from './modules/market-data-api';
import { TradeApi } from './modules/trade-api';
import { UserInformationApi } from './modules/user-information-api';

import type {
    GetBorrowInterestRateRequest,
    GetCollateralAssetDataRequest,
    GetLoanableAssetsDataRequest,
} from './modules/market-data-api';
import type {
    VipLoanBorrowRequest,
    VipLoanRenewRequest,
    VipLoanRepayRequest,
} from './modules/trade-api';
import type {
    CheckVIPLoanCollateralAccountRequest,
    GetVIPLoanOngoingOrdersRequest,
    QueryApplicationStatusRequest,
} from './modules/user-information-api';

import type {
    GetBorrowInterestRateResponse,
    GetCollateralAssetDataResponse,
    GetLoanableAssetsDataResponse,
} from './types';
import type { VipLoanBorrowResponse, VipLoanRenewResponse, VipLoanRepayResponse } from './types';
import type {
    CheckVIPLoanCollateralAccountResponse,
    GetVIPLoanOngoingOrdersResponse,
    QueryApplicationStatusResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private marketDataApi: MarketDataApi;
    private tradeApi: TradeApi;
    private userInformationApi: UserInformationApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.marketDataApi = new MarketDataApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.userInformationApi = new UserInformationApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Get Borrow Interest Rate
     *
     * Weight: 400
     *
     * @summary Get Borrow Interest Rate(USER_DATA)
     * @param {GetBorrowInterestRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBorrowInterestRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Borrow-Interest-Rate Binance API Documentation}
     */
    getBorrowInterestRate(
        requestParameters: GetBorrowInterestRateRequest
    ): Promise<RestApiResponse<GetBorrowInterestRateResponse>> {
        return this.marketDataApi.getBorrowInterestRate(requestParameters);
    }

    /**
     * Get Collateral Asset Data
     *
     * Weight: 400
     *
     * @summary Get Collateral Asset Data(USER_DATA)
     * @param {GetCollateralAssetDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCollateralAssetDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Collateral-Asset-Data Binance API Documentation}
     */
    getCollateralAssetData(
        requestParameters: GetCollateralAssetDataRequest = {}
    ): Promise<RestApiResponse<GetCollateralAssetDataResponse>> {
        return this.marketDataApi.getCollateralAssetData(requestParameters);
    }

    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Loanable Assets Data(USER_DATA)
     * @param {GetLoanableAssetsDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLoanableAssetsDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/market-data/Get-Loanable-Assets-Data Binance API Documentation}
     */
    getLoanableAssetsData(
        requestParameters: GetLoanableAssetsDataRequest = {}
    ): Promise<RestApiResponse<GetLoanableAssetsDataResponse>> {
        return this.marketDataApi.getLoanableAssetsData(requestParameters);
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * loanAccountId refer to loan receiving account
     * Only master account applications are supported
     * loanAccountId and collateralAccountId under same master account
     * loanTerm is mandatory if user choose stable rate
     *
     * Weight: 0
     *
     * @summary VIP Loan Borrow(TRADE)
     * @param {VipLoanBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Borrow Binance API Documentation}
     */
    vipLoanBorrow(
        requestParameters: VipLoanBorrowRequest
    ): Promise<RestApiResponse<VipLoanBorrowResponse>> {
        return this.tradeApi.vipLoanBorrow(requestParameters);
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Renew(TRADE)
     * @param {VipLoanRenewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanRenewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Renew Binance API Documentation}
     */
    vipLoanRenew(
        requestParameters: VipLoanRenewRequest
    ): Promise<RestApiResponse<VipLoanRenewResponse>> {
        return this.tradeApi.vipLoanRenew(requestParameters);
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 6000
     *
     * @summary VIP Loan Repay(TRADE)
     * @param {VipLoanRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VipLoanRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Repay Binance API Documentation}
     */
    vipLoanRepay(
        requestParameters: VipLoanRepayRequest
    ): Promise<RestApiResponse<VipLoanRepayResponse>> {
        return this.tradeApi.vipLoanRepay(requestParameters);
    }

    /**
     * VIP loan is available for VIP users only
     *
     * If the login account is loan account, all collateral accounts under the loan account can be queried.
     * If the login account is collateral account, only the current collateral account can be queried.
     *
     * Weight: 6000
     *
     * @summary Check VIP Loan Collateral Account (USER_DATA)
     * @param {CheckVIPLoanCollateralAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CheckVIPLoanCollateralAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/user-information/Check-Locked-Value-of-VIP-Collateral-Account Binance API Documentation}
     */
    checkVIPLoanCollateralAccount(
        requestParameters: CheckVIPLoanCollateralAccountRequest = {}
    ): Promise<RestApiResponse<CheckVIPLoanCollateralAccountResponse>> {
        return this.userInformationApi.checkVIPLoanCollateralAccount(requestParameters);
    }

    /**
     * VIP loan is available for VIP users only.
     *
     * Weight: 400
     *
     * @summary Get VIP Loan Ongoing Orders(USER_DATA)
     * @param {GetVIPLoanOngoingOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetVIPLoanOngoingOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/user-information/Get-VIP-Loan-Ongoing-Orders Binance API Documentation}
     */
    getVIPLoanOngoingOrders(
        requestParameters: GetVIPLoanOngoingOrdersRequest = {}
    ): Promise<RestApiResponse<GetVIPLoanOngoingOrdersResponse>> {
        return this.userInformationApi.getVIPLoanOngoingOrders(requestParameters);
    }

    /**
     * Query Application Status
     *
     * Weight: 400
     *
     * @summary Query Application Status(USER_DATA)
     * @param {QueryApplicationStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryApplicationStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/vip_loan/user-information/Query-Application-Status Binance API Documentation}
     */
    queryApplicationStatus(
        requestParameters: QueryApplicationStatusRequest = {}
    ): Promise<RestApiResponse<QueryApplicationStatusResponse>> {
        return this.userInformationApi.queryApplicationStatus(requestParameters);
    }
}
