/**
 * Binance Public Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Public Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetFlexiblePersonalLeftQuotaResponse,
    GetFlexibleProductPositionResponse,
    GetLockedPersonalLeftQuotaResponse,
    GetLockedProductPositionResponse,
    GetSimpleEarnFlexibleProductListResponse,
    GetSimpleEarnLockedProductListResponse,
    SimpleAccountResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Flexible Personal Left Quota
         *
         * Weight: 150
         *
         * @summary Get Flexible Personal Left Quota(USER_DATA)
         * @param {string} productId
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexiblePersonalLeftQuota: async (
            productId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getFlexiblePersonalLeftQuota', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/personalLeftQuota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Product Position
         *
         * Weight: 150
         *
         * @summary Get Flexible Product Position(USER_DATA)
         * @param {string} [asset]
         * @param {string} [productId]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleProductPosition: async (
            asset?: string,
            productId?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/position',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Personal Left Quota
         *
         * Weight: 150
         *
         * @summary Get Locked Personal Left Quota(USER_DATA)
         * @param {string} projectId
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedPersonalLeftQuota: async (
            projectId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLockedPersonalLeftQuota', 'projectId', projectId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/personalLeftQuota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Product Position
         *
         * Weight: 150
         *
         * @summary Get Locked Product Position
         * @param {string} [asset]
         * @param {number} [positionId]
         * @param {string} [projectId]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedProductPosition: async (
            asset?: string,
            positionId?: number,
            projectId?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/position',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get available Simple Earn flexible product list
         *
         * Weight: 150
         *
         * @summary Get Simple Earn Flexible Product List(USER_DATA)
         * @param {string} [asset]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSimpleEarnFlexibleProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Simple Earn Locked Product List
         *
         * Get available Simple Earn locked product list
         *
         * Weight: 150
         *
         * @summary Get Simple Earn Locked Product List(USER_DATA)
         * @param {string} [asset]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSimpleEarnLockedProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Simple Account query
         *
         * Weight: 150
         *
         * @summary Simple Account(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        simpleAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get Flexible Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {GetFlexiblePersonalLeftQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFlexiblePersonalLeftQuota(
        requestParameters: GetFlexiblePersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>>;
    /**
     * Get Flexible Product Position
     *
     * Weight: 150
     *
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {GetFlexibleProductPositionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFlexibleProductPosition(
        requestParameters?: GetFlexibleProductPositionRequest
    ): Promise<RestApiResponse<GetFlexibleProductPositionResponse>>;
    /**
     * Get Locked Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {GetLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getLockedPersonalLeftQuota(
        requestParameters: GetLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>>;
    /**
     * Get Locked Product Position
     *
     * Weight: 150
     *
     * @summary Get Locked Product Position
     * @param {GetLockedProductPositionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getLockedProductPosition(
        requestParameters?: GetLockedProductPositionRequest
    ): Promise<RestApiResponse<GetLockedProductPositionResponse>>;
    /**
     * Get available Simple Earn flexible product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {GetSimpleEarnFlexibleProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getSimpleEarnFlexibleProductList(
        requestParameters?: GetSimpleEarnFlexibleProductListRequest
    ): Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>>;
    /**
     * Get Simple Earn Locked Product List
     *
     * Get available Simple Earn locked product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {GetSimpleEarnLockedProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getSimpleEarnLockedProductList(
        requestParameters?: GetSimpleEarnLockedProductListRequest
    ): Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>>;
    /**
     * Simple Account query
     *
     * Weight: 150
     *
     * @summary Simple Account(USER_DATA)
     * @param {SimpleAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    simpleAccount(
        requestParameters?: SimpleAccountRequest
    ): Promise<RestApiResponse<SimpleAccountResponse>>;
}

/**
 * Request parameters for getFlexiblePersonalLeftQuota operation in AccountApi.
 * @interface GetFlexiblePersonalLeftQuotaRequest
 */
export interface GetFlexiblePersonalLeftQuotaRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetFlexiblePersonalLeftQuota
     */
    readonly productId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFlexiblePersonalLeftQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleProductPosition operation in AccountApi.
 * @interface GetFlexibleProductPositionRequest
 */
export interface GetFlexibleProductPositionRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetFlexibleProductPosition
     */
    readonly asset?: string;

    /**
     *
     * @type {string}
     * @memberof AccountApiGetFlexibleProductPosition
     */
    readonly productId?: string;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiGetFlexibleProductPosition
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof AccountApiGetFlexibleProductPosition
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFlexibleProductPosition
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedPersonalLeftQuota operation in AccountApi.
 * @interface GetLockedPersonalLeftQuotaRequest
 */
export interface GetLockedPersonalLeftQuotaRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetLockedPersonalLeftQuota
     */
    readonly projectId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetLockedPersonalLeftQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedProductPosition operation in AccountApi.
 * @interface GetLockedProductPositionRequest
 */
export interface GetLockedProductPositionRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly projectId?: string;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetLockedProductPosition
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSimpleEarnFlexibleProductList operation in AccountApi.
 * @interface GetSimpleEarnFlexibleProductListRequest
 */
export interface GetSimpleEarnFlexibleProductListRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetSimpleEarnFlexibleProductList
     */
    readonly asset?: string;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiGetSimpleEarnFlexibleProductList
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof AccountApiGetSimpleEarnFlexibleProductList
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetSimpleEarnFlexibleProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSimpleEarnLockedProductList operation in AccountApi.
 * @interface GetSimpleEarnLockedProductListRequest
 */
export interface GetSimpleEarnLockedProductListRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetSimpleEarnLockedProductList
     */
    readonly asset?: string;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof AccountApiGetSimpleEarnLockedProductList
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof AccountApiGetSimpleEarnLockedProductList
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetSimpleEarnLockedProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for simpleAccount operation in AccountApi.
 * @interface SimpleAccountRequest
 */
export interface SimpleAccountRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiSimpleAccount
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Get Flexible Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {GetFlexiblePersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Personal-Left-Quota Binance API Documentation}
     */
    public async getFlexiblePersonalLeftQuota(
        requestParameters: GetFlexiblePersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexiblePersonalLeftQuota(
            requestParameters?.productId,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexiblePersonalLeftQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Product Position
     *
     * Weight: 150
     *
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {GetFlexibleProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Product-Position Binance API Documentation}
     */
    public async getFlexibleProductPosition(
        requestParameters: GetFlexibleProductPositionRequest = {}
    ): Promise<RestApiResponse<GetFlexibleProductPositionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleProductPosition(
            requestParameters?.asset,
            requestParameters?.productId,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleProductPositionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {GetLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Locked-Personal-Left-Quota Binance API Documentation}
     */
    public async getLockedPersonalLeftQuota(
        requestParameters: GetLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedPersonalLeftQuota(
            requestParameters?.projectId,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedPersonalLeftQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Product Position
     *
     * Weight: 150
     *
     * @summary Get Locked Product Position
     * @param {GetLockedProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Locked-Product-Position Binance API Documentation}
     */
    public async getLockedProductPosition(
        requestParameters: GetLockedProductPositionRequest = {}
    ): Promise<RestApiResponse<GetLockedProductPositionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedProductPosition(
            requestParameters?.asset,
            requestParameters?.positionId,
            requestParameters?.projectId,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedProductPositionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get available Simple Earn flexible product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {GetSimpleEarnFlexibleProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Flexible-Product-List Binance API Documentation}
     */
    public async getSimpleEarnFlexibleProductList(
        requestParameters: GetSimpleEarnFlexibleProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSimpleEarnFlexibleProductList(
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSimpleEarnFlexibleProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Simple Earn Locked Product List
     *
     * Get available Simple Earn locked product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {GetSimpleEarnLockedProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Locked-Product-List Binance API Documentation}
     */
    public async getSimpleEarnLockedProductList(
        requestParameters: GetSimpleEarnLockedProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getSimpleEarnLockedProductList(
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetSimpleEarnLockedProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Simple Account query
     *
     * Weight: 150
     *
     * @summary Simple Account(USER_DATA)
     * @param {SimpleAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SimpleAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Simple-Account Binance API Documentation}
     */
    public async simpleAccount(
        requestParameters: SimpleAccountRequest = {}
    ): Promise<RestApiResponse<SimpleAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.simpleAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<SimpleAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
