/**
 * Binance Public Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Public Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetFlexibleSubscriptionPreviewResponse,
    GetLockedSubscriptionPreviewResponse,
    RedeemFlexibleProductResponse,
    RedeemLockedProductResponse,
    SetFlexibleAutoSubscribeResponse,
    SetLockedAutoSubscribeResponse,
    SetLockedProductRedeemOptionResponse,
    SubscribeFlexibleProductResponse,
    SubscribeLockedProductResponse,
} from '../types';

/**
 * EarnApi - axios parameter creator
 */
const EarnApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Flexible Subscription Preview
         *
         * Weight: 150
         *
         * @summary Get Flexible Subscription Preview(USER_DATA)
         * @param {string} productId
         * @param {number} amount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleSubscriptionPreview: async (
            productId: string,
            amount: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getFlexibleSubscriptionPreview', 'productId', productId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getFlexibleSubscriptionPreview', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/subscriptionPreview',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Subscription Preview
         *
         * Weight: 150
         *
         * @summary Get Locked Subscription Preview(USER_DATA)
         * @param {string} projectId
         * @param {number} amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedSubscriptionPreview: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLockedSubscriptionPreview', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getLockedSubscriptionPreview', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/subscriptionPreview',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem Flexible Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Redeem Flexible Product(TRADE)
         * @param {string} productId
         * @param {boolean} [redeemAll] true or false, default to false
         * @param {number} [amount] if redeemAll is false, amount is mandatory
         * @param {string} [destAccount] `SPOT`,`FUND`, default `SPOT`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemFlexibleProduct: async (
            productId: string,
            redeemAll?: boolean,
            amount?: number,
            destAccount?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('redeemFlexibleProduct', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemAll !== undefined && redeemAll !== null) {
                localVarQueryParameter['redeemAll'] = redeemAll;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (destAccount !== undefined && destAccount !== null) {
                localVarQueryParameter['destAccount'] = destAccount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1/3s per account
         *
         * @summary Redeem Locked Product(TRADE)
         * @param {string} positionId
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemLockedProduct: async (
            positionId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('redeemLockedProduct', 'positionId', positionId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set Flexible Auto Subscribe
         *
         * Weight: 150
         *
         * @summary Set Flexible Auto Subscribe(USER_DATA)
         * @param {string} productId
         * @param {boolean} autoSubscribe true or false
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setFlexibleAutoSubscribe: async (
            productId: string,
            autoSubscribe: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('setFlexibleAutoSubscribe', 'productId', productId);
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('setFlexibleAutoSubscribe', 'autoSubscribe', autoSubscribe);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/setAutoSubscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set locked auto subscribe
         *
         * Weight: 150
         *
         * @summary Set Locked Auto Subscribe(USER_DATA)
         * @param {string} positionId
         * @param {boolean} autoSubscribe true or false
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setLockedAutoSubscribe: async (
            positionId: string,
            autoSubscribe: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('setLockedAutoSubscribe', 'positionId', positionId);
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists('setLockedAutoSubscribe', 'autoSubscribe', autoSubscribe);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/setAutoSubscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set redeem option for Locked product
         *
         * Weight: 50
         *
         * @summary Set Locked Product Redeem Option(USER_DATA)
         * @param {string} positionId
         * @param {string} redeemTo `SPOT`,'FLEXIBLE'
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setLockedProductRedeemOption: async (
            positionId: string,
            redeemTo: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('setLockedProductRedeemOption', 'positionId', positionId);
            // verify required parameter 'redeemTo' is not null or undefined
            assertParamExists('setLockedProductRedeemOption', 'redeemTo', redeemTo);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/setRedeemOption',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe Flexible Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Subscribe Flexible Product(TRADE)
         * @param {string} productId
         * @param {number} amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] `SPOT`,`FUND`,`ALL`, default `SPOT`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeFlexibleProduct: async (
            productId: string,
            amount: number,
            autoSubscribe?: boolean,
            sourceAccount?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('subscribeFlexibleProduct', 'productId', productId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeFlexibleProduct', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined && sourceAccount !== null) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1
         *
         * @summary Subscribe Locked Product(TRADE)
         * @param {string} projectId
         * @param {number} amount
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] `SPOT`,`FUND`,`ALL`, default `SPOT`
         * @param {string} [redeemTo] `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeLockedProduct: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            sourceAccount?: string,
            redeemTo?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('subscribeLockedProduct', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeLockedProduct', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined && sourceAccount !== null) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * EarnApi - interface
 * @interface EarnApi
 */
export interface EarnApiInterface {
    /**
     * Get Flexible Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {GetFlexibleSubscriptionPreviewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    getFlexibleSubscriptionPreview(
        requestParameters: GetFlexibleSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>>;
    /**
     * Get Locked Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {GetLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    getLockedSubscriptionPreview(
        requestParameters: GetLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>>;
    /**
     * Redeem Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Redeem Flexible Product(TRADE)
     * @param {RedeemFlexibleProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    redeemFlexibleProduct(
        requestParameters: RedeemFlexibleProductRequest
    ): Promise<RestApiResponse<RedeemFlexibleProductResponse>>;
    /**
     * Redeem Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem Locked Product(TRADE)
     * @param {RedeemLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    redeemLockedProduct(
        requestParameters: RedeemLockedProductRequest
    ): Promise<RestApiResponse<RedeemLockedProductResponse>>;
    /**
     * Set Flexible Auto Subscribe
     *
     * Weight: 150
     *
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SetFlexibleAutoSubscribeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    setFlexibleAutoSubscribe(
        requestParameters: SetFlexibleAutoSubscribeRequest
    ): Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>>;
    /**
     * Set locked auto subscribe
     *
     * Weight: 150
     *
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SetLockedAutoSubscribeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    setLockedAutoSubscribe(
        requestParameters: SetLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetLockedAutoSubscribeResponse>>;
    /**
     * Set redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SetLockedProductRedeemOptionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    setLockedProductRedeemOption(
        requestParameters: SetLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>>;
    /**
     * Subscribe Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SubscribeFlexibleProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    subscribeFlexibleProduct(
        requestParameters: SubscribeFlexibleProductRequest
    ): Promise<RestApiResponse<SubscribeFlexibleProductResponse>>;
    /**
     * Subscribe Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Locked Product(TRADE)
     * @param {SubscribeLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApiInterface
     */
    subscribeLockedProduct(
        requestParameters: SubscribeLockedProductRequest
    ): Promise<RestApiResponse<SubscribeLockedProductResponse>>;
}

/**
 * Request parameters for getFlexibleSubscriptionPreview operation in EarnApi.
 * @interface GetFlexibleSubscriptionPreviewRequest
 */
export interface GetFlexibleSubscriptionPreviewRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiGetFlexibleSubscriptionPreview
     */
    readonly productId: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiGetFlexibleSubscriptionPreview
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof EarnApiGetFlexibleSubscriptionPreview
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedSubscriptionPreview operation in EarnApi.
 * @interface GetLockedSubscriptionPreviewRequest
 */
export interface GetLockedSubscriptionPreviewRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiGetLockedSubscriptionPreview
     */
    readonly projectId: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiGetLockedSubscriptionPreview
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof EarnApiGetLockedSubscriptionPreview
     */
    readonly autoSubscribe?: boolean;

    /**
     *
     * @type {number}
     * @memberof EarnApiGetLockedSubscriptionPreview
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemFlexibleProduct operation in EarnApi.
 * @interface RedeemFlexibleProductRequest
 */
export interface RedeemFlexibleProductRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiRedeemFlexibleProduct
     */
    readonly productId: string;

    /**
     * true or false, default to false
     * @type {boolean}
     * @memberof EarnApiRedeemFlexibleProduct
     */
    readonly redeemAll?: boolean;

    /**
     * if redeemAll is false, amount is mandatory
     * @type {number}
     * @memberof EarnApiRedeemFlexibleProduct
     */
    readonly amount?: number;

    /**
     * `SPOT`,`FUND`, default `SPOT`
     * @type {string}
     * @memberof EarnApiRedeemFlexibleProduct
     */
    readonly destAccount?: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiRedeemFlexibleProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemLockedProduct operation in EarnApi.
 * @interface RedeemLockedProductRequest
 */
export interface RedeemLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiRedeemLockedProduct
     */
    readonly positionId: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiRedeemLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setFlexibleAutoSubscribe operation in EarnApi.
 * @interface SetFlexibleAutoSubscribeRequest
 */
export interface SetFlexibleAutoSubscribeRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiSetFlexibleAutoSubscribe
     */
    readonly productId: string;

    /**
     * true or false
     * @type {boolean}
     * @memberof EarnApiSetFlexibleAutoSubscribe
     */
    readonly autoSubscribe: boolean;

    /**
     *
     * @type {number}
     * @memberof EarnApiSetFlexibleAutoSubscribe
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setLockedAutoSubscribe operation in EarnApi.
 * @interface SetLockedAutoSubscribeRequest
 */
export interface SetLockedAutoSubscribeRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiSetLockedAutoSubscribe
     */
    readonly positionId: string;

    /**
     * true or false
     * @type {boolean}
     * @memberof EarnApiSetLockedAutoSubscribe
     */
    readonly autoSubscribe: boolean;

    /**
     *
     * @type {number}
     * @memberof EarnApiSetLockedAutoSubscribe
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setLockedProductRedeemOption operation in EarnApi.
 * @interface SetLockedProductRedeemOptionRequest
 */
export interface SetLockedProductRedeemOptionRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiSetLockedProductRedeemOption
     */
    readonly positionId: string;

    /**
     * `SPOT`,'FLEXIBLE'
     * @type {string}
     * @memberof EarnApiSetLockedProductRedeemOption
     */
    readonly redeemTo: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiSetLockedProductRedeemOption
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeFlexibleProduct operation in EarnApi.
 * @interface SubscribeFlexibleProductRequest
 */
export interface SubscribeFlexibleProductRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiSubscribeFlexibleProduct
     */
    readonly productId: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiSubscribeFlexibleProduct
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof EarnApiSubscribeFlexibleProduct
     */
    readonly autoSubscribe?: boolean;

    /**
     * `SPOT`,`FUND`,`ALL`, default `SPOT`
     * @type {string}
     * @memberof EarnApiSubscribeFlexibleProduct
     */
    readonly sourceAccount?: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiSubscribeFlexibleProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeLockedProduct operation in EarnApi.
 * @interface SubscribeLockedProductRequest
 */
export interface SubscribeLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly projectId: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly autoSubscribe?: boolean;

    /**
     * `SPOT`,`FUND`,`ALL`, default `SPOT`
     * @type {string}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly sourceAccount?: string;

    /**
     * `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
     * @type {string}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly redeemTo?: string;

    /**
     *
     * @type {number}
     * @memberof EarnApiSubscribeLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * EarnApi - object-oriented interface
 * @class EarnApi
 */
export class EarnApi implements EarnApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = EarnApiAxiosParamCreator(configuration);
    }

    /**
     * Get Flexible Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {GetFlexibleSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Get-Flexible-Subscription-Preview Binance API Documentation}
     */
    public async getFlexibleSubscriptionPreview(
        requestParameters: GetFlexibleSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleSubscriptionPreview(
                requestParameters?.productId,
                requestParameters?.amount,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleSubscriptionPreviewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {GetLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Get-Locked-Subscription-Preview Binance API Documentation}
     */
    public async getLockedSubscriptionPreview(
        requestParameters: GetLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedSubscriptionPreview(
            requestParameters?.projectId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedSubscriptionPreviewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Redeem Flexible Product(TRADE)
     * @param {RedeemFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Redeem-Flexible-Product Binance API Documentation}
     */
    public async redeemFlexibleProduct(
        requestParameters: RedeemFlexibleProductRequest
    ): Promise<RestApiResponse<RedeemFlexibleProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemFlexibleProduct(
            requestParameters?.productId,
            requestParameters?.redeemAll,
            requestParameters?.amount,
            requestParameters?.destAccount,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemFlexibleProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem Locked Product(TRADE)
     * @param {RedeemLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Redeem-Locked-Product Binance API Documentation}
     */
    public async redeemLockedProduct(
        requestParameters: RedeemLockedProductRequest
    ): Promise<RestApiResponse<RedeemLockedProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemLockedProduct(
            requestParameters?.positionId,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set Flexible Auto Subscribe
     *
     * Weight: 150
     *
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SetFlexibleAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Flexible-Auto-Subscribe Binance API Documentation}
     */
    public async setFlexibleAutoSubscribe(
        requestParameters: SetFlexibleAutoSubscribeRequest
    ): Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setFlexibleAutoSubscribe(
            requestParameters?.productId,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<SetFlexibleAutoSubscribeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set locked auto subscribe
     *
     * Weight: 150
     *
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SetLockedAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Auto-Subscribe Binance API Documentation}
     */
    public async setLockedAutoSubscribe(
        requestParameters: SetLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetLockedAutoSubscribeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setLockedAutoSubscribe(
            requestParameters?.positionId,
            requestParameters?.autoSubscribe,
            requestParameters?.recvWindow
        );
        return sendRequest<SetLockedAutoSubscribeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SetLockedProductRedeemOptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Redeem-Option Binance API Documentation}
     */
    public async setLockedProductRedeemOption(
        requestParameters: SetLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.setLockedProductRedeemOption(
            requestParameters?.positionId,
            requestParameters?.redeemTo,
            requestParameters?.recvWindow
        );
        return sendRequest<SetLockedProductRedeemOptionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SubscribeFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Subscribe-Flexible-Product Binance API Documentation}
     */
    public async subscribeFlexibleProduct(
        requestParameters: SubscribeFlexibleProductRequest
    ): Promise<RestApiResponse<SubscribeFlexibleProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeFlexibleProduct(
            requestParameters?.productId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.sourceAccount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeFlexibleProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Locked Product(TRADE)
     * @param {SubscribeLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EarnApi
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Subscribe-Locked-Product Binance API Documentation}
     */
    public async subscribeLockedProduct(
        requestParameters: SubscribeLockedProductRequest
    ): Promise<RestApiResponse<SubscribeLockedProductResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeLockedProduct(
            requestParameters?.projectId,
            requestParameters?.amount,
            requestParameters?.autoSubscribe,
            requestParameters?.sourceAccount,
            requestParameters?.redeemTo,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
