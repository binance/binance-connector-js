/**
 * Binance Public Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Public Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetCollateralRecordResponse,
    GetFlexibleRedemptionRecordResponse,
    GetFlexibleRewardsHistoryResponse,
    GetFlexibleSubscriptionRecordResponse,
    GetLockedRedemptionRecordResponse,
    GetLockedRewardsHistoryResponse,
    GetLockedSubscriptionRecordResponse,
    GetRateHistoryResponse,
} from '../types';

/**
 * HistoryApi - axios parameter creator
 */
const HistoryApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Collateral Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 30 days.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 1
         *
         * @summary Get Collateral Record(USER_DATA)
         * @param {string} [productId]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCollateralRecord: async (
            productId?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/collateralRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Redemption Record
         *
         *	The time between `startTime` and `endTime` cannot be longer than 3 months.
         *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Redemption Record(USER_DATA)
         * @param {string} [productId]
         * @param {string} [redeemId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         *
         * @throws {RequiredError}
         */
        getFlexibleRedemptionRecord: async (
            productId?: string,
            redeemId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemId !== undefined && redeemId !== null) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/redemptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Rewards History
         *
         *	The time between `startTime` and `endTime` cannot be longer than 3 months.
         *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Rewards History(USER_DATA)
         * @param {string} type `Bonus` - Bonus tiered APR, `REALTIME` Real-time APR, `REWARDS` Historical rewards,`ALL`(set to default)
         * @param {string} [productId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         *
         * @throws {RequiredError}
         */
        getFlexibleRewardsHistory: async (
            type: string,
            productId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFlexibleRewardsHistory', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Subscription Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Flexible Subscription Record(USER_DATA)
         * @param {string} [productId]
         * @param {string} [purchaseId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleSubscriptionRecord: async (
            productId?: string,
            purchaseId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (purchaseId !== undefined && purchaseId !== null) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/subscriptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Redemption Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Redemption Record(USER_DATA)
         * @param {number} [positionId]
         * @param {string} [redeemId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedRedemptionRecord: async (
            positionId?: number,
            redeemId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemId !== undefined && redeemId !== null) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/redemptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Rewards History
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Rewards History(USER_DATA)
         * @param {number} [positionId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedRewardsHistory: async (
            positionId?: number,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Locked Subscription Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Locked Subscription Record(USER_DATA)
         * @param {string} [purchaseId]
         * @param {string} [asset]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getLockedSubscriptionRecord: async (
            purchaseId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (purchaseId !== undefined && purchaseId !== null) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/locked/history/subscriptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Rate History
         *
         * The time between startTime and endTime cannot be longer than 1 year.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Rate History(USER_DATA)
         * @param {string} productId
         * @param {string} [aprPeriod] "DAY","YEAR",default"DAY"
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying the page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getRateHistory: async (
            productId: string,
            aprPeriod?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getRateHistory', 'productId', productId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (productId !== undefined && productId !== null) {
                localVarQueryParameter['productId'] = productId;
            }

            if (aprPeriod !== undefined && aprPeriod !== null) {
                localVarQueryParameter['aprPeriod'] = aprPeriod;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/simple-earn/flexible/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * HistoryApi - interface
 * @interface HistoryApi
 */
export interface HistoryApiInterface {
    /**
     * Get Collateral Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 30 days.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 1
     *
     * @summary Get Collateral Record(USER_DATA)
     * @param {GetCollateralRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getCollateralRecord(
        requestParameters?: GetCollateralRecordRequest
    ): Promise<RestApiResponse<GetCollateralRecordResponse>>;
    /**
     * Get Flexible Redemption Record
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {GetFlexibleRedemptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getFlexibleRedemptionRecord(
        requestParameters?: GetFlexibleRedemptionRecordRequest
    ): Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>>;
    /**
     * Get Flexible Rewards History
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {GetFlexibleRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getFlexibleRewardsHistory(
        requestParameters: GetFlexibleRewardsHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>>;
    /**
     * Get Flexible Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {GetFlexibleSubscriptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getFlexibleSubscriptionRecord(
        requestParameters?: GetFlexibleSubscriptionRecordRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>>;
    /**
     * Get Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {GetLockedRedemptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getLockedRedemptionRecord(
        requestParameters?: GetLockedRedemptionRecordRequest
    ): Promise<RestApiResponse<GetLockedRedemptionRecordResponse>>;
    /**
     * Get Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {GetLockedRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getLockedRewardsHistory(
        requestParameters?: GetLockedRewardsHistoryRequest
    ): Promise<RestApiResponse<GetLockedRewardsHistoryResponse>>;
    /**
     * Get Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {GetLockedSubscriptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getLockedSubscriptionRecord(
        requestParameters?: GetLockedSubscriptionRecordRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>>;
    /**
     * Get Rate History
     *
     * The time between startTime and endTime cannot be longer than 1 year.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Rate History(USER_DATA)
     * @param {GetRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApiInterface
     */
    getRateHistory(
        requestParameters: GetRateHistoryRequest
    ): Promise<RestApiResponse<GetRateHistoryResponse>>;
}

/**
 * Request parameters for getCollateralRecord operation in HistoryApi.
 * @interface GetCollateralRecordRequest
 */
export interface GetCollateralRecordRequest {
    /**
     *
     * @type {string}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetCollateralRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleRedemptionRecord operation in HistoryApi.
 * @interface GetFlexibleRedemptionRecordRequest
 */
export interface GetFlexibleRedemptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly redeemId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetFlexibleRedemptionRecord
     */
    readonly size?: number;
}

/**
 * Request parameters for getFlexibleRewardsHistory operation in HistoryApi.
 * @interface GetFlexibleRewardsHistoryRequest
 */
export interface GetFlexibleRewardsHistoryRequest {
    /**
     * `Bonus` - Bonus tiered APR, `REALTIME` Real-time APR, `REWARDS` Historical rewards,`ALL`(set to default)
     * @type {string}
     * @memberof HistoryApiGetFlexibleRewardsHistory
     */
    readonly type: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleRewardsHistory
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleRewardsHistory
     */
    readonly endTime?: number;
}

/**
 * Request parameters for getFlexibleSubscriptionRecord operation in HistoryApi.
 * @interface GetFlexibleSubscriptionRecordRequest
 */
export interface GetFlexibleSubscriptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly productId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly purchaseId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetFlexibleSubscriptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedRedemptionRecord operation in HistoryApi.
 * @interface GetLockedRedemptionRecordRequest
 */
export interface GetLockedRedemptionRecordRequest {
    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly redeemId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRedemptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedRewardsHistory operation in HistoryApi.
 * @interface GetLockedRewardsHistoryRequest
 */
export interface GetLockedRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getLockedSubscriptionRecord operation in HistoryApi.
 * @interface GetLockedSubscriptionRecordRequest
 */
export interface GetLockedSubscriptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly purchaseId?: string;

    /**
     *
     * @type {string}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetLockedSubscriptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getRateHistory operation in HistoryApi.
 * @interface GetRateHistoryRequest
 */
export interface GetRateHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof HistoryApiGetRateHistory
     */
    readonly productId: string;

    /**
     * "DAY","YEAR",default"DAY"
     * @type {string}
     * @memberof HistoryApiGetRateHistory
     */
    readonly aprPeriod?: string;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying the page. Start from 1. Default:1
     * @type {number}
     * @memberof HistoryApiGetRateHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof HistoryApiGetRateHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof HistoryApiGetRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * HistoryApi - object-oriented interface
 * @class HistoryApi
 */
export class HistoryApi implements HistoryApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = HistoryApiAxiosParamCreator(configuration);
    }

    /**
     * Get Collateral Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 30 days.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 1
     *
     * @summary Get Collateral Record(USER_DATA)
     * @param {GetCollateralRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCollateralRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Collateral-Record Binance API Documentation}
     */
    public async getCollateralRecord(
        requestParameters: GetCollateralRecordRequest = {}
    ): Promise<RestApiResponse<GetCollateralRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCollateralRecord(
            requestParameters?.productId,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetCollateralRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Redemption Record
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {GetFlexibleRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Redemption-Record Binance API Documentation}
     */
    public async getFlexibleRedemptionRecord(
        requestParameters: GetFlexibleRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleRedemptionRecord(
            requestParameters?.productId,
            requestParameters?.redeemId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size
        );
        return sendRequest<GetFlexibleRedemptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Rewards History
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {GetFlexibleRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Rewards-History Binance API Documentation}
     */
    public async getFlexibleRewardsHistory(
        requestParameters: GetFlexibleRewardsHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleRewardsHistory(
            requestParameters?.type,
            requestParameters?.productId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime
        );
        return sendRequest<GetFlexibleRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {GetFlexibleSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Subscription-Record Binance API Documentation}
     */
    public async getFlexibleSubscriptionRecord(
        requestParameters: GetFlexibleSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleSubscriptionRecord(
                requestParameters?.productId,
                requestParameters?.purchaseId,
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleSubscriptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {GetLockedRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Redemption-Record Binance API Documentation}
     */
    public async getLockedRedemptionRecord(
        requestParameters: GetLockedRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedRedemptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedRedemptionRecord(
            requestParameters?.positionId,
            requestParameters?.redeemId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedRedemptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {GetLockedRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Rewards-History Binance API Documentation}
     */
    public async getLockedRewardsHistory(
        requestParameters: GetLockedRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetLockedRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedRewardsHistory(
            requestParameters?.positionId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {GetLockedSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Subscription-Record Binance API Documentation}
     */
    public async getLockedSubscriptionRecord(
        requestParameters: GetLockedSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getLockedSubscriptionRecord(
            requestParameters?.purchaseId,
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetLockedSubscriptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Rate History
     *
     * The time between startTime and endTime cannot be longer than 1 year.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Rate History(USER_DATA)
     * @param {GetRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof HistoryApi
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Rate-History Binance API Documentation}
     */
    public async getRateHistory(
        requestParameters: GetRateHistoryRequest
    ): Promise<RestApiResponse<GetRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getRateHistory(
            requestParameters?.productId,
            requestParameters?.aprPeriod,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
