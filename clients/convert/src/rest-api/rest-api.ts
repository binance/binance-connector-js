/**
 * Binance Convert REST API
 *
 * OpenAPI Specification for the Binance Convert REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { MarketDataApi } from './modules/market-data-api';
import { TradeApi } from './modules/trade-api';

import type {
    ListAllConvertPairsRequest,
    QueryOrderQuantityPrecisionPerAssetRequest,
} from './modules/market-data-api';
import type {
    AcceptQuoteRequest,
    CancelLimitOrderRequest,
    GetConvertTradeHistoryRequest,
    OrderStatusRequest,
    PlaceLimitOrderRequest,
    QueryLimitOpenOrdersRequest,
    SendQuoteRequestRequest,
} from './modules/trade-api';

import type {
    ListAllConvertPairsResponse,
    QueryOrderQuantityPrecisionPerAssetResponse,
} from './types';
import type {
    AcceptQuoteResponse,
    CancelLimitOrderResponse,
    GetConvertTradeHistoryResponse,
    OrderStatusResponse,
    PlaceLimitOrderResponse,
    QueryLimitOpenOrdersResponse,
    SendQuoteRequestResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private marketDataApi: MarketDataApi;
    private tradeApi: TradeApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.marketDataApi = new MarketDataApi(configuration);
        this.tradeApi = new TradeApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Query for all convertible token pairs and the tokens’ respective upper/lower limits
     *
     * User needs to supply either or both of the input parameter
     * If not defined for both fromAsset and toAsset, only partial token pairs will be returned
     *
     * Weight: 3000(IP)
     *
     * @summary List All Convert Pairs
     * @param {ListAllConvertPairsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ListAllConvertPairsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/market-data/List-All-Convert-Pairs Binance API Documentation}
     */
    listAllConvertPairs(
        requestParameters: ListAllConvertPairsRequest = {}
    ): Promise<RestApiResponse<ListAllConvertPairsResponse>> {
        return this.marketDataApi.listAllConvertPairs(requestParameters);
    }

    /**
     * Query for supported asset’s precision information
     *
     * Weight: 100(IP)
     *
     * @summary Query order quantity precision per asset(USER_DATA)
     * @param {QueryOrderQuantityPrecisionPerAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryOrderQuantityPrecisionPerAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/market-data/Query-order-quantity-precision-per-asset Binance API Documentation}
     */
    queryOrderQuantityPrecisionPerAsset(
        requestParameters: QueryOrderQuantityPrecisionPerAssetRequest = {}
    ): Promise<RestApiResponse<QueryOrderQuantityPrecisionPerAssetResponse>> {
        return this.marketDataApi.queryOrderQuantityPrecisionPerAsset(requestParameters);
    }

    /**
     * Accept the offered quote by quote ID.
     *
     * Weight: 500(UID)
     *
     * @summary Accept Quote (TRADE)
     * @param {AcceptQuoteRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AcceptQuoteResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Accept-Quote Binance API Documentation}
     */
    acceptQuote(
        requestParameters: AcceptQuoteRequest
    ): Promise<RestApiResponse<AcceptQuoteResponse>> {
        return this.tradeApi.acceptQuote(requestParameters);
    }

    /**
     * Enable users to cancel a limit order
     *
     * Weight: 200(UID)
     *
     * @summary Cancel limit order (USER_DATA)
     * @param {CancelLimitOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelLimitOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Cancel-Order Binance API Documentation}
     */
    cancelLimitOrder(
        requestParameters: CancelLimitOrderRequest
    ): Promise<RestApiResponse<CancelLimitOrderResponse>> {
        return this.tradeApi.cancelLimitOrder(requestParameters);
    }

    /**
     * Get Convert Trade History
     *
     * The max interval between startTime and endTime is 30 days.
     *
     * Weight: 3000
     *
     * @summary Get Convert Trade History(USER_DATA)
     * @param {GetConvertTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetConvertTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Get-Convert-Trade-History Binance API Documentation}
     */
    getConvertTradeHistory(
        requestParameters: GetConvertTradeHistoryRequest
    ): Promise<RestApiResponse<GetConvertTradeHistoryResponse>> {
        return this.tradeApi.getConvertTradeHistory(requestParameters);
    }

    /**
     * Query order status by order ID.
     *
     * Weight: 100(UID)
     *
     * @summary Order status(USER_DATA)
     * @param {OrderStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Order-Status Binance API Documentation}
     */
    orderStatus(
        requestParameters: OrderStatusRequest = {}
    ): Promise<RestApiResponse<OrderStatusResponse>> {
        return this.tradeApi.orderStatus(requestParameters);
    }

    /**
     * Enable users to place a limit order
     *
     * `baseAsset` or `quoteAsset` can be determined via `exchangeInfo` endpoint.
     * Limit price is defined from `baseAsset` to `quoteAsset`.
     * Either `baseAmount` or `quoteAmount` is used.
     *
     * Weight: 500(UID)
     *
     * @summary Place limit order (USER_DATA)
     * @param {PlaceLimitOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PlaceLimitOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Place-Order Binance API Documentation}
     */
    placeLimitOrder(
        requestParameters: PlaceLimitOrderRequest
    ): Promise<RestApiResponse<PlaceLimitOrderResponse>> {
        return this.tradeApi.placeLimitOrder(requestParameters);
    }

    /**
     * Request a quote for the requested token pairs
     *
     * Weight: 3000(UID)
     *
     * @summary Query limit open orders (USER_DATA)
     * @param {QueryLimitOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryLimitOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Query-Order Binance API Documentation}
     */
    queryLimitOpenOrders(
        requestParameters: QueryLimitOpenOrdersRequest = {}
    ): Promise<RestApiResponse<QueryLimitOpenOrdersResponse>> {
        return this.tradeApi.queryLimitOpenOrders(requestParameters);
    }

    /**
     * Request a quote for the requested token pairs
     *
     * Either fromAmount or toAmount should be sent
     * `quoteId` will be returned only if you have enough funds to convert
     *
     * Weight: 200(UID)
     *
     * @summary Send Quote Request(USER_DATA)
     * @param {SendQuoteRequestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SendQuoteRequestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/convert/trade/Send-quote-request Binance API Documentation}
     */
    sendQuoteRequest(
        requestParameters: SendQuoteRequestRequest
    ): Promise<RestApiResponse<SendQuoteRequestResponse>> {
        return this.tradeApi.sendQuoteRequest(requestParameters);
    }
}
