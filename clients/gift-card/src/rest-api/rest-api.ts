/**
 * Binance Gift Card REST API
 *
 * OpenAPI Specification for the Binance Gift Card REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { MarketDataApi } from './modules/market-data-api';

import type {
    CreateADualTokenGiftCardRequest,
    CreateASingleTokenGiftCardRequest,
    FetchRsaPublicKeyRequest,
    FetchTokenLimitRequest,
    RedeemABinanceGiftCardRequest,
    VerifyBinanceGiftCardByGiftCardNumberRequest,
} from './modules/market-data-api';

import type {
    CreateADualTokenGiftCardResponse,
    CreateASingleTokenGiftCardResponse,
    FetchRsaPublicKeyResponse,
    FetchTokenLimitResponse,
    RedeemABinanceGiftCardResponse,
    VerifyBinanceGiftCardByGiftCardNumberResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private marketDataApi: MarketDataApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.marketDataApi = new MarketDataApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * * This API is for creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card using USDT as baseToken, that is redeemable to another designated token (faceToken). For example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee. This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable to BTC equivalent to 100 USDT upon redemption.
     * Once successfully created, the amount of baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from your funding wallet.
     *
     *
     * To get started with, please make sure:
     * You have a Binance account
     * You have passed KYB
     * You have a sufﬁcient balance(Gift Card amount and fee amount) in your Binance funding wallet
     * You need Enable Withdrawals for the API Key which requests this endpoint.
     *
     * Weight: 1
     * Monthly creation volume: 4,200,000 USDC / month / account
     * Monthly creation quantity: 6,000 Gift Cards / month / account
     *
     * @summary Create a dual-token gift card(fixed value, discount feature)(TRADE)
     * @param {CreateADualTokenGiftCardRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CreateADualTokenGiftCardResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Create-a-dual-token-gift-card Binance API Documentation}
     */
    createADualTokenGiftCard(
        requestParameters: CreateADualTokenGiftCardRequest
    ): Promise<RestApiResponse<CreateADualTokenGiftCardResponse>> {
        return this.marketDataApi.createADualTokenGiftCard(requestParameters);
    }

    /**
     * This API is for creating a Binance Gift Card.
     *
     * To get started with, please make sure:
     *
     * You have a Binance account
     * You have passed KYB
     * You have a sufﬁcient balance(Gift Card amount and fee amount) in your Binance funding wallet
     * You need `Enable Withdrawals` for the API Key which requests this endpoint.
     *
     * Weight: 1
     * Monthly creation volume: 4,200,000 USDC / month / account
     * Monthly creation quantity: 6,000 Gift Cards / month / account
     *
     * @summary Create a single-token gift card (USER_DATA)
     * @param {CreateASingleTokenGiftCardRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CreateASingleTokenGiftCardResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Create-a-single-token-gift-card Binance API Documentation}
     */
    createASingleTokenGiftCard(
        requestParameters: CreateASingleTokenGiftCardRequest
    ): Promise<RestApiResponse<CreateASingleTokenGiftCardResponse>> {
        return this.marketDataApi.createASingleTokenGiftCard(requestParameters);
    }

    /**
     * This API is for fetching the RSA Public Key.
     * This RSA Public key will be used to encrypt the card code.
     *
     **Please note that the RSA Public key fetched is valid only for the current day.**
     *
     * Weight: 1
     *
     * @summary Fetch RSA Public Key(USER_DATA)
     * @param {FetchRsaPublicKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FetchRsaPublicKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Fetch-RSA-Public-Key Binance API Documentation}
     */
    fetchRsaPublicKey(
        requestParameters: FetchRsaPublicKeyRequest = {}
    ): Promise<RestApiResponse<FetchRsaPublicKeyResponse>> {
        return this.marketDataApi.fetchRsaPublicKey(requestParameters);
    }

    /**
     * This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its’ limitation.
     *
     * Weight: 1
     *
     * @summary Fetch Token Limit(USER_DATA)
     * @param {FetchTokenLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FetchTokenLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Fetch-Token-Limit Binance API Documentation}
     */
    fetchTokenLimit(
        requestParameters: FetchTokenLimitRequest
    ): Promise<RestApiResponse<FetchTokenLimitResponse>> {
        return this.marketDataApi.fetchTokenLimit(requestParameters);
    }

    /**
     * This API is for redeeming a Binance Gift Card
     * Once redeemed, the coins will be deposited in your funding wallet.
     *
     * Parameter code can be sent in two formats:
     * Plaintext
     * Encrypted
     *
     * Sending code in Encrypted format provides more security than sending it as a plaintext. To send card code in encrypted format the following steps must be followed:
     * Fetch RSA public key from api stated below.
     * Use the below algorithm to encrypt the card code using the RSA public key fetched above: `RSA/ECB/OAEPWithSHA-256AndMGF1Padding`
     **A sample code snippet (JAVA) is stated below for reference, the same approach can be used for different languages like C#, PERL, PYTHON, SHELL etc.:**
     *
     * Weight: 1
     *
     * @summary Redeem a Binance Gift Card(USER_DATA)
     * @param {RedeemABinanceGiftCardRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemABinanceGiftCardResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Redeem-a-Binance-Gift-Card Binance API Documentation}
     */
    redeemABinanceGiftCard(
        requestParameters: RedeemABinanceGiftCardRequest
    ): Promise<RestApiResponse<RedeemABinanceGiftCardResponse>> {
        return this.marketDataApi.redeemABinanceGiftCard(requestParameters);
    }

    /**
     * This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.
     *
     **Please note that if you enter the wrong Gift Card Number 5 times within an hour, you will no longer be able to verify any Gift Card Number for that hour.**
     *
     * Weight: 1
     *
     * @summary Verify Binance Gift Card by Gift Card Number(USER_DATA)
     * @param {VerifyBinanceGiftCardByGiftCardNumberRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<VerifyBinanceGiftCardByGiftCardNumberResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/gift_card/market-data/Verify-Binance-Gift-Card-by-Gift-Card-Number Binance API Documentation}
     */
    verifyBinanceGiftCardByGiftCardNumber(
        requestParameters: VerifyBinanceGiftCardByGiftCardNumberRequest
    ): Promise<RestApiResponse<VerifyBinanceGiftCardByGiftCardNumberResponse>> {
        return this.marketDataApi.verifyBinanceGiftCardByGiftCardNumber(requestParameters);
    }
}
