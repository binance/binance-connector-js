/**
 * Binance Public Derivatives Trading Portfolio Margin REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { MarketDataApi } from './modules/market-data-api';
import { TradeApi } from './modules/trade-api';
import { UserDataStreamsApi } from './modules/user-data-streams-api';

import type {
    AccountBalanceRequest,
    AccountInformationRequest,
    BnbTransferRequest,
    ChangeAutoRepayFuturesStatusRequest,
    ChangeCmInitialLeverageRequest,
    ChangeCmPositionModeRequest,
    ChangeUmInitialLeverageRequest,
    ChangeUmPositionModeRequest,
    CmNotionalAndLeverageBracketsRequest,
    FundAutoCollectionRequest,
    FundCollectionByAssetRequest,
    GetAutoRepayFuturesStatusRequest,
    GetCmAccountDetailRequest,
    GetCmCurrentPositionModeRequest,
    GetCmIncomeHistoryRequest,
    GetDownloadIdForUmFuturesOrderHistoryRequest,
    GetDownloadIdForUmFuturesTradeHistoryRequest,
    GetDownloadIdForUmFuturesTransactionHistoryRequest,
    GetMarginBorrowLoanInterestHistoryRequest,
    GetUmAccountDetailRequest,
    GetUmAccountDetailV2Request,
    GetUmCurrentPositionModeRequest,
    GetUmFuturesOrderDownloadLinkByIdRequest,
    GetUmFuturesTradeDownloadLinkByIdRequest,
    GetUmFuturesTransactionDownloadLinkByIdRequest,
    GetUmIncomeHistoryRequest,
    GetUserCommissionRateForCmRequest,
    GetUserCommissionRateForUmRequest,
    MarginMaxBorrowRequest,
    PortfolioMarginUmTradingQuantitativeRulesIndicatorsRequest,
    QueryCmPositionInformationRequest,
    QueryMarginLoanRecordRequest,
    QueryMarginMaxWithdrawRequest,
    QueryMarginRepayRecordRequest,
    QueryPortfolioMarginNegativeBalanceInterestHistoryRequest,
    QueryUmPositionInformationRequest,
    QueryUserNegativeBalanceAutoExchangeRecordRequest,
    QueryUserRateLimitRequest,
    RepayFuturesNegativeBalanceRequest,
    UmFuturesAccountConfigurationRequest,
    UmFuturesSymbolConfigurationRequest,
    UmNotionalAndLeverageBracketsRequest,
} from './modules/account-api';
import type {} from './modules/market-data-api';
import type {
    CancelAllCmOpenConditionalOrdersRequest,
    CancelAllCmOpenOrdersRequest,
    CancelAllUmOpenConditionalOrdersRequest,
    CancelAllUmOpenOrdersRequest,
    CancelCmConditionalOrderRequest,
    CancelCmOrderRequest,
    CancelMarginAccountAllOpenOrdersOnASymbolRequest,
    CancelMarginAccountOcoOrdersRequest,
    CancelMarginAccountOrderRequest,
    CancelUmConditionalOrderRequest,
    CancelUmOrderRequest,
    CmAccountTradeListRequest,
    CmPositionAdlQuantileEstimationRequest,
    GetUmFuturesBnbBurnStatusRequest,
    MarginAccountBorrowRequest,
    MarginAccountNewOcoRequest,
    MarginAccountRepayRequest,
    MarginAccountRepayDebtRequest,
    MarginAccountTradeListRequest,
    ModifyCmOrderRequest,
    ModifyUmOrderRequest,
    NewCmConditionalOrderRequest,
    NewCmOrderRequest,
    NewMarginOrderRequest,
    NewUmConditionalOrderRequest,
    NewUmOrderRequest,
    QueryAllCmConditionalOrdersRequest,
    QueryAllCmOrdersRequest,
    QueryAllCurrentCmOpenConditionalOrdersRequest,
    QueryAllCurrentCmOpenOrdersRequest,
    QueryAllCurrentUmOpenConditionalOrdersRequest,
    QueryAllCurrentUmOpenOrdersRequest,
    QueryAllMarginAccountOrdersRequest,
    QueryAllUmConditionalOrdersRequest,
    QueryAllUmOrdersRequest,
    QueryCmConditionalOrderHistoryRequest,
    QueryCmModifyOrderHistoryRequest,
    QueryCmOrderRequest,
    QueryCurrentCmOpenConditionalOrderRequest,
    QueryCurrentCmOpenOrderRequest,
    QueryCurrentMarginOpenOrderRequest,
    QueryCurrentUmOpenConditionalOrderRequest,
    QueryCurrentUmOpenOrderRequest,
    QueryMarginAccountOrderRequest,
    QueryMarginAccountsAllOcoRequest,
    QueryMarginAccountsOcoRequest,
    QueryMarginAccountsOpenOcoRequest,
    QueryUmConditionalOrderHistoryRequest,
    QueryUmModifyOrderHistoryRequest,
    QueryUmOrderRequest,
    QueryUsersCmForceOrdersRequest,
    QueryUsersMarginForceOrdersRequest,
    QueryUsersUmForceOrdersRequest,
    ToggleBnbBurnOnUmFuturesTradeRequest,
    UmAccountTradeListRequest,
    UmPositionAdlQuantileEstimationRequest,
} from './modules/trade-api';
import type {} from './modules/user-data-streams-api';

import type {
    AccountBalanceResponse,
    AccountInformationResponse,
    BnbTransferResponse,
    ChangeAutoRepayFuturesStatusResponse,
    ChangeCmInitialLeverageResponse,
    ChangeCmPositionModeResponse,
    ChangeUmInitialLeverageResponse,
    ChangeUmPositionModeResponse,
    CmNotionalAndLeverageBracketsResponse,
    FundAutoCollectionResponse,
    FundCollectionByAssetResponse,
    GetAutoRepayFuturesStatusResponse,
    GetCmAccountDetailResponse,
    GetCmCurrentPositionModeResponse,
    GetCmIncomeHistoryResponse,
    GetDownloadIdForUmFuturesOrderHistoryResponse,
    GetDownloadIdForUmFuturesTradeHistoryResponse,
    GetDownloadIdForUmFuturesTransactionHistoryResponse,
    GetMarginBorrowLoanInterestHistoryResponse,
    GetUmAccountDetailResponse,
    GetUmAccountDetailV2Response,
    GetUmCurrentPositionModeResponse,
    GetUmFuturesOrderDownloadLinkByIdResponse,
    GetUmFuturesTradeDownloadLinkByIdResponse,
    GetUmFuturesTransactionDownloadLinkByIdResponse,
    GetUmIncomeHistoryResponse,
    GetUserCommissionRateForCmResponse,
    GetUserCommissionRateForUmResponse,
    MarginMaxBorrowResponse,
    PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse,
    QueryCmPositionInformationResponse,
    QueryMarginLoanRecordResponse,
    QueryMarginMaxWithdrawResponse,
    QueryMarginRepayRecordResponse,
    QueryPortfolioMarginNegativeBalanceInterestHistoryResponse,
    QueryUmPositionInformationResponse,
    QueryUserNegativeBalanceAutoExchangeRecordResponse,
    QueryUserRateLimitResponse,
    RepayFuturesNegativeBalanceResponse,
    UmFuturesAccountConfigurationResponse,
    UmFuturesSymbolConfigurationResponse,
    UmNotionalAndLeverageBracketsResponse,
} from './types';
import type {} from './types';
import type {
    CancelAllCmOpenConditionalOrdersResponse,
    CancelAllCmOpenOrdersResponse,
    CancelAllUmOpenConditionalOrdersResponse,
    CancelAllUmOpenOrdersResponse,
    CancelCmConditionalOrderResponse,
    CancelCmOrderResponse,
    CancelMarginAccountAllOpenOrdersOnASymbolResponse,
    CancelMarginAccountOcoOrdersResponse,
    CancelMarginAccountOrderResponse,
    CancelUmConditionalOrderResponse,
    CancelUmOrderResponse,
    CmAccountTradeListResponse,
    CmPositionAdlQuantileEstimationResponse,
    GetUmFuturesBnbBurnStatusResponse,
    MarginAccountBorrowResponse,
    MarginAccountNewOcoResponse,
    MarginAccountRepayResponse,
    MarginAccountRepayDebtResponse,
    MarginAccountTradeListResponse,
    ModifyCmOrderResponse,
    ModifyUmOrderResponse,
    NewCmConditionalOrderResponse,
    NewCmOrderResponse,
    NewMarginOrderResponse,
    NewUmConditionalOrderResponse,
    NewUmOrderResponse,
    QueryAllCmConditionalOrdersResponse,
    QueryAllCmOrdersResponse,
    QueryAllCurrentCmOpenConditionalOrdersResponse,
    QueryAllCurrentCmOpenOrdersResponse,
    QueryAllCurrentUmOpenConditionalOrdersResponse,
    QueryAllCurrentUmOpenOrdersResponse,
    QueryAllMarginAccountOrdersResponse,
    QueryAllUmConditionalOrdersResponse,
    QueryAllUmOrdersResponse,
    QueryCmConditionalOrderHistoryResponse,
    QueryCmModifyOrderHistoryResponse,
    QueryCmOrderResponse,
    QueryCurrentCmOpenConditionalOrderResponse,
    QueryCurrentCmOpenOrderResponse,
    QueryCurrentMarginOpenOrderResponse,
    QueryCurrentUmOpenConditionalOrderResponse,
    QueryCurrentUmOpenOrderResponse,
    QueryMarginAccountOrderResponse,
    QueryMarginAccountsAllOcoResponse,
    QueryMarginAccountsOcoResponse,
    QueryMarginAccountsOpenOcoResponse,
    QueryUmConditionalOrderHistoryResponse,
    QueryUmModifyOrderHistoryResponse,
    QueryUmOrderResponse,
    QueryUsersCmForceOrdersResponse,
    QueryUsersMarginForceOrdersResponse,
    QueryUsersUmForceOrdersResponse,
    ToggleBnbBurnOnUmFuturesTradeResponse,
    UmAccountTradeListResponse,
    UmPositionAdlQuantileEstimationResponse,
} from './types';
import type { StartUserDataStreamResponse } from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private marketDataApi: MarketDataApi;
    private tradeApi: TradeApi;
    private userDataStreamsApi: UserDataStreamsApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.marketDataApi = new MarketDataApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.userDataStreamsApi = new UserDataStreamsApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Query account balance
     *
     * Weight: 20
     *
     * @summary Account Balance(USER_DATA)
     * @param {AccountBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Account-Balance Binance API Documentation}
     */
    accountBalance(
        requestParameters: AccountBalanceRequest = {}
    ): Promise<RestApiResponse<AccountBalanceResponse>> {
        return this.accountApi.accountBalance(requestParameters);
    }

    /**
     * Query account information
     *
     * Weight: 20
     *
     * @summary Account Information(USER_DATA)
     * @param {AccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Account-Information Binance API Documentation}
     */
    accountInformation(
        requestParameters: AccountInformationRequest = {}
    ): Promise<RestApiResponse<AccountInformationResponse>> {
        return this.accountApi.accountInformation(requestParameters);
    }

    /**
     * Transfer BNB in and out of UM
     *
     * The endpoint can only be called 10 times per 10 minutes in a rolling manner
     *
     * Weight: 750
     *
     * @summary BNB transfer (TRADE)
     * @param {BnbTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BnbTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/BNB-transfer Binance API Documentation}
     */
    bnbTransfer(
        requestParameters: BnbTransferRequest
    ): Promise<RestApiResponse<BnbTransferResponse>> {
        return this.accountApi.bnbTransfer(requestParameters);
    }

    /**
     * Change Auto-repay-futures Status
     *
     * Weight: 750
     *
     * @summary Change Auto-repay-futures Status(TRADE)
     * @param {ChangeAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-Auto-repay-futures-Status Binance API Documentation}
     */
    changeAutoRepayFuturesStatus(
        requestParameters: ChangeAutoRepayFuturesStatusRequest
    ): Promise<RestApiResponse<ChangeAutoRepayFuturesStatusResponse>> {
        return this.accountApi.changeAutoRepayFuturesStatus(requestParameters);
    }

    /**
     * Change user's initial leverage of specific symbol in CM.
     *
     * Weight: 1
     *
     * @summary Change CM Initial Leverage (TRADE)
     * @param {ChangeCmInitialLeverageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeCmInitialLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-CM-Initial-Leverage Binance API Documentation}
     */
    changeCmInitialLeverage(
        requestParameters: ChangeCmInitialLeverageRequest
    ): Promise<RestApiResponse<ChangeCmInitialLeverageResponse>> {
        return this.accountApi.changeCmInitialLeverage(requestParameters);
    }

    /**
     * Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in CM
     *
     * Weight: 1
     *
     * @summary Change CM Position Mode(TRADE)
     * @param {ChangeCmPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeCmPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-CM-Position-Mode Binance API Documentation}
     */
    changeCmPositionMode(
        requestParameters: ChangeCmPositionModeRequest
    ): Promise<RestApiResponse<ChangeCmPositionModeResponse>> {
        return this.accountApi.changeCmPositionMode(requestParameters);
    }

    /**
     * Change user's initial leverage of specific symbol in UM.
     *
     * Weight: 1
     *
     * @summary Change UM Initial Leverage(TRADE)
     * @param {ChangeUmInitialLeverageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeUmInitialLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-UM-Initial-Leverage Binance API Documentation}
     */
    changeUmInitialLeverage(
        requestParameters: ChangeUmInitialLeverageRequest
    ): Promise<RestApiResponse<ChangeUmInitialLeverageResponse>> {
        return this.accountApi.changeUmInitialLeverage(requestParameters);
    }

    /**
     * Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in UM
     *
     * Weight: 1
     *
     * @summary Change UM Position Mode(TRADE)
     * @param {ChangeUmPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeUmPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-UM-Position-Mode Binance API Documentation}
     */
    changeUmPositionMode(
        requestParameters: ChangeUmPositionModeRequest
    ): Promise<RestApiResponse<ChangeUmPositionModeResponse>> {
        return this.accountApi.changeUmPositionMode(requestParameters);
    }

    /**
     * Query CM notional and leverage brackets
     *
     * Weight: 1
     *
     * @summary CM Notional and Leverage Brackets(USER_DATA)
     * @param {CmNotionalAndLeverageBracketsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CmNotionalAndLeverageBracketsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/CM-Notional-and-Leverage-Brackets Binance API Documentation}
     */
    cmNotionalAndLeverageBrackets(
        requestParameters: CmNotionalAndLeverageBracketsRequest = {}
    ): Promise<RestApiResponse<CmNotionalAndLeverageBracketsResponse>> {
        return this.accountApi.cmNotionalAndLeverageBrackets(requestParameters);
    }

    /**
     * Fund collection for Portfolio Margin
     *
     * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
     * You can only use this function 500 times per hour in a rolling manner.
     *
     * Weight: 750
     *
     * @summary Fund Auto-collection(TRADE)
     * @param {FundAutoCollectionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundAutoCollectionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Fund-Auto-collection Binance API Documentation}
     */
    fundAutoCollection(
        requestParameters: FundAutoCollectionRequest = {}
    ): Promise<RestApiResponse<FundAutoCollectionResponse>> {
        return this.accountApi.fundAutoCollection(requestParameters);
    }

    /**
     * Transfers specific asset from Futures Account to Margin account
     *
     * The BNB transfer is not be supported
     *
     * Weight: 30
     *
     * @summary Fund Collection by Asset(TRADE)
     * @param {FundCollectionByAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundCollectionByAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Fund-Collection-by-Asset Binance API Documentation}
     */
    fundCollectionByAsset(
        requestParameters: FundCollectionByAssetRequest
    ): Promise<RestApiResponse<FundCollectionByAssetResponse>> {
        return this.accountApi.fundCollectionByAsset(requestParameters);
    }

    /**
     * Query Auto-repay-futures Status
     *
     * Weight: 30
     *
     * @summary Get Auto-repay-futures Status(USER_DATA)
     * @param {GetAutoRepayFuturesStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Auto-repay-futures-Status Binance API Documentation}
     */
    getAutoRepayFuturesStatus(
        requestParameters: GetAutoRepayFuturesStatusRequest = {}
    ): Promise<RestApiResponse<GetAutoRepayFuturesStatusResponse>> {
        return this.accountApi.getAutoRepayFuturesStatus(requestParameters);
    }

    /**
     * Get current CM account asset and position information.
     *
     * Weight: 5
     *
     * @summary Get CM Account Detail(USER_DATA)
     * @param {GetCmAccountDetailRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCmAccountDetailResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Account-Detail Binance API Documentation}
     */
    getCmAccountDetail(
        requestParameters: GetCmAccountDetailRequest = {}
    ): Promise<RestApiResponse<GetCmAccountDetailResponse>> {
        return this.accountApi.getCmAccountDetail(requestParameters);
    }

    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in CM
     *
     * Weight: 30
     *
     * @summary Get CM Current Position Mode(USER_DATA)
     * @param {GetCmCurrentPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCmCurrentPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Current-Position-Mode Binance API Documentation}
     */
    getCmCurrentPositionMode(
        requestParameters: GetCmCurrentPositionModeRequest = {}
    ): Promise<RestApiResponse<GetCmCurrentPositionModeResponse>> {
        return this.accountApi.getCmCurrentPositionMode(requestParameters);
    }

    /**
     * Get CM Income History
     *
     *
     * If `incomeType` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same "incomeType" for a user
     * The interval between `startTime` and `endTime` can not exceed 200 days:
     * If `startTime` and `endTime` are not sent, the last 200 days will be returned
     *
     * Weight: 30
     *
     * @summary Get CM Income History(USER_DATA)
     * @param {GetCmIncomeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCmIncomeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Income-History Binance API Documentation}
     */
    getCmIncomeHistory(
        requestParameters: GetCmIncomeHistoryRequest = {}
    ): Promise<RestApiResponse<GetCmIncomeHistoryResponse>> {
        return this.accountApi.getCmIncomeHistory(requestParameters);
    }

    /**
     * Get download id for UM futures order history
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1500
     *
     * @summary Get Download Id For UM Futures Order History (USER_DATA)
     * @param {GetDownloadIdForUmFuturesOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForUmFuturesOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Download-Id-For-UM-Futures-Order-History Binance API Documentation}
     */
    getDownloadIdForUmFuturesOrderHistory(
        requestParameters: GetDownloadIdForUmFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForUmFuturesOrderHistoryResponse>> {
        return this.accountApi.getDownloadIdForUmFuturesOrderHistory(requestParameters);
    }

    /**
     * Get download id for UM futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1500
     *
     * @summary Get Download Id For UM Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForUmFuturesTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForUmFuturesTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Download-Id-For-UM-Futures-Trade-History Binance API Documentation}
     */
    getDownloadIdForUmFuturesTradeHistory(
        requestParameters: GetDownloadIdForUmFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForUmFuturesTradeHistoryResponse>> {
        return this.accountApi.getDownloadIdForUmFuturesTradeHistory(requestParameters);
    }

    /**
     * Get download id for UM futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 1500
     *
     * @summary Get Download Id For UM Futures Transaction History (USER_DATA)
     * @param {GetDownloadIdForUmFuturesTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForUmFuturesTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Download-Id-For-UM-Futures-Transaction-History Binance API Documentation}
     */
    getDownloadIdForUmFuturesTransactionHistory(
        requestParameters: GetDownloadIdForUmFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForUmFuturesTransactionHistoryResponse>> {
        return this.accountApi.getDownloadIdForUmFuturesTransactionHistory(requestParameters);
    }

    /**
     * Get Margin Borrow/Loan Interest History
     *
     *
     * Response in descending order
     * The max interval between startTime and endTime is 30 days. It is a MUST to ensure data correctness.
     * If `startTime` and `endTime` not sent, return records of the last 7 days by default
     * If `startTime` is sent and `endTime` is not sent, the records from `startTime` to the present will be returned; if `startTime` is more than 30 days ago, the records of the past 30 days will be returned.
     * If `startTime` is not sent and `endTime` is sent, the records of the 7 days before `endTime` is returned.
     * Type in response has 5 enums:
     * `PERIODIC` interest charged per hour
     * `ON_BORROW` first interest charged on borrow
     * `PERIODIC_CONVERTED` interest charged per hour converted into BNB
     * `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
     * `PORTFOLIO` Portfolio Margin negative balance daily interest
     *
     * Weight: 1
     *
     * @summary Get Margin Borrow/Loan Interest History(USER_DATA)
     * @param {GetMarginBorrowLoanInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetMarginBorrowLoanInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Margin-BorrowLoan-Interest-History Binance API Documentation}
     */
    getMarginBorrowLoanInterestHistory(
        requestParameters: GetMarginBorrowLoanInterestHistoryRequest = {}
    ): Promise<RestApiResponse<GetMarginBorrowLoanInterestHistoryResponse>> {
        return this.accountApi.getMarginBorrowLoanInterestHistory(requestParameters);
    }

    /**
     * Get current UM account asset and position information.
     *
     * Weight: 5
     *
     * @summary Get UM Account Detail(USER_DATA)
     * @param {GetUmAccountDetailRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmAccountDetailResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Account-Detail Binance API Documentation}
     */
    getUmAccountDetail(
        requestParameters: GetUmAccountDetailRequest = {}
    ): Promise<RestApiResponse<GetUmAccountDetailResponse>> {
        return this.accountApi.getUmAccountDetail(requestParameters);
    }

    /**
     * Get current UM account asset and position information.
     *
     * Weight: 5
     *
     * @summary Get UM Account Detail V2(USER_DATA)
     * @param {GetUmAccountDetailV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmAccountDetailV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Account-Detail-V2 Binance API Documentation}
     */
    getUmAccountDetailV2(
        requestParameters: GetUmAccountDetailV2Request = {}
    ): Promise<RestApiResponse<GetUmAccountDetailV2Response>> {
        return this.accountApi.getUmAccountDetailV2(requestParameters);
    }

    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in UM
     *
     * Weight: 30
     *
     * @summary Get UM Current Position Mode(USER_DATA)
     * @param {GetUmCurrentPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmCurrentPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Current-Position-Mode Binance API Documentation}
     */
    getUmCurrentPositionMode(
        requestParameters: GetUmCurrentPositionModeRequest = {}
    ): Promise<RestApiResponse<GetUmCurrentPositionModeResponse>> {
        return this.accountApi.getUmCurrentPositionMode(requestParameters);
    }

    /**
     * Get UM futures order download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get UM Futures Order Download Link by Id(USER_DATA)
     * @param {GetUmFuturesOrderDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmFuturesOrderDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Futures-Order-Download-Link-by-Id Binance API Documentation}
     */
    getUmFuturesOrderDownloadLinkById(
        requestParameters: GetUmFuturesOrderDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetUmFuturesOrderDownloadLinkByIdResponse>> {
        return this.accountApi.getUmFuturesOrderDownloadLinkById(requestParameters);
    }

    /**
     * Get UM futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get UM Futures Trade Download Link by Id(USER_DATA)
     * @param {GetUmFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmFuturesTradeDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Futures-Trade-Download-Link-by-Id Binance API Documentation}
     */
    getUmFuturesTradeDownloadLinkById(
        requestParameters: GetUmFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetUmFuturesTradeDownloadLinkByIdResponse>> {
        return this.accountApi.getUmFuturesTradeDownloadLinkById(requestParameters);
    }

    /**
     * Get UM futures Transaction download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 10
     *
     * @summary Get UM Futures Transaction Download Link by Id(USER_DATA)
     * @param {GetUmFuturesTransactionDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmFuturesTransactionDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Futures-Transaction-Download-Link-by-Id Binance API Documentation}
     */
    getUmFuturesTransactionDownloadLinkById(
        requestParameters: GetUmFuturesTransactionDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetUmFuturesTransactionDownloadLinkByIdResponse>> {
        return this.accountApi.getUmFuturesTransactionDownloadLinkById(requestParameters);
    }

    /**
     * Get UM Income History
     *
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * If `incomeType` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same incomeType for a user
     * Income history only contains data for the last three months
     *
     * Weight: 30
     *
     * @summary Get UM Income History(USER_DATA)
     * @param {GetUmIncomeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmIncomeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Income-History Binance API Documentation}
     */
    getUmIncomeHistory(
        requestParameters: GetUmIncomeHistoryRequest = {}
    ): Promise<RestApiResponse<GetUmIncomeHistoryResponse>> {
        return this.accountApi.getUmIncomeHistory(requestParameters);
    }

    /**
     * Get User Commission Rate for CM
     *
     * Weight: 20
     *
     * @summary Get User Commission Rate for CM(USER_DATA)
     * @param {GetUserCommissionRateForCmRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUserCommissionRateForCmResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-User-Commission-Rate-for-CM Binance API Documentation}
     */
    getUserCommissionRateForCm(
        requestParameters: GetUserCommissionRateForCmRequest
    ): Promise<RestApiResponse<GetUserCommissionRateForCmResponse>> {
        return this.accountApi.getUserCommissionRateForCm(requestParameters);
    }

    /**
     * Get User Commission Rate for UM
     *
     * Weight: 20
     *
     * @summary Get User Commission Rate for UM(USER_DATA)
     * @param {GetUserCommissionRateForUmRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUserCommissionRateForUmResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-User-Commission-Rate-for-UM Binance API Documentation}
     */
    getUserCommissionRateForUm(
        requestParameters: GetUserCommissionRateForUmRequest
    ): Promise<RestApiResponse<GetUserCommissionRateForUmResponse>> {
        return this.accountApi.getUserCommissionRateForUm(requestParameters);
    }

    /**
     * Query margin max borrow
     *
     * Weight: 5
     *
     * @summary Margin Max Borrow(USER_DATA)
     * @param {MarginMaxBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginMaxBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Margin-Max-Borrow Binance API Documentation}
     */
    marginMaxBorrow(
        requestParameters: MarginMaxBorrowRequest
    ): Promise<RestApiResponse<MarginMaxBorrowResponse>> {
        return this.accountApi.marginMaxBorrow(requestParameters);
    }

    /**
     * Portfolio Margin UM Trading Quantitative Rules Indicators
     *
     * Weight: 1 for a single symbol
     * 10 when the symbol parameter is omitted
     *
     * @summary Portfolio Margin UM Trading Quantitative Rules Indicators(USER_DATA)
     * @param {PortfolioMarginUmTradingQuantitativeRulesIndicatorsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Portfolio-Margin-UM-Trading-Quantitative-Rules-Indicators Binance API Documentation}
     */
    portfolioMarginUmTradingQuantitativeRulesIndicators(
        requestParameters: PortfolioMarginUmTradingQuantitativeRulesIndicatorsRequest = {}
    ): Promise<RestApiResponse<PortfolioMarginUmTradingQuantitativeRulesIndicatorsResponse>> {
        return this.accountApi.portfolioMarginUmTradingQuantitativeRulesIndicators(
            requestParameters
        );
    }

    /**
     * Get current CM position information.
     *
     * If neither `marginAsset` nor `pair` is sent, positions of all symbols with `TRADING` status will be returned.
     * for One-way Mode user, the response will only show the "BOTH" positions
     * for Hedge Mode user, the response will show "LONG", and "SHORT" positions.
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     *
     * Weight: 1
     *
     * @summary Query CM Position Information(USER_DATA)
     * @param {QueryCmPositionInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCmPositionInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-CM-Position-Information Binance API Documentation}
     */
    queryCmPositionInformation(
        requestParameters: QueryCmPositionInformationRequest = {}
    ): Promise<RestApiResponse<QueryCmPositionInformationResponse>> {
        return this.accountApi.queryCmPositionInformation(requestParameters);
    }

    /**
     * Query margin loan record
     *
     * txId or startTime must be sent. txId takes precedence.
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 30 days.
     * If `startTime` and `endTime` not sent, return records of the last 7 days by default
     * Set `archived` to `true` to query data from 6 months ago
     *
     * Weight: 10
     *
     * @summary Query Margin Loan Record(USER_DATA)
     * @param {QueryMarginLoanRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginLoanRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-Margin-Loan-Record Binance API Documentation}
     */
    queryMarginLoanRecord(
        requestParameters: QueryMarginLoanRecordRequest
    ): Promise<RestApiResponse<QueryMarginLoanRecordResponse>> {
        return this.accountApi.queryMarginLoanRecord(requestParameters);
    }

    /**
     * Query Margin Max Withdraw
     *
     * Weight: 5
     *
     * @summary Query Margin Max Withdraw(USER_DATA)
     * @param {QueryMarginMaxWithdrawRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginMaxWithdrawResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-Margin-Max-Withdraw Binance API Documentation}
     */
    queryMarginMaxWithdraw(
        requestParameters: QueryMarginMaxWithdrawRequest
    ): Promise<RestApiResponse<QueryMarginMaxWithdrawResponse>> {
        return this.accountApi.queryMarginMaxWithdraw(requestParameters);
    }

    /**
     * Query margin repay record.
     *
     * txId or startTime must be sent. txId takes precedence.
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 30 days.
     * If `startTime` and `endTime` not sent, return records of the last 7 days by default
     * Set `archived` to `true` to query data from 6 months ago
     *
     * Weight: 10
     *
     * @summary Query Margin repay Record(USER_DATA)
     * @param {QueryMarginRepayRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginRepayRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-Margin-repay-Record Binance API Documentation}
     */
    queryMarginRepayRecord(
        requestParameters: QueryMarginRepayRecordRequest
    ): Promise<RestApiResponse<QueryMarginRepayRecordResponse>> {
        return this.accountApi.queryMarginRepayRecord(requestParameters);
    }

    /**
     * Query interest history of negative balance for portfolio margin.
     *
     * Response in descending order
     * The max interval between startTime and endTime is 30 days. It is a MUST to ensure data correctness.
     * If `startTime` and `endTime` not sent, return records of the last 7 days by default
     * If `startTime` is sent and `endTime` is not sent, the records from `startTime` to the present will be returned; if `startTime` is more than 30 days ago, the records of the past 30 days will be returned.
     * If `startTime` is not sent and `endTime` is sent, the records of the 7 days before `endTime` is returned.
     *
     * Weight: 50
     *
     * @summary Query Portfolio Margin Negative Balance Interest History(USER_DATA)
     * @param {QueryPortfolioMarginNegativeBalanceInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryPortfolioMarginNegativeBalanceInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-Portfolio-Margin-Negative-Balance-Interest-History Binance API Documentation}
     */
    queryPortfolioMarginNegativeBalanceInterestHistory(
        requestParameters: QueryPortfolioMarginNegativeBalanceInterestHistoryRequest = {}
    ): Promise<RestApiResponse<QueryPortfolioMarginNegativeBalanceInterestHistoryResponse>> {
        return this.accountApi.queryPortfolioMarginNegativeBalanceInterestHistory(
            requestParameters
        );
    }

    /**
     * Get current UM position information.
     *
     * Please use with user data stream `ACCOUNT_UPDATE` to meet your timeliness and accuracy needs.
     * for One-way Mode user, the response will only show the "BOTH" positions
     * for Hedge Mode user, the response will show "LONG", and "SHORT" positions.
     *
     * Weight: 5
     *
     * @summary Query UM Position Information(USER_DATA)
     * @param {QueryUmPositionInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUmPositionInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-UM-Position-Information Binance API Documentation}
     */
    queryUmPositionInformation(
        requestParameters: QueryUmPositionInformationRequest = {}
    ): Promise<RestApiResponse<QueryUmPositionInformationResponse>> {
        return this.accountApi.queryUmPositionInformation(requestParameters);
    }

    /**
     * Query user negative balance auto exchange record
     *
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 3 months.
     *
     * Weight: 100
     *
     * @summary Query User Negative Balance Auto Exchange Record (USER_DATA)
     * @param {QueryUserNegativeBalanceAutoExchangeRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserNegativeBalanceAutoExchangeRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-User-Negative-Balance-Auto-Exchange-Record Binance API Documentation}
     */
    queryUserNegativeBalanceAutoExchangeRecord(
        requestParameters: QueryUserNegativeBalanceAutoExchangeRecordRequest
    ): Promise<RestApiResponse<QueryUserNegativeBalanceAutoExchangeRecordResponse>> {
        return this.accountApi.queryUserNegativeBalanceAutoExchangeRecord(requestParameters);
    }

    /**
     * Query User Rate Limit
     *
     * Weight: 1
     *
     * @summary Query User Rate Limit (USER_DATA)
     * @param {QueryUserRateLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserRateLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-User-Rate-Limit Binance API Documentation}
     */
    queryUserRateLimit(
        requestParameters: QueryUserRateLimitRequest = {}
    ): Promise<RestApiResponse<QueryUserRateLimitResponse>> {
        return this.accountApi.queryUserRateLimit(requestParameters);
    }

    /**
     * Repay futures Negative Balance
     *
     * Weight: 750
     *
     * @summary Repay futures Negative Balance(USER_DATA)
     * @param {RepayFuturesNegativeBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Repay-futures-Negative-Balance Binance API Documentation}
     */
    repayFuturesNegativeBalance(
        requestParameters: RepayFuturesNegativeBalanceRequest = {}
    ): Promise<RestApiResponse<RepayFuturesNegativeBalanceResponse>> {
        return this.accountApi.repayFuturesNegativeBalance(requestParameters);
    }

    /**
     * Query UM Futures account configuration
     *
     * Weight: 5
     *
     * @summary UM Futures Account Configuration(USER_DATA)
     * @param {UmFuturesAccountConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UmFuturesAccountConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Futures-Account-Config Binance API Documentation}
     */
    umFuturesAccountConfiguration(
        requestParameters: UmFuturesAccountConfigurationRequest = {}
    ): Promise<RestApiResponse<UmFuturesAccountConfigurationResponse>> {
        return this.accountApi.umFuturesAccountConfiguration(requestParameters);
    }

    /**
     * Get current UM account symbol configuration.
     *
     * Weight: 5
     *
     * @summary UM Futures Symbol Configuration(USER_DATA)
     * @param {UmFuturesSymbolConfigurationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UmFuturesSymbolConfigurationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Futures-Symbol-Config Binance API Documentation}
     */
    umFuturesSymbolConfiguration(
        requestParameters: UmFuturesSymbolConfigurationRequest = {}
    ): Promise<RestApiResponse<UmFuturesSymbolConfigurationResponse>> {
        return this.accountApi.umFuturesSymbolConfiguration(requestParameters);
    }

    /**
     * Query UM notional and leverage brackets
     *
     * Weight: 1
     *
     * @summary UM Notional and Leverage Brackets (USER_DATA)
     * @param {UmNotionalAndLeverageBracketsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UmNotionalAndLeverageBracketsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/account/UM-Notional-and-Leverage-Brackets Binance API Documentation}
     */
    umNotionalAndLeverageBrackets(
        requestParameters: UmNotionalAndLeverageBracketsRequest = {}
    ): Promise<RestApiResponse<UmNotionalAndLeverageBracketsResponse>> {
        return this.accountApi.umNotionalAndLeverageBrackets(requestParameters);
    }

    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     *
     * @summary Test Connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/market-data/Test-Connectivity Binance API Documentation}
     */
    testConnectivity(): Promise<RestApiResponse<void>> {
        return this.marketDataApi.testConnectivity();
    }

    /**
     * Cancel All CM Open Conditional Orders
     *
     * Weight: 1
     *
     * @summary Cancel All CM Open Conditional Orders(TRADE)
     * @param {CancelAllCmOpenConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllCmOpenConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-CM-Open-Conditional-Orders Binance API Documentation}
     */
    cancelAllCmOpenConditionalOrders(
        requestParameters: CancelAllCmOpenConditionalOrdersRequest
    ): Promise<RestApiResponse<CancelAllCmOpenConditionalOrdersResponse>> {
        return this.tradeApi.cancelAllCmOpenConditionalOrders(requestParameters);
    }

    /**
     * Cancel all active LIMIT orders on specific symbol
     *
     * Weight: 1
     *
     * @summary Cancel All CM Open Orders(TRADE)
     * @param {CancelAllCmOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllCmOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-CM-Open-Orders Binance API Documentation}
     */
    cancelAllCmOpenOrders(
        requestParameters: CancelAllCmOpenOrdersRequest
    ): Promise<RestApiResponse<CancelAllCmOpenOrdersResponse>> {
        return this.tradeApi.cancelAllCmOpenOrders(requestParameters);
    }

    /**
     * Cancel All UM Open Conditional Orders
     *
     * Weight: 1
     *
     * @summary Cancel All UM Open Conditional Orders (TRADE)
     * @param {CancelAllUmOpenConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllUmOpenConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-UM-Open-Conditional-Orders Binance API Documentation}
     */
    cancelAllUmOpenConditionalOrders(
        requestParameters: CancelAllUmOpenConditionalOrdersRequest
    ): Promise<RestApiResponse<CancelAllUmOpenConditionalOrdersResponse>> {
        return this.tradeApi.cancelAllUmOpenConditionalOrders(requestParameters);
    }

    /**
     * Cancel all active LIMIT orders on specific symbol
     *
     * Weight: 1
     *
     * @summary Cancel All UM Open Orders(TRADE)
     * @param {CancelAllUmOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllUmOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-UM-Open-Orders Binance API Documentation}
     */
    cancelAllUmOpenOrders(
        requestParameters: CancelAllUmOpenOrdersRequest
    ): Promise<RestApiResponse<CancelAllUmOpenOrdersResponse>> {
        return this.tradeApi.cancelAllUmOpenOrders(requestParameters);
    }

    /**
     * Cancel CM Conditional Order
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel CM Conditional Order(TRADE)
     * @param {CancelCmConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelCmConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-CM-Conditional-Order Binance API Documentation}
     */
    cancelCmConditionalOrder(
        requestParameters: CancelCmConditionalOrderRequest
    ): Promise<RestApiResponse<CancelCmConditionalOrderResponse>> {
        return this.tradeApi.cancelCmConditionalOrder(requestParameters);
    }

    /**
     * Cancel an active LIMIT order
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel CM Order(TRADE)
     * @param {CancelCmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelCmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-CM-Order Binance API Documentation}
     */
    cancelCmOrder(
        requestParameters: CancelCmOrderRequest
    ): Promise<RestApiResponse<CancelCmOrderResponse>> {
        return this.tradeApi.cancelCmOrder(requestParameters);
    }

    /**
     * Cancel Margin Account All Open Orders on a Symbol
     *
     * Weight: 5
     *
     * @summary Cancel Margin Account All Open Orders on a Symbol(TRADE)
     * @param {CancelMarginAccountAllOpenOrdersOnASymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelMarginAccountAllOpenOrdersOnASymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-Margin-Account-All-Open-Orders-on-a-Symbol Binance API Documentation}
     */
    cancelMarginAccountAllOpenOrdersOnASymbol(
        requestParameters: CancelMarginAccountAllOpenOrdersOnASymbolRequest
    ): Promise<RestApiResponse<CancelMarginAccountAllOpenOrdersOnASymbolResponse>> {
        return this.tradeApi.cancelMarginAccountAllOpenOrdersOnASymbol(requestParameters);
    }

    /**
     * Cancel Margin Account OCO Orders
     *
     * Additional notes: Canceling an individual leg will cancel the entire OCO
     *
     * Weight: 2
     *
     * @summary Cancel Margin Account OCO Orders(TRADE)
     * @param {CancelMarginAccountOcoOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelMarginAccountOcoOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-Margin-Account-OCO-Orders Binance API Documentation}
     */
    cancelMarginAccountOcoOrders(
        requestParameters: CancelMarginAccountOcoOrdersRequest
    ): Promise<RestApiResponse<CancelMarginAccountOcoOrdersResponse>> {
        return this.tradeApi.cancelMarginAccountOcoOrders(requestParameters);
    }

    /**
     * Cancel Margin Account Order
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 2
     *
     * @summary Cancel Margin Account Order(TRADE)
     * @param {CancelMarginAccountOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelMarginAccountOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-Margin-Account-Order Binance API Documentation}
     */
    cancelMarginAccountOrder(
        requestParameters: CancelMarginAccountOrderRequest
    ): Promise<RestApiResponse<CancelMarginAccountOrderResponse>> {
        return this.tradeApi.cancelMarginAccountOrder(requestParameters);
    }

    /**
     * Cancel UM Conditional Order
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel UM Conditional Order(TRADE)
     * @param {CancelUmConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelUmConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-UM-Conditional-Order Binance API Documentation}
     */
    cancelUmConditionalOrder(
        requestParameters: CancelUmConditionalOrderRequest
    ): Promise<RestApiResponse<CancelUmConditionalOrderResponse>> {
        return this.tradeApi.cancelUmConditionalOrder(requestParameters);
    }

    /**
     * Cancel an active UM LIMIT order
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel UM Order(TRADE)
     * @param {CancelUmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelUmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-UM-Order Binance API Documentation}
     */
    cancelUmOrder(
        requestParameters: CancelUmOrderRequest
    ): Promise<RestApiResponse<CancelUmOrderResponse>> {
        return this.tradeApi.cancelUmOrder(requestParameters);
    }

    /**
     * Get trades for a specific account and CM symbol.
     *
     * Either `symbol` or `pair` must be sent
     * `symbol` and `pair` cannot be sent together
     * `pair` and `fromId` cannot be sent together
     * `OrderId` can only be sent together with symbol
     * If a `pair` is sent, tickers for all symbols of the `pair` will be returned
     * The parameter `fromId` cannot be sent with `startTime` or `endTime`
     *
     * Weight: 20 with symbol, 40 with pair
     *
     * @summary CM Account Trade List(USER_DATA)
     * @param {CmAccountTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CmAccountTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/CM-Account-Trade-List Binance API Documentation}
     */
    cmAccountTradeList(
        requestParameters: CmAccountTradeListRequest = {}
    ): Promise<RestApiResponse<CmAccountTradeListResponse>> {
        return this.tradeApi.cmAccountTradeList(requestParameters);
    }

    /**
     * Query CM Position ADL Quantile Estimation
     * Values update every 30s.
     * Values 0, 1, 2, 3, 4 shows the queue position and possibility of ADL from low to high.
     * For positions of the symbol are in One-way Mode or isolated margined in Hedge Mode, "LONG", "SHORT", and "BOTH" will be returned to show the positions' adl quantiles of different position sides.
     * If the positions of the symbol are crossed margined in Hedge Mode:
     * "HEDGE" as a sign will be returned instead of "BOTH";
     * A same value caculated on unrealized pnls on long and short sides' positions will be shown for "LONG" and "SHORT" when there are positions in both of long and short sides.
     *
     * Weight: 5
     *
     * @summary CM Position ADL Quantile Estimation(USER_DATA)
     * @param {CmPositionAdlQuantileEstimationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CmPositionAdlQuantileEstimationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/CM-Position-ADL-Quantile-Estimation Binance API Documentation}
     */
    cmPositionAdlQuantileEstimation(
        requestParameters: CmPositionAdlQuantileEstimationRequest = {}
    ): Promise<RestApiResponse<CmPositionAdlQuantileEstimationResponse>> {
        return this.tradeApi.cmPositionAdlQuantileEstimation(requestParameters);
    }

    /**
     * Get user's BNB Fee Discount for UM Futures (Fee Discount On or Fee Discount Off )
     *
     * Weight: 30
     *
     * @summary Get UM Futures BNB Burn Status (USER_DATA)
     * @param {GetUmFuturesBnbBurnStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUmFuturesBnbBurnStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Get-UM-Futures-BNB-Burn-Status Binance API Documentation}
     */
    getUmFuturesBnbBurnStatus(
        requestParameters: GetUmFuturesBnbBurnStatusRequest = {}
    ): Promise<RestApiResponse<GetUmFuturesBnbBurnStatusResponse>> {
        return this.tradeApi.getUmFuturesBnbBurnStatus(requestParameters);
    }

    /**
     * Apply for a margin loan.
     *
     * Weight: 100
     *
     * @summary Margin Account Borrow(MARGIN)
     * @param {MarginAccountBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Borrow Binance API Documentation}
     */
    marginAccountBorrow(
        requestParameters: MarginAccountBorrowRequest
    ): Promise<RestApiResponse<MarginAccountBorrowResponse>> {
        return this.tradeApi.marginAccountBorrow(requestParameters);
    }

    /**
     * Send in a new OCO for a margin account
     *
     * Price Restrictions:
     * `SELL`: Limit Price > Last Price > Stop Price
     * `BUY`: Limit Price < Last Price < Stop Price
     * Quantity Restrictions:
     * Both legs must have the same quantity
     * `ICEBERG` quantities however do not have to be the same.
     * Order Rate Limit
     * `OCO` counts as 2 orders against the order rate limit.
     *
     * Weight: 1
     *
     * @summary Margin Account New OCO(TRADE)
     * @param {MarginAccountNewOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountNewOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-New-OCO Binance API Documentation}
     */
    marginAccountNewOco(
        requestParameters: MarginAccountNewOcoRequest
    ): Promise<RestApiResponse<MarginAccountNewOcoResponse>> {
        return this.tradeApi.marginAccountNewOco(requestParameters);
    }

    /**
     * Repay for a margin loan.
     *
     * Weight: 100
     *
     * @summary Margin Account Repay(MARGIN)
     * @param {MarginAccountRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Repay Binance API Documentation}
     */
    marginAccountRepay(
        requestParameters: MarginAccountRepayRequest
    ): Promise<RestApiResponse<MarginAccountRepayResponse>> {
        return this.tradeApi.marginAccountRepay(requestParameters);
    }

    /**
     * Repay debt for a margin loan.
     *
     * The repay asset amount cannot exceed 50000 USD equivalent value for a single request.
     * If `amount` is not sent, all the asset loan will be repaid if having enough specific repay assets.
     * If `amount` is sent, only the certain amount of the asset loan will be repaid if having enough specific repay assets.
     * The system will use the same asset to repay the loan first (if have) no matter whether put the asset in `specifyRepayAssets`
     *
     * Weight: 3000
     *
     * @summary Margin Account Repay Debt(TRADE)
     * @param {MarginAccountRepayDebtRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountRepayDebtResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Repay-Debt Binance API Documentation}
     */
    marginAccountRepayDebt(
        requestParameters: MarginAccountRepayDebtRequest
    ): Promise<RestApiResponse<MarginAccountRepayDebtResponse>> {
        return this.tradeApi.marginAccountRepayDebt(requestParameters);
    }

    /**
     * Margin Account Trade List
     *
     * Weight: 5
     *
     * @summary Margin Account Trade List (USER_DATA)
     * @param {MarginAccountTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Trade-List Binance API Documentation}
     */
    marginAccountTradeList(
        requestParameters: MarginAccountTradeListRequest
    ): Promise<RestApiResponse<MarginAccountTradeListResponse>> {
        return this.tradeApi.marginAccountTradeList(requestParameters);
    }

    /**
     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     * Both `quantity` and `price` must be sent
     * When the new `quantity` or `price` doesn't satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment will be rejected and the order will stay as it is.
     * However the order will be cancelled by the amendment in the following situations:
     * when the order is in partially filled status and the new `quantity` <= `executedQty`
     * When the order is `GTX` and the new price will cause it to be executed immediately
     *
     * Weight: 1
     *
     * @summary Modify CM Order(TRADE)
     * @param {ModifyCmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ModifyCmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Modify-CM-Order Binance API Documentation}
     */
    modifyCmOrder(
        requestParameters: ModifyCmOrderRequest
    ): Promise<RestApiResponse<ModifyCmOrderResponse>> {
        return this.tradeApi.modifyCmOrder(requestParameters);
    }

    /**
     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue
     *
     * Either orderId or origClientOrderId must be sent, and the orderId will prevail if both are sent.
     * Both quantity and price must be sent
     * When the new quantity or price doesn't satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment will be rejected and the order will stay as it is.
     * However the order will be cancelled by the amendment in the following situations:
     * when the order is in partially filled status and the new quantity <= executedQty
     * When the order is GTX and the new price will cause it to be executed immediately
     *
     * Weight: 1
     *
     * @summary Modify UM Order(TRADE)
     * @param {ModifyUmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ModifyUmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Modify-UM-Order Binance API Documentation}
     */
    modifyUmOrder(
        requestParameters: ModifyUmOrderRequest
    ): Promise<RestApiResponse<ModifyUmOrderResponse>> {
        return this.tradeApi.modifyUmOrder(requestParameters);
    }

    /**
     * New CM Conditional Order
     *
     * Order with type `STOP/TAKE_PROFIT`, parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     * `STOP`, `STOP_MARKET`:
     * BUY: "MARK_PRICE"  >= `stopPrice`
     * SELL: "MARK_PRICE" <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: "MARK_PRICE" <= `stopPrice`
     * SELL: "MARK_PRICE" >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest mark price after order placed `<= `activationPrice`, and the latest mark price >`= the lowest mark price * (1 + `callbackRate`)
     * SELL: the highest mark price after order placed >= `activationPrice`, and the latest mark price <= the highest mark price * (1 - `callbackRate`)
     * For `TRAILING_STOP_MARKET`, if you got such error code. `{"code": -2021, "msg": "Order would immediately trigger."}` means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest mark price.
     * SELL: `activationPrice` should be larger than latest mark price.
     * Condition orders will be triggered when:
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     *
     * Weight: 1
     *
     * @summary New CM Conditional Order(TRADE)
     * @param {NewCmConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewCmConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-CM-Conditional-Order Binance API Documentation}
     */
    newCmConditionalOrder(
        requestParameters: NewCmConditionalOrderRequest
    ): Promise<RestApiResponse<NewCmConditionalOrderResponse>> {
        return this.tradeApi.newCmConditionalOrder(requestParameters);
    }

    /**
     * Place new CM order
     *
     * If `newOrderRespType` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     *
     * Weight: 1
     *
     * @summary New CM Order(TRADE)
     * @param {NewCmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewCmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-CM-Order Binance API Documentation}
     */
    newCmOrder(requestParameters: NewCmOrderRequest): Promise<RestApiResponse<NewCmOrderResponse>> {
        return this.tradeApi.newCmOrder(requestParameters);
    }

    /**
     * New Margin Order
     *
     * Weight: 1
     *
     * @summary New Margin Order(TRADE)
     * @param {NewMarginOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewMarginOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-Margin-Order Binance API Documentation}
     */
    newMarginOrder(
        requestParameters: NewMarginOrderRequest
    ): Promise<RestApiResponse<NewMarginOrderResponse>> {
        return this.tradeApi.newMarginOrder(requestParameters);
    }

    /**
     * Place new UM conditional order
     *
     * Order with type `STOP/TAKE_PROFIT`, parameter `timeInForce` can be sent ( default `GTC`).
     * Condition orders will be triggered when:
     * `STOP`, `STOP_MARKET`:
     * BUY: "MARK_PRICE"  >= `stopPrice`
     * SELL: "MARK_PRICE" <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: "MARK_PRICE" <= `stopPrice`
     * SELL: "MARK_PRICE" >= `stopPrice`
     * `TRAILING_STOP_MARKET`:
     * BUY: the lowest mark price after order placed `<= `activationPrice`, and the latest mark price >`= the lowest mark price * (1 + `callbackRate`)
     * SELL: the highest mark price after order placed >= `activationPrice`, and the latest mark price <= the highest mark price * (1 - `callbackRate`)
     * For `TRAILING_STOP_MARKET`, if you got such error code. `{"code": -2021, "msg": "Order would immediately trigger."}` means that the parameters you send do not meet the following requirements:
     * BUY: `activationPrice` should be smaller than latest mark price.
     * SELL: `activationPrice` should be larger than latest mark price.
     * Condition orders will be triggered when:
     * If parameter`priceProtect`is sent as true:
     * when price reaches the `stopPrice` ，the difference rate between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than the "triggerProtect" of the symbol
     * "triggerProtect" of a symbol can be got from `GET /fapi/v1/exchangeInfo`
     * `STOP`, `STOP_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * `TAKE_PROFIT`, `TAKE_PROFIT_MARKET`:
     * BUY: latest price ("MARK_PRICE" or "CONTRACT_PRICE") <= `stopPrice`
     * SELL: latest price ("MARK_PRICE" or "CONTRACT_PRICE") >= `stopPrice`
     * `selfTradePreventionMode` is only effective when `timeInForce` set to `IOC` or `GTC` or `GTD`.
     * In extreme market conditions, timeInForce `GTD` order auto cancel time might be delayed comparing to `goodTillDate`
     *
     * Weight: 1
     *
     * @summary New UM Conditional Order (TRADE)
     * @param {NewUmConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewUmConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-UM-Conditional-Order Binance API Documentation}
     */
    newUmConditionalOrder(
        requestParameters: NewUmConditionalOrderRequest
    ): Promise<RestApiResponse<NewUmConditionalOrderResponse>> {
        return this.tradeApi.newUmConditionalOrder(requestParameters);
    }

    /**
     * Place new UM order
     *
     * If `newOrderRespType` is sent as `RESULT` :
     * `MARKET` order: the final FILLED result of the order will be return directly.
     * `LIMIT` order with special `timeInForce`: the final status result of the order(FILLED or EXPIRED) will be returned directly.
     * `selfTradePreventionMode` is only effective when `timeInForce` set to `IOC` or `GTC` or `GTD`.
     * In extreme market conditions, timeInForce `GTD` order auto cancel time might be delayed comparing to `goodTillDate`
     *
     * Weight: 1
     *
     * @summary New UM Order (TRADE)
     * @param {NewUmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewUmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-UM-Order Binance API Documentation}
     */
    newUmOrder(requestParameters: NewUmOrderRequest): Promise<RestApiResponse<NewUmOrderResponse>> {
        return this.tradeApi.newUmOrder(requestParameters);
    }

    /**
     * Query All CM Conditional Orders
     *
     * These orders will not be found:
     * order strategyStatus is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 7 days < current time
     * The query time period must be less than 7 days( default as the recent 7 days).
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     *
     * @summary Query All CM Conditional Orders(USER_DATA)
     * @param {QueryAllCmConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCmConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Conditional-Orders Binance API Documentation}
     */
    queryAllCmConditionalOrders(
        requestParameters: QueryAllCmConditionalOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllCmConditionalOrdersResponse>> {
        return this.tradeApi.queryAllCmConditionalOrders(requestParameters);
    }

    /**
     * Get all account CM orders; active, canceled, or filled.
     *
     * Either `symbol` or `pair` must be sent.
     * If `orderId` is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 3 days < current time
     *
     * Weight: 20 with symbol, 40 with pair
     *
     * @summary Query All CM Orders (USER_DATA)
     * @param {QueryAllCmOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCmOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Orders Binance API Documentation}
     */
    queryAllCmOrders(
        requestParameters: QueryAllCmOrdersRequest
    ): Promise<RestApiResponse<QueryAllCmOrdersResponse>> {
        return this.tradeApi.queryAllCmOrders(requestParameters);
    }

    /**
     * Get all open conditional orders on a symbol. **Careful** when accessing this with no symbol.
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     *
     * @summary Query All Current CM Open Conditional Orders (USER_DATA)
     * @param {QueryAllCurrentCmOpenConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCurrentCmOpenConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-CM-Open-Conditional-Orders Binance API Documentation}
     */
    queryAllCurrentCmOpenConditionalOrders(
        requestParameters: QueryAllCurrentCmOpenConditionalOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllCurrentCmOpenConditionalOrdersResponse>> {
        return this.tradeApi.queryAllCurrentCmOpenConditionalOrders(requestParameters);
    }

    /**
     * Get all open orders on a symbol.
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     * Careful when accessing this with no symbol.
     *
     * @summary Query All Current CM Open Orders(USER_DATA)
     * @param {QueryAllCurrentCmOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCurrentCmOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-CM-Open-Orders Binance API Documentation}
     */
    queryAllCurrentCmOpenOrders(
        requestParameters: QueryAllCurrentCmOpenOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllCurrentCmOpenOrdersResponse>> {
        return this.tradeApi.queryAllCurrentCmOpenOrders(requestParameters);
    }

    /**
     * Get all open conditional orders on a symbol.
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     * Careful when accessing this with no symbol.
     *
     * @summary Query All Current UM Open Conditional Orders(USER_DATA)
     * @param {QueryAllCurrentUmOpenConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCurrentUmOpenConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-UM-Open-Conditional-Orders Binance API Documentation}
     */
    queryAllCurrentUmOpenConditionalOrders(
        requestParameters: QueryAllCurrentUmOpenConditionalOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllCurrentUmOpenConditionalOrdersResponse>> {
        return this.tradeApi.queryAllCurrentUmOpenConditionalOrders(requestParameters);
    }

    /**
     * Get all open orders on a symbol.
     *
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     *
     * @summary Query All Current UM Open Orders(USER_DATA)
     * @param {QueryAllCurrentUmOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllCurrentUmOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-UM-Open-Orders Binance API Documentation}
     */
    queryAllCurrentUmOpenOrders(
        requestParameters: QueryAllCurrentUmOpenOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllCurrentUmOpenOrdersResponse>> {
        return this.tradeApi.queryAllCurrentUmOpenOrders(requestParameters);
    }

    /**
     * Query All Margin Account Orders
     *
     * Weight: 100
     *
     * @summary Query All Margin Account Orders (USER_DATA)
     * @param {QueryAllMarginAccountOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllMarginAccountOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Margin-Account-Orders Binance API Documentation}
     */
    queryAllMarginAccountOrders(
        requestParameters: QueryAllMarginAccountOrdersRequest
    ): Promise<RestApiResponse<QueryAllMarginAccountOrdersResponse>> {
        return this.tradeApi.queryAllMarginAccountOrders(requestParameters);
    }

    /**
     * Query All UM Conditional Orders
     *
     * These orders will not be found:
     * order strategyStatus is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 7 days < current time
     * The query time period must be less than 7 days( default as the recent 7 days).
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     *
     * @summary Query All UM Conditional Orders(USER_DATA)
     * @param {QueryAllUmConditionalOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllUmConditionalOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Conditional-Orders Binance API Documentation}
     */
    queryAllUmConditionalOrders(
        requestParameters: QueryAllUmConditionalOrdersRequest = {}
    ): Promise<RestApiResponse<QueryAllUmConditionalOrdersResponse>> {
        return this.tradeApi.queryAllUmConditionalOrders(requestParameters);
    }

    /**
     * Get all account UM orders; active, canceled, or filled.
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 3 days < current time
     *
     * If `orderId` is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
     * The query time period must be less then 7 days( default as the recent 7 days).
     *
     * Weight: 5
     *
     * @summary Query All UM Orders(USER_DATA)
     * @param {QueryAllUmOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllUmOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Orders Binance API Documentation}
     */
    queryAllUmOrders(
        requestParameters: QueryAllUmOrdersRequest
    ): Promise<RestApiResponse<QueryAllUmOrdersResponse>> {
        return this.tradeApi.queryAllUmOrders(requestParameters);
    }

    /**
     * Query CM Conditional Order History
     *
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     * `NEW` orders will not be found.
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 7 days < current time
     *
     * Weight: 1
     *
     * @summary Query CM Conditional Order History(USER_DATA)
     * @param {QueryCmConditionalOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCmConditionalOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-CM-Conditional-Order-History Binance API Documentation}
     */
    queryCmConditionalOrderHistory(
        requestParameters: QueryCmConditionalOrderHistoryRequest
    ): Promise<RestApiResponse<QueryCmConditionalOrderHistoryResponse>> {
        return this.tradeApi.queryCmConditionalOrderHistory(requestParameters);
    }

    /**
     * Get order modification history
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     *
     * Weight: 1
     *
     * @summary Query CM Modify Order History(TRADE)
     * @param {QueryCmModifyOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCmModifyOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-CM-Modify-Order-History Binance API Documentation}
     */
    queryCmModifyOrderHistory(
        requestParameters: QueryCmModifyOrderHistoryRequest
    ): Promise<RestApiResponse<QueryCmModifyOrderHistoryResponse>> {
        return this.tradeApi.queryCmModifyOrderHistory(requestParameters);
    }

    /**
     * Check an CM order's status.
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 3 days < current time
     *
     * Weight: 1
     *
     * @summary Query CM Order(USER_DATA)
     * @param {QueryCmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-CM-Order Binance API Documentation}
     */
    queryCmOrder(
        requestParameters: QueryCmOrderRequest
    ): Promise<RestApiResponse<QueryCmOrderResponse>> {
        return this.tradeApi.queryCmOrder(requestParameters);
    }

    /**
     * Query Current CM Open Conditional Order
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     * If the queried order has been triggered, cancelled or expired, the error message "Order does not exist" will be returned.
     *
     * Weight: 1
     *
     * @summary Query Current CM Open Conditional Order(USER_DATA)
     * @param {QueryCurrentCmOpenConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentCmOpenConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-CM-Open-Conditional-Order Binance API Documentation}
     */
    queryCurrentCmOpenConditionalOrder(
        requestParameters: QueryCurrentCmOpenConditionalOrderRequest
    ): Promise<RestApiResponse<QueryCurrentCmOpenConditionalOrderResponse>> {
        return this.tradeApi.queryCurrentCmOpenConditionalOrder(requestParameters);
    }

    /**
     * Query current CM open order
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * If the queried order has been filled or cancelled, the error message "Order does not exist" will be returned.
     *
     * Weight: 1
     *
     * @summary Query Current CM Open Order (USER_DATA)
     * @param {QueryCurrentCmOpenOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentCmOpenOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-CM-Open-Order Binance API Documentation}
     */
    queryCurrentCmOpenOrder(
        requestParameters: QueryCurrentCmOpenOrderRequest
    ): Promise<RestApiResponse<QueryCurrentCmOpenOrderResponse>> {
        return this.tradeApi.queryCurrentCmOpenOrder(requestParameters);
    }

    /**
     * Query Current Margin Open Order
     *
     * Weight: 5
     *
     * @summary Query Current Margin Open Order (USER_DATA)
     * @param {QueryCurrentMarginOpenOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentMarginOpenOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-Margin-Open-Order Binance API Documentation}
     */
    queryCurrentMarginOpenOrder(
        requestParameters: QueryCurrentMarginOpenOrderRequest
    ): Promise<RestApiResponse<QueryCurrentMarginOpenOrderResponse>> {
        return this.tradeApi.queryCurrentMarginOpenOrder(requestParameters);
    }

    /**
     * Query Current UM Open Conditional Order
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     * If the queried order has been `CANCELED`, `TRIGGERED`或`EXPIRED`, the error message "Order does not exist" will be returned.
     *
     * Weight: 1
     *
     * @summary Query Current UM Open Conditional Order(USER_DATA)
     * @param {QueryCurrentUmOpenConditionalOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentUmOpenConditionalOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-UM-Open-Conditional-Order Binance API Documentation}
     */
    queryCurrentUmOpenConditionalOrder(
        requestParameters: QueryCurrentUmOpenConditionalOrderRequest
    ): Promise<RestApiResponse<QueryCurrentUmOpenConditionalOrderResponse>> {
        return this.tradeApi.queryCurrentUmOpenConditionalOrder(requestParameters);
    }

    /**
     * Query current UM open order
     *
     *
     * Either `orderId` or `origClientOrderId` must be sent.
     * If the queried order has been filled or cancelled, the error message "Order does not exist" will be returned.
     *
     * Weight: 1
     *
     * @summary Query Current UM Open Order(USER_DATA)
     * @param {QueryCurrentUmOpenOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentUmOpenOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-UM-Open-Order Binance API Documentation}
     */
    queryCurrentUmOpenOrder(
        requestParameters: QueryCurrentUmOpenOrderRequest
    ): Promise<RestApiResponse<QueryCurrentUmOpenOrderResponse>> {
        return this.tradeApi.queryCurrentUmOpenOrder(requestParameters);
    }

    /**
     * Query Margin Account Order
     *
     * Weight: 10
     *
     * @summary Query Margin Account Order (USER_DATA)
     * @param {QueryMarginAccountOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Margin-Account-Order Binance API Documentation}
     */
    queryMarginAccountOrder(
        requestParameters: QueryMarginAccountOrderRequest
    ): Promise<RestApiResponse<QueryMarginAccountOrderResponse>> {
        return this.tradeApi.queryMarginAccountOrder(requestParameters);
    }

    /**
     * Query all OCO for a specific margin account based on provided optional parameters
     *
     * Weight: 100
     *
     * @summary Query Margin Account\'s all OCO (USER_DATA)
     * @param {QueryMarginAccountsAllOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsAllOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Margin-Account-all-OCO Binance API Documentation}
     */
    queryMarginAccountsAllOco(
        requestParameters: QueryMarginAccountsAllOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsAllOcoResponse>> {
        return this.tradeApi.queryMarginAccountsAllOco(requestParameters);
    }

    /**
     * Retrieves a specific OCO based on provided optional parameters
     *
     * Weight: 5
     *
     * @summary Query Margin Account\'s OCO (USER_DATA)
     * @param {QueryMarginAccountsOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Margin-Account-OCO Binance API Documentation}
     */
    queryMarginAccountsOco(
        requestParameters: QueryMarginAccountsOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsOcoResponse>> {
        return this.tradeApi.queryMarginAccountsOco(requestParameters);
    }

    /**
     * Query Margin Account's Open OCO
     *
     * Weight: 5
     *
     * @summary Query Margin Account\'s Open OCO (USER_DATA)
     * @param {QueryMarginAccountsOpenOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOpenOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Margin-Account-Open-OCO Binance API Documentation}
     */
    queryMarginAccountsOpenOco(
        requestParameters: QueryMarginAccountsOpenOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsOpenOcoResponse>> {
        return this.tradeApi.queryMarginAccountsOpenOco(requestParameters);
    }

    /**
     * Query UM Conditional Order History
     *
     * Either `strategyId` or `newClientStrategyId` must be sent.
     * `NEW` orders will not be found.
     * These orders will not be found:
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 7 days < current time
     *
     * Weight: 1
     *
     * @summary Query UM Conditional Order History(USER_DATA)
     * @param {QueryUmConditionalOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUmConditionalOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-UM-Conditional-Order-History Binance API Documentation}
     */
    queryUmConditionalOrderHistory(
        requestParameters: QueryUmConditionalOrderHistoryRequest
    ): Promise<RestApiResponse<QueryUmConditionalOrderHistoryResponse>> {
        return this.tradeApi.queryUmConditionalOrderHistory(requestParameters);
    }

    /**
     * Get order modification history
     *
     * Either `orderId` or `origClientOrderId` must be sent, and the `orderId` will prevail if both are sent.
     *
     * Weight: 1
     *
     * @summary Query UM Modify Order History(TRADE)
     * @param {QueryUmModifyOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUmModifyOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-UM-Modify-Order-History Binance API Documentation}
     */
    queryUmModifyOrderHistory(
        requestParameters: QueryUmModifyOrderHistoryRequest
    ): Promise<RestApiResponse<QueryUmModifyOrderHistoryResponse>> {
        return this.tradeApi.queryUmModifyOrderHistory(requestParameters);
    }

    /**
     * Check an UM order's status.
     *
     * These orders will not be found:
     * Either `orderId` or `origClientOrderId` must be sent.
     * order status is `CANCELED` or `EXPIRED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 3 days < current time
     *
     * Weight: 1
     *
     * @summary Query UM Order (USER_DATA)
     * @param {QueryUmOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUmOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-UM-Order Binance API Documentation}
     */
    queryUmOrder(
        requestParameters: QueryUmOrderRequest
    ): Promise<RestApiResponse<QueryUmOrderResponse>> {
        return this.tradeApi.queryUmOrder(requestParameters);
    }

    /**
     * Query User's CM Force Orders
     *
     * If "autoCloseType" is not sent, orders with both of the types will be returned
     * If "startTime" is not sent, data within 7 days before "endTime" can be queried
     *
     * Weight: 20 with symbol, 50 without symbol
     *
     * @summary Query User\'s CM Force Orders(USER_DATA)
     * @param {QueryUsersCmForceOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUsersCmForceOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Users-CM-Force-Orders Binance API Documentation}
     */
    queryUsersCmForceOrders(
        requestParameters: QueryUsersCmForceOrdersRequest = {}
    ): Promise<RestApiResponse<QueryUsersCmForceOrdersResponse>> {
        return this.tradeApi.queryUsersCmForceOrders(requestParameters);
    }

    /**
     * Query user's margin force orders
     *
     * Weight: 1
     *
     * @summary Query User\'s Margin Force Orders(USER_DATA)
     * @param {QueryUsersMarginForceOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUsersMarginForceOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Users-Margin-Force-Orders Binance API Documentation}
     */
    queryUsersMarginForceOrders(
        requestParameters: QueryUsersMarginForceOrdersRequest = {}
    ): Promise<RestApiResponse<QueryUsersMarginForceOrdersResponse>> {
        return this.tradeApi.queryUsersMarginForceOrders(requestParameters);
    }

    /**
     * Query User's UM Force Orders
     *
     * If `autoCloseType` is not sent, orders with both of the types will be returned
     * If `startTime` is not sent, data within 7 days before `endTime` can be queried
     *
     * Weight: 20 with symbol, 50 without symbol
     *
     * @summary Query User\'s UM Force Orders (USER_DATA)
     * @param {QueryUsersUmForceOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUsersUmForceOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Users-UM-Force-Orders Binance API Documentation}
     */
    queryUsersUmForceOrders(
        requestParameters: QueryUsersUmForceOrdersRequest = {}
    ): Promise<RestApiResponse<QueryUsersUmForceOrdersResponse>> {
        return this.tradeApi.queryUsersUmForceOrders(requestParameters);
    }

    /**
     * Change user's BNB Fee Discount for UM Futures (Fee Discount On or Fee Discount Off ) on ***EVERY symbol***
     *
     *
     * The BNB would not be collected from UM-PM account to the Portfolio Margin account.
     *
     * Weight: 1
     *
     * @summary Toggle BNB Burn On UM Futures Trade (TRADE)
     * @param {ToggleBnbBurnOnUmFuturesTradeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ToggleBnbBurnOnUmFuturesTradeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Toggle-BNB-Burn-On-UM-Futures-Trade Binance API Documentation}
     */
    toggleBnbBurnOnUmFuturesTrade(
        requestParameters: ToggleBnbBurnOnUmFuturesTradeRequest
    ): Promise<RestApiResponse<ToggleBnbBurnOnUmFuturesTradeResponse>> {
        return this.tradeApi.toggleBnbBurnOnUmFuturesTrade(requestParameters);
    }

    /**
     * Get trades for a specific account and UM symbol.
     *
     *
     * If `startTime` and `endTime` are both not sent, then the last '24 hours' data will be returned.
     * The time between `startTime` and `endTime` cannot be longer than 24 hours.
     * The parameter `fromId` cannot be sent with `startTime` or `endTime`.
     *
     * Weight: 5
     *
     * @summary UM Account Trade List(USER_DATA)
     * @param {UmAccountTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UmAccountTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/UM-Account-Trade-List Binance API Documentation}
     */
    umAccountTradeList(
        requestParameters: UmAccountTradeListRequest
    ): Promise<RestApiResponse<UmAccountTradeListResponse>> {
        return this.tradeApi.umAccountTradeList(requestParameters);
    }

    /**
     * Query UM Position ADL Quantile Estimation
     *
     * Values update every 30s.
     * Values 0, 1, 2, 3, 4 shows the queue position and possibility of ADL from low to high.
     * For positions of the symbol are in One-way Mode or isolated margined in Hedge Mode, "LONG", "SHORT", and "BOTH" will be returned to show the positions' adl quantiles of different position sides.
     * If the positions of the symbol are crossed margined in Hedge Mode:
     * "HEDGE" as a sign will be returned instead of "BOTH";
     * A same value caculated on unrealized pnls on long and short sides' positions will be shown for "LONG" and "SHORT" when there are positions in both of long and short sides.
     *
     * Weight: 5
     *
     * @summary UM Position ADL Quantile Estimation(USER_DATA)
     * @param {UmPositionAdlQuantileEstimationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UmPositionAdlQuantileEstimationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/trade/UM-Position-ADL-Quantile-Estimation Binance API Documentation}
     */
    umPositionAdlQuantileEstimation(
        requestParameters: UmPositionAdlQuantileEstimationRequest = {}
    ): Promise<RestApiResponse<UmPositionAdlQuantileEstimationResponse>> {
        return this.tradeApi.umPositionAdlQuantileEstimation(requestParameters);
    }

    /**
     * Close out a user data stream.
     *
     * Weight: 1
     *
     * @summary Close User Data Stream(USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/user-data-streams/Close-User-Data-Stream Binance API Documentation}
     */
    closeUserDataStream(): Promise<RestApiResponse<void>> {
        return this.userDataStreamsApi.closeUserDataStream();
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 60 minutes.
     *
     * Weight: 1
     *
     * @summary Keepalive User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/user-data-streams/Keepalive-User-Data-Stream Binance API Documentation}
     */
    keepaliveUserDataStream(): Promise<RestApiResponse<void>> {
        return this.userDataStreamsApi.keepaliveUserDataStream();
    }

    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start User Data Stream(USER_STREAM)
     * @returns {Promise<RestApiResponse<StartUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/portfolio-margin/user-data-streams/Start-User-Data-Stream Binance API Documentation}
     */
    startUserDataStream(): Promise<RestApiResponse<StartUserDataStreamResponse>> {
        return this.userDataStreamsApi.startUserDataStream();
    }
}
