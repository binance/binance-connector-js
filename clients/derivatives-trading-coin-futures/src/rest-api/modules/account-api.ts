/**
 * Binance Public Derivatives Trading COIN Futures REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountInformationResponse,
    FuturesAccountBalanceResponse,
    GetCurrentPositionModeResponse,
    GetDownloadIdForFuturesOrderHistoryResponse,
    GetDownloadIdForFuturesTradeHistoryResponse,
    GetDownloadIdForFuturesTransactionHistoryResponse,
    GetFuturesOrderHistoryDownloadLinkByIdResponse,
    GetFuturesTradeDownloadLinkByIdResponse,
    GetFuturesTransactionHistoryDownloadLinkByIdResponse,
    GetIncomeHistoryResponse,
    NotionalBracketForPairResponse,
    NotionalBracketForSymbolResponse,
    UserCommissionRateResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get current account information.
         *
         * for One-way Mode user, the "positions" will only show the "BOTH" positions
         * for Hedge Mode user, the "positions" will show "BOTH", "LONG", and "SHORT" positions.
         *
         * Weight: 5
         *
         * @summary Account Information (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountInformation: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Check futures account balance
         *
         * Weight: 1
         *
         * @summary Futures Account Balance (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        futuresAccountBalance: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
         *
         * Weight: 30
         *
         * @summary Get Current Position Mode(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCurrentPositionMode: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/positionSide/dual',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Download Id For Futures Order History
         *
         * Request Limitation is 10 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 5
         *
         * @summary Get Download Id For Futures Order History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesOrderHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesOrderHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesOrderHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/order/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get download id for futures trade history
         *
         * Request Limitation is 5 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 5
         *
         * @summary Get Download Id For Futures Trade History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesTradeHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTradeHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTradeHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/trade/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get download id for futures transaction history
         *
         * Request Limitation is 5 times per month, shared by front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 5
         *
         * @summary Get Download Id For Futures Transaction History(USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForFuturesTransactionHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTransactionHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForFuturesTransactionHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/income/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures order history download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 5
         *
         * @summary Get Futures Order History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesOrderHistoryDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('getFuturesOrderHistoryDownloadLinkById', 'downloadId', downloadId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/order/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures trade download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 5
         *
         * @summary Get Futures Trade Download Link by Id(USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesTradeDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists('getFuturesTradeDownloadLinkById', 'downloadId', downloadId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/trade/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get futures transaction history download link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 5
         *
         * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesTransactionHistoryDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists(
                'getFuturesTransactionHistoryDownloadLinkById',
                'downloadId',
                downloadId
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/income/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get income history
         *
         * If `incomeType ` is not sent, all kinds of flow will be returned
         * "trandId" is unique in the same "incomeType" for a user
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 20
         *
         * @summary Get Income History(USER_DATA)
         * @param {string} [symbol]
         * @param {string} [incomeType] "TRANSFER","WELCOME_BONUS", "FUNDING_FEE", "REALIZED_PNL", "COMMISSION", "INSURANCE_CLEAR", and "DELIVERED_SETTELMENT"
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [page]
         * @param {number} [limit] Default 100; max 1000
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getIncomeHistory: async (
            symbol?: string,
            incomeType?: string,
            startTime?: number,
            endTime?: number,
            page?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (incomeType !== undefined && incomeType !== null) {
                localVarQueryParameter['incomeType'] = incomeType;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/income',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * **Not recommended to continue using this v1 endpoint**
         *
         * Get the pair's default notional bracket list, may return ambiguous values when there have been multiple different `symbol` brackets under the `pair`, suggest using the following `GET /dapi/v2/leverageBracket` query instead to get the specific `symbol` notional bracket list.
         *
         * Weight: 1
         *
         * @summary Notional Bracket for Pair(USER_DATA)
         * @param {string} [pair]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        notionalBracketForPair: async (
            pair?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (pair !== undefined && pair !== null) {
                localVarQueryParameter['pair'] = pair;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/leverageBracket',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get the symbol's notional bracket list.
         *
         * Weight: 1
         *
         * @summary Notional Bracket for Symbol(USER_DATA)
         * @param {string} [symbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        notionalBracketForSymbol: async (
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v2/leverageBracket',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query user commission rate
         *
         * Weight: 20
         *
         * @summary User Commission Rate (USER_DATA)
         * @param {string} symbol
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        userCommissionRate: async (symbol: string, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('userCommissionRate', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/dapi/v1/commissionRate',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account information.
     *
     * for One-way Mode user, the "positions" will only show the "BOTH" positions
     * for Hedge Mode user, the "positions" will show "BOTH", "LONG", and "SHORT" positions.
     *
     * Weight: 5
     *
     * @summary Account Information (USER_DATA)
     * @param {AccountInformationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountInformation(
        requestParameters?: AccountInformationRequest
    ): Promise<RestApiResponse<AccountInformationResponse>>;
    /**
     * Check futures account balance
     *
     * Weight: 1
     *
     * @summary Futures Account Balance (USER_DATA)
     * @param {FuturesAccountBalanceRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    futuresAccountBalance(
        requestParameters?: FuturesAccountBalanceRequest
    ): Promise<RestApiResponse<FuturesAccountBalanceResponse>>;
    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Position Mode(USER_DATA)
     * @param {GetCurrentPositionModeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getCurrentPositionMode(
        requestParameters?: GetCurrentPositionModeRequest
    ): Promise<RestApiResponse<GetCurrentPositionModeResponse>>;
    /**
     * Get Download Id For Futures Order History
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {GetDownloadIdForFuturesOrderHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesOrderHistory(
        requestParameters: GetDownloadIdForFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>>;
    /**
     * Get download id for futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForFuturesTradeHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesTradeHistory(
        requestParameters: GetDownloadIdForFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>>;
    /**
     * Get download id for futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {GetDownloadIdForFuturesTransactionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForFuturesTransactionHistory(
        requestParameters: GetDownloadIdForFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>>;
    /**
     * Get futures order history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {GetFuturesOrderHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesOrderHistoryDownloadLinkById(
        requestParameters: GetFuturesOrderHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>>;
    /**
     * Get futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {GetFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesTradeDownloadLinkById(
        requestParameters: GetFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>>;
    /**
     * Get futures transaction history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {GetFuturesTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getFuturesTransactionHistoryDownloadLinkById(
        requestParameters: GetFuturesTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>>;
    /**
     * Get income history
     *
     * If `incomeType ` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same "incomeType" for a user
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 20
     *
     * @summary Get Income History(USER_DATA)
     * @param {GetIncomeHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getIncomeHistory(
        requestParameters?: GetIncomeHistoryRequest
    ): Promise<RestApiResponse<GetIncomeHistoryResponse>>;
    /**
     * **Not recommended to continue using this v1 endpoint**
     *
     * Get the pair's default notional bracket list, may return ambiguous values when there have been multiple different `symbol` brackets under the `pair`, suggest using the following `GET /dapi/v2/leverageBracket` query instead to get the specific `symbol` notional bracket list.
     *
     * Weight: 1
     *
     * @summary Notional Bracket for Pair(USER_DATA)
     * @param {NotionalBracketForPairRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    notionalBracketForPair(
        requestParameters?: NotionalBracketForPairRequest
    ): Promise<RestApiResponse<NotionalBracketForPairResponse>>;
    /**
     * Get the symbol's notional bracket list.
     *
     * Weight: 1
     *
     * @summary Notional Bracket for Symbol(USER_DATA)
     * @param {NotionalBracketForSymbolRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    notionalBracketForSymbol(
        requestParameters?: NotionalBracketForSymbolRequest
    ): Promise<RestApiResponse<NotionalBracketForSymbolResponse>>;
    /**
     * Query user commission rate
     *
     * Weight: 20
     *
     * @summary User Commission Rate (USER_DATA)
     * @param {UserCommissionRateRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    userCommissionRate(
        requestParameters: UserCommissionRateRequest
    ): Promise<RestApiResponse<UserCommissionRateResponse>>;
}

/**
 * Request parameters for accountInformation operation in AccountApi.
 * @interface AccountInformationRequest
 */
export interface AccountInformationRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountInformation
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for futuresAccountBalance operation in AccountApi.
 * @interface FuturesAccountBalanceRequest
 */
export interface FuturesAccountBalanceRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiFuturesAccountBalance
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCurrentPositionMode operation in AccountApi.
 * @interface GetCurrentPositionModeRequest
 */
export interface GetCurrentPositionModeRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetCurrentPositionMode
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesOrderHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesOrderHistoryRequest
 */
export interface GetDownloadIdForFuturesOrderHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesOrderHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesTradeHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesTradeHistoryRequest
 */
export interface GetDownloadIdForFuturesTradeHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTradeHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForFuturesTransactionHistory operation in AccountApi.
 * @interface GetDownloadIdForFuturesTransactionHistoryRequest
 */
export interface GetDownloadIdForFuturesTransactionHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForFuturesTransactionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesOrderHistoryDownloadLinkById operation in AccountApi.
 * @interface GetFuturesOrderHistoryDownloadLinkByIdRequest
 */
export interface GetFuturesOrderHistoryDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesOrderHistoryDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesOrderHistoryDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesTradeDownloadLinkById operation in AccountApi.
 * @interface GetFuturesTradeDownloadLinkByIdRequest
 */
export interface GetFuturesTradeDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesTradeDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesTradeDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesTransactionHistoryDownloadLinkById operation in AccountApi.
 * @interface GetFuturesTransactionHistoryDownloadLinkByIdRequest
 */
export interface GetFuturesTransactionHistoryDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetFuturesTransactionHistoryDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetFuturesTransactionHistoryDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getIncomeHistory operation in AccountApi.
 * @interface GetIncomeHistoryRequest
 */
export interface GetIncomeHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly symbol?: string;

    /**
     * "TRANSFER","WELCOME_BONUS", "FUNDING_FEE", "REALIZED_PNL", "COMMISSION", "INSURANCE_CLEAR", and "DELIVERED_SETTELMENT"
     * @type {string}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly incomeType?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly page?: number;

    /**
     * Default 100; max 1000
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetIncomeHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for notionalBracketForPair operation in AccountApi.
 * @interface NotionalBracketForPairRequest
 */
export interface NotionalBracketForPairRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiNotionalBracketForPair
     */
    readonly pair?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiNotionalBracketForPair
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for notionalBracketForSymbol operation in AccountApi.
 * @interface NotionalBracketForSymbolRequest
 */
export interface NotionalBracketForSymbolRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiNotionalBracketForSymbol
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiNotionalBracketForSymbol
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for userCommissionRate operation in AccountApi.
 * @interface UserCommissionRateRequest
 */
export interface UserCommissionRateRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiUserCommissionRate
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiUserCommissionRate
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Get current account information.
     *
     * for One-way Mode user, the "positions" will only show the "BOTH" positions
     * for Hedge Mode user, the "positions" will show "BOTH", "LONG", and "SHORT" positions.
     *
     * Weight: 5
     *
     * @summary Account Information (USER_DATA)
     * @param {AccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Account-Information Binance API Documentation}
     */
    public async accountInformation(
        requestParameters: AccountInformationRequest = {}
    ): Promise<RestApiResponse<AccountInformationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountInformation(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountInformationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Check futures account balance
     *
     * Weight: 1
     *
     * @summary Futures Account Balance (USER_DATA)
     * @param {FuturesAccountBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FuturesAccountBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Futures-Account-Balance Binance API Documentation}
     */
    public async futuresAccountBalance(
        requestParameters: FuturesAccountBalanceRequest = {}
    ): Promise<RestApiResponse<FuturesAccountBalanceResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.futuresAccountBalance(
            requestParameters?.recvWindow
        );
        return sendRequest<FuturesAccountBalanceResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get user's position mode (Hedge Mode or One-way Mode ) on ***EVERY symbol***
     *
     * Weight: 30
     *
     * @summary Get Current Position Mode(USER_DATA)
     * @param {GetCurrentPositionModeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentPositionModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Current-Position-Mode Binance API Documentation}
     */
    public async getCurrentPositionMode(
        requestParameters: GetCurrentPositionModeRequest = {}
    ): Promise<RestApiResponse<GetCurrentPositionModeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCurrentPositionMode(
            requestParameters?.recvWindow
        );
        return sendRequest<GetCurrentPositionModeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Download Id For Futures Order History
     *
     * Request Limitation is 10 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Order History (USER_DATA)
     * @param {GetDownloadIdForFuturesOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Order-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesOrderHistory(
        requestParameters: GetDownloadIdForFuturesOrderHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesOrderHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesOrderHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesOrderHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get download id for futures trade history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Trade History (USER_DATA)
     * @param {GetDownloadIdForFuturesTradeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Trade-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesTradeHistory(
        requestParameters: GetDownloadIdForFuturesTradeHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTradeHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesTradeHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesTradeHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get download id for futures transaction history
     *
     * Request Limitation is 5 times per month, shared by front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Futures Transaction History(USER_DATA)
     * @param {GetDownloadIdForFuturesTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Download-Id-For-Futures-Transaction-History Binance API Documentation}
     */
    public async getDownloadIdForFuturesTransactionHistory(
        requestParameters: GetDownloadIdForFuturesTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForFuturesTransactionHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForFuturesTransactionHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForFuturesTransactionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures order history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Order History Download Link by Id (USER_DATA)
     * @param {GetFuturesOrderHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Futures-Order-History-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesOrderHistoryDownloadLinkById(
        requestParameters: GetFuturesOrderHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesOrderHistoryDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesOrderHistoryDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesOrderHistoryDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures trade download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Trade Download Link by Id(USER_DATA)
     * @param {GetFuturesTradeDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Futures-Trade-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesTradeDownloadLinkById(
        requestParameters: GetFuturesTradeDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTradeDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesTradeDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesTradeDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get futures transaction history download link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Futures Transaction History Download Link by Id (USER_DATA)
     * @param {GetFuturesTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Futures-Transaction-History-Download-Link-by-Id Binance API Documentation}
     */
    public async getFuturesTransactionHistoryDownloadLinkById(
        requestParameters: GetFuturesTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetFuturesTransactionHistoryDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesTransactionHistoryDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesTransactionHistoryDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get income history
     *
     * If `incomeType ` is not sent, all kinds of flow will be returned
     * "trandId" is unique in the same "incomeType" for a user
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 20
     *
     * @summary Get Income History(USER_DATA)
     * @param {GetIncomeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetIncomeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Get-Income-History Binance API Documentation}
     */
    public async getIncomeHistory(
        requestParameters: GetIncomeHistoryRequest = {}
    ): Promise<RestApiResponse<GetIncomeHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getIncomeHistory(
            requestParameters?.symbol,
            requestParameters?.incomeType,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.page,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<GetIncomeHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * **Not recommended to continue using this v1 endpoint**
     *
     * Get the pair's default notional bracket list, may return ambiguous values when there have been multiple different `symbol` brackets under the `pair`, suggest using the following `GET /dapi/v2/leverageBracket` query instead to get the specific `symbol` notional bracket list.
     *
     * Weight: 1
     *
     * @summary Notional Bracket for Pair(USER_DATA)
     * @param {NotionalBracketForPairRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NotionalBracketForPairResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Notional-Bracket-for-Pair Binance API Documentation}
     */
    public async notionalBracketForPair(
        requestParameters: NotionalBracketForPairRequest = {}
    ): Promise<RestApiResponse<NotionalBracketForPairResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.notionalBracketForPair(
            requestParameters?.pair,
            requestParameters?.recvWindow
        );
        return sendRequest<NotionalBracketForPairResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get the symbol's notional bracket list.
     *
     * Weight: 1
     *
     * @summary Notional Bracket for Symbol(USER_DATA)
     * @param {NotionalBracketForSymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NotionalBracketForSymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Notional-Bracket-for-Symbol Binance API Documentation}
     */
    public async notionalBracketForSymbol(
        requestParameters: NotionalBracketForSymbolRequest = {}
    ): Promise<RestApiResponse<NotionalBracketForSymbolResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.notionalBracketForSymbol(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<NotionalBracketForSymbolResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query user commission rate
     *
     * Weight: 20
     *
     * @summary User Commission Rate (USER_DATA)
     * @param {UserCommissionRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserCommissionRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/User-Commission-Rate Binance API Documentation}
     */
    public async userCommissionRate(
        requestParameters: UserCommissionRateRequest
    ): Promise<RestApiResponse<UserCommissionRateResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.userCommissionRate(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<UserCommissionRateResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
