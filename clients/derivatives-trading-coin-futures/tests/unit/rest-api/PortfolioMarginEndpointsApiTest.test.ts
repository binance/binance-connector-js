/**
 * Binance Derivatives Trading COIN Futures REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { PortfolioMarginEndpointsApi } from '../../../src/rest-api';
import { ClassicPortfolioMarginAccountInformationRequest } from '../../../src/rest-api';
import type { ClassicPortfolioMarginAccountInformationResponse } from '../../../src/rest-api/types';

describe('PortfolioMarginEndpointsApi', () => {
    let client: PortfolioMarginEndpointsApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new PortfolioMarginEndpointsApi(config);
    });

    describe('classicPortfolioMarginAccountInformation()', () => {
        it('should execute classicPortfolioMarginAccountInformation() successfully with required parameters only', async () => {
            const params: ClassicPortfolioMarginAccountInformationRequest = {
                asset: 'asset_example',
            };

            mockResponse = {
                maxWithdrawAmountUSD: '25347.92083245',
                asset: 'BTC',
                maxWithdrawAmount: '1.33663654',
            };

            const spy = jest
                .spyOn(client, 'classicPortfolioMarginAccountInformation')
                .mockReturnValue(
                    Promise.resolve({
                        data: () => Promise.resolve(mockResponse),
                        status: 200,
                        headers: {},
                        rateLimits: [],
                    } as RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>)
                );
            const response = await client.classicPortfolioMarginAccountInformation(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute classicPortfolioMarginAccountInformation() successfully with optional parameters', async () => {
            const params: ClassicPortfolioMarginAccountInformationRequest = {
                asset: 'asset_example',
                recvWindow: 5000,
            };

            mockResponse = {
                maxWithdrawAmountUSD: '25347.92083245',
                asset: 'BTC',
                maxWithdrawAmount: '1.33663654',
            };

            const spy = jest
                .spyOn(client, 'classicPortfolioMarginAccountInformation')
                .mockReturnValue(
                    Promise.resolve({
                        data: () => Promise.resolve(mockResponse),
                        status: 200,
                        headers: {},
                        rateLimits: [],
                    } as RestApiResponse<ClassicPortfolioMarginAccountInformationResponse>)
                );
            const response = await client.classicPortfolioMarginAccountInformation(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when asset is missing', async () => {
            const _params: ClassicPortfolioMarginAccountInformationRequest = {
                asset: 'asset_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.asset;

            await expect(client.classicPortfolioMarginAccountInformation(params)).rejects.toThrow(
                'Required parameter asset was null or undefined when calling classicPortfolioMarginAccountInformation.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: ClassicPortfolioMarginAccountInformationRequest = {
                asset: 'asset_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'classicPortfolioMarginAccountInformation')
                .mockRejectedValueOnce(mockError);
            await expect(client.classicPortfolioMarginAccountInformation(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });
});
