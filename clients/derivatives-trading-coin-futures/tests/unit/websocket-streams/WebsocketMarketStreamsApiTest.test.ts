/**
 * Binance Derivatives Trading COIN Futures WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, describe, it } from '@jest/globals';
import {
    ConfigurationWebsocketStreams,
    WebsocketStreamsBase,
    replaceWebsocketStreamsPlaceholders,
} from '@binance/common';
import {
    AggregateTradeStreamsRequest,
    AllBookTickersStreamRequest,
    AllMarketLiquidationOrderStreamsRequest,
    AllMarketMiniTickersStreamRequest,
    AllMarketTickersStreamsRequest,
    ContinuousContractKlineCandlestickStreamsRequest,
    ContractInfoStreamRequest,
    DiffBookDepthStreamsRequest,
    IndexKlineCandlestickStreamsRequest,
    IndexPriceStreamRequest,
    IndividualSymbolBookTickerStreamsRequest,
    IndividualSymbolMiniTickerStreamRequest,
    IndividualSymbolTickerStreamsRequest,
    KlineCandlestickStreamsRequest,
    LiquidationOrderStreamsRequest,
    MarkPriceKlineCandlestickStreamsRequest,
    MarkPriceOfAllSymbolsOfAPairRequest,
    MarkPriceStreamRequest,
    PartialBookDepthStreamsRequest,
} from '../../../src/websocket-streams';
import { WebsocketMarketStreamsApi } from '../../../src/websocket-streams';
import { mockSubscription } from './utils';

describe('WebsocketMarketStreamsApi', () => {
    describe('aggregateTradeStreams()', () => {
        it('should execute aggregateTradeStreams() successfully', async () => {
            const params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 1591261134288,
                a: 424951,
                s: 'BTCUSD_200626',
                p: '9643.5',
                q: '2',
                f: 606073,
                l: 606073,
                T: 1591261134199,
                m: false,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@aggTrade'.slice(1), params as unknown as Record<string, AggregateTradeStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle aggregateTradeStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 1591261134288,
                a: 424951,
                s: 'BTCUSD_200626',
                p: '9643.5',
                q: '2',
                f: 606073,
                l: 606073,
                T: 1591261134199,
                m: false,
            };

            const stream = websocketStreamApi.aggregateTradeStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@aggTrade'.slice(1),
                        params as unknown as Record<string, AggregateTradeStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: AggregateTradeStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.aggregateTradeStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling aggregateTradeStreams.'
            );
        });
    });

    describe('allBookTickersStream()', () => {
        it('should execute allBookTickersStream() successfully', async () => {
            const params: AllBookTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 17242169,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                b: '9548.1',
                B: '52',
                a: '9548.5',
                A: '11',
                T: 1591268628155,
                E: 1591268628166,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!bookTicker'.slice(1), params as unknown as Record<string, AllBookTickersStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle allBookTickersStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllBookTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 17242169,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                b: '9548.1',
                B: '52',
                a: '9548.5',
                A: '11',
                T: 1591268628155,
                E: 1591268628166,
            };

            const stream = websocketStreamApi.allBookTickersStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!bookTicker'.slice(1),
                        params as unknown as Record<string, AllBookTickersStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketLiquidationOrderStreams()', () => {
        it('should execute allMarketLiquidationOrderStreams() successfully', async () => {
            const params: AllMarketLiquidationOrderStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1591154240950,
                o: {
                    s: 'BTCUSD_200925',
                    ps: 'BTCUSD',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '1',
                    p: '9425.5',
                    ap: '9496.5',
                    X: 'FILLED',
                    l: '1',
                    z: '1',
                    T: 1591154240949,
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!forceOrder@arr'.slice(1), params as unknown as Record<string, AllMarketLiquidationOrderStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketLiquidationOrderStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketLiquidationOrderStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1591154240950,
                o: {
                    s: 'BTCUSD_200925',
                    ps: 'BTCUSD',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '1',
                    p: '9425.5',
                    ap: '9496.5',
                    X: 'FILLED',
                    l: '1',
                    z: '1',
                    T: 1591154240949,
                },
            };

            const stream = websocketStreamApi.allMarketLiquidationOrderStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!forceOrder@arr'.slice(1),
                        params as unknown as Record<string, AllMarketLiquidationOrderStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketMiniTickersStream()', () => {
        it('should execute allMarketMiniTickersStream() successfully', async () => {
            const params: AllMarketMiniTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 1591267704450,
                    s: 'BTCUSD_200626',
                    ps: 'BTCUSD',
                    c: '9561.7',
                    o: '9580.9',
                    h: '10000.0',
                    l: '7000.0',
                    v: '487476',
                    q: '33264343847.22378500',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!miniTicker@arr'.slice(1), params as unknown as Record<string, AllMarketMiniTickersStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketMiniTickersStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketMiniTickersStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 1591267704450,
                    s: 'BTCUSD_200626',
                    ps: 'BTCUSD',
                    c: '9561.7',
                    o: '9580.9',
                    h: '10000.0',
                    l: '7000.0',
                    v: '487476',
                    q: '33264343847.22378500',
                },
            ];

            const stream = websocketStreamApi.allMarketMiniTickersStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!miniTicker@arr'.slice(1),
                        params as unknown as Record<string, AllMarketMiniTickersStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allMarketTickersStreams()', () => {
        it('should execute allMarketTickersStreams() successfully', async () => {
            const params: AllMarketTickersStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1591268262453,
                    s: 'BTCUSD_200626',
                    ps: 'BTCUSD',
                    p: '-43.4',
                    P: '-0.452',
                    w: '0.00147974',
                    c: '9548.5',
                    Q: '2',
                    o: '9591.9',
                    h: '10000.0',
                    l: '7000.0',
                    v: '487850',
                    q: '32968676323.46222700',
                    O: 1591181820000,
                    C: 1591268262442,
                    F: 512014,
                    L: 615289,
                    n: 103272,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!ticker@arr'.slice(1), params as unknown as Record<string, AllMarketTickersStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketTickersStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: AllMarketTickersStreamsRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1591268262453,
                    s: 'BTCUSD_200626',
                    ps: 'BTCUSD',
                    p: '-43.4',
                    P: '-0.452',
                    w: '0.00147974',
                    c: '9548.5',
                    Q: '2',
                    o: '9591.9',
                    h: '10000.0',
                    l: '7000.0',
                    v: '487850',
                    q: '32968676323.46222700',
                    O: 1591181820000,
                    C: 1591268262442,
                    F: 512014,
                    L: 615289,
                    n: 103272,
                },
            ];

            const stream = websocketStreamApi.allMarketTickersStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!ticker@arr'.slice(1),
                        params as unknown as Record<string, AllMarketTickersStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('continuousContractKlineCandlestickStreams()', () => {
        it('should execute continuousContractKlineCandlestickStreams() successfully', async () => {
            const params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'continuous_kline',
                E: 1591261542539,
                ps: 'BTCUSD',
                ct: 'NEXT_QUARTER',
                k: {
                    t: 1591261500000,
                    T: 1591261559999,
                    i: '1m',
                    f: 606400,
                    L: 606430,
                    o: '9638.9',
                    c: '9639.8',
                    h: '9639.8',
                    l: '9638.6',
                    v: '156',
                    n: 31,
                    x: false,
                    q: '1.61836886',
                    V: '73',
                    Q: '0.75731156',
                    B: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<pair>_<contractType>@continuousKline_<interval>'.slice(1), params as unknown as Record<string, ContinuousContractKlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle continuousContractKlineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'continuous_kline',
                E: 1591261542539,
                ps: 'BTCUSD',
                ct: 'NEXT_QUARTER',
                k: {
                    t: 1591261500000,
                    T: 1591261559999,
                    i: '1m',
                    f: 606400,
                    L: 606430,
                    o: '9638.9',
                    c: '9639.8',
                    h: '9639.8',
                    l: '9638.6',
                    v: '156',
                    n: 31,
                    x: false,
                    q: '1.61836886',
                    V: '73',
                    Q: '0.75731156',
                    B: '0',
                },
            };

            const stream = websocketStreamApi.continuousContractKlineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<pair>_<contractType>@continuousKline_<interval>'.slice(1),
                        params as unknown as Record<
                            string,
                            ContinuousContractKlineCandlestickStreamsRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when pair is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.pair;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter pair was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when contractType is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.contractType;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter contractType was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: ContinuousContractKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                contractType: 'next_quarter',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() =>
                websocketStreamApi.continuousContractKlineCandlestickStreams(params)
            ).toThrow(
                'Required parameter interval was null or undefined when calling continuousContractKlineCandlestickStreams.'
            );
        });
    });

    describe('contractInfoStream()', () => {
        it('should execute contractInfoStream() successfully', async () => {
            const params: ContractInfoStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'contractInfo',
                E: 1669647330375,
                s: 'APTUSD_PERP',
                ps: 'APTUSD',
                ct: 'PERPETUAL',
                dt: 4133404800000,
                ot: 1666594800000,
                cs: 'TRADING',
                bks: [
                    { bs: 1, bnf: 0, bnc: 5000, mmr: 0.01, cf: 0, mi: 21, ma: 50 },
                    { bs: 2, bnf: 5000, bnc: 25000, mmr: 0.025, cf: 75, mi: 11, ma: 20 },
                ],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!contractInfo'.slice(1), params as unknown as Record<string, ContractInfoStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle contractInfoStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: ContractInfoStreamRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'contractInfo',
                E: 1669647330375,
                s: 'APTUSD_PERP',
                ps: 'APTUSD',
                ct: 'PERPETUAL',
                dt: 4133404800000,
                ot: 1666594800000,
                cs: 'TRADING',
                bks: [
                    { bs: 1, bnf: 0, bnc: 5000, mmr: 0.01, cf: 0, mi: 21, ma: 50 },
                    { bs: 2, bnf: 5000, bnc: 25000, mmr: 0.025, cf: 75, mi: 11, ma: 20 },
                ],
            };

            const stream = websocketStreamApi.contractInfoStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!contractInfo'.slice(1),
                        params as unknown as Record<string, ContractInfoStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('diffBookDepthStreams()', () => {
        it('should execute diffBookDepthStreams() successfully', async () => {
            const params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1591270260907,
                T: 1591270260891,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                U: 17285681,
                u: 17285702,
                pu: 17285675,
                b: [['9517.6', '10']],
                a: [['9518.5', '45']],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<updateSpeed>'.slice(1), params as unknown as Record<string, DiffBookDepthStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle diffBookDepthStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1591270260907,
                T: 1591270260891,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                U: 17285681,
                u: 17285702,
                pu: 17285675,
                b: [['9517.6', '10']],
                a: [['9518.5', '45']],
            };

            const stream = websocketStreamApi.diffBookDepthStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<updateSpeed>'.slice(1),
                        params as unknown as Record<string, DiffBookDepthStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: DiffBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.diffBookDepthStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling diffBookDepthStreams.'
            );
        });
    });

    describe('indexKlineCandlestickStreams()', () => {
        it('should execute indexKlineCandlestickStreams() successfully', async () => {
            const params: IndexKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'indexPrice_kline',
                E: 1591267070033,
                ps: 'BTCUSD',
                k: {
                    t: 1591267020000,
                    T: 1591267079999,
                    s: '0',
                    i: '1m',
                    f: 1591267020000,
                    L: 1591267070000,
                    o: '9542.21900000',
                    c: '9542.50440000',
                    h: '9542.71640000',
                    l: '9542.21040000',
                    v: '0',
                    n: 51,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                    B: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<pair>@indexPriceKline_<interval>'.slice(1), params as unknown as Record<string, IndexKlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle indexKlineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndexKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'indexPrice_kline',
                E: 1591267070033,
                ps: 'BTCUSD',
                k: {
                    t: 1591267020000,
                    T: 1591267079999,
                    s: '0',
                    i: '1m',
                    f: 1591267020000,
                    L: 1591267070000,
                    o: '9542.21900000',
                    c: '9542.50440000',
                    h: '9542.71640000',
                    l: '9542.21040000',
                    v: '0',
                    n: 51,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                    B: '0',
                },
            };

            const stream = websocketStreamApi.indexKlineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<pair>@indexPriceKline_<interval>'.slice(1),
                        params as unknown as Record<string, IndexKlineCandlestickStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when pair is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndexKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.pair;

            expect(() => websocketStreamApi.indexKlineCandlestickStreams(params)).toThrow(
                'Required parameter pair was null or undefined when calling indexKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndexKlineCandlestickStreamsRequest = {
                pair: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.indexKlineCandlestickStreams(params)).toThrow(
                'Required parameter interval was null or undefined when calling indexKlineCandlestickStreams.'
            );
        });
    });

    describe('indexPriceStream()', () => {
        it('should execute indexPriceStream() successfully', async () => {
            const params: IndexPriceStreamRequest = {
                pair: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'indexPriceUpdate',
                E: 1591261236000,
                i: 'BTCUSD',
                p: '9636.57860000',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<pair>@indexPrice<updateSpeed>'.slice(1), params as unknown as Record<string, IndexPriceStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle indexPriceStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndexPriceStreamRequest = {
                pair: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'indexPriceUpdate',
                E: 1591261236000,
                i: 'BTCUSD',
                p: '9636.57860000',
            };

            const stream = websocketStreamApi.indexPriceStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<pair>@indexPrice<updateSpeed>'.slice(1),
                        params as unknown as Record<string, IndexPriceStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when pair is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndexPriceStreamRequest = {
                pair: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.pair;

            expect(() => websocketStreamApi.indexPriceStream(params)).toThrow(
                'Required parameter pair was null or undefined when calling indexPriceStream.'
            );
        });
    });

    describe('individualSymbolBookTickerStreams()', () => {
        it('should execute individualSymbolBookTickerStreams() successfully', async () => {
            const params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 17242169,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                b: '9548.1',
                B: '52',
                a: '9548.5',
                A: '11',
                T: 1591268628155,
                E: 1591268628166,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@bookTicker'.slice(1), params as unknown as Record<string, IndividualSymbolBookTickerStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolBookTickerStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'bookTicker',
                u: 17242169,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                b: '9548.1',
                B: '52',
                a: '9548.5',
                A: '11',
                T: 1591268628155,
                E: 1591268628166,
            };

            const stream = websocketStreamApi.individualSymbolBookTickerStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@bookTicker'.slice(1),
                        params as unknown as Record<
                            string,
                            IndividualSymbolBookTickerStreamsRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolBookTickerStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolBookTickerStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolBookTickerStreams.'
            );
        });
    });

    describe('individualSymbolMiniTickerStream()', () => {
        it('should execute individualSymbolMiniTickerStream() successfully', async () => {
            const params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 1591267704450,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                c: '9561.7',
                o: '9580.9',
                h: '10000.0',
                l: '7000.0',
                v: '487476',
                q: '33264343847.22378500',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@miniTicker'.slice(1), params as unknown as Record<string, IndividualSymbolMiniTickerStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolMiniTickerStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 1591267704450,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                c: '9561.7',
                o: '9580.9',
                h: '10000.0',
                l: '7000.0',
                v: '487476',
                q: '33264343847.22378500',
            };

            const stream = websocketStreamApi.individualSymbolMiniTickerStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@miniTicker'.slice(1),
                        params as unknown as Record<string, IndividualSymbolMiniTickerStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolMiniTickerStreamRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolMiniTickerStream(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolMiniTickerStream.'
            );
        });
    });

    describe('individualSymbolTickerStreams()', () => {
        it('should execute individualSymbolTickerStreams() successfully', async () => {
            const params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1591268262453,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                p: '-43.4',
                P: '-0.452',
                w: '0.00147974',
                c: '9548.5',
                Q: '2',
                o: '9591.9',
                h: '10000.0',
                l: '7000.0',
                v: '487850',
                q: '32968676323.46222700',
                O: 1591181820000,
                C: 1591268262442,
                F: 512014,
                L: 615289,
                n: 103272,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), params as unknown as Record<string, IndividualSymbolTickerStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle individualSymbolTickerStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1591268262453,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                p: '-43.4',
                P: '-0.452',
                w: '0.00147974',
                c: '9548.5',
                Q: '2',
                o: '9591.9',
                h: '10000.0',
                l: '7000.0',
                v: '487850',
                q: '32968676323.46222700',
                O: 1591181820000,
                C: 1591268262442,
                F: 512014,
                L: 615289,
                n: 103272,
            };

            const stream = websocketStreamApi.individualSymbolTickerStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@ticker'.slice(1),
                        params as unknown as Record<string, IndividualSymbolTickerStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndividualSymbolTickerStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.individualSymbolTickerStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling individualSymbolTickerStreams.'
            );
        });
    });

    describe('klineCandlestickStreams()', () => {
        it('should execute klineCandlestickStreams() successfully', async () => {
            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1591261542539,
                s: 'BTCUSD_200626',
                k: {
                    t: 1591261500000,
                    T: 1591261559999,
                    s: 'BTCUSD_200626',
                    i: '1m',
                    f: 606400,
                    L: 606430,
                    o: '9638.9',
                    c: '9639.8',
                    h: '9639.8',
                    l: '9638.6',
                    v: '156',
                    n: 31,
                    x: false,
                    q: '1.61836886',
                    V: '73',
                    Q: '0.75731156',
                    B: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), params as unknown as Record<string, KlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle klineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1591261542539,
                s: 'BTCUSD_200626',
                k: {
                    t: 1591261500000,
                    T: 1591261559999,
                    s: 'BTCUSD_200626',
                    i: '1m',
                    f: 606400,
                    L: 606430,
                    o: '9638.9',
                    c: '9639.8',
                    h: '9639.8',
                    l: '9638.6',
                    v: '156',
                    n: 31,
                    x: false,
                    q: '1.61836886',
                    V: '73',
                    Q: '0.75731156',
                    B: '0',
                },
            };

            const stream = websocketStreamApi.klineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@kline_<interval>'.slice(1),
                        params as unknown as Record<string, KlineCandlestickStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling klineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter interval was null or undefined when calling klineCandlestickStreams.'
            );
        });
    });

    describe('liquidationOrderStreams()', () => {
        it('should execute liquidationOrderStreams() successfully', async () => {
            const params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1591154240950,
                o: {
                    s: 'BTCUSD_200925',
                    ps: 'BTCUSD',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '1',
                    p: '9425.5',
                    ap: '9496.5',
                    X: 'FILLED',
                    l: '1',
                    z: '1',
                    T: 1591154240949,
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@forceOrder'.slice(1), params as unknown as Record<string, LiquidationOrderStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle liquidationOrderStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'forceOrder',
                E: 1591154240950,
                o: {
                    s: 'BTCUSD_200925',
                    ps: 'BTCUSD',
                    S: 'SELL',
                    o: 'LIMIT',
                    f: 'IOC',
                    q: '1',
                    p: '9425.5',
                    ap: '9496.5',
                    X: 'FILLED',
                    l: '1',
                    z: '1',
                    T: 1591154240949,
                },
            };

            const stream = websocketStreamApi.liquidationOrderStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@forceOrder'.slice(1),
                        params as unknown as Record<string, LiquidationOrderStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: LiquidationOrderStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.liquidationOrderStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling liquidationOrderStreams.'
            );
        });
    });

    describe('markPriceKlineCandlestickStreams()', () => {
        it('should execute markPriceKlineCandlestickStreams() successfully', async () => {
            const params: MarkPriceKlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'markPrice_kline',
                E: 1591267398004,
                ps: 'BTCUSD',
                k: {
                    t: 1591267380000,
                    T: 1591267439999,
                    s: 'BTCUSD_200626',
                    i: '1m',
                    f: 1591267380000,
                    L: 1591267398000,
                    o: '9539.67161333',
                    c: '9540.82761333',
                    h: '9540.82761333',
                    l: '9539.66961333',
                    v: '0',
                    n: 19,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                    B: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@markPriceKline_<interval>'.slice(1), params as unknown as Record<string, MarkPriceKlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPriceKlineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceKlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'markPrice_kline',
                E: 1591267398004,
                ps: 'BTCUSD',
                k: {
                    t: 1591267380000,
                    T: 1591267439999,
                    s: 'BTCUSD_200626',
                    i: '1m',
                    f: 1591267380000,
                    L: 1591267398000,
                    o: '9539.67161333',
                    c: '9540.82761333',
                    h: '9540.82761333',
                    l: '9539.66961333',
                    v: '0',
                    n: 19,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                    B: '0',
                },
            };

            const stream = websocketStreamApi.markPriceKlineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@markPriceKline_<interval>'.slice(1),
                        params as unknown as Record<string, MarkPriceKlineCandlestickStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceKlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.markPriceKlineCandlestickStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling markPriceKlineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceKlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.markPriceKlineCandlestickStreams(params)).toThrow(
                'Required parameter interval was null or undefined when calling markPriceKlineCandlestickStreams.'
            );
        });
    });

    describe('markPriceOfAllSymbolsOfAPair()', () => {
        it('should execute markPriceOfAllSymbolsOfAPair() successfully', async () => {
            const params: MarkPriceOfAllSymbolsOfAPairRequest = {
                pair: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = [
                {
                    e: 'markPriceUpdate',
                    E: 1596095725000,
                    s: 'BTCUSD_201225',
                    p: '10934.62615417',
                    P: '10962.17178236',
                    i: '10933.62615417',
                    r: '',
                    T: 0,
                },
                {
                    e: 'markPriceUpdate',
                    E: 1596095725000,
                    s: 'BTCUSD_PERP',
                    p: '11012.31359011',
                    P: '10962.17178236',
                    i: '10933.62615417',
                    r: '0.00000000',
                    T: 1596096000000,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<pair>@markPrice<updateSpeed>'.slice(1), params as unknown as Record<string, MarkPriceOfAllSymbolsOfAPairRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPriceOfAllSymbolsOfAPair() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceOfAllSymbolsOfAPairRequest = {
                pair: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = [
                {
                    e: 'markPriceUpdate',
                    E: 1596095725000,
                    s: 'BTCUSD_201225',
                    p: '10934.62615417',
                    P: '10962.17178236',
                    i: '10933.62615417',
                    r: '',
                    T: 0,
                },
                {
                    e: 'markPriceUpdate',
                    E: 1596095725000,
                    s: 'BTCUSD_PERP',
                    p: '11012.31359011',
                    P: '10962.17178236',
                    i: '10933.62615417',
                    r: '0.00000000',
                    T: 1596096000000,
                },
            ];

            const stream = websocketStreamApi.markPriceOfAllSymbolsOfAPair(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<pair>@markPrice<updateSpeed>'.slice(1),
                        params as unknown as Record<string, MarkPriceOfAllSymbolsOfAPairRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when pair is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceOfAllSymbolsOfAPairRequest = {
                pair: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.pair;

            expect(() => websocketStreamApi.markPriceOfAllSymbolsOfAPair(params)).toThrow(
                'Required parameter pair was null or undefined when calling markPriceOfAllSymbolsOfAPair.'
            );
        });
    });

    describe('markPriceStream()', () => {
        it('should execute markPriceStream() successfully', async () => {
            const params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'markPriceUpdate',
                E: 1596095725000,
                s: 'BTCUSD_201225',
                p: '10934.62615417',
                P: '10962.17178236',
                i: '10933.62615417',
                r: '',
                T: 0,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@markPrice<updateSpeed>'.slice(1), params as unknown as Record<string, MarkPriceStreamRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPriceStream() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'markPriceUpdate',
                E: 1596095725000,
                s: 'BTCUSD_201225',
                p: '10934.62615417',
                P: '10962.17178236',
                i: '10933.62615417',
                r: '',
                T: 0,
            };

            const stream = websocketStreamApi.markPriceStream(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@markPrice<updateSpeed>'.slice(1),
                        params as unknown as Record<string, MarkPriceStreamRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceStreamRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.markPriceStream(params)).toThrow(
                'Required parameter symbol was null or undefined when calling markPriceStream.'
            );
        });
    });

    describe('partialBookDepthStreams()', () => {
        it('should execute partialBookDepthStreams() successfully', async () => {
            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1591269996801,
                T: 1591269996646,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                U: 17276694,
                u: 17276701,
                pu: 17276678,
                b: [
                    ['9523.0', '5'],
                    ['9522.8', '8'],
                    ['9522.6', '2'],
                    ['9522.4', '1'],
                    ['9522.0', '5'],
                ],
                a: [
                    ['9524.6', '2'],
                    ['9524.7', '3'],
                    ['9524.9', '16'],
                    ['9525.1', '10'],
                    ['9525.3', '6'],
                ],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<levels><updateSpeed>'.slice(1), params as unknown as Record<string, PartialBookDepthStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle partialBookDepthStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1591269996801,
                T: 1591269996646,
                s: 'BTCUSD_200626',
                ps: 'BTCUSD',
                U: 17276694,
                u: 17276701,
                pu: 17276678,
                b: [
                    ['9523.0', '5'],
                    ['9522.8', '8'],
                    ['9522.6', '2'],
                    ['9522.4', '1'],
                    ['9522.0', '5'],
                ],
                a: [
                    ['9524.6', '2'],
                    ['9524.7', '3'],
                    ['9524.9', '16'],
                    ['9525.1', '10'],
                    ['9525.3', '6'],
                ],
            };

            const stream = websocketStreamApi.partialBookDepthStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<levels><updateSpeed>'.slice(1),
                        params as unknown as Record<string, PartialBookDepthStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling partialBookDepthStreams.'
            );
        });

        it('should throw RequiredError when levels is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.levels;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter levels was null or undefined when calling partialBookDepthStreams.'
            );
        });
    });
});
