/**
 * Binance Dual Investment REST API
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { MarketDataApi } from '../../../src/rest-api';
import { GetDualInvestmentProductListRequest } from '../../../src/rest-api';
import type { GetDualInvestmentProductListResponse } from '../../../src/rest-api/types';

describe('MarketDataApi', () => {
    let client: MarketDataApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new MarketDataApi(config);
    });

    describe('getDualInvestmentProductList()', () => {
        it('should execute getDualInvestmentProductList() successfully with required parameters only', async () => {
            const params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
            };

            mockResponse = {
                total: 1,
                list: [
                    {
                        id: '741590',
                        investCoin: 'USDT',
                        exercisedCoin: 'BNB',
                        strikePrice: '380',
                        duration: 4,
                        settleDate: 1709020800000,
                        purchaseDecimal: 8,
                        purchaseEndTime: 1708934400000,
                        canPurchase: true,
                        apr: '0.6076',
                        orderId: 8257205859,
                        minAmount: '0.1',
                        maxAmount: '25265.7',
                        createTimestamp: 1708560084000,
                        optionType: 'PUT',
                        isAutoCompoundEnable: true,
                        autoCompoundPlanList: ['STANDARD', 'ADVANCE'],
                    },
                ],
            };

            const spy = jest.spyOn(client, 'getDualInvestmentProductList').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetDualInvestmentProductListResponse>)
            );
            const response = await client.getDualInvestmentProductList(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getDualInvestmentProductList() successfully with optional parameters', async () => {
            const params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
                pageSize: 10,
                pageIndex: 1,
                recvWindow: 5000,
            };

            mockResponse = {
                total: 1,
                list: [
                    {
                        id: '741590',
                        investCoin: 'USDT',
                        exercisedCoin: 'BNB',
                        strikePrice: '380',
                        duration: 4,
                        settleDate: 1709020800000,
                        purchaseDecimal: 8,
                        purchaseEndTime: 1708934400000,
                        canPurchase: true,
                        apr: '0.6076',
                        orderId: 8257205859,
                        minAmount: '0.1',
                        maxAmount: '25265.7',
                        createTimestamp: 1708560084000,
                        optionType: 'PUT',
                        isAutoCompoundEnable: true,
                        autoCompoundPlanList: ['STANDARD', 'ADVANCE'],
                    },
                ],
            };

            const spy = jest.spyOn(client, 'getDualInvestmentProductList').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetDualInvestmentProductListResponse>)
            );
            const response = await client.getDualInvestmentProductList(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when optionType is missing', async () => {
            const _params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.optionType;

            await expect(client.getDualInvestmentProductList(params)).rejects.toThrow(
                'Required parameter optionType was null or undefined when calling getDualInvestmentProductList.'
            );
        });

        it('should throw RequiredError when exercisedCoin is missing', async () => {
            const _params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.exercisedCoin;

            await expect(client.getDualInvestmentProductList(params)).rejects.toThrow(
                'Required parameter exercisedCoin was null or undefined when calling getDualInvestmentProductList.'
            );
        });

        it('should throw RequiredError when investCoin is missing', async () => {
            const _params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.investCoin;

            await expect(client.getDualInvestmentProductList(params)).rejects.toThrow(
                'Required parameter investCoin was null or undefined when calling getDualInvestmentProductList.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: GetDualInvestmentProductListRequest = {
                optionType: 'optionType_example',
                exercisedCoin: 'exercisedCoin_example',
                investCoin: 'investCoin_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getDualInvestmentProductList')
                .mockRejectedValueOnce(mockError);
            await expect(client.getDualInvestmentProductList(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });
});
