/**
 * Binance Dual Investment REST API
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { GetDualInvestmentProductListResponse } from '../types';

/**
 * MarketDataApi - axios parameter creator
 */
const MarketDataApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Dual Investment product list
         *
         * Weight: 1(IP)
         *
         * @summary Get Dual Investment product list
         * @param {string} optionType Input CALL or PUT
         * @param {string} exercisedCoin Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: `optionType`:CALL,`exercisedCoin`:USDT,`investCoin`:BNB; if you subscribe to a low buy product (put option), you should input: `optionType`:PUT,`exercisedCoin`:BNB,`investCoin`:USDT
         * @param {string} investCoin Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: `optionType`:CALL,`exercisedCoin`:USDT,`investCoin`:BNB; if you subscribe to a low buy product (put option), you should input: `optionType`:PUT,`exercisedCoin`:BNB,`investCoin`:USDT
         * @param {number} [pageSize] Default: 10, Maximum: 100
         * @param {number} [pageIndex] Default: 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         *
         * @throws {RequiredError}
         */
        getDualInvestmentProductList: async (
            optionType: string,
            exercisedCoin: string,
            investCoin: string,
            pageSize?: number,
            pageIndex?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'optionType' is not null or undefined
            assertParamExists('getDualInvestmentProductList', 'optionType', optionType);
            // verify required parameter 'exercisedCoin' is not null or undefined
            assertParamExists('getDualInvestmentProductList', 'exercisedCoin', exercisedCoin);
            // verify required parameter 'investCoin' is not null or undefined
            assertParamExists('getDualInvestmentProductList', 'investCoin', investCoin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (optionType !== undefined && optionType !== null) {
                localVarQueryParameter['optionType'] = optionType;
            }

            if (exercisedCoin !== undefined && exercisedCoin !== null) {
                localVarQueryParameter['exercisedCoin'] = exercisedCoin;
            }

            if (investCoin !== undefined && investCoin !== null) {
                localVarQueryParameter['investCoin'] = investCoin;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/dci/product/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketDataApi - interface
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Get Dual Investment product list
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment product list
     * @param {GetDualInvestmentProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getDualInvestmentProductList(
        requestParameters: GetDualInvestmentProductListRequest
    ): Promise<RestApiResponse<GetDualInvestmentProductListResponse>>;
}

/**
 * Request parameters for getDualInvestmentProductList operation in MarketDataApi.
 * @interface GetDualInvestmentProductListRequest
 */
export interface GetDualInvestmentProductListRequest {
    /**
     * Input CALL or PUT
     * @type {string}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly optionType: string;

    /**
     * Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: `optionType`:CALL,`exercisedCoin`:USDT,`investCoin`:BNB; if you subscribe to a low buy product (put option), you should input: `optionType`:PUT,`exercisedCoin`:BNB,`investCoin`:USDT
     * @type {string}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly exercisedCoin: string;

    /**
     * Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: `optionType`:CALL,`exercisedCoin`:USDT,`investCoin`:BNB; if you subscribe to a low buy product (put option), you should input: `optionType`:PUT,`exercisedCoin`:BNB,`investCoin`:USDT
     * @type {string}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly investCoin: string;

    /**
     * Default: 10, Maximum: 100
     * @type {number}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly pageSize?: number;

    /**
     * Default: 1
     * @type {number}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly pageIndex?: number;

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof MarketDataApiGetDualInvestmentProductList
     */
    readonly recvWindow?: number;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration);
    }

    /**
     * Get Dual Investment product list
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment product list
     * @param {GetDualInvestmentProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDualInvestmentProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/dual_investment/market-data/Get-Dual-Investment-product-list Binance API Documentation}
     */
    public async getDualInvestmentProductList(
        requestParameters: GetDualInvestmentProductListRequest
    ): Promise<RestApiResponse<GetDualInvestmentProductListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getDualInvestmentProductList(
            requestParameters?.optionType,
            requestParameters?.exercisedCoin,
            requestParameters?.investCoin,
            requestParameters?.pageSize,
            requestParameters?.pageIndex,
            requestParameters?.recvWindow
        );
        return sendRequest<GetDualInvestmentProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
