/**
 * Binance Dual Investment REST API
 *
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    ChangeAutoCompoundStatusResponse,
    CheckDualInvestmentAccountsResponse,
    GetDualInvestmentPositionsResponse,
    SubscribeDualInvestmentProductsResponse,
} from '../types';

/**
 * TradeApi - axios parameter creator
 */
const TradeApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Change Auto-Compound status
         *
         * Weight: 1(IP)
         *
         * @summary Change Auto-Compound status(USER_DATA)
         * @param {string} positionId Get positionId from `/sapi/v1/dci/product/positions`
         * @param {string} [autoCompoundPlan]
         * @param {number} [recvWindow] The value cannot be greater than 60000
         *
         * @throws {RequiredError}
         */
        changeAutoCompoundStatus: async (
            positionId: string,
            autoCompoundPlan?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('changeAutoCompoundStatus', 'positionId', positionId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (autoCompoundPlan !== undefined && autoCompoundPlan !== null) {
                localVarQueryParameter['AutoCompoundPlan'] = autoCompoundPlan;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/dci/product/auto_compound/edit-status',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Check Dual Investment accounts
         *
         * Weight: 1(IP)
         *
         * @summary Check Dual Investment accounts(USER_DATA)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         *
         * @throws {RequiredError}
         */
        checkDualInvestmentAccounts: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/dci/product/accounts',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Dual Investment positions (batch)
         *
         * Weight: 1(IP)
         *
         * @summary Get Dual Investment positions(USER_DATA)
         * @param {string} [status] `PENDING`:Products are purchasing, will give results later;`PURCHASE_SUCCESS`:purchase successfully;`SETTLED`: Products are finish settling;`PURCHASE_FAIL`:fail to purchase;`REFUNDING`:refund ongoing;`REFUND_SUCCESS`:refund to spot account successfully; `SETTLING`:Products are settling. If don't fill this field, will response all the position status.
         * @param {number} [pageSize] Default: 10, Maximum: 100
         * @param {number} [pageIndex] Default: 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         *
         * @throws {RequiredError}
         */
        getDualInvestmentPositions: async (
            status?: string,
            pageSize?: number,
            pageIndex?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (pageSize !== undefined && pageSize !== null) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageIndex !== undefined && pageIndex !== null) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/dci/product/positions',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe Dual Investment products
         *
         * Products are not available. // this means APR changes to lower value, or orders are not unavailable.
         * Failed. This means System or network errors.
         *
         * Weight: 1(IP)
         *
         * @summary Subscribe Dual Investment products(USER_DATA)
         * @param {string} id get id from `/sapi/v1/dci/product/list`
         * @param {string} orderId get orderId from `/sapi/v1/dci/product/list`
         * @param {number} depositAmount the amount for subscribing
         * @param {string} autoCompoundPlan `NONE`: switch off the plan, `STANDARD`:standard plan,`ADVANCED`:advanced plan
         * @param {number} [recvWindow] The value cannot be greater than 60000
         *
         * @throws {RequiredError}
         */
        subscribeDualInvestmentProducts: async (
            id: string,
            orderId: string,
            depositAmount: number,
            autoCompoundPlan: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscribeDualInvestmentProducts', 'id', id);
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('subscribeDualInvestmentProducts', 'orderId', orderId);
            // verify required parameter 'depositAmount' is not null or undefined
            assertParamExists('subscribeDualInvestmentProducts', 'depositAmount', depositAmount);
            // verify required parameter 'autoCompoundPlan' is not null or undefined
            assertParamExists(
                'subscribeDualInvestmentProducts',
                'autoCompoundPlan',
                autoCompoundPlan
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (id !== undefined && id !== null) {
                localVarQueryParameter['id'] = id;
            }

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (depositAmount !== undefined && depositAmount !== null) {
                localVarQueryParameter['depositAmount'] = depositAmount;
            }

            if (autoCompoundPlan !== undefined && autoCompoundPlan !== null) {
                localVarQueryParameter['autoCompoundPlan'] = autoCompoundPlan;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/dci/product/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TradeApi - interface
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * Change Auto-Compound status
     *
     * Weight: 1(IP)
     *
     * @summary Change Auto-Compound status(USER_DATA)
     * @param {ChangeAutoCompoundStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    changeAutoCompoundStatus(
        requestParameters: ChangeAutoCompoundStatusRequest
    ): Promise<RestApiResponse<ChangeAutoCompoundStatusResponse>>;
    /**
     * Check Dual Investment accounts
     *
     * Weight: 1(IP)
     *
     * @summary Check Dual Investment accounts(USER_DATA)
     * @param {CheckDualInvestmentAccountsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    checkDualInvestmentAccounts(
        requestParameters?: CheckDualInvestmentAccountsRequest
    ): Promise<RestApiResponse<CheckDualInvestmentAccountsResponse>>;
    /**
     * Get Dual Investment positions (batch)
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment positions(USER_DATA)
     * @param {GetDualInvestmentPositionsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    getDualInvestmentPositions(
        requestParameters?: GetDualInvestmentPositionsRequest
    ): Promise<RestApiResponse<GetDualInvestmentPositionsResponse>>;
    /**
     * Subscribe Dual Investment products
     *
     * Products are not available. // this means APR changes to lower value, or orders are not unavailable.
     * Failed. This means System or network errors.
     *
     * Weight: 1(IP)
     *
     * @summary Subscribe Dual Investment products(USER_DATA)
     * @param {SubscribeDualInvestmentProductsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    subscribeDualInvestmentProducts(
        requestParameters: SubscribeDualInvestmentProductsRequest
    ): Promise<RestApiResponse<SubscribeDualInvestmentProductsResponse>>;
}

/**
 * Request parameters for changeAutoCompoundStatus operation in TradeApi.
 * @interface ChangeAutoCompoundStatusRequest
 */
export interface ChangeAutoCompoundStatusRequest {
    /**
     * Get positionId from `/sapi/v1/dci/product/positions`
     * @type {string}
     * @memberof TradeApiChangeAutoCompoundStatus
     */
    readonly positionId: string;

    /**
     *
     * @type {string}
     * @memberof TradeApiChangeAutoCompoundStatus
     */
    readonly autoCompoundPlan?: string;

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof TradeApiChangeAutoCompoundStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for checkDualInvestmentAccounts operation in TradeApi.
 * @interface CheckDualInvestmentAccountsRequest
 */
export interface CheckDualInvestmentAccountsRequest {
    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof TradeApiCheckDualInvestmentAccounts
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDualInvestmentPositions operation in TradeApi.
 * @interface GetDualInvestmentPositionsRequest
 */
export interface GetDualInvestmentPositionsRequest {
    /**
     * `PENDING`:Products are purchasing, will give results later;`PURCHASE_SUCCESS`:purchase successfully;`SETTLED`: Products are finish settling;`PURCHASE_FAIL`:fail to purchase;`REFUNDING`:refund ongoing;`REFUND_SUCCESS`:refund to spot account successfully; `SETTLING`:Products are settling. If don't fill this field, will response all the position status.
     * @type {string}
     * @memberof TradeApiGetDualInvestmentPositions
     */
    readonly status?: string;

    /**
     * Default: 10, Maximum: 100
     * @type {number}
     * @memberof TradeApiGetDualInvestmentPositions
     */
    readonly pageSize?: number;

    /**
     * Default: 1
     * @type {number}
     * @memberof TradeApiGetDualInvestmentPositions
     */
    readonly pageIndex?: number;

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof TradeApiGetDualInvestmentPositions
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeDualInvestmentProducts operation in TradeApi.
 * @interface SubscribeDualInvestmentProductsRequest
 */
export interface SubscribeDualInvestmentProductsRequest {
    /**
     * get id from `/sapi/v1/dci/product/list`
     * @type {string}
     * @memberof TradeApiSubscribeDualInvestmentProducts
     */
    readonly id: string;

    /**
     * get orderId from `/sapi/v1/dci/product/list`
     * @type {string}
     * @memberof TradeApiSubscribeDualInvestmentProducts
     */
    readonly orderId: string;

    /**
     * the amount for subscribing
     * @type {number}
     * @memberof TradeApiSubscribeDualInvestmentProducts
     */
    readonly depositAmount: number;

    /**
     * `NONE`: switch off the plan, `STANDARD`:standard plan,`ADVANCED`:advanced plan
     * @type {string}
     * @memberof TradeApiSubscribeDualInvestmentProducts
     */
    readonly autoCompoundPlan: string;

    /**
     * The value cannot be greater than 60000
     * @type {number}
     * @memberof TradeApiSubscribeDualInvestmentProducts
     */
    readonly recvWindow?: number;
}

/**
 * TradeApi - object-oriented interface
 * @class TradeApi
 */
export class TradeApi implements TradeApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration);
    }

    /**
     * Change Auto-Compound status
     *
     * Weight: 1(IP)
     *
     * @summary Change Auto-Compound status(USER_DATA)
     * @param {ChangeAutoCompoundStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeAutoCompoundStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Change-Auto-Compound-status Binance API Documentation}
     */
    public async changeAutoCompoundStatus(
        requestParameters: ChangeAutoCompoundStatusRequest
    ): Promise<RestApiResponse<ChangeAutoCompoundStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.changeAutoCompoundStatus(
            requestParameters?.positionId,
            requestParameters?.autoCompoundPlan,
            requestParameters?.recvWindow
        );
        return sendRequest<ChangeAutoCompoundStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Check Dual Investment accounts
     *
     * Weight: 1(IP)
     *
     * @summary Check Dual Investment accounts(USER_DATA)
     * @param {CheckDualInvestmentAccountsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CheckDualInvestmentAccountsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Check-Dual-Investment-accounts Binance API Documentation}
     */
    public async checkDualInvestmentAccounts(
        requestParameters: CheckDualInvestmentAccountsRequest = {}
    ): Promise<RestApiResponse<CheckDualInvestmentAccountsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.checkDualInvestmentAccounts(
            requestParameters?.recvWindow
        );
        return sendRequest<CheckDualInvestmentAccountsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Dual Investment positions (batch)
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment positions(USER_DATA)
     * @param {GetDualInvestmentPositionsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDualInvestmentPositionsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Get-Dual-Investment-positions Binance API Documentation}
     */
    public async getDualInvestmentPositions(
        requestParameters: GetDualInvestmentPositionsRequest = {}
    ): Promise<RestApiResponse<GetDualInvestmentPositionsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getDualInvestmentPositions(
            requestParameters?.status,
            requestParameters?.pageSize,
            requestParameters?.pageIndex,
            requestParameters?.recvWindow
        );
        return sendRequest<GetDualInvestmentPositionsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe Dual Investment products
     *
     * Products are not available. // this means APR changes to lower value, or orders are not unavailable.
     * Failed. This means System or network errors.
     *
     * Weight: 1(IP)
     *
     * @summary Subscribe Dual Investment products(USER_DATA)
     * @param {SubscribeDualInvestmentProductsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeDualInvestmentProductsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Subscribe-Dual-Investment-products Binance API Documentation}
     */
    public async subscribeDualInvestmentProducts(
        requestParameters: SubscribeDualInvestmentProductsRequest
    ): Promise<RestApiResponse<SubscribeDualInvestmentProductsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.subscribeDualInvestmentProducts(
                requestParameters?.id,
                requestParameters?.orderId,
                requestParameters?.depositAmount,
                requestParameters?.autoCompoundPlan,
                requestParameters?.recvWindow
            );
        return sendRequest<SubscribeDualInvestmentProductsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
