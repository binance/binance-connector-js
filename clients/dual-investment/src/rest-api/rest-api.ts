/**
 * Binance Public Dual Investment REST API
 *
 * OpenAPI Specification for the Binance Public Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { MarketDataApi } from './modules/market-data-api';
import { TradeApi } from './modules/trade-api';

import type { GetDualInvestmentProductListRequest } from './modules/market-data-api';
import type {
    ChangeAutoCompoundStatusRequest,
    CheckDualInvestmentAccountsRequest,
    GetDualInvestmentPositionsRequest,
    SubscribeDualInvestmentProductsRequest,
} from './modules/trade-api';

import type { GetDualInvestmentProductListResponse } from './types';
import type {
    ChangeAutoCompoundStatusResponse,
    CheckDualInvestmentAccountsResponse,
    GetDualInvestmentPositionsResponse,
    SubscribeDualInvestmentProductsResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private marketDataApi: MarketDataApi;
    private tradeApi: TradeApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.marketDataApi = new MarketDataApi(configuration);
        this.tradeApi = new TradeApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Get Dual Investment product list
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment product list
     * @param {GetDualInvestmentProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDualInvestmentProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/dual_investment/market-data/Get-Dual-Investment-product-list Binance API Documentation}
     */
    getDualInvestmentProductList(
        requestParameters: GetDualInvestmentProductListRequest
    ): Promise<RestApiResponse<GetDualInvestmentProductListResponse>> {
        return this.marketDataApi.getDualInvestmentProductList(requestParameters);
    }

    /**
     * Change Auto-Compound status
     *
     * Weight: 1(IP)
     *
     * @summary Change Auto-Compound status(USER_DATA)
     * @param {ChangeAutoCompoundStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangeAutoCompoundStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Change-Auto-Compound-status Binance API Documentation}
     */
    changeAutoCompoundStatus(
        requestParameters: ChangeAutoCompoundStatusRequest
    ): Promise<RestApiResponse<ChangeAutoCompoundStatusResponse>> {
        return this.tradeApi.changeAutoCompoundStatus(requestParameters);
    }

    /**
     * Check Dual Investment accounts
     *
     * Weight: 1(IP)
     *
     * @summary Check Dual Investment accounts(USER_DATA)
     * @param {CheckDualInvestmentAccountsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CheckDualInvestmentAccountsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Check-Dual-Investment-accounts Binance API Documentation}
     */
    checkDualInvestmentAccounts(
        requestParameters: CheckDualInvestmentAccountsRequest = {}
    ): Promise<RestApiResponse<CheckDualInvestmentAccountsResponse>> {
        return this.tradeApi.checkDualInvestmentAccounts(requestParameters);
    }

    /**
     * Get Dual Investment positions (batch)
     *
     * Weight: 1(IP)
     *
     * @summary Get Dual Investment positions(USER_DATA)
     * @param {GetDualInvestmentPositionsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDualInvestmentPositionsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Get-Dual-Investment-positions Binance API Documentation}
     */
    getDualInvestmentPositions(
        requestParameters: GetDualInvestmentPositionsRequest = {}
    ): Promise<RestApiResponse<GetDualInvestmentPositionsResponse>> {
        return this.tradeApi.getDualInvestmentPositions(requestParameters);
    }

    /**
     * Subscribe Dual Investment products
     *
     * Products are not available. // this means APR changes to lower value, or orders are not unavailable.
     * Failed. This means System or network errors.
     *
     * Weight: 1(IP)
     *
     * @summary Subscribe Dual Investment products(USER_DATA)
     * @param {SubscribeDualInvestmentProductsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeDualInvestmentProductsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/dual_investment/trade/Subscribe-Dual-Investment-products Binance API Documentation}
     */
    subscribeDualInvestmentProducts(
        requestParameters: SubscribeDualInvestmentProductsRequest
    ): Promise<RestApiResponse<SubscribeDualInvestmentProductsResponse>> {
        return this.tradeApi.subscribeDualInvestmentProducts(requestParameters);
    }
}
