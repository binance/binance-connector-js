/**
 * Binance Public Auto Invest REST API
 *
 * OpenAPI Specification for the Binance Public Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { MarketDataApi } from './modules/market-data-api';
import { TradeApi } from './modules/trade-api';

import type {
    GetListOfPlansRequest,
    GetTargetAssetListRequest,
    GetTargetAssetRoiDataRequest,
    QueryAllSourceAssetAndTargetAssetRequest,
    QueryIndexDetailsRequest,
    QuerySourceAssetListRequest,
} from './modules/market-data-api';
import type {
    ChangePlanStatusRequest,
    IndexLinkedPlanRebalanceDetailsRequest,
    IndexLinkedPlanRedemptionRequest,
    IndexLinkedPlanRedemptionTradeRequest,
    InvestmentPlanAdjustmentRequest,
    InvestmentPlanCreationRequest,
    OneTimeTransactionRequest,
    QueryHoldingDetailsOfThePlanRequest,
    QueryIndexLinkedPlanPositionDetailsRequest,
    QueryOneTimeTransactionStatusRequest,
    QuerySubscriptionTransactionHistoryRequest,
} from './modules/trade-api';

import type {
    GetListOfPlansResponse,
    GetTargetAssetListResponse,
    GetTargetAssetRoiDataResponse,
    QueryAllSourceAssetAndTargetAssetResponse,
    QueryIndexDetailsResponse,
    QuerySourceAssetListResponse,
} from './types';
import type {
    ChangePlanStatusResponse,
    IndexLinkedPlanRebalanceDetailsResponse,
    IndexLinkedPlanRedemptionResponse,
    IndexLinkedPlanRedemptionTradeResponse,
    InvestmentPlanAdjustmentResponse,
    InvestmentPlanCreationResponse,
    OneTimeTransactionResponse,
    QueryHoldingDetailsOfThePlanResponse,
    QueryIndexLinkedPlanPositionDetailsResponse,
    QueryOneTimeTransactionStatusResponse,
    QuerySubscriptionTransactionHistoryResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private marketDataApi: MarketDataApi;
    private tradeApi: TradeApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.marketDataApi = new MarketDataApi(configuration);
        this.tradeApi = new TradeApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Query plan lists
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Get list of plans (USER_DATA)
     * @param {GetListOfPlansRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetListOfPlansResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-list-of-plans Binance API Documentation}
     */
    getListOfPlans(
        requestParameters: GetListOfPlansRequest
    ): Promise<RestApiResponse<GetListOfPlansResponse>> {
        return this.marketDataApi.getListOfPlans(requestParameters);
    }

    /**
     * Get target asset list
     *
     * Weight: 1
     *
     * @summary Get target asset list(USER_DATA)
     * @param {GetTargetAssetListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTargetAssetListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-target-asset-list Binance API Documentation}
     */
    getTargetAssetList(
        requestParameters: GetTargetAssetListRequest = {}
    ): Promise<RestApiResponse<GetTargetAssetListResponse>> {
        return this.marketDataApi.getTargetAssetList(requestParameters);
    }

    /**
     * ROI return list for target asset
     *
     * Weight: 1
     *
     * @summary Get target asset ROI data
     * @param {GetTargetAssetRoiDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTargetAssetRoiDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-target-asset-ROI-data Binance API Documentation}
     */
    getTargetAssetRoiData(
        requestParameters: GetTargetAssetRoiDataRequest
    ): Promise<RestApiResponse<GetTargetAssetRoiDataResponse>> {
        return this.marketDataApi.getTargetAssetRoiData(requestParameters);
    }

    /**
     * Query all source assets and target assets
     *
     * Weight: 1
     *
     * @summary Query all source asset and target asset(USER_DATA)
     * @param {QueryAllSourceAssetAndTargetAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllSourceAssetAndTargetAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-all-source-asset-and-target-asset Binance API Documentation}
     */
    queryAllSourceAssetAndTargetAsset(
        requestParameters: QueryAllSourceAssetAndTargetAssetRequest = {}
    ): Promise<RestApiResponse<QueryAllSourceAssetAndTargetAssetResponse>> {
        return this.marketDataApi.queryAllSourceAssetAndTargetAsset(requestParameters);
    }

    /**
     * Query index details
     *
     * Weight: 1
     *
     * @summary Query Index Details(USER_DATA)
     * @param {QueryIndexDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIndexDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-Index-Details Binance API Documentation}
     */
    queryIndexDetails(
        requestParameters: QueryIndexDetailsRequest
    ): Promise<RestApiResponse<QueryIndexDetailsResponse>> {
        return this.marketDataApi.queryIndexDetails(requestParameters);
    }

    /**
     * Query Source Asset to be used for investment
     *
     * Weight: 1
     *
     * @summary Query source asset list(USER_DATA)
     * @param {QuerySourceAssetListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySourceAssetListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-source-asset-list Binance API Documentation}
     */
    querySourceAssetList(
        requestParameters: QuerySourceAssetListRequest
    ): Promise<RestApiResponse<QuerySourceAssetListResponse>> {
        return this.marketDataApi.querySourceAssetList(requestParameters);
    }

    /**
     * Change Plan Status
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Change Plan Status(TRADE)
     * @param {ChangePlanStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangePlanStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Change-Plan-Status Binance API Documentation}
     */
    changePlanStatus(
        requestParameters: ChangePlanStatusRequest
    ): Promise<RestApiResponse<ChangePlanStatusResponse>> {
        return this.tradeApi.changePlanStatus(requestParameters);
    }

    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Rebalance Details(USER_DATA)
     * @param {IndexLinkedPlanRebalanceDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRebalanceDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Rebalance-Details Binance API Documentation}
     */
    indexLinkedPlanRebalanceDetails(
        requestParameters: IndexLinkedPlanRebalanceDetailsRequest = {}
    ): Promise<RestApiResponse<IndexLinkedPlanRebalanceDetailsResponse>> {
        return this.tradeApi.indexLinkedPlanRebalanceDetails(requestParameters);
    }

    /**
     * To redeem index-Linked plan holdings
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(TRADE)
     * @param {IndexLinkedPlanRedemptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRedemptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Redemption Binance API Documentation}
     */
    indexLinkedPlanRedemption(
        requestParameters: IndexLinkedPlanRedemptionRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionResponse>> {
        return this.tradeApi.indexLinkedPlanRedemption(requestParameters);
    }

    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(USER_DATA)
     * @param {IndexLinkedPlanRedemptionTradeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRedemptionTradeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Redemption Binance API Documentation}
     */
    indexLinkedPlanRedemptionTrade(
        requestParameters: IndexLinkedPlanRedemptionTradeRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionTradeResponse>> {
        return this.tradeApi.indexLinkedPlanRedemptionTrade(requestParameters);
    }

    /**
     * Query Source Asset to be used for investment
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan adjustment(TRADE)
     * @param {InvestmentPlanAdjustmentRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<InvestmentPlanAdjustmentResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Investment-plan-adjustment Binance API Documentation}
     */
    investmentPlanAdjustment(
        requestParameters: InvestmentPlanAdjustmentRequest
    ): Promise<RestApiResponse<InvestmentPlanAdjustmentResponse>> {
        return this.tradeApi.investmentPlanAdjustment(requestParameters);
    }

    /**
     * Post an investment plan creation
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan creation(USER_DATA)
     * @param {InvestmentPlanCreationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<InvestmentPlanCreationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Investment-plan-creation Binance API Documentation}
     */
    investmentPlanCreation(
        requestParameters: InvestmentPlanCreationRequest
    ): Promise<RestApiResponse<InvestmentPlanCreationResponse>> {
        return this.tradeApi.investmentPlanCreation(requestParameters);
    }

    /**
     * One time transaction
     *
     * `planId`/`planId`/`details` must not all be null
     *
     * Weight: 1
     *
     * @summary One Time Transaction(TRADE)
     * @param {OneTimeTransactionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OneTimeTransactionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/One-Time-Transaction Binance API Documentation}
     */
    oneTimeTransaction(
        requestParameters: OneTimeTransactionRequest
    ): Promise<RestApiResponse<OneTimeTransactionResponse>> {
        return this.tradeApi.oneTimeTransaction(requestParameters);
    }

    /**
     * Query holding details of the plan
     *
     * Weight: 1
     *
     * @summary Query holding details of the plan(USER_DATA)
     * @param {QueryHoldingDetailsOfThePlanRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryHoldingDetailsOfThePlanResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-holding-details-of-the-plan Binance API Documentation}
     */
    queryHoldingDetailsOfThePlan(
        requestParameters: QueryHoldingDetailsOfThePlanRequest = {}
    ): Promise<RestApiResponse<QueryHoldingDetailsOfThePlanResponse>> {
        return this.tradeApi.queryHoldingDetailsOfThePlan(requestParameters);
    }

    /**
     * Details on users Index-Linked plan position details
     *
     * Weight: 1
     *
     * @summary Query Index Linked Plan Position Details(USER_DATA)
     * @param {QueryIndexLinkedPlanPositionDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Position-Details Binance API Documentation}
     */
    queryIndexLinkedPlanPositionDetails(
        requestParameters: QueryIndexLinkedPlanPositionDetailsRequest
    ): Promise<RestApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>> {
        return this.tradeApi.queryIndexLinkedPlanPositionDetails(requestParameters);
    }

    /**
     * Transaction status for one-time transaction
     *
     * Weight: 1
     *
     * @summary Query One-Time Transaction Status(USER_DATA)
     * @param {QueryOneTimeTransactionStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryOneTimeTransactionStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-One-Time-Transaction-Status Binance API Documentation}
     */
    queryOneTimeTransactionStatus(
        requestParameters: QueryOneTimeTransactionStatusRequest
    ): Promise<RestApiResponse<QueryOneTimeTransactionStatusResponse>> {
        return this.tradeApi.queryOneTimeTransactionStatus(requestParameters);
    }

    /**
     * Query subscription transaction history of a plan
     *
     *
     * Max span between startTime and endTime is 30days
     * If both startTime and endTime are null，then default is 30days
     *
     * Weight: 1
     *
     * @summary Query subscription transaction history(USER_DATA)
     * @param {QuerySubscriptionTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubscriptionTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-subscription-transaction-history Binance API Documentation}
     */
    querySubscriptionTransactionHistory(
        requestParameters: QuerySubscriptionTransactionHistoryRequest = {}
    ): Promise<RestApiResponse<QuerySubscriptionTransactionHistoryResponse>> {
        return this.tradeApi.querySubscriptionTransactionHistory(requestParameters);
    }
}
