/**
 * Binance Auto Invest REST API
 *
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetListOfPlansResponse,
    GetTargetAssetListResponse,
    GetTargetAssetRoiDataResponse,
    QueryAllSourceAssetAndTargetAssetResponse,
    QueryIndexDetailsResponse,
    QuerySourceAssetListResponse,
} from '../types';

/**
 * MarketDataApi - axios parameter creator
 */
const MarketDataApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Query plan lists
         *
         * max one request every 3s per account
         *
         * Weight: 1
         *
         * @summary Get list of plans (USER_DATA)
         * @param {string} planType “SINGLE”,”PORTFOLIO”,”INDEX”
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        getListOfPlans: async (planType: string, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'planType' is not null or undefined
            assertParamExists('getListOfPlans', 'planType', planType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (planType !== undefined && planType !== null) {
                localVarQueryParameter['planType'] = planType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/plan/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get target asset list
         *
         * Weight: 1
         *
         * @summary Get target asset list(USER_DATA)
         * @param {number} [targetAsset] Plan identifier
         * @param {number} [size] Default: 8, Max:100
         * @param {number} [current] Current query page. Default: 1, start from 1
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        getTargetAssetList: async (
            targetAsset?: number,
            size?: number,
            current?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/target-asset/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * ROI return list for target asset
         *
         * Weight: 1
         *
         * @summary Get target asset ROI data
         * @param {string} targetAsset e.g "BTC"
         * @param {string} hisRoiType FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        getTargetAssetRoiData: async (
            targetAsset: string,
            hisRoiType: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'targetAsset' is not null or undefined
            assertParamExists('getTargetAssetRoiData', 'targetAsset', targetAsset);
            // verify required parameter 'hisRoiType' is not null or undefined
            assertParamExists('getTargetAssetRoiData', 'hisRoiType', hisRoiType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (hisRoiType !== undefined && hisRoiType !== null) {
                localVarQueryParameter['hisRoiType'] = hisRoiType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/target-asset/roi/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query all source assets and target assets
         *
         * Weight: 1
         *
         * @summary Query all source asset and target asset(USER_DATA)
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        queryAllSourceAssetAndTargetAsset: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/all/asset',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query index details
         *
         * Weight: 1
         *
         * @summary Query Index Details(USER_DATA)
         * @param {number} indexId
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        queryIndexDetails: async (indexId: number, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            assertParamExists('queryIndexDetails', 'indexId', indexId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/index/info',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Source Asset to be used for investment
         *
         * Weight: 1
         *
         * @summary Query source asset list(USER_DATA)
         * @param {string} usageType "RECURRING", "ONE_TIME"
         * @param {number} [targetAsset] Plan identifier
         * @param {number} [indexId] now only can set = 1
         * @param {boolean} [flexibleAllowedToUse] true/false；true: using flexible wallet
         * @param {string} [sourceType] `MAIN_SITE` for Binance user,`TR` for Binance Turkey user
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        querySourceAssetList: async (
            usageType: string,
            targetAsset?: number,
            indexId?: number,
            flexibleAllowedToUse?: boolean,
            sourceType?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'usageType' is not null or undefined
            assertParamExists('querySourceAssetList', 'usageType', usageType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (usageType !== undefined && usageType !== null) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (flexibleAllowedToUse !== undefined && flexibleAllowedToUse !== null) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (sourceType !== undefined && sourceType !== null) {
                localVarQueryParameter['sourceType'] = sourceType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/source-asset/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketDataApi - interface
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Query plan lists
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Get list of plans (USER_DATA)
     * @param {GetListOfPlansRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getListOfPlans(
        requestParameters: GetListOfPlansRequest
    ): Promise<RestApiResponse<GetListOfPlansResponse>>;
    /**
     * Get target asset list
     *
     * Weight: 1
     *
     * @summary Get target asset list(USER_DATA)
     * @param {GetTargetAssetListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getTargetAssetList(
        requestParameters?: GetTargetAssetListRequest
    ): Promise<RestApiResponse<GetTargetAssetListResponse>>;
    /**
     * ROI return list for target asset
     *
     * Weight: 1
     *
     * @summary Get target asset ROI data
     * @param {GetTargetAssetRoiDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getTargetAssetRoiData(
        requestParameters: GetTargetAssetRoiDataRequest
    ): Promise<RestApiResponse<GetTargetAssetRoiDataResponse>>;
    /**
     * Query all source assets and target assets
     *
     * Weight: 1
     *
     * @summary Query all source asset and target asset(USER_DATA)
     * @param {QueryAllSourceAssetAndTargetAssetRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryAllSourceAssetAndTargetAsset(
        requestParameters?: QueryAllSourceAssetAndTargetAssetRequest
    ): Promise<RestApiResponse<QueryAllSourceAssetAndTargetAssetResponse>>;
    /**
     * Query index details
     *
     * Weight: 1
     *
     * @summary Query Index Details(USER_DATA)
     * @param {QueryIndexDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryIndexDetails(
        requestParameters: QueryIndexDetailsRequest
    ): Promise<RestApiResponse<QueryIndexDetailsResponse>>;
    /**
     * Query Source Asset to be used for investment
     *
     * Weight: 1
     *
     * @summary Query source asset list(USER_DATA)
     * @param {QuerySourceAssetListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    querySourceAssetList(
        requestParameters: QuerySourceAssetListRequest
    ): Promise<RestApiResponse<QuerySourceAssetListResponse>>;
}

/**
 * Request parameters for getListOfPlans operation in MarketDataApi.
 * @interface GetListOfPlansRequest
 */
export interface GetListOfPlansRequest {
    /**
     * “SINGLE”,”PORTFOLIO”,”INDEX”
     * @type {string}
     * @memberof MarketDataApiGetListOfPlans
     */
    readonly planType: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiGetListOfPlans
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getTargetAssetList operation in MarketDataApi.
 * @interface GetTargetAssetListRequest
 */
export interface GetTargetAssetListRequest {
    /**
     * Plan identifier
     * @type {number}
     * @memberof MarketDataApiGetTargetAssetList
     */
    readonly targetAsset?: number;

    /**
     * Default: 8, Max:100
     * @type {number}
     * @memberof MarketDataApiGetTargetAssetList
     */
    readonly size?: number;

    /**
     * Current query page. Default: 1, start from 1
     * @type {number}
     * @memberof MarketDataApiGetTargetAssetList
     */
    readonly current?: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiGetTargetAssetList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getTargetAssetRoiData operation in MarketDataApi.
 * @interface GetTargetAssetRoiDataRequest
 */
export interface GetTargetAssetRoiDataRequest {
    /**
     * e.g "BTC"
     * @type {string}
     * @memberof MarketDataApiGetTargetAssetRoiData
     */
    readonly targetAsset: string;

    /**
     * FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY
     * @type {string}
     * @memberof MarketDataApiGetTargetAssetRoiData
     */
    readonly hisRoiType: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiGetTargetAssetRoiData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryAllSourceAssetAndTargetAsset operation in MarketDataApi.
 * @interface QueryAllSourceAssetAndTargetAssetRequest
 */
export interface QueryAllSourceAssetAndTargetAssetRequest {
    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiQueryAllSourceAssetAndTargetAsset
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryIndexDetails operation in MarketDataApi.
 * @interface QueryIndexDetailsRequest
 */
export interface QueryIndexDetailsRequest {
    /**
     *
     * @type {number}
     * @memberof MarketDataApiQueryIndexDetails
     */
    readonly indexId: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiQueryIndexDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySourceAssetList operation in MarketDataApi.
 * @interface QuerySourceAssetListRequest
 */
export interface QuerySourceAssetListRequest {
    /**
     * "RECURRING", "ONE_TIME"
     * @type {string}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly usageType: string;

    /**
     * Plan identifier
     * @type {number}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly targetAsset?: number;

    /**
     * now only can set = 1
     * @type {number}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly indexId?: number;

    /**
     * true/false；true: using flexible wallet
     * @type {boolean}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly flexibleAllowedToUse?: boolean;

    /**
     * `MAIN_SITE` for Binance user,`TR` for Binance Turkey user
     * @type {string}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly sourceType?: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof MarketDataApiQuerySourceAssetList
     */
    readonly recvWindow?: number;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration);
    }

    /**
     * Query plan lists
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Get list of plans (USER_DATA)
     * @param {GetListOfPlansRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetListOfPlansResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-list-of-plans Binance API Documentation}
     */
    public async getListOfPlans(
        requestParameters: GetListOfPlansRequest
    ): Promise<RestApiResponse<GetListOfPlansResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getListOfPlans(
            requestParameters?.planType,
            requestParameters?.recvWindow
        );
        return sendRequest<GetListOfPlansResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get target asset list
     *
     * Weight: 1
     *
     * @summary Get target asset list(USER_DATA)
     * @param {GetTargetAssetListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTargetAssetListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-target-asset-list Binance API Documentation}
     */
    public async getTargetAssetList(
        requestParameters: GetTargetAssetListRequest = {}
    ): Promise<RestApiResponse<GetTargetAssetListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getTargetAssetList(
            requestParameters?.targetAsset,
            requestParameters?.size,
            requestParameters?.current,
            requestParameters?.recvWindow
        );
        return sendRequest<GetTargetAssetListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * ROI return list for target asset
     *
     * Weight: 1
     *
     * @summary Get target asset ROI data
     * @param {GetTargetAssetRoiDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTargetAssetRoiDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Get-target-asset-ROI-data Binance API Documentation}
     */
    public async getTargetAssetRoiData(
        requestParameters: GetTargetAssetRoiDataRequest
    ): Promise<RestApiResponse<GetTargetAssetRoiDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getTargetAssetRoiData(
            requestParameters?.targetAsset,
            requestParameters?.hisRoiType,
            requestParameters?.recvWindow
        );
        return sendRequest<GetTargetAssetRoiDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query all source assets and target assets
     *
     * Weight: 1
     *
     * @summary Query all source asset and target asset(USER_DATA)
     * @param {QueryAllSourceAssetAndTargetAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryAllSourceAssetAndTargetAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-all-source-asset-and-target-asset Binance API Documentation}
     */
    public async queryAllSourceAssetAndTargetAsset(
        requestParameters: QueryAllSourceAssetAndTargetAssetRequest = {}
    ): Promise<RestApiResponse<QueryAllSourceAssetAndTargetAssetResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryAllSourceAssetAndTargetAsset(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryAllSourceAssetAndTargetAssetResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query index details
     *
     * Weight: 1
     *
     * @summary Query Index Details(USER_DATA)
     * @param {QueryIndexDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIndexDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-Index-Details Binance API Documentation}
     */
    public async queryIndexDetails(
        requestParameters: QueryIndexDetailsRequest
    ): Promise<RestApiResponse<QueryIndexDetailsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryIndexDetails(
            requestParameters?.indexId,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryIndexDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Source Asset to be used for investment
     *
     * Weight: 1
     *
     * @summary Query source asset list(USER_DATA)
     * @param {QuerySourceAssetListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySourceAssetListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/auto_invest/market-data/Query-source-asset-list Binance API Documentation}
     */
    public async querySourceAssetList(
        requestParameters: QuerySourceAssetListRequest
    ): Promise<RestApiResponse<QuerySourceAssetListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.querySourceAssetList(
            requestParameters?.usageType,
            requestParameters?.targetAsset,
            requestParameters?.indexId,
            requestParameters?.flexibleAllowedToUse,
            requestParameters?.sourceType,
            requestParameters?.recvWindow
        );
        return sendRequest<QuerySourceAssetListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
