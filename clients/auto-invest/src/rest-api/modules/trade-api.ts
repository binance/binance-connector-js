/**
 * Binance Auto Invest REST API
 *
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    ChangePlanStatusResponse,
    IndexLinkedPlanRebalanceDetailsResponse,
    IndexLinkedPlanRedemptionResponse,
    IndexLinkedPlanRedemptionTradeResponse,
    InvestmentPlanAdjustmentDetailsParameterInner,
    InvestmentPlanAdjustmentResponse,
    InvestmentPlanCreationResponse,
    OneTimeTransactionResponse,
    QueryHoldingDetailsOfThePlanResponse,
    QueryIndexLinkedPlanPositionDetailsResponse,
    QueryOneTimeTransactionStatusResponse,
    QuerySubscriptionTransactionHistoryResponse,
} from '../types';

/**
 * TradeApi - axios parameter creator
 */
const TradeApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Change Plan Status
         *
         * max one request every 3s per account
         *
         * Weight: 1
         *
         * @summary Change Plan Status(TRADE)
         * @param {number} planId Plan identifier
         * @param {string} status “ONGOING”,”PAUSED","REMOVED"
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        changePlanStatus: async (
            planId: number,
            status: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('changePlanStatus', 'planId', planId);
            // verify required parameter 'status' is not null or undefined
            assertParamExists('changePlanStatus', 'status', status);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (planId !== undefined && planId !== null) {
                localVarQueryParameter['planId'] = planId;
            }

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/plan/edit-status',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions
         *
         * Max 30 day difference between `startTime` and `endTime`
         * If no `startTime` and `endTime`, default to show past 30 day records
         *
         * Weight: 1
         *
         * @summary Index Linked Plan Rebalance Details(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current query page. Default: 1, start from 1
         * @param {number} [size] Default: 8, Max:100
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        indexLinkedPlanRebalanceDetails: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/rebalance/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * To redeem index-Linked plan holdings
         *
         * Weight: 1
         *
         * @summary Index Linked Plan Redemption(TRADE)
         * @param {number} indexId
         * @param {number} redemptionPercentage user redeem percentage,10/20/100..
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        indexLinkedPlanRedemption: async (
            indexId: number,
            redemptionPercentage: number,
            requestId?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            assertParamExists('indexLinkedPlanRedemption', 'indexId', indexId);
            // verify required parameter 'redemptionPercentage' is not null or undefined
            assertParamExists(
                'indexLinkedPlanRedemption',
                'redemptionPercentage',
                redemptionPercentage
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (redemptionPercentage !== undefined && redemptionPercentage !== null) {
                localVarQueryParameter['redemptionPercentage'] = redemptionPercentage;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions
         *
         * Max 30 day difference between `startTime` and `endTime`
         * If no `startTime` and `endTime`, default to show past 30 day records
         *
         * Weight: 1
         *
         * @summary Index Linked Plan Redemption(USER_DATA)
         * @param {number} requestId request id
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current query page. Default: 1, start from 1
         * @param {string} [asset]
         * @param {number} [size] Default: 8, Max:100
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        indexLinkedPlanRedemptionTrade: async (
            requestId: number,
            startTime?: number,
            endTime?: number,
            current?: number,
            asset?: string,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('indexLinkedPlanRedemptionTrade', 'requestId', requestId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/redeem/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Source Asset to be used for investment
         *
         * max one request every 3s per account
         *
         * Weight: 1
         *
         * @summary Investment plan adjustment(TRADE)
         * @param {number} planId Plan identifier
         * @param {number} subscriptionAmount
         * @param {string} subscriptionCycle "H1", "H4", "H8","H12", "WEEKLY","DAILY","MONTHLY","BI_WEEKLY"
         * @param {number} subscriptionStartTime “0,1,2,3,4,5,6,7,8,..23”;Must be sent in form of UTC+0
         * @param {string} sourceAsset e.g “USDT”
         * @param {Array<InvestmentPlanAdjustmentDetailsParameterInner>} details sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
         * @param {boolean} [flexibleAllowedToUse] true/false；true: using flexible wallet
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        investmentPlanAdjustment: async (
            planId: number,
            subscriptionAmount: number,
            subscriptionCycle: string,
            subscriptionStartTime: number,
            sourceAsset: string,
            details: Array<InvestmentPlanAdjustmentDetailsParameterInner>,
            flexibleAllowedToUse?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('investmentPlanAdjustment', 'planId', planId);
            // verify required parameter 'subscriptionAmount' is not null or undefined
            assertParamExists('investmentPlanAdjustment', 'subscriptionAmount', subscriptionAmount);
            // verify required parameter 'subscriptionCycle' is not null or undefined
            assertParamExists('investmentPlanAdjustment', 'subscriptionCycle', subscriptionCycle);
            // verify required parameter 'subscriptionStartTime' is not null or undefined
            assertParamExists(
                'investmentPlanAdjustment',
                'subscriptionStartTime',
                subscriptionStartTime
            );
            // verify required parameter 'sourceAsset' is not null or undefined
            assertParamExists('investmentPlanAdjustment', 'sourceAsset', sourceAsset);
            // verify required parameter 'details' is not null or undefined
            assertParamExists('investmentPlanAdjustment', 'details', details);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (planId !== undefined && planId !== null) {
                localVarQueryParameter['planId'] = planId;
            }

            if (subscriptionAmount !== undefined && subscriptionAmount !== null) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (subscriptionCycle !== undefined && subscriptionCycle !== null) {
                localVarQueryParameter['subscriptionCycle'] = subscriptionCycle;
            }

            if (subscriptionStartTime !== undefined && subscriptionStartTime !== null) {
                localVarQueryParameter['subscriptionStartTime'] = subscriptionStartTime;
            }

            if (sourceAsset !== undefined && sourceAsset !== null) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined && flexibleAllowedToUse !== null) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/plan/edit',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Post an investment plan creation
         *
         * max one request every 3s per account
         *
         * Weight: 1
         *
         * @summary Investment plan creation(USER_DATA)
         * @param {string} sourceType "MAIN_SITE" for Binance,“TR” for Binance Turkey
         * @param {string} planType “SINGLE”,”PORTFOLIO”,”INDEX”
         * @param {number} subscriptionAmount
         * @param {string} subscriptionCycle "H1", "H4", "H8","H12", "WEEKLY","DAILY","MONTHLY","BI_WEEKLY"
         * @param {number} subscriptionStartTime “0,1,2,3,4,5,6,7,8,..23”;Must be sent in form of UTC+0
         * @param {string} sourceAsset e.g “USDT”
         * @param {Array<InvestmentPlanAdjustmentDetailsParameterInner>} details sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [indexId] now only can set = 1
         * @param {boolean} [flexibleAllowedToUse] true/false；true: using flexible wallet
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        investmentPlanCreation: async (
            sourceType: string,
            planType: string,
            subscriptionAmount: number,
            subscriptionCycle: string,
            subscriptionStartTime: number,
            sourceAsset: string,
            details: Array<InvestmentPlanAdjustmentDetailsParameterInner>,
            requestId?: string,
            indexId?: number,
            flexibleAllowedToUse?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'sourceType' is not null or undefined
            assertParamExists('investmentPlanCreation', 'sourceType', sourceType);
            // verify required parameter 'planType' is not null or undefined
            assertParamExists('investmentPlanCreation', 'planType', planType);
            // verify required parameter 'subscriptionAmount' is not null or undefined
            assertParamExists('investmentPlanCreation', 'subscriptionAmount', subscriptionAmount);
            // verify required parameter 'subscriptionCycle' is not null or undefined
            assertParamExists('investmentPlanCreation', 'subscriptionCycle', subscriptionCycle);
            // verify required parameter 'subscriptionStartTime' is not null or undefined
            assertParamExists(
                'investmentPlanCreation',
                'subscriptionStartTime',
                subscriptionStartTime
            );
            // verify required parameter 'sourceAsset' is not null or undefined
            assertParamExists('investmentPlanCreation', 'sourceAsset', sourceAsset);
            // verify required parameter 'details' is not null or undefined
            assertParamExists('investmentPlanCreation', 'details', details);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (sourceType !== undefined && sourceType !== null) {
                localVarQueryParameter['sourceType'] = sourceType;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (planType !== undefined && planType !== null) {
                localVarQueryParameter['planType'] = planType;
            }

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (subscriptionAmount !== undefined && subscriptionAmount !== null) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (subscriptionCycle !== undefined && subscriptionCycle !== null) {
                localVarQueryParameter['subscriptionCycle'] = subscriptionCycle;
            }

            if (subscriptionStartTime !== undefined && subscriptionStartTime !== null) {
                localVarQueryParameter['subscriptionStartTime'] = subscriptionStartTime;
            }

            if (sourceAsset !== undefined && sourceAsset !== null) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined && flexibleAllowedToUse !== null) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/plan/add',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * One time transaction
         *
         * `planId`/`planId`/`details` must not all be null
         *
         * Weight: 1
         *
         * @summary One Time Transaction(TRADE)
         * @param {string} sourceType "MAIN_SITE" for Binance,“TR” for Binance Turkey
         * @param {number} subscriptionAmount
         * @param {string} sourceAsset e.g “USDT”
         * @param {Array<InvestmentPlanAdjustmentDetailsParameterInner>} details sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {boolean} [flexibleAllowedToUse] true/false；true: using flexible wallet
         * @param {number} [planId] Plan identifier
         * @param {number} [indexId] now only can set = 1
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        oneTimeTransaction: async (
            sourceType: string,
            subscriptionAmount: number,
            sourceAsset: string,
            details: Array<InvestmentPlanAdjustmentDetailsParameterInner>,
            requestId?: string,
            flexibleAllowedToUse?: boolean,
            planId?: number,
            indexId?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'sourceType' is not null or undefined
            assertParamExists('oneTimeTransaction', 'sourceType', sourceType);
            // verify required parameter 'subscriptionAmount' is not null or undefined
            assertParamExists('oneTimeTransaction', 'subscriptionAmount', subscriptionAmount);
            // verify required parameter 'sourceAsset' is not null or undefined
            assertParamExists('oneTimeTransaction', 'sourceAsset', sourceAsset);
            // verify required parameter 'details' is not null or undefined
            assertParamExists('oneTimeTransaction', 'details', details);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (sourceType !== undefined && sourceType !== null) {
                localVarQueryParameter['sourceType'] = sourceType;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (subscriptionAmount !== undefined && subscriptionAmount !== null) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (sourceAsset !== undefined && sourceAsset !== null) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined && flexibleAllowedToUse !== null) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (planId !== undefined && planId !== null) {
                localVarQueryParameter['planId'] = planId;
            }

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/one-off',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query holding details of the plan
         *
         * Weight: 1
         *
         * @summary Query holding details of the plan(USER_DATA)
         * @param {number} [planId] Plan identifier
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        queryHoldingDetailsOfThePlan: async (
            planId?: number,
            requestId?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (planId !== undefined && planId !== null) {
                localVarQueryParameter['planId'] = planId;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/plan/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Details on users Index-Linked plan position details
         *
         * Weight: 1
         *
         * @summary Query Index Linked Plan Position Details(USER_DATA)
         * @param {number} indexId
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        queryIndexLinkedPlanPositionDetails: async (
            indexId: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            assertParamExists('queryIndexLinkedPlanPositionDetails', 'indexId', indexId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (indexId !== undefined && indexId !== null) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/index/user-summary',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Transaction status for one-time transaction
         *
         * Weight: 1
         *
         * @summary Query One-Time Transaction Status(USER_DATA)
         * @param {number} transactionId PORTFOLIO plan's Id
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        queryOneTimeTransactionStatus: async (
            transactionId: number,
            requestId?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('queryOneTimeTransactionStatus', 'transactionId', transactionId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (transactionId !== undefined && transactionId !== null) {
                localVarQueryParameter['transactionId'] = transactionId;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/one-off/status',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query subscription transaction history of a plan
         *
         *
         * Max span between startTime and endTime is 30days
         * If both startTime and endTime are null，then default is 30days
         *
         * Weight: 1
         *
         * @summary Query subscription transaction history(USER_DATA)
         * @param {number} [planId] Plan identifier
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [targetAsset] Plan identifier
         * @param {number} [planType] SINGLE, PORTFOLIO, INDEX, ALL
         * @param {number} [size] Default: 8, Max:100
         * @param {number} [current] Current query page. Default: 1, start from 1
         * @param {number} [recvWindow] no more than ```60000```
         *
         * @throws {RequiredError}
         */
        querySubscriptionTransactionHistory: async (
            planId?: number,
            startTime?: number,
            endTime?: number,
            targetAsset?: number,
            planType?: number,
            size?: number,
            current?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (planId !== undefined && planId !== null) {
                localVarQueryParameter['planId'] = planId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (targetAsset !== undefined && targetAsset !== null) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (planType !== undefined && planType !== null) {
                localVarQueryParameter['planType'] = planType;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/lending/auto-invest/history/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TradeApi - interface
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * Change Plan Status
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Change Plan Status(TRADE)
     * @param {ChangePlanStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    changePlanStatus(
        requestParameters: ChangePlanStatusRequest
    ): Promise<RestApiResponse<ChangePlanStatusResponse>>;
    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Rebalance Details(USER_DATA)
     * @param {IndexLinkedPlanRebalanceDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    indexLinkedPlanRebalanceDetails(
        requestParameters?: IndexLinkedPlanRebalanceDetailsRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRebalanceDetailsResponse>>;
    /**
     * To redeem index-Linked plan holdings
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(TRADE)
     * @param {IndexLinkedPlanRedemptionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    indexLinkedPlanRedemption(
        requestParameters: IndexLinkedPlanRedemptionRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionResponse>>;
    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(USER_DATA)
     * @param {IndexLinkedPlanRedemptionTradeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    indexLinkedPlanRedemptionTrade(
        requestParameters: IndexLinkedPlanRedemptionTradeRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionTradeResponse>>;
    /**
     * Query Source Asset to be used for investment
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan adjustment(TRADE)
     * @param {InvestmentPlanAdjustmentRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    investmentPlanAdjustment(
        requestParameters: InvestmentPlanAdjustmentRequest
    ): Promise<RestApiResponse<InvestmentPlanAdjustmentResponse>>;
    /**
     * Post an investment plan creation
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan creation(USER_DATA)
     * @param {InvestmentPlanCreationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    investmentPlanCreation(
        requestParameters: InvestmentPlanCreationRequest
    ): Promise<RestApiResponse<InvestmentPlanCreationResponse>>;
    /**
     * One time transaction
     *
     * `planId`/`planId`/`details` must not all be null
     *
     * Weight: 1
     *
     * @summary One Time Transaction(TRADE)
     * @param {OneTimeTransactionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    oneTimeTransaction(
        requestParameters: OneTimeTransactionRequest
    ): Promise<RestApiResponse<OneTimeTransactionResponse>>;
    /**
     * Query holding details of the plan
     *
     * Weight: 1
     *
     * @summary Query holding details of the plan(USER_DATA)
     * @param {QueryHoldingDetailsOfThePlanRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    queryHoldingDetailsOfThePlan(
        requestParameters?: QueryHoldingDetailsOfThePlanRequest
    ): Promise<RestApiResponse<QueryHoldingDetailsOfThePlanResponse>>;
    /**
     * Details on users Index-Linked plan position details
     *
     * Weight: 1
     *
     * @summary Query Index Linked Plan Position Details(USER_DATA)
     * @param {QueryIndexLinkedPlanPositionDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    queryIndexLinkedPlanPositionDetails(
        requestParameters: QueryIndexLinkedPlanPositionDetailsRequest
    ): Promise<RestApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>>;
    /**
     * Transaction status for one-time transaction
     *
     * Weight: 1
     *
     * @summary Query One-Time Transaction Status(USER_DATA)
     * @param {QueryOneTimeTransactionStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    queryOneTimeTransactionStatus(
        requestParameters: QueryOneTimeTransactionStatusRequest
    ): Promise<RestApiResponse<QueryOneTimeTransactionStatusResponse>>;
    /**
     * Query subscription transaction history of a plan
     *
     *
     * Max span between startTime and endTime is 30days
     * If both startTime and endTime are null，then default is 30days
     *
     * Weight: 1
     *
     * @summary Query subscription transaction history(USER_DATA)
     * @param {QuerySubscriptionTransactionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApiInterface
     */
    querySubscriptionTransactionHistory(
        requestParameters?: QuerySubscriptionTransactionHistoryRequest
    ): Promise<RestApiResponse<QuerySubscriptionTransactionHistoryResponse>>;
}

/**
 * Request parameters for changePlanStatus operation in TradeApi.
 * @interface ChangePlanStatusRequest
 */
export interface ChangePlanStatusRequest {
    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiChangePlanStatus
     */
    readonly planId: number;

    /**
     * “ONGOING”,”PAUSED","REMOVED"
     * @type {string}
     * @memberof TradeApiChangePlanStatus
     */
    readonly status: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiChangePlanStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for indexLinkedPlanRebalanceDetails operation in TradeApi.
 * @interface IndexLinkedPlanRebalanceDetailsRequest
 */
export interface IndexLinkedPlanRebalanceDetailsRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRebalanceDetails
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRebalanceDetails
     */
    readonly endTime?: number;

    /**
     * Current query page. Default: 1, start from 1
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRebalanceDetails
     */
    readonly current?: number;

    /**
     * Default: 8, Max:100
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRebalanceDetails
     */
    readonly size?: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRebalanceDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for indexLinkedPlanRedemption operation in TradeApi.
 * @interface IndexLinkedPlanRedemptionRequest
 */
export interface IndexLinkedPlanRedemptionRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemption
     */
    readonly indexId: number;

    /**
     * user redeem percentage,10/20/100..
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemption
     */
    readonly redemptionPercentage: number;

    /**
     * sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @type {string}
     * @memberof TradeApiIndexLinkedPlanRedemption
     */
    readonly requestId?: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemption
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for indexLinkedPlanRedemptionTrade operation in TradeApi.
 * @interface IndexLinkedPlanRedemptionTradeRequest
 */
export interface IndexLinkedPlanRedemptionTradeRequest {
    /**
     * request id
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly requestId: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly endTime?: number;

    /**
     * Current query page. Default: 1, start from 1
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly current?: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly asset?: string;

    /**
     * Default: 8, Max:100
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly size?: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiIndexLinkedPlanRedemptionTrade
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for investmentPlanAdjustment operation in TradeApi.
 * @interface InvestmentPlanAdjustmentRequest
 */
export interface InvestmentPlanAdjustmentRequest {
    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly planId: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly subscriptionAmount: number;

    /**
     * "H1", "H4", "H8","H12", "WEEKLY","DAILY","MONTHLY","BI_WEEKLY"
     * @type {string}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly subscriptionCycle: string;

    /**
     * “0,1,2,3,4,5,6,7,8,..23”;Must be sent in form of UTC+0
     * @type {number}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly subscriptionStartTime: number;

    /**
     * e.g “USDT”
     * @type {string}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly sourceAsset: string;

    /**
     * sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
     * @type {Array<InvestmentPlanAdjustmentDetailsParameterInner>}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly details: Array<InvestmentPlanAdjustmentDetailsParameterInner>;

    /**
     * true/false；true: using flexible wallet
     * @type {boolean}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly flexibleAllowedToUse?: boolean;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiInvestmentPlanAdjustment
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for investmentPlanCreation operation in TradeApi.
 * @interface InvestmentPlanCreationRequest
 */
export interface InvestmentPlanCreationRequest {
    /**
     * "MAIN_SITE" for Binance,“TR” for Binance Turkey
     * @type {string}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly sourceType: string;

    /**
     * “SINGLE”,”PORTFOLIO”,”INDEX”
     * @type {string}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly planType: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly subscriptionAmount: number;

    /**
     * "H1", "H4", "H8","H12", "WEEKLY","DAILY","MONTHLY","BI_WEEKLY"
     * @type {string}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly subscriptionCycle: string;

    /**
     * “0,1,2,3,4,5,6,7,8,..23”;Must be sent in form of UTC+0
     * @type {number}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly subscriptionStartTime: number;

    /**
     * e.g “USDT”
     * @type {string}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly sourceAsset: string;

    /**
     * sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
     * @type {Array<InvestmentPlanAdjustmentDetailsParameterInner>}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly details: Array<InvestmentPlanAdjustmentDetailsParameterInner>;

    /**
     * sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @type {string}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly requestId?: string;

    /**
     * now only can set = 1
     * @type {number}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly indexId?: number;

    /**
     * true/false；true: using flexible wallet
     * @type {boolean}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly flexibleAllowedToUse?: boolean;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiInvestmentPlanCreation
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for oneTimeTransaction operation in TradeApi.
 * @interface OneTimeTransactionRequest
 */
export interface OneTimeTransactionRequest {
    /**
     * "MAIN_SITE" for Binance,“TR” for Binance Turkey
     * @type {string}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly sourceType: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly subscriptionAmount: number;

    /**
     * e.g “USDT”
     * @type {string}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly sourceAsset: string;

    /**
     * sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:
     * @type {Array<InvestmentPlanAdjustmentDetailsParameterInner>}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly details: Array<InvestmentPlanAdjustmentDetailsParameterInner>;

    /**
     * sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @type {string}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly requestId?: string;

    /**
     * true/false；true: using flexible wallet
     * @type {boolean}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly flexibleAllowedToUse?: boolean;

    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly planId?: number;

    /**
     * now only can set = 1
     * @type {number}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly indexId?: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiOneTimeTransaction
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryHoldingDetailsOfThePlan operation in TradeApi.
 * @interface QueryHoldingDetailsOfThePlanRequest
 */
export interface QueryHoldingDetailsOfThePlanRequest {
    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiQueryHoldingDetailsOfThePlan
     */
    readonly planId?: number;

    /**
     * sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @type {string}
     * @memberof TradeApiQueryHoldingDetailsOfThePlan
     */
    readonly requestId?: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiQueryHoldingDetailsOfThePlan
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryIndexLinkedPlanPositionDetails operation in TradeApi.
 * @interface QueryIndexLinkedPlanPositionDetailsRequest
 */
export interface QueryIndexLinkedPlanPositionDetailsRequest {
    /**
     *
     * @type {number}
     * @memberof TradeApiQueryIndexLinkedPlanPositionDetails
     */
    readonly indexId: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiQueryIndexLinkedPlanPositionDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryOneTimeTransactionStatus operation in TradeApi.
 * @interface QueryOneTimeTransactionStatusRequest
 */
export interface QueryOneTimeTransactionStatusRequest {
    /**
     * PORTFOLIO plan's Id
     * @type {number}
     * @memberof TradeApiQueryOneTimeTransactionStatus
     */
    readonly transactionId: number;

    /**
     * sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @type {string}
     * @memberof TradeApiQueryOneTimeTransactionStatus
     */
    readonly requestId?: string;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiQueryOneTimeTransactionStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for querySubscriptionTransactionHistory operation in TradeApi.
 * @interface QuerySubscriptionTransactionHistoryRequest
 */
export interface QuerySubscriptionTransactionHistoryRequest {
    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly planId?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly endTime?: number;

    /**
     * Plan identifier
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly targetAsset?: number;

    /**
     * SINGLE, PORTFOLIO, INDEX, ALL
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly planType?: number;

    /**
     * Default: 8, Max:100
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly size?: number;

    /**
     * Current query page. Default: 1, start from 1
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly current?: number;

    /**
     * no more than ```60000```
     * @type {number}
     * @memberof TradeApiQuerySubscriptionTransactionHistory
     */
    readonly recvWindow?: number;
}

/**
 * TradeApi - object-oriented interface
 * @class TradeApi
 */
export class TradeApi implements TradeApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration);
    }

    /**
     * Change Plan Status
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Change Plan Status(TRADE)
     * @param {ChangePlanStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ChangePlanStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Change-Plan-Status Binance API Documentation}
     */
    public async changePlanStatus(
        requestParameters: ChangePlanStatusRequest
    ): Promise<RestApiResponse<ChangePlanStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.changePlanStatus(
            requestParameters?.planId,
            requestParameters?.status,
            requestParameters?.recvWindow
        );
        return sendRequest<ChangePlanStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Rebalance Details(USER_DATA)
     * @param {IndexLinkedPlanRebalanceDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRebalanceDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Rebalance-Details Binance API Documentation}
     */
    public async indexLinkedPlanRebalanceDetails(
        requestParameters: IndexLinkedPlanRebalanceDetailsRequest = {}
    ): Promise<RestApiResponse<IndexLinkedPlanRebalanceDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.indexLinkedPlanRebalanceDetails(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<IndexLinkedPlanRebalanceDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * To redeem index-Linked plan holdings
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(TRADE)
     * @param {IndexLinkedPlanRedemptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRedemptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Redemption Binance API Documentation}
     */
    public async indexLinkedPlanRedemption(
        requestParameters: IndexLinkedPlanRedemptionRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.indexLinkedPlanRedemption(
            requestParameters?.indexId,
            requestParameters?.redemptionPercentage,
            requestParameters?.requestId,
            requestParameters?.recvWindow
        );
        return sendRequest<IndexLinkedPlanRedemptionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get the history of Index Linked Plan Redemption transactions
     *
     * Max 30 day difference between `startTime` and `endTime`
     * If no `startTime` and `endTime`, default to show past 30 day records
     *
     * Weight: 1
     *
     * @summary Index Linked Plan Redemption(USER_DATA)
     * @param {IndexLinkedPlanRedemptionTradeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<IndexLinkedPlanRedemptionTradeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Redemption Binance API Documentation}
     */
    public async indexLinkedPlanRedemptionTrade(
        requestParameters: IndexLinkedPlanRedemptionTradeRequest
    ): Promise<RestApiResponse<IndexLinkedPlanRedemptionTradeResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.indexLinkedPlanRedemptionTrade(
                requestParameters?.requestId,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.asset,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<IndexLinkedPlanRedemptionTradeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Source Asset to be used for investment
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan adjustment(TRADE)
     * @param {InvestmentPlanAdjustmentRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<InvestmentPlanAdjustmentResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Investment-plan-adjustment Binance API Documentation}
     */
    public async investmentPlanAdjustment(
        requestParameters: InvestmentPlanAdjustmentRequest
    ): Promise<RestApiResponse<InvestmentPlanAdjustmentResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.investmentPlanAdjustment(
            requestParameters?.planId,
            requestParameters?.subscriptionAmount,
            requestParameters?.subscriptionCycle,
            requestParameters?.subscriptionStartTime,
            requestParameters?.sourceAsset,
            requestParameters?.details,
            requestParameters?.flexibleAllowedToUse,
            requestParameters?.recvWindow
        );
        return sendRequest<InvestmentPlanAdjustmentResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Post an investment plan creation
     *
     * max one request every 3s per account
     *
     * Weight: 1
     *
     * @summary Investment plan creation(USER_DATA)
     * @param {InvestmentPlanCreationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<InvestmentPlanCreationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Investment-plan-creation Binance API Documentation}
     */
    public async investmentPlanCreation(
        requestParameters: InvestmentPlanCreationRequest
    ): Promise<RestApiResponse<InvestmentPlanCreationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.investmentPlanCreation(
            requestParameters?.sourceType,
            requestParameters?.planType,
            requestParameters?.subscriptionAmount,
            requestParameters?.subscriptionCycle,
            requestParameters?.subscriptionStartTime,
            requestParameters?.sourceAsset,
            requestParameters?.details,
            requestParameters?.requestId,
            requestParameters?.indexId,
            requestParameters?.flexibleAllowedToUse,
            requestParameters?.recvWindow
        );
        return sendRequest<InvestmentPlanCreationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * One time transaction
     *
     * `planId`/`planId`/`details` must not all be null
     *
     * Weight: 1
     *
     * @summary One Time Transaction(TRADE)
     * @param {OneTimeTransactionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OneTimeTransactionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/One-Time-Transaction Binance API Documentation}
     */
    public async oneTimeTransaction(
        requestParameters: OneTimeTransactionRequest
    ): Promise<RestApiResponse<OneTimeTransactionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.oneTimeTransaction(
            requestParameters?.sourceType,
            requestParameters?.subscriptionAmount,
            requestParameters?.sourceAsset,
            requestParameters?.details,
            requestParameters?.requestId,
            requestParameters?.flexibleAllowedToUse,
            requestParameters?.planId,
            requestParameters?.indexId,
            requestParameters?.recvWindow
        );
        return sendRequest<OneTimeTransactionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query holding details of the plan
     *
     * Weight: 1
     *
     * @summary Query holding details of the plan(USER_DATA)
     * @param {QueryHoldingDetailsOfThePlanRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryHoldingDetailsOfThePlanResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-holding-details-of-the-plan Binance API Documentation}
     */
    public async queryHoldingDetailsOfThePlan(
        requestParameters: QueryHoldingDetailsOfThePlanRequest = {}
    ): Promise<RestApiResponse<QueryHoldingDetailsOfThePlanResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryHoldingDetailsOfThePlan(
            requestParameters?.planId,
            requestParameters?.requestId,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryHoldingDetailsOfThePlanResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Details on users Index-Linked plan position details
     *
     * Weight: 1
     *
     * @summary Query Index Linked Plan Position Details(USER_DATA)
     * @param {QueryIndexLinkedPlanPositionDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Position-Details Binance API Documentation}
     */
    public async queryIndexLinkedPlanPositionDetails(
        requestParameters: QueryIndexLinkedPlanPositionDetailsRequest
    ): Promise<RestApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryIndexLinkedPlanPositionDetails(
                requestParameters?.indexId,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryIndexLinkedPlanPositionDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Transaction status for one-time transaction
     *
     * Weight: 1
     *
     * @summary Query One-Time Transaction Status(USER_DATA)
     * @param {QueryOneTimeTransactionStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryOneTimeTransactionStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-One-Time-Transaction-Status Binance API Documentation}
     */
    public async queryOneTimeTransactionStatus(
        requestParameters: QueryOneTimeTransactionStatusRequest
    ): Promise<RestApiResponse<QueryOneTimeTransactionStatusResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryOneTimeTransactionStatus(
                requestParameters?.transactionId,
                requestParameters?.requestId,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryOneTimeTransactionStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query subscription transaction history of a plan
     *
     *
     * Max span between startTime and endTime is 30days
     * If both startTime and endTime are null，then default is 30days
     *
     * Weight: 1
     *
     * @summary Query subscription transaction history(USER_DATA)
     * @param {QuerySubscriptionTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySubscriptionTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/auto_invest/trade/Query-subscription-transaction-history Binance API Documentation}
     */
    public async querySubscriptionTransactionHistory(
        requestParameters: QuerySubscriptionTransactionHistoryRequest = {}
    ): Promise<RestApiResponse<QuerySubscriptionTransactionHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.querySubscriptionTransactionHistory(
                requestParameters?.planId,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.targetAsset,
                requestParameters?.planType,
                requestParameters?.size,
                requestParameters?.current,
                requestParameters?.recvWindow
            );
        return sendRequest<QuerySubscriptionTransactionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
