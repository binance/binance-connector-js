/**
 * Binance Public Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Public Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { BorrowRepayApi } from './modules/borrow-repay-api';
import { MarketDataApi } from './modules/market-data-api';
import { RiskDataStreamApi } from './modules/risk-data-stream-api';
import { TradeApi } from './modules/trade-api';
import { TradeDataStreamApi } from './modules/trade-data-stream-api';
import { TransferApi } from './modules/transfer-api';

import type {
    AdjustCrossMarginMaxLeverageRequest,
    DisableIsolatedMarginAccountRequest,
    EnableIsolatedMarginAccountRequest,
    GetBnbBurnStatusRequest,
    GetSummaryOfMarginAccountRequest,
    QueryCrossIsolatedMarginCapitalFlowRequest,
    QueryCrossMarginAccountDetailsRequest,
    QueryCrossMarginFeeDataRequest,
    QueryEnabledIsolatedMarginAccountLimitRequest,
    QueryIsolatedMarginAccountInfoRequest,
    QueryIsolatedMarginFeeDataRequest,
} from './modules/account-api';
import type {
    GetFutureHourlyInterestRateRequest,
    GetInterestHistoryRequest,
    MarginAccountBorrowRepayRequest,
    QueryBorrowRepayRecordsInMarginAccountRequest,
    QueryMarginInterestRateHistoryRequest,
    QueryMaxBorrowRequest,
} from './modules/borrow-repay-api';
import type {
    GetAllCrossMarginPairsRequest,
    GetAllIsolatedMarginSymbolRequest,
    GetAllMarginAssetsRequest,
    GetDelistScheduleRequest,
    QueryIsolatedMarginTierDataRequest,
    QueryMarginAvailableInventoryRequest,
    QueryMarginPriceindexRequest,
} from './modules/market-data-api';
import type { KeepaliveUserDataStreamRequest } from './modules/risk-data-stream-api';
import type {
    CreateSpecialKeyRequest,
    DeleteSpecialKeyRequest,
    EditIpForSpecialKeyRequest,
    GetForceLiquidationRecordRequest,
    GetSmallLiabilityExchangeCoinListRequest,
    GetSmallLiabilityExchangeHistoryRequest,
    MarginAccountCancelAllOpenOrdersOnASymbolRequest,
    MarginAccountCancelOcoRequest,
    MarginAccountCancelOrderRequest,
    MarginAccountNewOcoRequest,
    MarginAccountNewOrderRequest,
    MarginAccountNewOtoRequest,
    MarginAccountNewOtocoRequest,
    MarginManualLiquidationRequest,
    QueryCurrentMarginOrderCountUsageRequest,
    QueryMarginAccountsAllOcoRequest,
    QueryMarginAccountsAllOrdersRequest,
    QueryMarginAccountsOcoRequest,
    QueryMarginAccountsOpenOcoRequest,
    QueryMarginAccountsOpenOrdersRequest,
    QueryMarginAccountsOrderRequest,
    QueryMarginAccountsTradeListRequest,
    QuerySpecialKeyRequest,
    QuerySpecialKeyListRequest,
    SmallLiabilityExchangeRequest,
} from './modules/trade-api';
import type {
    CloseIsolatedMarginUserDataStreamRequest,
    CloseMarginUserDataStreamRequest,
    KeepaliveIsolatedMarginUserDataStreamRequest,
    KeepaliveMarginUserDataStreamRequest,
    StartIsolatedMarginUserDataStreamRequest,
} from './modules/trade-data-stream-api';
import type {
    GetCrossMarginTransferHistoryRequest,
    QueryMaxTransferOutAmountRequest,
} from './modules/transfer-api';

import type {
    AdjustCrossMarginMaxLeverageResponse,
    DisableIsolatedMarginAccountResponse,
    EnableIsolatedMarginAccountResponse,
    GetBnbBurnStatusResponse,
    GetSummaryOfMarginAccountResponse,
    QueryCrossIsolatedMarginCapitalFlowResponse,
    QueryCrossMarginAccountDetailsResponse,
    QueryCrossMarginFeeDataResponse,
    QueryEnabledIsolatedMarginAccountLimitResponse,
    QueryIsolatedMarginAccountInfoResponse,
    QueryIsolatedMarginFeeDataResponse,
} from './types';
import type {
    GetFutureHourlyInterestRateResponse,
    GetInterestHistoryResponse,
    MarginAccountBorrowRepayResponse,
    QueryBorrowRepayRecordsInMarginAccountResponse,
    QueryMarginInterestRateHistoryResponse,
    QueryMaxBorrowResponse,
} from './types';
import type {
    CrossMarginCollateralRatioResponse,
    GetAllCrossMarginPairsResponse,
    GetAllIsolatedMarginSymbolResponse,
    GetAllMarginAssetsResponse,
    GetDelistScheduleResponse,
    QueryIsolatedMarginTierDataResponse,
    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse,
    QueryMarginAvailableInventoryResponse,
    QueryMarginPriceindexResponse,
} from './types';
import type { StartUserDataStreamResponse } from './types';
import type {
    CreateSpecialKeyResponse,
    GetForceLiquidationRecordResponse,
    GetSmallLiabilityExchangeCoinListResponse,
    GetSmallLiabilityExchangeHistoryResponse,
    MarginAccountCancelAllOpenOrdersOnASymbolResponse,
    MarginAccountCancelOcoResponse,
    MarginAccountCancelOrderResponse,
    MarginAccountNewOcoResponse,
    MarginAccountNewOrderResponse,
    MarginAccountNewOtoResponse,
    MarginAccountNewOtocoResponse,
    MarginManualLiquidationResponse,
    QueryCurrentMarginOrderCountUsageResponse,
    QueryMarginAccountsAllOcoResponse,
    QueryMarginAccountsAllOrdersResponse,
    QueryMarginAccountsOcoResponse,
    QueryMarginAccountsOpenOcoResponse,
    QueryMarginAccountsOpenOrdersResponse,
    QueryMarginAccountsOrderResponse,
    QueryMarginAccountsTradeListResponse,
    QuerySpecialKeyResponse,
    QuerySpecialKeyListResponse,
} from './types';
import type {
    StartIsolatedMarginUserDataStreamResponse,
    StartMarginUserDataStreamResponse,
} from './types';
import type {
    GetCrossMarginTransferHistoryResponse,
    QueryMaxTransferOutAmountResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private borrowRepayApi: BorrowRepayApi;
    private marketDataApi: MarketDataApi;
    private riskDataStreamApi: RiskDataStreamApi;
    private tradeApi: TradeApi;
    private tradeDataStreamApi: TradeDataStreamApi;
    private transferApi: TransferApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.borrowRepayApi = new BorrowRepayApi(configuration);
        this.marketDataApi = new MarketDataApi(configuration);
        this.riskDataStreamApi = new RiskDataStreamApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.tradeDataStreamApi = new TradeDataStreamApi(configuration);
        this.transferApi = new TransferApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Adjust cross margin max leverage
     *
     * The margin level need higher than the initial risk ratio of adjusted leverage, the initial risk ratio of 3x is 1.5 , the initial risk ratio of 5x is 1.25;  The detail conditions on how to switch between Cross Margin Classic and Cross Margin Pro can refer to [the FAQ](https://www.binance.com/en/support/faq/how-to-activate-the-cross-margin-pro-mode-on-binance-e27786da05e743a694b8c625b3bc475d).
     *
     * Weight: 3000
     *
     * @summary Adjust cross margin max leverage (USER_DATA)
     * @param {AdjustCrossMarginMaxLeverageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AdjustCrossMarginMaxLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Adjust-cross-margin-max-leverage Binance API Documentation}
     */
    adjustCrossMarginMaxLeverage(
        requestParameters: AdjustCrossMarginMaxLeverageRequest
    ): Promise<RestApiResponse<AdjustCrossMarginMaxLeverageResponse>> {
        return this.accountApi.adjustCrossMarginMaxLeverage(requestParameters);
    }

    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24
     * hours.
     *
     * Weight: 300(UID)
     *
     * @summary Disable Isolated Margin Account (TRADE)
     * @param {DisableIsolatedMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DisableIsolatedMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Disable-Isolated-Margin-Account Binance API Documentation}
     */
    disableIsolatedMarginAccount(
        requestParameters: DisableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<DisableIsolatedMarginAccountResponse>> {
        return this.accountApi.disableIsolatedMarginAccount(requestParameters);
    }

    /**
     * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
     *
     * Weight: 300(UID)
     *
     * @summary Enable Isolated Margin Account (TRADE)
     * @param {EnableIsolatedMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableIsolatedMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Enable-Isolated-Margin-Account Binance API Documentation}
     */
    enableIsolatedMarginAccount(
        requestParameters: EnableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<EnableIsolatedMarginAccountResponse>> {
        return this.accountApi.enableIsolatedMarginAccount(requestParameters);
    }

    /**
     * Get BNB Burn Status
     *
     * Weight: 1(IP)
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnbBurnStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Get-BNB-Burn-Status Binance API Documentation}
     */
    getBnbBurnStatus(
        requestParameters: GetBnbBurnStatusRequest = {}
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>> {
        return this.accountApi.getBnbBurnStatus(requestParameters);
    }

    /**
     * Get personal margin level information
     *
     * Weight: 10(IP)
     *
     * @summary Get Summary of Margin account (USER_DATA)
     * @param {GetSummaryOfMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSummaryOfMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Get-Summary-of-Margin-account Binance API Documentation}
     */
    getSummaryOfMarginAccount(
        requestParameters: GetSummaryOfMarginAccountRequest = {}
    ): Promise<RestApiResponse<GetSummaryOfMarginAccountResponse>> {
        return this.accountApi.getSummaryOfMarginAccount(requestParameters);
    }

    /**
     * Query Cross Isolated Margin Capital Flow
     *
     * Weight: 100(IP)
     *
     * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
     * @param {QueryCrossIsolatedMarginCapitalFlowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossIsolatedMarginCapitalFlowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Isolated-Margin-Capital-Flow Binance API Documentation}
     */
    queryCrossIsolatedMarginCapitalFlow(
        requestParameters: QueryCrossIsolatedMarginCapitalFlowRequest = {}
    ): Promise<RestApiResponse<QueryCrossIsolatedMarginCapitalFlowResponse>> {
        return this.accountApi.queryCrossIsolatedMarginCapitalFlow(requestParameters);
    }

    /**
     * Query Cross Margin Account Details
     *
     * Weight: 10(IP)
     *
     * @summary Query Cross Margin Account Details (USER_DATA)
     * @param {QueryCrossMarginAccountDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossMarginAccountDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Margin-Account-Details Binance API Documentation}
     */
    queryCrossMarginAccountDetails(
        requestParameters: QueryCrossMarginAccountDetailsRequest = {}
    ): Promise<RestApiResponse<QueryCrossMarginAccountDetailsResponse>> {
        return this.accountApi.queryCrossMarginAccountDetails(requestParameters);
    }

    /**
     * Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when coin is specified;(IP)
     *
     * @summary Query Cross Margin Fee Data (USER_DATA)
     * @param {QueryCrossMarginFeeDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossMarginFeeDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Margin-Fee-Data Binance API Documentation}
     */
    queryCrossMarginFeeData(
        requestParameters: QueryCrossMarginFeeDataRequest = {}
    ): Promise<RestApiResponse<QueryCrossMarginFeeDataResponse>> {
        return this.accountApi.queryCrossMarginFeeData(requestParameters);
    }

    /**
     * Query enabled isolated margin account limit.
     *
     * Weight: 1(IP)
     *
     * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
     * @param {QueryEnabledIsolatedMarginAccountLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryEnabledIsolatedMarginAccountLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Enabled-Isolated-Margin-Account-Limit Binance API Documentation}
     */
    queryEnabledIsolatedMarginAccountLimit(
        requestParameters: QueryEnabledIsolatedMarginAccountLimitRequest = {}
    ): Promise<RestApiResponse<QueryEnabledIsolatedMarginAccountLimitResponse>> {
        return this.accountApi.queryEnabledIsolatedMarginAccountLimit(requestParameters);
    }

    /**
     * Query Isolated Margin Account Info
     *
     * If "symbols" is not sent, all isolated assets will be returned.
     * If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
     *
     * Weight: 10(IP)
     *
     * @summary Query Isolated Margin Account Info (USER_DATA)
     * @param {QueryIsolatedMarginAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Account-Info Binance API Documentation}
     */
    queryIsolatedMarginAccountInfo(
        requestParameters: QueryIsolatedMarginAccountInfoRequest = {}
    ): Promise<RestApiResponse<QueryIsolatedMarginAccountInfoResponse>> {
        return this.accountApi.queryIsolatedMarginAccountInfo(requestParameters);
    }

    /**
     * Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when a single is specified;(IP)
     *
     * @summary Query Isolated Margin Fee Data (USER_DATA)
     * @param {QueryIsolatedMarginFeeDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginFeeDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Fee-Data Binance API Documentation}
     */
    queryIsolatedMarginFeeData(
        requestParameters: QueryIsolatedMarginFeeDataRequest = {}
    ): Promise<RestApiResponse<QueryIsolatedMarginFeeDataResponse>> {
        return this.accountApi.queryIsolatedMarginFeeData(requestParameters);
    }

    /**
     * Get future hourly interest rate
     *
     * Weight: 100
     *
     * @summary Get future hourly interest rate (USER_DATA)
     * @param {GetFutureHourlyInterestRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFutureHourlyInterestRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-a-future-hourly-interest-rate Binance API Documentation}
     */
    getFutureHourlyInterestRate(
        requestParameters: GetFutureHourlyInterestRateRequest
    ): Promise<RestApiResponse<GetFutureHourlyInterestRateResponse>> {
        return this.borrowRepayApi.getFutureHourlyInterestRate(requestParameters);
    }

    /**
     * Get Interest History
     *
     * Response in descending order
     * If isolatedSymbol is not sent, crossed margin data will be returned
     * The max interval between `startTime` and `endTime` is 30 days.  It is a MUST to ensure data correctness.
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default.
     * If `startTime` is sent and `endTime` is not sent, return records of [max(`startTime`, now-30d), now].
     * If `startTime` is not sent and `endTime` is sent, return records of [`endTime`-7, `endTime`]
     * `type` in response has 4 enums:
     * `PERIODIC` interest charged per hour
     * `ON_BORROW` first interest charged on borrow
     * `PERIODIC_CONVERTED` interest charged per hour converted into BNB
     * `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
     * `PORTFOLIO` interest charged daily on the portfolio margin negative balance
     *
     * Weight: 1(IP)
     *
     * @summary Get Interest History (USER_DATA)
     * @param {GetInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-Interest-History Binance API Documentation}
     */
    getInterestHistory(
        requestParameters: GetInterestHistoryRequest = {}
    ): Promise<RestApiResponse<GetInterestHistoryResponse>> {
        return this.borrowRepayApi.getInterestHistory(requestParameters);
    }

    /**
     * Margin account borrow/repay(MARGIN)
     *
     * Weight: 1500
     *
     * @summary Margin account borrow/repay(MARGIN)
     * @param {MarginAccountBorrowRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountBorrowRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-account-borrow-repay Binance API Documentation}
     */
    marginAccountBorrowRepay(
        requestParameters: MarginAccountBorrowRepayRequest
    ): Promise<RestApiResponse<MarginAccountBorrowRepayResponse>> {
        return this.borrowRepayApi.marginAccountBorrowRepay(requestParameters);
    }

    /**
     * Query borrow/repay records in Margin account
     *
     * `txId` or `startTime` must be sent. `txId` takes precedence.
     * If an asset is sent, data within 30 days before `endTime`; If an asset is not sent, data within 7 days before `endTime`
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * `startTime` set as `endTime` - 7days by default, `endTime` set as current time by default
     *
     * Weight: 10(IP)
     *
     * @summary Query borrow/repay records in Margin account(USER_DATA)
     * @param {QueryBorrowRepayRecordsInMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Borrow-Repay Binance API Documentation}
     */
    queryBorrowRepayRecordsInMarginAccount(
        requestParameters: QueryBorrowRepayRecordsInMarginAccountRequest
    ): Promise<RestApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>> {
        return this.borrowRepayApi.queryBorrowRepayRecordsInMarginAccount(requestParameters);
    }

    /**
     * Query Margin Interest Rate History
     *
     * Weight: 1(IP)
     *
     * @summary Query Margin Interest Rate History (USER_DATA)
     * @param {QueryMarginInterestRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginInterestRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History Binance API Documentation}
     */
    queryMarginInterestRateHistory(
        requestParameters: QueryMarginInterestRateHistoryRequest
    ): Promise<RestApiResponse<QueryMarginInterestRateHistoryResponse>> {
        return this.borrowRepayApi.queryMarginInterestRateHistory(requestParameters);
    }

    /**
     * Query Max Borrow
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     * `borrowLimit` is also available from [https://www.binance.com/en/margin-fee](https://www.binance.com/en/margin-fee)
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Borrow (USER_DATA)
     * @param {QueryMaxBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMaxBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Max-Borrow Binance API Documentation}
     */
    queryMaxBorrow(
        requestParameters: QueryMaxBorrowRequest
    ): Promise<RestApiResponse<QueryMaxBorrowResponse>> {
        return this.borrowRepayApi.queryMaxBorrow(requestParameters);
    }

    /**
     * Cross margin collateral ratio
     *
     * Weight: 100(IP)
     *
     * @summary Cross margin collateral ratio (MARKET_DATA)
     * @returns {Promise<RestApiResponse<CrossMarginCollateralRatioResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Cross-margin-collateral-ratio Binance API Documentation}
     */
    crossMarginCollateralRatio(): Promise<RestApiResponse<CrossMarginCollateralRatioResponse>> {
        return this.marketDataApi.crossMarginCollateralRatio();
    }

    /**
     * Get All Cross Margin Pairs
     *
     * Weight: 1(IP)
     *
     * @summary Get All Cross Margin Pairs (MARKET_DATA)
     * @param {GetAllCrossMarginPairsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllCrossMarginPairsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Cross-Margin-Pairs Binance API Documentation}
     */
    getAllCrossMarginPairs(
        requestParameters: GetAllCrossMarginPairsRequest = {}
    ): Promise<RestApiResponse<GetAllCrossMarginPairsResponse>> {
        return this.marketDataApi.getAllCrossMarginPairs(requestParameters);
    }

    /**
     * Get All Isolated Margin Symbol
     *
     * Weight: 10(IP)
     *
     * @summary Get All Isolated Margin Symbol(MARKET_DATA)
     * @param {GetAllIsolatedMarginSymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllIsolatedMarginSymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Isolated-Margin-Symbol Binance API Documentation}
     */
    getAllIsolatedMarginSymbol(
        requestParameters: GetAllIsolatedMarginSymbolRequest = {}
    ): Promise<RestApiResponse<GetAllIsolatedMarginSymbolResponse>> {
        return this.marketDataApi.getAllIsolatedMarginSymbol(requestParameters);
    }

    /**
     * Get All Margin Assets.
     *
     * Weight: 1(IP)
     *
     * @summary Get All Margin Assets (MARKET_DATA)
     * @param {GetAllMarginAssetsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllMarginAssetsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Margin-Assets Binance API Documentation}
     */
    getAllMarginAssets(
        requestParameters: GetAllMarginAssetsRequest = {}
    ): Promise<RestApiResponse<GetAllMarginAssetsResponse>> {
        return this.marketDataApi.getAllMarginAssets(requestParameters);
    }

    /**
     * Get tokens or symbols delist schedule for cross margin and isolated margin
     *
     * Weight: 100
     *
     * @summary Get Delist Schedule (MARKET_DATA)
     * @param {GetDelistScheduleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDelistScheduleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-Delist-Schedule Binance API Documentation}
     */
    getDelistSchedule(
        requestParameters: GetDelistScheduleRequest = {}
    ): Promise<RestApiResponse<GetDelistScheduleResponse>> {
        return this.marketDataApi.getDelistSchedule(requestParameters);
    }

    /**
     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
     *
     * Weight: 1(IP)
     *
     * @summary Query Isolated Margin Tier Data (USER_DATA)
     * @param {QueryIsolatedMarginTierDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginTierDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Isolated-Margin-Tier-Data Binance API Documentation}
     */
    queryIsolatedMarginTierData(
        requestParameters: QueryIsolatedMarginTierDataRequest
    ): Promise<RestApiResponse<QueryIsolatedMarginTierDataResponse>> {
        return this.marketDataApi.queryIsolatedMarginTierData(requestParameters);
    }

    /**
     * Liability Coin Leverage Bracket in Cross Margin Pro Mode
     *
     * Weight: 1
     *
     * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
     * @returns {Promise<RestApiResponse<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Liability-Coin-Leverage-Bracket-in-Cross-Margin-Pro-Mode Binance API Documentation}
     */
    queryLiabilityCoinLeverageBracketInCrossMarginProMode(): Promise<
        RestApiResponse<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>
        > {
        return this.marketDataApi.queryLiabilityCoinLeverageBracketInCrossMarginProMode();
    }

    /**
     * Margin available Inventory query
     *
     * Weight: 50
     *
     * @summary Query Margin Available Inventory(USER_DATA)
     * @param {QueryMarginAvailableInventoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAvailableInventoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-margin-avaliable-inventory Binance API Documentation}
     */
    queryMarginAvailableInventory(
        requestParameters: QueryMarginAvailableInventoryRequest
    ): Promise<RestApiResponse<QueryMarginAvailableInventoryResponse>> {
        return this.marketDataApi.queryMarginAvailableInventory(requestParameters);
    }

    /**
     * Query Margin PriceIndex
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin PriceIndex (MARKET_DATA)
     * @param {QueryMarginPriceindexRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginPriceindexResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Margin-PriceIndex Binance API Documentation}
     */
    queryMarginPriceindex(
        requestParameters: QueryMarginPriceindexRequest
    ): Promise<RestApiResponse<QueryMarginPriceindexResponse>> {
        return this.marketDataApi.queryMarginPriceindex(requestParameters);
    }

    /**
     * Close out a user data stream.
     *
     * Weight: 3000
     *
     * @summary Close User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/risk-data-stream/Close-User-Data-Stream Binance API Documentation}
     */
    closeUserDataStream(): Promise<RestApiResponse<void>> {
        return this.riskDataStreamApi.closeUserDataStream();
    }

    /**
     * Keepalive a user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive User Data Stream (USER_STREAM)
     * @param {KeepaliveUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/risk-data-stream/Keepalive-User-Data-Stream Binance API Documentation}
     */
    keepaliveUserDataStream(
        requestParameters: KeepaliveUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.riskDataStreamApi.keepaliveUserDataStream(requestParameters);
    }

    /**
     * Start a new user data stream.
     *
     * Weight: 1
     *
     * @summary Start User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<StartUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/risk-data-stream/Start-User-Data-Stream Binance API Documentation}
     */
    startUserDataStream(): Promise<RestApiResponse<StartUserDataStreamResponse>> {
        return this.riskDataStreamApi.startUserDataStream();
    }

    /**
     * **Binance Margin offers low-latency trading through a [special key](https://www.binance.com/en/support/faq/frequently-asked-questions-on-margin-special-api-key-3208663e900d4d2e9fec4140e1832f4e), available exclusively to users with VIP level 4 or higher. **
     *
     **If you are VIP level 3 or below, please contact your VIP manager for eligibility criterias.**
     *
     * We support several types of API keys:
     *
     * Ed25519 (recommended)
     * HMAC
     * RSA
     *
     * We recommend to **use Ed25519 API keys** as it should provide the best performance and security out of all supported key types. We accept PKCS#8 (BEGIN PUBLIC KEY). For how to generate an RSA key pair to send API requests on Binance. Please refer to the document below [FAQ](https://www.binance.com/en/support/faq/how-to-generate-an-rsa-key-pair-to-send-api-requests-on-binance-2b79728f331e43079b27440d9d15c5db) .
     *
     * Read [REST API](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#signed-trade-and-user_data-endpoint-security) or [WebSocket API](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md#request-security) documentation to learn how to use different API keys
     *
     * You need to enable Permits “Enable Spot & Margin Trading” option for the API Key which requests this endpoint.
     *
     * Weight: 1(UID)
     *
     * @summary Create Special Key(Low-Latency Trading)(TRADE)
     * @param {CreateSpecialKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CreateSpecialKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Create-Special-Key-of-Low-Latency-Trading Binance API Documentation}
     */
    createSpecialKey(
        requestParameters: CreateSpecialKeyRequest
    ): Promise<RestApiResponse<CreateSpecialKeyResponse>> {
        return this.tradeApi.createSpecialKey(requestParameters);
    }

    /**
     * This only applies to Special Key for Low Latency Trading.
     *
     * If apiKey is given, apiName will be ignored. If apiName is given with no apiKey, all apikeys with given apiName will be deleted.
     *
     * You need to enable Permits “Enable Spot & Margin Trading” option for the API Key which requests this endpoint.
     *
     * Weight: 1(UID)
     *
     * @summary Delete Special Key(Low-Latency Trading)(TRADE)
     * @param {DeleteSpecialKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Delete-Special-Key-of-Low-Latency-Trading Binance API Documentation}
     */
    deleteSpecialKey(
        requestParameters: DeleteSpecialKeyRequest = {}
    ): Promise<RestApiResponse<void>> {
        return this.tradeApi.deleteSpecialKey(requestParameters);
    }

    /**
     * Edit ip restriction. This only applies to Special Key for Low Latency Trading.
     *
     * You need to enable Permits “Enable Spot & Margin Trading” option for the API Key which requests this endpoint.
     *
     * Weight: 1(UID)
     *
     * @summary Edit ip for Special Key(Low-Latency Trading)(TRADE)
     * @param {EditIpForSpecialKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Edit-ip-for-Special-Key-of-Low-Latency-Trading Binance API Documentation}
     */
    editIpForSpecialKey(
        requestParameters: EditIpForSpecialKeyRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeApi.editIpForSpecialKey(requestParameters);
    }

    /**
     * Get Force Liquidation Record
     *
     * Response in descending order
     *
     * Weight: 1(IP)
     *
     * @summary Get Force Liquidation Record (USER_DATA)
     * @param {GetForceLiquidationRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetForceLiquidationRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Get-Force-Liquidation-Record Binance API Documentation}
     */
    getForceLiquidationRecord(
        requestParameters: GetForceLiquidationRecordRequest = {}
    ): Promise<RestApiResponse<GetForceLiquidationRecordResponse>> {
        return this.tradeApi.getForceLiquidationRecord(requestParameters);
    }

    /**
     * Query the coins which can be small liability exchange
     *
     * Weight: 100
     *
     * @summary Get Small Liability Exchange Coin List (USER_DATA)
     * @param {GetSmallLiabilityExchangeCoinListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSmallLiabilityExchangeCoinListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Get-Small-Liability-Exchange-Coin-List Binance API Documentation}
     */
    getSmallLiabilityExchangeCoinList(
        requestParameters: GetSmallLiabilityExchangeCoinListRequest = {}
    ): Promise<RestApiResponse<GetSmallLiabilityExchangeCoinListResponse>> {
        return this.tradeApi.getSmallLiabilityExchangeCoinList(requestParameters);
    }

    /**
     * Get Small liability Exchange History
     *
     * Weight: 100(UID)
     *
     * @summary Get Small Liability Exchange History (USER_DATA)
     * @param {GetSmallLiabilityExchangeHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSmallLiabilityExchangeHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Get-Small-Liability-Exchange-History Binance API Documentation}
     */
    getSmallLiabilityExchangeHistory(
        requestParameters: GetSmallLiabilityExchangeHistoryRequest
    ): Promise<RestApiResponse<GetSmallLiabilityExchangeHistoryResponse>> {
        return this.tradeApi.getSmallLiabilityExchangeHistory(requestParameters);
    }

    /**
     * Cancels all active orders on a symbol for margin account.<br></br>
     * This includes OCO orders.
     *
     * Weight: 1
     *
     * @summary Margin Account Cancel all Open Orders on a Symbol (TRADE)
     * @param {MarginAccountCancelAllOpenOrdersOnASymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountCancelAllOpenOrdersOnASymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-Cancel-All-Open-Orders Binance API Documentation}
     */
    marginAccountCancelAllOpenOrdersOnASymbol(
        requestParameters: MarginAccountCancelAllOpenOrdersOnASymbolRequest
    ): Promise<RestApiResponse<MarginAccountCancelAllOpenOrdersOnASymbolResponse>> {
        return this.tradeApi.marginAccountCancelAllOpenOrdersOnASymbol(requestParameters);
    }

    /**
     * Cancel an entire Order List for a margin account.
     *
     * Canceling an individual leg will cancel the entire OCO
     *
     * Weight: 1(UID)
     *
     * @summary Margin Account Cancel OCO (TRADE)
     * @param {MarginAccountCancelOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountCancelOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-Cancel-OCO Binance API Documentation}
     */
    marginAccountCancelOco(
        requestParameters: MarginAccountCancelOcoRequest
    ): Promise<RestApiResponse<MarginAccountCancelOcoResponse>> {
        return this.tradeApi.marginAccountCancelOco(requestParameters);
    }

    /**
     * Cancel an active order for margin account.
     *
     * Either orderId or origClientOrderId must be sent.
     *
     * Weight: 10(IP)
     *
     * @summary Margin Account Cancel Order (TRADE)
     * @param {MarginAccountCancelOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountCancelOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-Cancel-Order Binance API Documentation}
     */
    marginAccountCancelOrder(
        requestParameters: MarginAccountCancelOrderRequest
    ): Promise<RestApiResponse<MarginAccountCancelOrderResponse>> {
        return this.tradeApi.marginAccountCancelOrder(requestParameters);
    }

    /**
     * Send in a new OCO for a margin account
     *
     * autoRepayAtCancel is suggested to set as “FALSE” to keep liability unrepaid under high frequent new order/cancel order execution
     *
     * Weight: 6(UID)
     *
     * @summary Margin Account New OCO (TRADE)
     * @param {MarginAccountNewOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountNewOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-OCO Binance API Documentation}
     */
    marginAccountNewOco(
        requestParameters: MarginAccountNewOcoRequest
    ): Promise<RestApiResponse<MarginAccountNewOcoResponse>> {
        return this.tradeApi.marginAccountNewOco(requestParameters);
    }

    /**
     * Post a new order for margin account.
     *
     * autoRepayAtCancel is suggested to set as “FALSE” to keep liability unrepaid under high frequent new order/cancel order execution
     *
     * Weight: 6(UID)
     *
     * @summary Margin Account New Order (TRADE)
     * @param {MarginAccountNewOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountNewOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-Order Binance API Documentation}
     */
    marginAccountNewOrder(
        requestParameters: MarginAccountNewOrderRequest
    ): Promise<RestApiResponse<MarginAccountNewOrderResponse>> {
        return this.tradeApi.marginAccountNewOrder(requestParameters);
    }

    /**
     * Post a new OTO order for margin account:
     *
     * - An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
     * - The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * - The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
     * - If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
     * - When the order list is placed, if the working order gets **immediately fully filled**, the placement response will show the working order as `FILLED` but the pending order will still appear as `PENDING_NEW`. You need to query the status of the pending order again to see its updated status.
     * - OTOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
     *
     * autoRepayAtCancel is suggested to set as “FALSE” to keep liability unrepaid under high frequent new order/cancel order execution
     * Depending on the `pendingType` or `workingType`, some optional parameters will become mandatory:
     *
     * Weight: 6(UID)
     *
     * @summary Margin Account New OTO (TRADE)
     * @param {MarginAccountNewOtoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountNewOtoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-OTO Binance API Documentation}
     */
    marginAccountNewOto(
        requestParameters: MarginAccountNewOtoRequest
    ): Promise<RestApiResponse<MarginAccountNewOtoResponse>> {
        return this.tradeApi.marginAccountNewOto(requestParameters);
    }

    /**
     * Post a new OTOCO order for margin account：
     *
     * - An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
     * - The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * - The behavior of the working order is the same as the OTO.
     * - OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
     * - The rules of the pending above and pending below follow the same rules as the [Order List OCO](https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-OCO).
     * - OTOCOs add **3 orders** against the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     *
     * autoRepayAtCancel is suggested to set as “FALSE” to keep liability unrepaid under high frequent new order/cancel order execution
     * Depending on the `pendingAboveType`/`pendingBelowType` or `workingType`, some optional parameters will become mandatory:
     *
     * Weight: 6(UID)
     *
     * @summary Margin Account New OTOCO (TRADE)
     * @param {MarginAccountNewOtocoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountNewOtocoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-OTOCO Binance API Documentation}
     */
    marginAccountNewOtoco(
        requestParameters: MarginAccountNewOtocoRequest
    ): Promise<RestApiResponse<MarginAccountNewOtocoResponse>> {
        return this.tradeApi.marginAccountNewOtoco(requestParameters);
    }

    /**
     * Margin Manual Liquidation
     *
     * This endpoint can support Cross Margin Classic Mode and Pro Mode.
     * And only support Isolated Margin for restricted region.
     *
     * Weight: 3000
     *
     * @summary Margin Manual Liquidation(MARGIN)
     * @param {MarginManualLiquidationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginManualLiquidationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Margin-Manual-Liquidation Binance API Documentation}
     */
    marginManualLiquidation(
        requestParameters: MarginManualLiquidationRequest
    ): Promise<RestApiResponse<MarginManualLiquidationResponse>> {
        return this.tradeApi.marginManualLiquidation(requestParameters);
    }

    /**
     * Displays the user's current margin order count usage for all intervals.
     *
     * Weight: 20(IP)
     *
     * @summary Query Current Margin Order Count Usage (TRADE)
     * @param {QueryCurrentMarginOrderCountUsageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentMarginOrderCountUsageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Current-Margin-Order-Count-Usage Binance API Documentation}
     */
    queryCurrentMarginOrderCountUsage(
        requestParameters: QueryCurrentMarginOrderCountUsageRequest = {}
    ): Promise<RestApiResponse<QueryCurrentMarginOrderCountUsageResponse>> {
        return this.tradeApi.queryCurrentMarginOrderCountUsage(requestParameters);
    }

    /**
     * Retrieves all OCO for a specific margin account based on provided optional parameters
     *
     * Weight: 200(IP)
     *
     * @summary Query Margin Account\'s all OCO (USER_DATA)
     * @param {QueryMarginAccountsAllOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsAllOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-all-OCO Binance API Documentation}
     */
    queryMarginAccountsAllOco(
        requestParameters: QueryMarginAccountsAllOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsAllOcoResponse>> {
        return this.tradeApi.queryMarginAccountsAllOco(requestParameters);
    }

    /**
     * Query Margin Account's All Orders
     *
     * If orderId is set, it will get orders >= that orderId. Otherwise the orders within 24 hours are returned.
     * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.
     * Less than 24 hours between startTime and endTime.
     *
     * Weight: 200(IP)
     *
     * @summary Query Margin Account\'s All Orders (USER_DATA)
     * @param {QueryMarginAccountsAllOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsAllOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-All-Orders Binance API Documentation}
     */
    queryMarginAccountsAllOrders(
        requestParameters: QueryMarginAccountsAllOrdersRequest
    ): Promise<RestApiResponse<QueryMarginAccountsAllOrdersResponse>> {
        return this.tradeApi.queryMarginAccountsAllOrders(requestParameters);
    }

    /**
     * Retrieves a specific OCO based on provided optional parameters
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin Account\'s OCO (USER_DATA)
     * @param {QueryMarginAccountsOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-OCO Binance API Documentation}
     */
    queryMarginAccountsOco(
        requestParameters: QueryMarginAccountsOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsOcoResponse>> {
        return this.tradeApi.queryMarginAccountsOco(requestParameters);
    }

    /**
     * Query Margin Account's Open OCO
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin Account\'s Open OCO (USER_DATA)
     * @param {QueryMarginAccountsOpenOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOpenOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Open-OCO Binance API Documentation}
     */
    queryMarginAccountsOpenOco(
        requestParameters: QueryMarginAccountsOpenOcoRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsOpenOcoResponse>> {
        return this.tradeApi.queryMarginAccountsOpenOco(requestParameters);
    }

    /**
     * Query Margin Account's Open Orders
     *
     * If the symbol is not sent, orders for all symbols will be returned in an array.
     * When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange.
     * If isIsolated ="TRUE", symbol must be sent.
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin Account\'s Open Orders (USER_DATA)
     * @param {QueryMarginAccountsOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Open-Orders Binance API Documentation}
     */
    queryMarginAccountsOpenOrders(
        requestParameters: QueryMarginAccountsOpenOrdersRequest = {}
    ): Promise<RestApiResponse<QueryMarginAccountsOpenOrdersResponse>> {
        return this.tradeApi.queryMarginAccountsOpenOrders(requestParameters);
    }

    /**
     * Query Margin Account's Order
     *
     * Either orderId or origClientOrderId must be sent.
     * For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin Account\'s Order (USER_DATA)
     * @param {QueryMarginAccountsOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Order Binance API Documentation}
     */
    queryMarginAccountsOrder(
        requestParameters: QueryMarginAccountsOrderRequest
    ): Promise<RestApiResponse<QueryMarginAccountsOrderResponse>> {
        return this.tradeApi.queryMarginAccountsOrder(requestParameters);
    }

    /**
     * Query Margin Account's Trade List
     *
     * If fromId is set, it will get trades >= that fromId. Otherwise the trades within 24 hours are returned.
     * Less than 24 hours between startTime and endTime.
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin Account\'s Trade List (USER_DATA)
     * @param {QueryMarginAccountsTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAccountsTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Trade-List Binance API Documentation}
     */
    queryMarginAccountsTradeList(
        requestParameters: QueryMarginAccountsTradeListRequest
    ): Promise<RestApiResponse<QueryMarginAccountsTradeListResponse>> {
        return this.tradeApi.queryMarginAccountsTradeList(requestParameters);
    }

    /**
     * Query Special Key Information.
     *
     * This only applies to Special Key for Low Latency Trading.
     *
     * Weight: 1(UID)
     *
     * @summary Query Special key(Low Latency Trading)(TRADE)
     * @param {QuerySpecialKeyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySpecialKeyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Special-Key-of-Low-Latency-Trading Binance API Documentation}
     */
    querySpecialKey(
        requestParameters: QuerySpecialKeyRequest = {}
    ): Promise<RestApiResponse<QuerySpecialKeyResponse>> {
        return this.tradeApi.querySpecialKey(requestParameters);
    }

    /**
     * This only applies to Special Key for Low Latency Trading.
     *
     * Weight: 1(UID)
     *
     * @summary Query Special key List(Low Latency Trading)(TRADE)
     * @param {QuerySpecialKeyListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySpecialKeyListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Query-Special-Key-List-of-Low-Latency-Trading Binance API Documentation}
     */
    querySpecialKeyList(
        requestParameters: QuerySpecialKeyListRequest = {}
    ): Promise<RestApiResponse<QuerySpecialKeyListResponse>> {
        return this.tradeApi.querySpecialKeyList(requestParameters);
    }

    /**
     * Small Liability Exchange
     *
     * Only convert once within 6 hours
     * Only liability valuation less than 10 USDT are supported
     * The maximum number of coin is 10
     *
     * Weight: 3000(UID)
     *
     * @summary Small Liability Exchange (MARGIN)
     * @param {SmallLiabilityExchangeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade/Small-Liability-Exchange Binance API Documentation}
     */
    smallLiabilityExchange(
        requestParameters: SmallLiabilityExchangeRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeApi.smallLiabilityExchange(requestParameters);
    }

    /**
     * Close out a isolated margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Isolated Margin User Data Stream (USER_STREAM)
     * @param {CloseIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    closeIsolatedMarginUserDataStream(
        requestParameters: CloseIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeDataStreamApi.closeIsolatedMarginUserDataStream(requestParameters);
    }

    /**
     * Close out a Margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Margin User Data Stream (USER_STREAM)
     * @param {CloseMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Margin-User-Data-Stream Binance API Documentation}
     */
    closeMarginUserDataStream(
        requestParameters: CloseMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeDataStreamApi.closeMarginUserDataStream(requestParameters);
    }

    /**
     * Keepalive an isolated margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    keepaliveIsolatedMarginUserDataStream(
        requestParameters: KeepaliveIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeDataStreamApi.keepaliveIsolatedMarginUserDataStream(requestParameters);
    }

    /**
     * Keepalive a margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Margin-User-Data-Stream Binance API Documentation}
     */
    keepaliveMarginUserDataStream(
        requestParameters: KeepaliveMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.tradeDataStreamApi.keepaliveMarginUserDataStream(requestParameters);
    }

    /**
     * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Isolated Margin User Data Stream (USER_STREAM)
     * @param {StartIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<StartIsolatedMarginUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    startIsolatedMarginUserDataStream(
        requestParameters: StartIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<StartIsolatedMarginUserDataStreamResponse>> {
        return this.tradeDataStreamApi.startIsolatedMarginUserDataStream(requestParameters);
    }

    /**
     * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Margin User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<StartMarginUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Margin-User-Data-Stream Binance API Documentation}
     */
    startMarginUserDataStream(): Promise<RestApiResponse<StartMarginUserDataStreamResponse>> {
        return this.tradeDataStreamApi.startMarginUserDataStream();
    }

    /**
     * Get Cross Margin Transfer History
     *
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 30 days.
     * Returns data for last 7 days by default
     *
     * Weight: 1(IP)
     *
     * @summary Get Cross Margin Transfer History (USER_DATA)
     * @param {GetCrossMarginTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCrossMarginTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/transfer/Get-Cross-Margin-Transfer-History Binance API Documentation}
     */
    getCrossMarginTransferHistory(
        requestParameters: GetCrossMarginTransferHistoryRequest = {}
    ): Promise<RestApiResponse<GetCrossMarginTransferHistoryResponse>> {
        return this.transferApi.getCrossMarginTransferHistory(requestParameters);
    }

    /**
     * Query Max Transfer-Out Amount
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Transfer-Out Amount (USER_DATA)
     * @param {QueryMaxTransferOutAmountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMaxTransferOutAmountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/margin_trading/transfer/Query-Max-Transfer-Out-Amount Binance API Documentation}
     */
    queryMaxTransferOutAmount(
        requestParameters: QueryMaxTransferOutAmountRequest
    ): Promise<RestApiResponse<QueryMaxTransferOutAmountResponse>> {
        return this.transferApi.queryMaxTransferOutAmount(requestParameters);
    }
}
