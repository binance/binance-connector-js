/**
 * Binance Public Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Public Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetFutureHourlyInterestRateResponse,
    GetInterestHistoryResponse,
    MarginAccountBorrowRepayResponse,
    QueryBorrowRepayRecordsInMarginAccountResponse,
    QueryMarginInterestRateHistoryResponse,
    QueryMaxBorrowResponse,
} from '../types';

/**
 * BorrowRepayApi - axios parameter creator
 */
const BorrowRepayApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get future hourly interest rate
         *
         * Weight: 100
         *
         * @summary Get future hourly interest rate (USER_DATA)
         * @param {string} assets List of assets, separated by commas, up to 20
         * @param {boolean} isIsolated for isolated margin or not, "TRUE", "FALSE"
         *
         * @throws {RequiredError}
         */
        getFutureHourlyInterestRate: async (
            assets: string,
            isIsolated: boolean
        ): Promise<RequestArgs> => {
            // verify required parameter 'assets' is not null or undefined
            assertParamExists('getFutureHourlyInterestRate', 'assets', assets);
            // verify required parameter 'isIsolated' is not null or undefined
            assertParamExists('getFutureHourlyInterestRate', 'isIsolated', isIsolated);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (assets !== undefined && assets !== null) {
                localVarQueryParameter['assets'] = assets;
            }

            if (isIsolated !== undefined && isIsolated !== null) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/next-hourly-interest-rate',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Interest History
         *
         * Response in descending order
         * If isolatedSymbol is not sent, crossed margin data will be returned
         * The max interval between `startTime` and `endTime` is 30 days.  It is a MUST to ensure data correctness.
         * If `startTime`and `endTime` not sent, return records of the last 7 days by default.
         * If `startTime` is sent and `endTime` is not sent, return records of [max(`startTime`, now-30d), now].
         * If `startTime` is not sent and `endTime` is sent, return records of [`endTime`-7, `endTime`]
         * `type` in response has 4 enums:
         * `PERIODIC` interest charged per hour
         * `ON_BORROW` first interest charged on borrow
         * `PERIODIC_CONVERTED` interest charged per hour converted into BNB
         * `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
         * `PORTFOLIO` interest charged daily on the portfolio margin negative balance
         *
         * Weight: 1(IP)
         *
         * @summary Get Interest History (USER_DATA)
         * @param {string} [asset]
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getInterestHistory: async (
            asset?: string,
            isolatedSymbol?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined && isolatedSymbol !== null) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/interestHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Margin account borrow/repay(MARGIN)
         *
         * Weight: 1500
         *
         * @summary Margin account borrow/repay(MARGIN)
         * @param {string} asset
         * @param {string} isIsolated `TRUE` for Isolated Margin, `FALSE` for Cross Margin, Default `FALSE`
         * @param {string} symbol
         * @param {string} amount
         * @param {string} type `MARGIN`,`ISOLATED`
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        marginAccountBorrowRepay: async (
            asset: string,
            isIsolated: string,
            symbol: string,
            amount: string,
            type: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('marginAccountBorrowRepay', 'asset', asset);
            // verify required parameter 'isIsolated' is not null or undefined
            assertParamExists('marginAccountBorrowRepay', 'isIsolated', isIsolated);
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginAccountBorrowRepay', 'symbol', symbol);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('marginAccountBorrowRepay', 'amount', amount);
            // verify required parameter 'type' is not null or undefined
            assertParamExists('marginAccountBorrowRepay', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isIsolated !== undefined && isIsolated !== null) {
                localVarQueryParameter['isIsolated'] = isIsolated;
            }

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/borrow-repay',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query borrow/repay records in Margin account
         *
         * `txId` or `startTime` must be sent. `txId` takes precedence.
         * If an asset is sent, data within 30 days before `endTime`; If an asset is not sent, data within 7 days before `endTime`
         * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
         * `startTime` set as `endTime` - 7days by default, `endTime` set as current time by default
         *
         * Weight: 10(IP)
         *
         * @summary Query borrow/repay records in Margin account(USER_DATA)
         * @param {string} type `MARGIN`,`ISOLATED`
         * @param {string} [asset]
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [txId] `tranId` in `POST /sapi/v1/margin/loan`
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryBorrowRepayRecordsInMarginAccount: async (
            type: string,
            asset?: string,
            isolatedSymbol?: string,
            txId?: number,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('queryBorrowRepayRecordsInMarginAccount', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined && isolatedSymbol !== null) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/borrow-repay',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Margin Interest Rate History
         *
         * Weight: 1(IP)
         *
         * @summary Query Margin Interest Rate History (USER_DATA)
         * @param {string} asset
         * @param {number} [vipLevel] User's current specific margin data will be returned if vipLevel is omitted
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime]
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryMarginInterestRateHistory: async (
            asset: string,
            vipLevel?: number,
            startTime?: number,
            endTime?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('queryMarginInterestRateHistory', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (vipLevel !== undefined && vipLevel !== null) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/interestRateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Max Borrow
         *
         * If isolatedSymbol is not sent, crossed margin data will be sent.
         * `borrowLimit` is also available from [https://www.binance.com/en/margin-fee](https://www.binance.com/en/margin-fee)
         *
         * Weight: 50(IP)
         *
         * @summary Query Max Borrow (USER_DATA)
         * @param {string} asset
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryMaxBorrow: async (
            asset: string,
            isolatedSymbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('queryMaxBorrow', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined && isolatedSymbol !== null) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/maxBorrowable',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * BorrowRepayApi - interface
 * @interface BorrowRepayApi
 */
export interface BorrowRepayApiInterface {
    /**
     * Get future hourly interest rate
     *
     * Weight: 100
     *
     * @summary Get future hourly interest rate (USER_DATA)
     * @param {GetFutureHourlyInterestRateRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    getFutureHourlyInterestRate(
        requestParameters: GetFutureHourlyInterestRateRequest
    ): Promise<RestApiResponse<GetFutureHourlyInterestRateResponse>>;
    /**
     * Get Interest History
     *
     * Response in descending order
     * If isolatedSymbol is not sent, crossed margin data will be returned
     * The max interval between `startTime` and `endTime` is 30 days.  It is a MUST to ensure data correctness.
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default.
     * If `startTime` is sent and `endTime` is not sent, return records of [max(`startTime`, now-30d), now].
     * If `startTime` is not sent and `endTime` is sent, return records of [`endTime`-7, `endTime`]
     * `type` in response has 4 enums:
     * `PERIODIC` interest charged per hour
     * `ON_BORROW` first interest charged on borrow
     * `PERIODIC_CONVERTED` interest charged per hour converted into BNB
     * `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
     * `PORTFOLIO` interest charged daily on the portfolio margin negative balance
     *
     * Weight: 1(IP)
     *
     * @summary Get Interest History (USER_DATA)
     * @param {GetInterestHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    getInterestHistory(
        requestParameters?: GetInterestHistoryRequest
    ): Promise<RestApiResponse<GetInterestHistoryResponse>>;
    /**
     * Margin account borrow/repay(MARGIN)
     *
     * Weight: 1500
     *
     * @summary Margin account borrow/repay(MARGIN)
     * @param {MarginAccountBorrowRepayRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    marginAccountBorrowRepay(
        requestParameters: MarginAccountBorrowRepayRequest
    ): Promise<RestApiResponse<MarginAccountBorrowRepayResponse>>;
    /**
     * Query borrow/repay records in Margin account
     *
     * `txId` or `startTime` must be sent. `txId` takes precedence.
     * If an asset is sent, data within 30 days before `endTime`; If an asset is not sent, data within 7 days before `endTime`
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * `startTime` set as `endTime` - 7days by default, `endTime` set as current time by default
     *
     * Weight: 10(IP)
     *
     * @summary Query borrow/repay records in Margin account(USER_DATA)
     * @param {QueryBorrowRepayRecordsInMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    queryBorrowRepayRecordsInMarginAccount(
        requestParameters: QueryBorrowRepayRecordsInMarginAccountRequest
    ): Promise<RestApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>>;
    /**
     * Query Margin Interest Rate History
     *
     * Weight: 1(IP)
     *
     * @summary Query Margin Interest Rate History (USER_DATA)
     * @param {QueryMarginInterestRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    queryMarginInterestRateHistory(
        requestParameters: QueryMarginInterestRateHistoryRequest
    ): Promise<RestApiResponse<QueryMarginInterestRateHistoryResponse>>;
    /**
     * Query Max Borrow
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     * `borrowLimit` is also available from [https://www.binance.com/en/margin-fee](https://www.binance.com/en/margin-fee)
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Borrow (USER_DATA)
     * @param {QueryMaxBorrowRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApiInterface
     */
    queryMaxBorrow(
        requestParameters: QueryMaxBorrowRequest
    ): Promise<RestApiResponse<QueryMaxBorrowResponse>>;
}

/**
 * Request parameters for getFutureHourlyInterestRate operation in BorrowRepayApi.
 * @interface GetFutureHourlyInterestRateRequest
 */
export interface GetFutureHourlyInterestRateRequest {
    /**
     * List of assets, separated by commas, up to 20
     * @type {string}
     * @memberof BorrowRepayApiGetFutureHourlyInterestRate
     */
    readonly assets: string;

    /**
     * for isolated margin or not, "TRUE", "FALSE"
     * @type {boolean}
     * @memberof BorrowRepayApiGetFutureHourlyInterestRate
     */
    readonly isIsolated: boolean;
}

/**
 * Request parameters for getInterestHistory operation in BorrowRepayApi.
 * @interface GetInterestHistoryRequest
 */
export interface GetInterestHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly asset?: string;

    /**
     * isolated symbol
     * @type {string}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly isolatedSymbol?: string;

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly current?: number;

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly size?: number;

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowRepayApiGetInterestHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for marginAccountBorrowRepay operation in BorrowRepayApi.
 * @interface MarginAccountBorrowRepayRequest
 */
export interface MarginAccountBorrowRepayRequest {
    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly asset: string;

    /**
     * `TRUE` for Isolated Margin, `FALSE` for Cross Margin, Default `FALSE`
     * @type {string}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly isIsolated: string;

    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly symbol: string;

    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly amount: string;

    /**
     * `MARGIN`,`ISOLATED`
     * @type {string}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly type: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowRepayApiMarginAccountBorrowRepay
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryBorrowRepayRecordsInMarginAccount operation in BorrowRepayApi.
 * @interface QueryBorrowRepayRecordsInMarginAccountRequest
 */
export interface QueryBorrowRepayRecordsInMarginAccountRequest {
    /**
     * `MARGIN`,`ISOLATED`
     * @type {string}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly type: string;

    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly asset?: string;

    /**
     * isolated symbol
     * @type {string}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly isolatedSymbol?: string;

    /**
     * `tranId` in `POST /sapi/v1/margin/loan`
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly txId?: number;

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly current?: number;

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly size?: number;

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowRepayApiQueryBorrowRepayRecordsInMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryMarginInterestRateHistory operation in BorrowRepayApi.
 * @interface QueryMarginInterestRateHistoryRequest
 */
export interface QueryMarginInterestRateHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiQueryMarginInterestRateHistory
     */
    readonly asset: string;

    /**
     * User's current specific margin data will be returned if vipLevel is omitted
     * @type {number}
     * @memberof BorrowRepayApiQueryMarginInterestRateHistory
     */
    readonly vipLevel?: number;

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof BorrowRepayApiQueryMarginInterestRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof BorrowRepayApiQueryMarginInterestRateHistory
     */
    readonly endTime?: number;

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowRepayApiQueryMarginInterestRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryMaxBorrow operation in BorrowRepayApi.
 * @interface QueryMaxBorrowRequest
 */
export interface QueryMaxBorrowRequest {
    /**
     *
     * @type {string}
     * @memberof BorrowRepayApiQueryMaxBorrow
     */
    readonly asset: string;

    /**
     * isolated symbol
     * @type {string}
     * @memberof BorrowRepayApiQueryMaxBorrow
     */
    readonly isolatedSymbol?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof BorrowRepayApiQueryMaxBorrow
     */
    readonly recvWindow?: number;
}

/**
 * BorrowRepayApi - object-oriented interface
 * @class BorrowRepayApi
 */
export class BorrowRepayApi implements BorrowRepayApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = BorrowRepayApiAxiosParamCreator(configuration);
    }

    /**
     * Get future hourly interest rate
     *
     * Weight: 100
     *
     * @summary Get future hourly interest rate (USER_DATA)
     * @param {GetFutureHourlyInterestRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFutureHourlyInterestRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-a-future-hourly-interest-rate Binance API Documentation}
     */
    public async getFutureHourlyInterestRate(
        requestParameters: GetFutureHourlyInterestRateRequest
    ): Promise<RestApiResponse<GetFutureHourlyInterestRateResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFutureHourlyInterestRate(
            requestParameters?.assets,
            requestParameters?.isIsolated
        );
        return sendRequest<GetFutureHourlyInterestRateResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Interest History
     *
     * Response in descending order
     * If isolatedSymbol is not sent, crossed margin data will be returned
     * The max interval between `startTime` and `endTime` is 30 days.  It is a MUST to ensure data correctness.
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default.
     * If `startTime` is sent and `endTime` is not sent, return records of [max(`startTime`, now-30d), now].
     * If `startTime` is not sent and `endTime` is sent, return records of [`endTime`-7, `endTime`]
     * `type` in response has 4 enums:
     * `PERIODIC` interest charged per hour
     * `ON_BORROW` first interest charged on borrow
     * `PERIODIC_CONVERTED` interest charged per hour converted into BNB
     * `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
     * `PORTFOLIO` interest charged daily on the portfolio margin negative balance
     *
     * Weight: 1(IP)
     *
     * @summary Get Interest History (USER_DATA)
     * @param {GetInterestHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetInterestHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-Interest-History Binance API Documentation}
     */
    public async getInterestHistory(
        requestParameters: GetInterestHistoryRequest = {}
    ): Promise<RestApiResponse<GetInterestHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getInterestHistory(
            requestParameters?.asset,
            requestParameters?.isolatedSymbol,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetInterestHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Margin account borrow/repay(MARGIN)
     *
     * Weight: 1500
     *
     * @summary Margin account borrow/repay(MARGIN)
     * @param {MarginAccountBorrowRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MarginAccountBorrowRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-account-borrow-repay Binance API Documentation}
     */
    public async marginAccountBorrowRepay(
        requestParameters: MarginAccountBorrowRepayRequest
    ): Promise<RestApiResponse<MarginAccountBorrowRepayResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.marginAccountBorrowRepay(
            requestParameters?.asset,
            requestParameters?.isIsolated,
            requestParameters?.symbol,
            requestParameters?.amount,
            requestParameters?.type,
            requestParameters?.recvWindow
        );
        return sendRequest<MarginAccountBorrowRepayResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query borrow/repay records in Margin account
     *
     * `txId` or `startTime` must be sent. `txId` takes precedence.
     * If an asset is sent, data within 30 days before `endTime`; If an asset is not sent, data within 7 days before `endTime`
     * If neither `startTime` nor `endTime` is sent, the recent 7-day data will be returned.
     * `startTime` set as `endTime` - 7days by default, `endTime` set as current time by default
     *
     * Weight: 10(IP)
     *
     * @summary Query borrow/repay records in Margin account(USER_DATA)
     * @param {QueryBorrowRepayRecordsInMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Borrow-Repay Binance API Documentation}
     */
    public async queryBorrowRepayRecordsInMarginAccount(
        requestParameters: QueryBorrowRepayRecordsInMarginAccountRequest
    ): Promise<RestApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryBorrowRepayRecordsInMarginAccount(
                requestParameters?.type,
                requestParameters?.asset,
                requestParameters?.isolatedSymbol,
                requestParameters?.txId,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryBorrowRepayRecordsInMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Margin Interest Rate History
     *
     * Weight: 1(IP)
     *
     * @summary Query Margin Interest Rate History (USER_DATA)
     * @param {QueryMarginInterestRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginInterestRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History Binance API Documentation}
     */
    public async queryMarginInterestRateHistory(
        requestParameters: QueryMarginInterestRateHistoryRequest
    ): Promise<RestApiResponse<QueryMarginInterestRateHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryMarginInterestRateHistory(
                requestParameters?.asset,
                requestParameters?.vipLevel,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryMarginInterestRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Max Borrow
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     * `borrowLimit` is also available from [https://www.binance.com/en/margin-fee](https://www.binance.com/en/margin-fee)
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Borrow (USER_DATA)
     * @param {QueryMaxBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMaxBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof BorrowRepayApi
     * @see {@link https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Max-Borrow Binance API Documentation}
     */
    public async queryMaxBorrow(
        requestParameters: QueryMaxBorrowRequest
    ): Promise<RestApiResponse<QueryMaxBorrowResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryMaxBorrow(
            requestParameters?.asset,
            requestParameters?.isolatedSymbol,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryMaxBorrowResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
