/**
 * Binance Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AdjustCrossMarginMaxLeverageResponse,
    DisableIsolatedMarginAccountResponse,
    EnableIsolatedMarginAccountResponse,
    GetBnbBurnStatusResponse,
    GetSummaryOfMarginAccountResponse,
    QueryCrossIsolatedMarginCapitalFlowResponse,
    QueryCrossMarginAccountDetailsResponse,
    QueryCrossMarginFeeDataResponse,
    QueryEnabledIsolatedMarginAccountLimitResponse,
    QueryIsolatedMarginAccountInfoResponse,
    QueryIsolatedMarginFeeDataResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Adjust cross margin max leverage
         *
         * The margin level need higher than the initial risk ratio of adjusted leverage, the initial risk ratio of 3x is 1.5 , the initial risk ratio of 5x is 1.25;  The detail conditions on how to switch between Cross Margin Classic and Cross Margin Pro can refer to [the FAQ](https://www.binance.com/en/support/faq/how-to-activate-the-cross-margin-pro-mode-on-binance-e27786da05e743a694b8c625b3bc475d).
         *
         * Weight: 3000
         *
         * @summary Adjust cross margin max leverage (USER_DATA)
         * @param {number} maxLeverage Can only adjust 3 , 5 or 10，Example: maxLeverage = 5 or 3 for Cross Margin Classic; maxLeverage=10 for Cross Margin Pro 10x leverage or 20x if compliance allows.
         *
         * @throws {RequiredError}
         */
        adjustCrossMarginMaxLeverage: async (maxLeverage: number): Promise<RequestArgs> => {
            // verify required parameter 'maxLeverage' is not null or undefined
            assertParamExists('adjustCrossMarginMaxLeverage', 'maxLeverage', maxLeverage);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (maxLeverage !== undefined && maxLeverage !== null) {
                localVarQueryParameter['maxLeverage'] = maxLeverage;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/max-leverage',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24
         * hours.
         *
         * Weight: 300(UID)
         *
         * @summary Disable Isolated Margin Account (TRADE)
         * @param {string} symbol
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        disableIsolatedMarginAccount: async (
            symbol: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('disableIsolatedMarginAccount', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolated/account',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
         *
         * Weight: 300(UID)
         *
         * @summary Enable Isolated Margin Account (TRADE)
         * @param {string} symbol
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        enableIsolatedMarginAccount: async (
            symbol: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('enableIsolatedMarginAccount', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolated/account',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BNB Burn Status
         *
         * Weight: 1(IP)
         *
         * @summary Get BNB Burn Status (USER_DATA)
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getBnbBurnStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bnbBurn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get personal margin level information
         *
         * Weight: 10(IP)
         *
         * @summary Get Summary of Margin account (USER_DATA)
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getSummaryOfMarginAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/tradeCoeff',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Cross Isolated Margin Capital Flow
         *
         * Weight: 100(IP)
         *
         * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
         * @param {string} [asset]
         * @param {string} [symbol] isolated margin pair
         * @param {string} [type] Transfer Type: ROLL_IN, ROLL_OUT
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime]
         * @param {number} [fromId] 如设置fromId, 将返回id > fromId的数据。否则将返回最新数据
         * @param {number} [limit] Default Value: 500; Max Value: 1000
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryCrossIsolatedMarginCapitalFlow: async (
            asset?: string,
            symbol?: string,
            type?: string,
            startTime?: number,
            endTime?: number,
            fromId?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromId !== undefined && fromId !== null) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/capital-flow',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Cross Margin Account Details
         *
         * Weight: 10(IP)
         *
         * @summary Query Cross Margin Account Details (USER_DATA)
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryCrossMarginAccountDetails: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
         *
         * Weight: 1 when coin is specified;(IP)
         *
         * @summary Query Cross Margin Fee Data (USER_DATA)
         * @param {number} [vipLevel] User's current specific margin data will be returned if vipLevel is omitted
         * @param {string} [coin]
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryCrossMarginFeeData: async (
            vipLevel?: number,
            coin?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (vipLevel !== undefined && vipLevel !== null) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/crossMarginData',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query enabled isolated margin account limit.
         *
         * Weight: 1(IP)
         *
         * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryEnabledIsolatedMarginAccountLimit: async (
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolated/accountLimit',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Isolated Margin Account Info
         *
         * If "symbols" is not sent, all isolated assets will be returned.
         * If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
         *
         * Weight: 10(IP)
         *
         * @summary Query Isolated Margin Account Info (USER_DATA)
         * @param {string} [symbols] Max 5 symbols can be sent; separated by ",". e.g. "BTCUSDT,BNBUSDT,ADAUSDT"
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryIsolatedMarginAccountInfo: async (
            symbols?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbols !== undefined && symbols !== null) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolated/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
         *
         * Weight: 1 when a single is specified;(IP)
         *
         * @summary Query Isolated Margin Fee Data (USER_DATA)
         * @param {number} [vipLevel] User's current specific margin data will be returned if vipLevel is omitted
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryIsolatedMarginFeeData: async (
            vipLevel?: number,
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (vipLevel !== undefined && vipLevel !== null) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolatedMarginData',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Adjust cross margin max leverage
     *
     * The margin level need higher than the initial risk ratio of adjusted leverage, the initial risk ratio of 3x is 1.5 , the initial risk ratio of 5x is 1.25;  The detail conditions on how to switch between Cross Margin Classic and Cross Margin Pro can refer to [the FAQ](https://www.binance.com/en/support/faq/how-to-activate-the-cross-margin-pro-mode-on-binance-e27786da05e743a694b8c625b3bc475d).
     *
     * Weight: 3000
     *
     * @summary Adjust cross margin max leverage (USER_DATA)
     * @param {AdjustCrossMarginMaxLeverageRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    adjustCrossMarginMaxLeverage(
        requestParameters: AdjustCrossMarginMaxLeverageRequest
    ): Promise<RestApiResponse<AdjustCrossMarginMaxLeverageResponse>>;
    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24
     * hours.
     *
     * Weight: 300(UID)
     *
     * @summary Disable Isolated Margin Account (TRADE)
     * @param {DisableIsolatedMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    disableIsolatedMarginAccount(
        requestParameters: DisableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<DisableIsolatedMarginAccountResponse>>;
    /**
     * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
     *
     * Weight: 300(UID)
     *
     * @summary Enable Isolated Margin Account (TRADE)
     * @param {EnableIsolatedMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    enableIsolatedMarginAccount(
        requestParameters: EnableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<EnableIsolatedMarginAccountResponse>>;
    /**
     * Get BNB Burn Status
     *
     * Weight: 1(IP)
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getBnbBurnStatus(
        requestParameters?: GetBnbBurnStatusRequest
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>>;
    /**
     * Get personal margin level information
     *
     * Weight: 10(IP)
     *
     * @summary Get Summary of Margin account (USER_DATA)
     * @param {GetSummaryOfMarginAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getSummaryOfMarginAccount(
        requestParameters?: GetSummaryOfMarginAccountRequest
    ): Promise<RestApiResponse<GetSummaryOfMarginAccountResponse>>;
    /**
     * Query Cross Isolated Margin Capital Flow
     *
     * Weight: 100(IP)
     *
     * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
     * @param {QueryCrossIsolatedMarginCapitalFlowRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryCrossIsolatedMarginCapitalFlow(
        requestParameters?: QueryCrossIsolatedMarginCapitalFlowRequest
    ): Promise<RestApiResponse<QueryCrossIsolatedMarginCapitalFlowResponse>>;
    /**
     * Query Cross Margin Account Details
     *
     * Weight: 10(IP)
     *
     * @summary Query Cross Margin Account Details (USER_DATA)
     * @param {QueryCrossMarginAccountDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryCrossMarginAccountDetails(
        requestParameters?: QueryCrossMarginAccountDetailsRequest
    ): Promise<RestApiResponse<QueryCrossMarginAccountDetailsResponse>>;
    /**
     * Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when coin is specified;(IP)
     *
     * @summary Query Cross Margin Fee Data (USER_DATA)
     * @param {QueryCrossMarginFeeDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryCrossMarginFeeData(
        requestParameters?: QueryCrossMarginFeeDataRequest
    ): Promise<RestApiResponse<QueryCrossMarginFeeDataResponse>>;
    /**
     * Query enabled isolated margin account limit.
     *
     * Weight: 1(IP)
     *
     * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
     * @param {QueryEnabledIsolatedMarginAccountLimitRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryEnabledIsolatedMarginAccountLimit(
        requestParameters?: QueryEnabledIsolatedMarginAccountLimitRequest
    ): Promise<RestApiResponse<QueryEnabledIsolatedMarginAccountLimitResponse>>;
    /**
     * Query Isolated Margin Account Info
     *
     * If "symbols" is not sent, all isolated assets will be returned.
     * If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
     *
     * Weight: 10(IP)
     *
     * @summary Query Isolated Margin Account Info (USER_DATA)
     * @param {QueryIsolatedMarginAccountInfoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryIsolatedMarginAccountInfo(
        requestParameters?: QueryIsolatedMarginAccountInfoRequest
    ): Promise<RestApiResponse<QueryIsolatedMarginAccountInfoResponse>>;
    /**
     * Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when a single is specified;(IP)
     *
     * @summary Query Isolated Margin Fee Data (USER_DATA)
     * @param {QueryIsolatedMarginFeeDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    queryIsolatedMarginFeeData(
        requestParameters?: QueryIsolatedMarginFeeDataRequest
    ): Promise<RestApiResponse<QueryIsolatedMarginFeeDataResponse>>;
}

/**
 * Request parameters for adjustCrossMarginMaxLeverage operation in AccountApi.
 * @interface AdjustCrossMarginMaxLeverageRequest
 */
export interface AdjustCrossMarginMaxLeverageRequest {
    /**
     * Can only adjust 3 , 5 or 10，Example: maxLeverage = 5 or 3 for Cross Margin Classic; maxLeverage=10 for Cross Margin Pro 10x leverage or 20x if compliance allows.
     * @type {number}
     * @memberof AccountApiAdjustCrossMarginMaxLeverage
     */
    readonly maxLeverage: number;
}

/**
 * Request parameters for disableIsolatedMarginAccount operation in AccountApi.
 * @interface DisableIsolatedMarginAccountRequest
 */
export interface DisableIsolatedMarginAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiDisableIsolatedMarginAccount
     */
    readonly symbol: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiDisableIsolatedMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableIsolatedMarginAccount operation in AccountApi.
 * @interface EnableIsolatedMarginAccountRequest
 */
export interface EnableIsolatedMarginAccountRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiEnableIsolatedMarginAccount
     */
    readonly symbol: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiEnableIsolatedMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBnbBurnStatus operation in AccountApi.
 * @interface GetBnbBurnStatusRequest
 */
export interface GetBnbBurnStatusRequest {
    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiGetBnbBurnStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSummaryOfMarginAccount operation in AccountApi.
 * @interface GetSummaryOfMarginAccountRequest
 */
export interface GetSummaryOfMarginAccountRequest {
    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiGetSummaryOfMarginAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryCrossIsolatedMarginCapitalFlow operation in AccountApi.
 * @interface QueryCrossIsolatedMarginCapitalFlowRequest
 */
export interface QueryCrossIsolatedMarginCapitalFlowRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly asset?: string;

    /**
     * isolated margin pair
     * @type {string}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly symbol?: string;

    /**
     * Transfer Type: ROLL_IN, ROLL_OUT
     * @type {string}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly type?: string;

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly endTime?: number;

    /**
     * 如设置fromId, 将返回id > fromId的数据。否则将返回最新数据
     * @type {number}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly fromId?: number;

    /**
     * Default Value: 500; Max Value: 1000
     * @type {number}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly limit?: number;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryCrossIsolatedMarginCapitalFlow
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryCrossMarginAccountDetails operation in AccountApi.
 * @interface QueryCrossMarginAccountDetailsRequest
 */
export interface QueryCrossMarginAccountDetailsRequest {
    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryCrossMarginAccountDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryCrossMarginFeeData operation in AccountApi.
 * @interface QueryCrossMarginFeeDataRequest
 */
export interface QueryCrossMarginFeeDataRequest {
    /**
     * User's current specific margin data will be returned if vipLevel is omitted
     * @type {number}
     * @memberof AccountApiQueryCrossMarginFeeData
     */
    readonly vipLevel?: number;

    /**
     *
     * @type {string}
     * @memberof AccountApiQueryCrossMarginFeeData
     */
    readonly coin?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryCrossMarginFeeData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryEnabledIsolatedMarginAccountLimit operation in AccountApi.
 * @interface QueryEnabledIsolatedMarginAccountLimitRequest
 */
export interface QueryEnabledIsolatedMarginAccountLimitRequest {
    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryEnabledIsolatedMarginAccountLimit
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryIsolatedMarginAccountInfo operation in AccountApi.
 * @interface QueryIsolatedMarginAccountInfoRequest
 */
export interface QueryIsolatedMarginAccountInfoRequest {
    /**
     * Max 5 symbols can be sent; separated by ",". e.g. "BTCUSDT,BNBUSDT,ADAUSDT"
     * @type {string}
     * @memberof AccountApiQueryIsolatedMarginAccountInfo
     */
    readonly symbols?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryIsolatedMarginAccountInfo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryIsolatedMarginFeeData operation in AccountApi.
 * @interface QueryIsolatedMarginFeeDataRequest
 */
export interface QueryIsolatedMarginFeeDataRequest {
    /**
     * User's current specific margin data will be returned if vipLevel is omitted
     * @type {number}
     * @memberof AccountApiQueryIsolatedMarginFeeData
     */
    readonly vipLevel?: number;

    /**
     * isolated margin pair
     * @type {string}
     * @memberof AccountApiQueryIsolatedMarginFeeData
     */
    readonly symbol?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof AccountApiQueryIsolatedMarginFeeData
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Adjust cross margin max leverage
     *
     * The margin level need higher than the initial risk ratio of adjusted leverage, the initial risk ratio of 3x is 1.5 , the initial risk ratio of 5x is 1.25;  The detail conditions on how to switch between Cross Margin Classic and Cross Margin Pro can refer to [the FAQ](https://www.binance.com/en/support/faq/how-to-activate-the-cross-margin-pro-mode-on-binance-e27786da05e743a694b8c625b3bc475d).
     *
     * Weight: 3000
     *
     * @summary Adjust cross margin max leverage (USER_DATA)
     * @param {AdjustCrossMarginMaxLeverageRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AdjustCrossMarginMaxLeverageResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Adjust-cross-margin-max-leverage Binance API Documentation}
     */
    public async adjustCrossMarginMaxLeverage(
        requestParameters: AdjustCrossMarginMaxLeverageRequest
    ): Promise<RestApiResponse<AdjustCrossMarginMaxLeverageResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.adjustCrossMarginMaxLeverage(
            requestParameters?.maxLeverage
        );
        return sendRequest<AdjustCrossMarginMaxLeverageResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24
     * hours.
     *
     * Weight: 300(UID)
     *
     * @summary Disable Isolated Margin Account (TRADE)
     * @param {DisableIsolatedMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DisableIsolatedMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Disable-Isolated-Margin-Account Binance API Documentation}
     */
    public async disableIsolatedMarginAccount(
        requestParameters: DisableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<DisableIsolatedMarginAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.disableIsolatedMarginAccount(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<DisableIsolatedMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).
     *
     * Weight: 300(UID)
     *
     * @summary Enable Isolated Margin Account (TRADE)
     * @param {EnableIsolatedMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EnableIsolatedMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Enable-Isolated-Margin-Account Binance API Documentation}
     */
    public async enableIsolatedMarginAccount(
        requestParameters: EnableIsolatedMarginAccountRequest
    ): Promise<RestApiResponse<EnableIsolatedMarginAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.enableIsolatedMarginAccount(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<EnableIsolatedMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BNB Burn Status
     *
     * Weight: 1(IP)
     *
     * @summary Get BNB Burn Status (USER_DATA)
     * @param {GetBnbBurnStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnbBurnStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Get-BNB-Burn-Status Binance API Documentation}
     */
    public async getBnbBurnStatus(
        requestParameters: GetBnbBurnStatusRequest = {}
    ): Promise<RestApiResponse<GetBnbBurnStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBnbBurnStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<GetBnbBurnStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get personal margin level information
     *
     * Weight: 10(IP)
     *
     * @summary Get Summary of Margin account (USER_DATA)
     * @param {GetSummaryOfMarginAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSummaryOfMarginAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Get-Summary-of-Margin-account Binance API Documentation}
     */
    public async getSummaryOfMarginAccount(
        requestParameters: GetSummaryOfMarginAccountRequest = {}
    ): Promise<RestApiResponse<GetSummaryOfMarginAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSummaryOfMarginAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<GetSummaryOfMarginAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Cross Isolated Margin Capital Flow
     *
     * Weight: 100(IP)
     *
     * @summary Query Cross Isolated Margin Capital Flow (USER_DATA)
     * @param {QueryCrossIsolatedMarginCapitalFlowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossIsolatedMarginCapitalFlowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Isolated-Margin-Capital-Flow Binance API Documentation}
     */
    public async queryCrossIsolatedMarginCapitalFlow(
        requestParameters: QueryCrossIsolatedMarginCapitalFlowRequest = {}
    ): Promise<RestApiResponse<QueryCrossIsolatedMarginCapitalFlowResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryCrossIsolatedMarginCapitalFlow(
                requestParameters?.asset,
                requestParameters?.symbol,
                requestParameters?.type,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.fromId,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryCrossIsolatedMarginCapitalFlowResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Cross Margin Account Details
     *
     * Weight: 10(IP)
     *
     * @summary Query Cross Margin Account Details (USER_DATA)
     * @param {QueryCrossMarginAccountDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossMarginAccountDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Margin-Account-Details Binance API Documentation}
     */
    public async queryCrossMarginAccountDetails(
        requestParameters: QueryCrossMarginAccountDetailsRequest = {}
    ): Promise<RestApiResponse<QueryCrossMarginAccountDetailsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryCrossMarginAccountDetails(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryCrossMarginAccountDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when coin is specified;(IP)
     *
     * @summary Query Cross Margin Fee Data (USER_DATA)
     * @param {QueryCrossMarginFeeDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCrossMarginFeeDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Cross-Margin-Fee-Data Binance API Documentation}
     */
    public async queryCrossMarginFeeData(
        requestParameters: QueryCrossMarginFeeDataRequest = {}
    ): Promise<RestApiResponse<QueryCrossMarginFeeDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryCrossMarginFeeData(
            requestParameters?.vipLevel,
            requestParameters?.coin,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryCrossMarginFeeDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query enabled isolated margin account limit.
     *
     * Weight: 1(IP)
     *
     * @summary Query Enabled Isolated Margin Account Limit (USER_DATA)
     * @param {QueryEnabledIsolatedMarginAccountLimitRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryEnabledIsolatedMarginAccountLimitResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Enabled-Isolated-Margin-Account-Limit Binance API Documentation}
     */
    public async queryEnabledIsolatedMarginAccountLimit(
        requestParameters: QueryEnabledIsolatedMarginAccountLimitRequest = {}
    ): Promise<RestApiResponse<QueryEnabledIsolatedMarginAccountLimitResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryEnabledIsolatedMarginAccountLimit(
                requestParameters?.recvWindow
            );
        return sendRequest<QueryEnabledIsolatedMarginAccountLimitResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Isolated Margin Account Info
     *
     * If "symbols" is not sent, all isolated assets will be returned.
     * If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
     *
     * Weight: 10(IP)
     *
     * @summary Query Isolated Margin Account Info (USER_DATA)
     * @param {QueryIsolatedMarginAccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginAccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Account-Info Binance API Documentation}
     */
    public async queryIsolatedMarginAccountInfo(
        requestParameters: QueryIsolatedMarginAccountInfoRequest = {}
    ): Promise<RestApiResponse<QueryIsolatedMarginAccountInfoResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryIsolatedMarginAccountInfo(
                requestParameters?.symbols,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryIsolatedMarginAccountInfoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
     *
     * Weight: 1 when a single is specified;(IP)
     *
     * @summary Query Isolated Margin Fee Data (USER_DATA)
     * @param {QueryIsolatedMarginFeeDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginFeeDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Fee-Data Binance API Documentation}
     */
    public async queryIsolatedMarginFeeData(
        requestParameters: QueryIsolatedMarginFeeDataRequest = {}
    ): Promise<RestApiResponse<QueryIsolatedMarginFeeDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryIsolatedMarginFeeData(
            requestParameters?.vipLevel,
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryIsolatedMarginFeeDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
