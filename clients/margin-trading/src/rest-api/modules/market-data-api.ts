/**
 * Binance Public Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Public Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CrossMarginCollateralRatioResponse,
    GetAllCrossMarginPairsResponse,
    GetAllIsolatedMarginSymbolResponse,
    GetAllMarginAssetsResponse,
    GetDelistScheduleResponse,
    QueryIsolatedMarginTierDataResponse,
    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse,
    QueryMarginAvailableInventoryResponse,
    QueryMarginPriceindexResponse,
} from '../types';

/**
 * MarketDataApi - axios parameter creator
 */
const MarketDataApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Cross margin collateral ratio
         *
         * Weight: 100(IP)
         *
         * @summary Cross margin collateral ratio (MARKET_DATA)
         *
         * @throws {RequiredError}
         */
        crossMarginCollateralRatio: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/crossMarginCollateralRatio',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get All Cross Margin Pairs
         *
         * Weight: 1(IP)
         *
         * @summary Get All Cross Margin Pairs (MARKET_DATA)
         * @param {string} [symbol] isolated margin pair
         *
         * @throws {RequiredError}
         */
        getAllCrossMarginPairs: async (symbol?: string): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/allPairs',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get All Isolated Margin Symbol
         *
         * Weight: 10(IP)
         *
         * @summary Get All Isolated Margin Symbol(MARKET_DATA)
         * @param {string} [symbol] isolated margin pair
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getAllIsolatedMarginSymbol: async (
            symbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolated/allPairs',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get All Margin Assets.
         *
         * Weight: 1(IP)
         *
         * @summary Get All Margin Assets (MARKET_DATA)
         * @param {string} [asset]
         *
         * @throws {RequiredError}
         */
        getAllMarginAssets: async (asset?: string): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/allAssets',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get tokens or symbols delist schedule for cross margin and isolated margin
         *
         * Weight: 100
         *
         * @summary Get Delist Schedule (MARKET_DATA)
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getDelistSchedule: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/delist-schedule',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
         *
         * Weight: 1(IP)
         *
         * @summary Query Isolated Margin Tier Data (USER_DATA)
         * @param {string} symbol
         * @param {number} [tier] All margin tier data will be returned if tier is omitted
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryIsolatedMarginTierData: async (
            symbol: string,
            tier?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('queryIsolatedMarginTierData', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (tier !== undefined && tier !== null) {
                localVarQueryParameter['tier'] = tier;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/isolatedMarginTier',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Liability Coin Leverage Bracket in Cross Margin Pro Mode
         *
         * Weight: 1
         *
         * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
         *
         * @throws {RequiredError}
         */
        queryLiabilityCoinLeverageBracketInCrossMarginProMode: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/leverageBracket',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Margin available Inventory query
         *
         * Weight: 50
         *
         * @summary Query Margin Available Inventory(USER_DATA)
         * @param {string} type `MARGIN`,`ISOLATED`
         *
         * @throws {RequiredError}
         */
        queryMarginAvailableInventory: async (type: string): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('queryMarginAvailableInventory', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/available-inventory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Margin PriceIndex
         *
         * Weight: 10(IP)
         *
         * @summary Query Margin PriceIndex (MARKET_DATA)
         * @param {string} symbol
         *
         * @throws {RequiredError}
         */
        queryMarginPriceindex: async (symbol: string): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('queryMarginPriceindex', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/priceIndex',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketDataApi - interface
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Cross margin collateral ratio
     *
     * Weight: 100(IP)
     *
     * @summary Cross margin collateral ratio (MARKET_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    crossMarginCollateralRatio(): Promise<RestApiResponse<CrossMarginCollateralRatioResponse>>;
    /**
     * Get All Cross Margin Pairs
     *
     * Weight: 1(IP)
     *
     * @summary Get All Cross Margin Pairs (MARKET_DATA)
     * @param {GetAllCrossMarginPairsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getAllCrossMarginPairs(
        requestParameters?: GetAllCrossMarginPairsRequest
    ): Promise<RestApiResponse<GetAllCrossMarginPairsResponse>>;
    /**
     * Get All Isolated Margin Symbol
     *
     * Weight: 10(IP)
     *
     * @summary Get All Isolated Margin Symbol(MARKET_DATA)
     * @param {GetAllIsolatedMarginSymbolRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getAllIsolatedMarginSymbol(
        requestParameters?: GetAllIsolatedMarginSymbolRequest
    ): Promise<RestApiResponse<GetAllIsolatedMarginSymbolResponse>>;
    /**
     * Get All Margin Assets.
     *
     * Weight: 1(IP)
     *
     * @summary Get All Margin Assets (MARKET_DATA)
     * @param {GetAllMarginAssetsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getAllMarginAssets(
        requestParameters?: GetAllMarginAssetsRequest
    ): Promise<RestApiResponse<GetAllMarginAssetsResponse>>;
    /**
     * Get tokens or symbols delist schedule for cross margin and isolated margin
     *
     * Weight: 100
     *
     * @summary Get Delist Schedule (MARKET_DATA)
     * @param {GetDelistScheduleRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    getDelistSchedule(
        requestParameters?: GetDelistScheduleRequest
    ): Promise<RestApiResponse<GetDelistScheduleResponse>>;
    /**
     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
     *
     * Weight: 1(IP)
     *
     * @summary Query Isolated Margin Tier Data (USER_DATA)
     * @param {QueryIsolatedMarginTierDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryIsolatedMarginTierData(
        requestParameters: QueryIsolatedMarginTierDataRequest
    ): Promise<RestApiResponse<QueryIsolatedMarginTierDataResponse>>;
    /**
     * Liability Coin Leverage Bracket in Cross Margin Pro Mode
     *
     * Weight: 1
     *
     * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryLiabilityCoinLeverageBracketInCrossMarginProMode(): Promise<
        RestApiResponse<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>
    >;
    /**
     * Margin available Inventory query
     *
     * Weight: 50
     *
     * @summary Query Margin Available Inventory(USER_DATA)
     * @param {QueryMarginAvailableInventoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryMarginAvailableInventory(
        requestParameters: QueryMarginAvailableInventoryRequest
    ): Promise<RestApiResponse<QueryMarginAvailableInventoryResponse>>;
    /**
     * Query Margin PriceIndex
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin PriceIndex (MARKET_DATA)
     * @param {QueryMarginPriceindexRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    queryMarginPriceindex(
        requestParameters: QueryMarginPriceindexRequest
    ): Promise<RestApiResponse<QueryMarginPriceindexResponse>>;
}

/**
 * Request parameters for getAllCrossMarginPairs operation in MarketDataApi.
 * @interface GetAllCrossMarginPairsRequest
 */
export interface GetAllCrossMarginPairsRequest {
    /**
     * isolated margin pair
     * @type {string}
     * @memberof MarketDataApiGetAllCrossMarginPairs
     */
    readonly symbol?: string;
}

/**
 * Request parameters for getAllIsolatedMarginSymbol operation in MarketDataApi.
 * @interface GetAllIsolatedMarginSymbolRequest
 */
export interface GetAllIsolatedMarginSymbolRequest {
    /**
     * isolated margin pair
     * @type {string}
     * @memberof MarketDataApiGetAllIsolatedMarginSymbol
     */
    readonly symbol?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof MarketDataApiGetAllIsolatedMarginSymbol
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getAllMarginAssets operation in MarketDataApi.
 * @interface GetAllMarginAssetsRequest
 */
export interface GetAllMarginAssetsRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiGetAllMarginAssets
     */
    readonly asset?: string;
}

/**
 * Request parameters for getDelistSchedule operation in MarketDataApi.
 * @interface GetDelistScheduleRequest
 */
export interface GetDelistScheduleRequest {
    /**
     * No more than 60000
     * @type {number}
     * @memberof MarketDataApiGetDelistSchedule
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryIsolatedMarginTierData operation in MarketDataApi.
 * @interface QueryIsolatedMarginTierDataRequest
 */
export interface QueryIsolatedMarginTierDataRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiQueryIsolatedMarginTierData
     */
    readonly symbol: string;

    /**
     * All margin tier data will be returned if tier is omitted
     * @type {number}
     * @memberof MarketDataApiQueryIsolatedMarginTierData
     */
    readonly tier?: number;

    /**
     * No more than 60000
     * @type {number}
     * @memberof MarketDataApiQueryIsolatedMarginTierData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryMarginAvailableInventory operation in MarketDataApi.
 * @interface QueryMarginAvailableInventoryRequest
 */
export interface QueryMarginAvailableInventoryRequest {
    /**
     * `MARGIN`,`ISOLATED`
     * @type {string}
     * @memberof MarketDataApiQueryMarginAvailableInventory
     */
    readonly type: string;
}

/**
 * Request parameters for queryMarginPriceindex operation in MarketDataApi.
 * @interface QueryMarginPriceindexRequest
 */
export interface QueryMarginPriceindexRequest {
    /**
     *
     * @type {string}
     * @memberof MarketDataApiQueryMarginPriceindex
     */
    readonly symbol: string;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration);
    }

    /**
     * Cross margin collateral ratio
     *
     * Weight: 100(IP)
     *
     * @summary Cross margin collateral ratio (MARKET_DATA)
     * @returns {Promise<RestApiResponse<CrossMarginCollateralRatioResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Cross-margin-collateral-ratio Binance API Documentation}
     */
    public async crossMarginCollateralRatio(): Promise<
        RestApiResponse<CrossMarginCollateralRatioResponse>
        > {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.crossMarginCollateralRatio();
        return sendRequest<CrossMarginCollateralRatioResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get All Cross Margin Pairs
     *
     * Weight: 1(IP)
     *
     * @summary Get All Cross Margin Pairs (MARKET_DATA)
     * @param {GetAllCrossMarginPairsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllCrossMarginPairsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Cross-Margin-Pairs Binance API Documentation}
     */
    public async getAllCrossMarginPairs(
        requestParameters: GetAllCrossMarginPairsRequest = {}
    ): Promise<RestApiResponse<GetAllCrossMarginPairsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getAllCrossMarginPairs(
            requestParameters?.symbol
        );
        return sendRequest<GetAllCrossMarginPairsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get All Isolated Margin Symbol
     *
     * Weight: 10(IP)
     *
     * @summary Get All Isolated Margin Symbol(MARKET_DATA)
     * @param {GetAllIsolatedMarginSymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllIsolatedMarginSymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Isolated-Margin-Symbol Binance API Documentation}
     */
    public async getAllIsolatedMarginSymbol(
        requestParameters: GetAllIsolatedMarginSymbolRequest = {}
    ): Promise<RestApiResponse<GetAllIsolatedMarginSymbolResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getAllIsolatedMarginSymbol(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<GetAllIsolatedMarginSymbolResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get All Margin Assets.
     *
     * Weight: 1(IP)
     *
     * @summary Get All Margin Assets (MARKET_DATA)
     * @param {GetAllMarginAssetsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAllMarginAssetsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-All-Margin-Assets Binance API Documentation}
     */
    public async getAllMarginAssets(
        requestParameters: GetAllMarginAssetsRequest = {}
    ): Promise<RestApiResponse<GetAllMarginAssetsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getAllMarginAssets(
            requestParameters?.asset
        );
        return sendRequest<GetAllMarginAssetsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get tokens or symbols delist schedule for cross margin and isolated margin
     *
     * Weight: 100
     *
     * @summary Get Delist Schedule (MARKET_DATA)
     * @param {GetDelistScheduleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDelistScheduleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Get-Delist-Schedule Binance API Documentation}
     */
    public async getDelistSchedule(
        requestParameters: GetDelistScheduleRequest = {}
    ): Promise<RestApiResponse<GetDelistScheduleResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getDelistSchedule(
            requestParameters?.recvWindow
        );
        return sendRequest<GetDelistScheduleResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
     *
     * Weight: 1(IP)
     *
     * @summary Query Isolated Margin Tier Data (USER_DATA)
     * @param {QueryIsolatedMarginTierDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryIsolatedMarginTierDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Isolated-Margin-Tier-Data Binance API Documentation}
     */
    public async queryIsolatedMarginTierData(
        requestParameters: QueryIsolatedMarginTierDataRequest
    ): Promise<RestApiResponse<QueryIsolatedMarginTierDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryIsolatedMarginTierData(
            requestParameters?.symbol,
            requestParameters?.tier,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryIsolatedMarginTierDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Liability Coin Leverage Bracket in Cross Margin Pro Mode
     *
     * Weight: 1
     *
     * @summary Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)
     * @returns {Promise<RestApiResponse<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Liability-Coin-Leverage-Bracket-in-Cross-Margin-Pro-Mode Binance API Documentation}
     */
    public async queryLiabilityCoinLeverageBracketInCrossMarginProMode(): Promise<
        RestApiResponse<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>
        > {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryLiabilityCoinLeverageBracketInCrossMarginProMode();
        return sendRequest<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Margin available Inventory query
     *
     * Weight: 50
     *
     * @summary Query Margin Available Inventory(USER_DATA)
     * @param {QueryMarginAvailableInventoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginAvailableInventoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-margin-avaliable-inventory Binance API Documentation}
     */
    public async queryMarginAvailableInventory(
        requestParameters: QueryMarginAvailableInventoryRequest
    ): Promise<RestApiResponse<QueryMarginAvailableInventoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryMarginAvailableInventory(
                requestParameters?.type
            );
        return sendRequest<QueryMarginAvailableInventoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Margin PriceIndex
     *
     * Weight: 10(IP)
     *
     * @summary Query Margin PriceIndex (MARKET_DATA)
     * @param {QueryMarginPriceindexRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMarginPriceindexResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/margin_trading/market-data/Query-Margin-PriceIndex Binance API Documentation}
     */
    public async queryMarginPriceindex(
        requestParameters: QueryMarginPriceindexRequest
    ): Promise<RestApiResponse<QueryMarginPriceindexResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryMarginPriceindex(
            requestParameters?.symbol
        );
        return sendRequest<QueryMarginPriceindexResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
