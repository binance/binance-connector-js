/**
 * Binance Public Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Public Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetCrossMarginTransferHistoryResponse,
    QueryMaxTransferOutAmountResponse,
} from '../types';

/**
 * TransferApi - axios parameter creator
 */
const TransferApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Cross Margin Transfer History
         *
         * Response in descending order
         * The max interval between `startTime` and `endTime` is 30 days.
         * Returns data for last 7 days by default
         *
         * Weight: 1(IP)
         *
         * @summary Get Cross Margin Transfer History (USER_DATA)
         * @param {string} [asset]
         * @param {string} [type] Transfer Type: ROLL_IN, ROLL_OUT
         * @param {number} [startTime] 只支持查询最近90天的数据
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        getCrossMarginTransferHistory: async (
            asset?: string,
            type?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            isolatedSymbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (isolatedSymbol !== undefined && isolatedSymbol !== null) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/transfer',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Max Transfer-Out Amount
         *
         * If isolatedSymbol is not sent, crossed margin data will be sent.
         *
         * Weight: 50(IP)
         *
         * @summary Query Max Transfer-Out Amount (USER_DATA)
         * @param {string} asset
         * @param {string} [isolatedSymbol] isolated symbol
         * @param {number} [recvWindow] No more than 60000
         *
         * @throws {RequiredError}
         */
        queryMaxTransferOutAmount: async (
            asset: string,
            isolatedSymbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('queryMaxTransferOutAmount', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (isolatedSymbol !== undefined && isolatedSymbol !== null) {
                localVarQueryParameter['isolatedSymbol'] = isolatedSymbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/margin/maxTransferable',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TransferApi - interface
 * @interface TransferApi
 */
export interface TransferApiInterface {
    /**
     * Get Cross Margin Transfer History
     *
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 30 days.
     * Returns data for last 7 days by default
     *
     * Weight: 1(IP)
     *
     * @summary Get Cross Margin Transfer History (USER_DATA)
     * @param {GetCrossMarginTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TransferApiInterface
     */
    getCrossMarginTransferHistory(
        requestParameters?: GetCrossMarginTransferHistoryRequest
    ): Promise<RestApiResponse<GetCrossMarginTransferHistoryResponse>>;
    /**
     * Query Max Transfer-Out Amount
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Transfer-Out Amount (USER_DATA)
     * @param {QueryMaxTransferOutAmountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TransferApiInterface
     */
    queryMaxTransferOutAmount(
        requestParameters: QueryMaxTransferOutAmountRequest
    ): Promise<RestApiResponse<QueryMaxTransferOutAmountResponse>>;
}

/**
 * Request parameters for getCrossMarginTransferHistory operation in TransferApi.
 * @interface GetCrossMarginTransferHistoryRequest
 */
export interface GetCrossMarginTransferHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly asset?: string;

    /**
     * Transfer Type: ROLL_IN, ROLL_OUT
     * @type {string}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly type?: string;

    /**
     * 只支持查询最近90天的数据
     * @type {number}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly current?: number;

    /**
     * Default:10 Max:100
     * @type {number}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly size?: number;

    /**
     * isolated symbol
     * @type {string}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly isolatedSymbol?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof TransferApiGetCrossMarginTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryMaxTransferOutAmount operation in TransferApi.
 * @interface QueryMaxTransferOutAmountRequest
 */
export interface QueryMaxTransferOutAmountRequest {
    /**
     *
     * @type {string}
     * @memberof TransferApiQueryMaxTransferOutAmount
     */
    readonly asset: string;

    /**
     * isolated symbol
     * @type {string}
     * @memberof TransferApiQueryMaxTransferOutAmount
     */
    readonly isolatedSymbol?: string;

    /**
     * No more than 60000
     * @type {number}
     * @memberof TransferApiQueryMaxTransferOutAmount
     */
    readonly recvWindow?: number;
}

/**
 * TransferApi - object-oriented interface
 * @class TransferApi
 */
export class TransferApi implements TransferApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TransferApiAxiosParamCreator(configuration);
    }

    /**
     * Get Cross Margin Transfer History
     *
     * Response in descending order
     * The max interval between `startTime` and `endTime` is 30 days.
     * Returns data for last 7 days by default
     *
     * Weight: 1(IP)
     *
     * @summary Get Cross Margin Transfer History (USER_DATA)
     * @param {GetCrossMarginTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCrossMarginTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TransferApi
     * @see {@link https://developers.binance.com/docs/margin_trading/transfer/Get-Cross-Margin-Transfer-History Binance API Documentation}
     */
    public async getCrossMarginTransferHistory(
        requestParameters: GetCrossMarginTransferHistoryRequest = {}
    ): Promise<RestApiResponse<GetCrossMarginTransferHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getCrossMarginTransferHistory(
                requestParameters?.asset,
                requestParameters?.type,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.isolatedSymbol,
                requestParameters?.recvWindow
            );
        return sendRequest<GetCrossMarginTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Max Transfer-Out Amount
     *
     * If isolatedSymbol is not sent, crossed margin data will be sent.
     *
     * Weight: 50(IP)
     *
     * @summary Query Max Transfer-Out Amount (USER_DATA)
     * @param {QueryMaxTransferOutAmountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryMaxTransferOutAmountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TransferApi
     * @see {@link https://developers.binance.com/docs/margin_trading/transfer/Query-Max-Transfer-Out-Amount Binance API Documentation}
     */
    public async queryMaxTransferOutAmount(
        requestParameters: QueryMaxTransferOutAmountRequest
    ): Promise<RestApiResponse<QueryMaxTransferOutAmountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryMaxTransferOutAmount(
            requestParameters?.asset,
            requestParameters?.isolatedSymbol,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryMaxTransferOutAmountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
