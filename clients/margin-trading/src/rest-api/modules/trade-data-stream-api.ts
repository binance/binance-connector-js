/**
 * Binance Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    StartIsolatedMarginUserDataStreamResponse,
    StartMarginUserDataStreamResponse,
} from '../types';

/**
 * TradeDataStreamApi - axios parameter creator
 */
const TradeDataStreamApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Close out a isolated margin user data stream.
         *
         * Weight: 3000
         *
         * @summary Close Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol
         * @param {string} listenkey
         *
         * @throws {RequiredError}
         */
        closeIsolatedMarginUserDataStream: async (
            symbol: string,
            listenkey: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('closeIsolatedMarginUserDataStream', 'symbol', symbol);
            // verify required parameter 'listenkey' is not null or undefined
            assertParamExists('closeIsolatedMarginUserDataStream', 'listenkey', listenkey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (listenkey !== undefined && listenkey !== null) {
                localVarQueryParameter['listenkey'] = listenkey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream/isolated',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Close out a Margin user data stream.
         *
         * Weight: 3000
         *
         * @summary Close Margin User Data Stream (USER_STREAM)
         * @param {string} listenkey
         *
         * @throws {RequiredError}
         */
        closeMarginUserDataStream: async (listenkey: string): Promise<RequestArgs> => {
            // verify required parameter 'listenkey' is not null or undefined
            assertParamExists('closeMarginUserDataStream', 'listenkey', listenkey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (listenkey !== undefined && listenkey !== null) {
                localVarQueryParameter['listenkey'] = listenkey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Keepalive an isolated margin user data stream to prevent a time out.
         *
         * Weight: 1
         *
         * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol
         * @param {string} listenKey
         *
         * @throws {RequiredError}
         */
        keepaliveIsolatedMarginUserDataStream: async (
            symbol: string,
            listenKey: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('keepaliveIsolatedMarginUserDataStream', 'symbol', symbol);
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('keepaliveIsolatedMarginUserDataStream', 'listenKey', listenKey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (listenKey !== undefined && listenKey !== null) {
                localVarQueryParameter['listenKey'] = listenKey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream/isolated',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Keepalive a margin user data stream to prevent a time out.
         *
         * Weight: 1
         *
         * @summary Keepalive Margin User Data Stream (USER_STREAM)
         * @param {string} listenKey
         *
         * @throws {RequiredError}
         */
        keepaliveMarginUserDataStream: async (listenKey: string): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('keepaliveMarginUserDataStream', 'listenKey', listenKey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (listenKey !== undefined && listenKey !== null) {
                localVarQueryParameter['listenKey'] = listenKey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         *
         * Weight: 1
         *
         * @summary Start Isolated Margin User Data Stream (USER_STREAM)
         * @param {string} symbol
         *
         * @throws {RequiredError}
         */
        startIsolatedMarginUserDataStream: async (symbol: string): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('startIsolatedMarginUserDataStream', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream/isolated',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
         *
         * Weight: 1
         *
         * @summary Start Margin User Data Stream (USER_STREAM)
         *
         * @throws {RequiredError}
         */
        startMarginUserDataStream: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/userDataStream',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TradeDataStreamApi - interface
 * @interface TradeDataStreamApi
 */
export interface TradeDataStreamApiInterface {
    /**
     * Close out a isolated margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Isolated Margin User Data Stream (USER_STREAM)
     * @param {CloseIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    closeIsolatedMarginUserDataStream(
        requestParameters: CloseIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Close out a Margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Margin User Data Stream (USER_STREAM)
     * @param {CloseMarginUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    closeMarginUserDataStream(
        requestParameters: CloseMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Keepalive an isolated margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    keepaliveIsolatedMarginUserDataStream(
        requestParameters: KeepaliveIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Keepalive a margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveMarginUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    keepaliveMarginUserDataStream(
        requestParameters: KeepaliveMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Isolated Margin User Data Stream (USER_STREAM)
     * @param {StartIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    startIsolatedMarginUserDataStream(
        requestParameters: StartIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<StartIsolatedMarginUserDataStreamResponse>>;
    /**
     * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Margin User Data Stream (USER_STREAM)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApiInterface
     */
    startMarginUserDataStream(): Promise<RestApiResponse<StartMarginUserDataStreamResponse>>;
}

/**
 * Request parameters for closeIsolatedMarginUserDataStream operation in TradeDataStreamApi.
 * @interface CloseIsolatedMarginUserDataStreamRequest
 */
export interface CloseIsolatedMarginUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiCloseIsolatedMarginUserDataStream
     */
    readonly symbol: string;

    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiCloseIsolatedMarginUserDataStream
     */
    readonly listenkey: string;
}

/**
 * Request parameters for closeMarginUserDataStream operation in TradeDataStreamApi.
 * @interface CloseMarginUserDataStreamRequest
 */
export interface CloseMarginUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiCloseMarginUserDataStream
     */
    readonly listenkey: string;
}

/**
 * Request parameters for keepaliveIsolatedMarginUserDataStream operation in TradeDataStreamApi.
 * @interface KeepaliveIsolatedMarginUserDataStreamRequest
 */
export interface KeepaliveIsolatedMarginUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiKeepaliveIsolatedMarginUserDataStream
     */
    readonly symbol: string;

    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiKeepaliveIsolatedMarginUserDataStream
     */
    readonly listenKey: string;
}

/**
 * Request parameters for keepaliveMarginUserDataStream operation in TradeDataStreamApi.
 * @interface KeepaliveMarginUserDataStreamRequest
 */
export interface KeepaliveMarginUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiKeepaliveMarginUserDataStream
     */
    readonly listenKey: string;
}

/**
 * Request parameters for startIsolatedMarginUserDataStream operation in TradeDataStreamApi.
 * @interface StartIsolatedMarginUserDataStreamRequest
 */
export interface StartIsolatedMarginUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof TradeDataStreamApiStartIsolatedMarginUserDataStream
     */
    readonly symbol: string;
}

/**
 * TradeDataStreamApi - object-oriented interface
 * @class TradeDataStreamApi
 */
export class TradeDataStreamApi implements TradeDataStreamApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TradeDataStreamApiAxiosParamCreator(configuration);
    }

    /**
     * Close out a isolated margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Isolated Margin User Data Stream (USER_STREAM)
     * @param {CloseIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    public async closeIsolatedMarginUserDataStream(
        requestParameters: CloseIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.closeIsolatedMarginUserDataStream(
                requestParameters?.symbol,
                requestParameters?.listenkey
            );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Close out a Margin user data stream.
     *
     * Weight: 3000
     *
     * @summary Close Margin User Data Stream (USER_STREAM)
     * @param {CloseMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Close-Margin-User-Data-Stream Binance API Documentation}
     */
    public async closeMarginUserDataStream(
        requestParameters: CloseMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.closeMarginUserDataStream(
            requestParameters?.listenkey
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Keepalive an isolated margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Isolated Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    public async keepaliveIsolatedMarginUserDataStream(
        requestParameters: KeepaliveIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.keepaliveIsolatedMarginUserDataStream(
                requestParameters?.symbol,
                requestParameters?.listenKey
            );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Keepalive a margin user data stream to prevent a time out.
     *
     * Weight: 1
     *
     * @summary Keepalive Margin User Data Stream (USER_STREAM)
     * @param {KeepaliveMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Keepalive-Margin-User-Data-Stream Binance API Documentation}
     */
    public async keepaliveMarginUserDataStream(
        requestParameters: KeepaliveMarginUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.keepaliveMarginUserDataStream(
                requestParameters?.listenKey
            );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Start a new isolated margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Isolated Margin User Data Stream (USER_STREAM)
     * @param {StartIsolatedMarginUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<StartIsolatedMarginUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Isolated-Margin-User-Data-Stream Binance API Documentation}
     */
    public async startIsolatedMarginUserDataStream(
        requestParameters: StartIsolatedMarginUserDataStreamRequest
    ): Promise<RestApiResponse<StartIsolatedMarginUserDataStreamResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.startIsolatedMarginUserDataStream(
                requestParameters?.symbol
            );
        return sendRequest<StartIsolatedMarginUserDataStreamResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Start a new margin user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start Margin User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<StartMarginUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TradeDataStreamApi
     * @see {@link https://developers.binance.com/docs/margin_trading/trade-data-stream/Start-Margin-User-Data-Stream Binance API Documentation}
     */
    public async startMarginUserDataStream(): Promise<
        RestApiResponse<StartMarginUserDataStreamResponse>
        > {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.startMarginUserDataStream();
        return sendRequest<StartMarginUserDataStreamResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
