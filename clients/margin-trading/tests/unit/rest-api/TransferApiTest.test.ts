/**
 * Binance Public Margin Trading REST API
 *
 * OpenAPI Specification for the Binance Public Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { TransferApi } from '../../../src/rest-api';
import {
    GetCrossMarginTransferHistoryRequest,
    QueryMaxTransferOutAmountRequest,
} from '../../../src/rest-api';
import type {
    GetCrossMarginTransferHistoryResponse,
    QueryMaxTransferOutAmountResponse,
} from '../../../src/rest-api/types';

describe('TransferApi', () => {
    let client: TransferApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new TransferApi(config);
    });

    describe('getCrossMarginTransferHistory()', () => {
        it('should execute getCrossMarginTransferHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        amount: '0.10000000',
                        asset: 'BNB',
                        status: 'CONFIRMED',
                        timestamp: 1566898617,
                        txId: 5240372201,
                        type: 'ROLL_IN',
                        transFrom: 'SPOT',
                        transTo: 'ISOLATED_MARGIN',
                    },
                    {
                        amount: '5.00000000',
                        asset: 'USDT',
                        status: 'CONFIRMED',
                        timestamp: 1566888436,
                        txId: 5239810406,
                        type: 'ROLL_OUT',
                        transFrom: 'ISOLATED_MARGIN',
                        transTo: 'ISOLATED_MARGIN',
                        fromSymbol: 'BNBUSDT',
                        toSymbol: 'BTCUSDT',
                    },
                    {
                        amount: '1.00000000',
                        asset: 'EOS',
                        status: 'CONFIRMED',
                        timestamp: 1566888403,
                        txId: 5239808703,
                        type: 'ROLL_IN',
                    },
                ],
                total: 3,
            };

            const spy = jest.spyOn(client, 'getCrossMarginTransferHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCrossMarginTransferHistoryResponse>)
            );
            const response = await client.getCrossMarginTransferHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getCrossMarginTransferHistory() successfully with optional parameters', async () => {
            const params: GetCrossMarginTransferHistoryRequest = {
                asset: 'asset_example',
                type: 'type_example',
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                size: 10,
                isolatedSymbol: 'isolatedSymbol_example',
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        amount: '0.10000000',
                        asset: 'BNB',
                        status: 'CONFIRMED',
                        timestamp: 1566898617,
                        txId: 5240372201,
                        type: 'ROLL_IN',
                        transFrom: 'SPOT',
                        transTo: 'ISOLATED_MARGIN',
                    },
                    {
                        amount: '5.00000000',
                        asset: 'USDT',
                        status: 'CONFIRMED',
                        timestamp: 1566888436,
                        txId: 5239810406,
                        type: 'ROLL_OUT',
                        transFrom: 'ISOLATED_MARGIN',
                        transTo: 'ISOLATED_MARGIN',
                        fromSymbol: 'BNBUSDT',
                        toSymbol: 'BTCUSDT',
                    },
                    {
                        amount: '1.00000000',
                        asset: 'EOS',
                        status: 'CONFIRMED',
                        timestamp: 1566888403,
                        txId: 5239808703,
                        type: 'ROLL_IN',
                    },
                ],
                total: 3,
            };

            const spy = jest.spyOn(client, 'getCrossMarginTransferHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCrossMarginTransferHistoryResponse>)
            );
            const response = await client.getCrossMarginTransferHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getCrossMarginTransferHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getCrossMarginTransferHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('queryMaxTransferOutAmount()', () => {
        it('should execute queryMaxTransferOutAmount() successfully with required parameters only', async () => {
            const params: QueryMaxTransferOutAmountRequest = {
                asset: 'asset_example',
            };

            mockResponse = { amount: '3.59498107' };

            const spy = jest.spyOn(client, 'queryMaxTransferOutAmount').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<QueryMaxTransferOutAmountResponse>)
            );
            const response = await client.queryMaxTransferOutAmount(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute queryMaxTransferOutAmount() successfully with optional parameters', async () => {
            const params: QueryMaxTransferOutAmountRequest = {
                asset: 'asset_example',
                isolatedSymbol: 'isolatedSymbol_example',
                recvWindow: 5000,
            };

            mockResponse = { amount: '3.59498107' };

            const spy = jest.spyOn(client, 'queryMaxTransferOutAmount').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<QueryMaxTransferOutAmountResponse>)
            );
            const response = await client.queryMaxTransferOutAmount(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when asset is missing', async () => {
            const _params: QueryMaxTransferOutAmountRequest = {
                asset: 'asset_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.asset;

            await expect(client.queryMaxTransferOutAmount(params)).rejects.toThrow(
                'Required parameter asset was null or undefined when calling queryMaxTransferOutAmount.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: QueryMaxTransferOutAmountRequest = {
                asset: 'asset_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'queryMaxTransferOutAmount')
                .mockRejectedValueOnce(mockError);
            await expect(client.queryMaxTransferOutAmount(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
