/**
 * Binance C2C REST API
 *
 * OpenAPI Specification for the Binance C2C REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { C2CApi } from '../../../src/rest-api';
import { GetC2CTradeHistoryRequest } from '../../../src/rest-api';
import type { GetC2CTradeHistoryResponse } from '../../../src/rest-api/types';

describe('C2CApi', () => {
    let client: C2CApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new C2CApi(config);
    });

    describe('getC2CTradeHistory()', () => {
        it('should execute getC2CTradeHistory() successfully with required parameters only', async () => {
            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNumber: '20219644646554779648',
                        advNo: '11218246497340923904',
                        tradeType: 'SELL',
                        asset: 'BUSD',
                        fiat: 'CNY',
                        fiatSymbol: '￥',
                        amount: '5000.00000000',
                        totalPrice: '33400.00000000',
                        unitPrice: '6.68',
                        orderStatus: 'COMPLETED',
                        createTime: 1619361369000,
                        commission: '0',
                        counterPartNickName: 'ab***',
                        advertisementRole: 'TAKER',
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getC2CTradeHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetC2CTradeHistoryResponse>)
            );
            const response = await client.getC2CTradeHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getC2CTradeHistory() successfully with optional parameters', async () => {
            const params: GetC2CTradeHistoryRequest = {
                startTime: 1623319461670,
                endTime: 1641782889000,
                page: 1,
                recvWindow: 5000,
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNumber: '20219644646554779648',
                        advNo: '11218246497340923904',
                        tradeType: 'SELL',
                        asset: 'BUSD',
                        fiat: 'CNY',
                        fiatSymbol: '￥',
                        amount: '5000.00000000',
                        totalPrice: '33400.00000000',
                        unitPrice: '6.68',
                        orderStatus: 'COMPLETED',
                        createTime: 1619361369000,
                        commission: '0',
                        counterPartNickName: 'ab***',
                        advertisementRole: 'TAKER',
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getC2CTradeHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetC2CTradeHistoryResponse>)
            );
            const response = await client.getC2CTradeHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'getC2CTradeHistory').mockRejectedValueOnce(mockError);
            await expect(client.getC2CTradeHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
