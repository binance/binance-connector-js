/**
 * Binance Public Staking REST API
 *
 * OpenAPI Specification for the Binance Public Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    ClaimBoostRewardsResponse,
    GetBnsolRateHistoryResponse,
    GetBnsolRewardsHistoryResponse,
    GetBoostRewardsHistoryResponse,
    GetSolRedemptionHistoryResponse,
    GetSolStakingHistoryResponse,
    GetSolStakingQuotaDetailsResponse,
    GetUnclaimedRewardsResponse,
    RedeemSolResponse,
    SolStakingAccountResponse,
    SubscribeSolStakingResponse,
} from '../types';

/**
 * SolStakingApi - axios parameter creator
 */
const SolStakingApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Claim Boost APR Airdrop Rewards
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Claim Boost Rewards(TRADE)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        claimBoostRewards: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/claim',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BNSOL Rate History
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BNSOL Rate History(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getBnsolRateHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get BNSOL rewards history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get BNSOL rewards history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getBnsolRewardsHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/bnsolRewardsHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Boost rewards history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Boost Rewards History(USER_DATA)
         * @param {string} type "CLAIM", "DISTRIBUTE", default "CLAIM"
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getBoostRewardsHistory: async (
            type: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getBoostRewardsHistory', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/boostRewardsHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get SOL redemption history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get SOL redemption history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSolRedemptionHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/redemptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get SOL staking history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get SOL staking history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSolStakingHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/stakingHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get SOL staking quota
         *
         * Weight: 150
         *
         * @summary Get SOL staking quota details(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getSolStakingQuotaDetails: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/quota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Unclaimed rewards
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get Unclaimed Rewards(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getUnclaimedRewards: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/history/unclaimedRewards',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem BNSOL get SOL
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Redeem SOL(TRADE)
         * @param {number} amount Amount in SOL.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemSol: async (amount: number, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('redeemSol', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * SOL Staking account
         *
         * Weight: 150
         *
         * @summary SOL Staking account(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        solStakingAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe SOL Staking
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Subscribe SOL Staking(TRADE)
         * @param {number} amount Amount in SOL.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeSolStaking: async (amount: number, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeSolStaking', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/sol-staking/sol/stake',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * SolStakingApi - interface
 * @interface SolStakingApi
 */
export interface SolStakingApiInterface {
    /**
     * Claim Boost APR Airdrop Rewards
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Claim Boost Rewards(TRADE)
     * @param {ClaimBoostRewardsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    claimBoostRewards(
        requestParameters?: ClaimBoostRewardsRequest
    ): Promise<RestApiResponse<ClaimBoostRewardsResponse>>;
    /**
     * Get BNSOL Rate History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BNSOL Rate History(USER_DATA)
     * @param {GetBnsolRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getBnsolRateHistory(
        requestParameters?: GetBnsolRateHistoryRequest
    ): Promise<RestApiResponse<GetBnsolRateHistoryResponse>>;
    /**
     * Get BNSOL rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BNSOL rewards history(USER_DATA)
     * @param {GetBnsolRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getBnsolRewardsHistory(
        requestParameters?: GetBnsolRewardsHistoryRequest
    ): Promise<RestApiResponse<GetBnsolRewardsHistoryResponse>>;
    /**
     * Get Boost rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Boost Rewards History(USER_DATA)
     * @param {GetBoostRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getBoostRewardsHistory(
        requestParameters: GetBoostRewardsHistoryRequest
    ): Promise<RestApiResponse<GetBoostRewardsHistoryResponse>>;
    /**
     * Get SOL redemption history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get SOL redemption history(USER_DATA)
     * @param {GetSolRedemptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getSolRedemptionHistory(
        requestParameters?: GetSolRedemptionHistoryRequest
    ): Promise<RestApiResponse<GetSolRedemptionHistoryResponse>>;
    /**
     * Get SOL staking history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get SOL staking history(USER_DATA)
     * @param {GetSolStakingHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getSolStakingHistory(
        requestParameters?: GetSolStakingHistoryRequest
    ): Promise<RestApiResponse<GetSolStakingHistoryResponse>>;
    /**
     * Get SOL staking quota
     *
     * Weight: 150
     *
     * @summary Get SOL staking quota details(USER_DATA)
     * @param {GetSolStakingQuotaDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getSolStakingQuotaDetails(
        requestParameters?: GetSolStakingQuotaDetailsRequest
    ): Promise<RestApiResponse<GetSolStakingQuotaDetailsResponse>>;
    /**
     * Get Unclaimed rewards
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Unclaimed Rewards(USER_DATA)
     * @param {GetUnclaimedRewardsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    getUnclaimedRewards(
        requestParameters?: GetUnclaimedRewardsRequest
    ): Promise<RestApiResponse<GetUnclaimedRewardsResponse>>;
    /**
     * Redeem BNSOL get SOL
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem SOL(TRADE)
     * @param {RedeemSolRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    redeemSol(requestParameters: RedeemSolRequest): Promise<RestApiResponse<RedeemSolResponse>>;
    /**
     * SOL Staking account
     *
     * Weight: 150
     *
     * @summary SOL Staking account(USER_DATA)
     * @param {SolStakingAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    solStakingAccount(
        requestParameters?: SolStakingAccountRequest
    ): Promise<RestApiResponse<SolStakingAccountResponse>>;
    /**
     * Subscribe SOL Staking
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe SOL Staking(TRADE)
     * @param {SubscribeSolStakingRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApiInterface
     */
    subscribeSolStaking(
        requestParameters: SubscribeSolStakingRequest
    ): Promise<RestApiResponse<SubscribeSolStakingResponse>>;
}

/**
 * Request parameters for claimBoostRewards operation in SolStakingApi.
 * @interface ClaimBoostRewardsRequest
 */
export interface ClaimBoostRewardsRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiClaimBoostRewards
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBnsolRateHistory operation in SolStakingApi.
 * @interface GetBnsolRateHistoryRequest
 */
export interface GetBnsolRateHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SolStakingApiGetBnsolRateHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SolStakingApiGetBnsolRateHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBnsolRewardsHistory operation in SolStakingApi.
 * @interface GetBnsolRewardsHistoryRequest
 */
export interface GetBnsolRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SolStakingApiGetBnsolRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SolStakingApiGetBnsolRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBnsolRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getBoostRewardsHistory operation in SolStakingApi.
 * @interface GetBoostRewardsHistoryRequest
 */
export interface GetBoostRewardsHistoryRequest {
    /**
     * "CLAIM", "DISTRIBUTE", default "CLAIM"
     * @type {string}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly type: string;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetBoostRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSolRedemptionHistory operation in SolStakingApi.
 * @interface GetSolRedemptionHistoryRequest
 */
export interface GetSolRedemptionHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolRedemptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolRedemptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SolStakingApiGetSolRedemptionHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SolStakingApiGetSolRedemptionHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolRedemptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSolStakingHistory operation in SolStakingApi.
 * @interface GetSolStakingHistoryRequest
 */
export interface GetSolStakingHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolStakingHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolStakingHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof SolStakingApiGetSolStakingHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof SolStakingApiGetSolStakingHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolStakingHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getSolStakingQuotaDetails operation in SolStakingApi.
 * @interface GetSolStakingQuotaDetailsRequest
 */
export interface GetSolStakingQuotaDetailsRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetSolStakingQuotaDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getUnclaimedRewards operation in SolStakingApi.
 * @interface GetUnclaimedRewardsRequest
 */
export interface GetUnclaimedRewardsRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiGetUnclaimedRewards
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemSol operation in SolStakingApi.
 * @interface RedeemSolRequest
 */
export interface RedeemSolRequest {
    /**
     * Amount in SOL.
     * @type {number}
     * @memberof SolStakingApiRedeemSol
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiRedeemSol
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for solStakingAccount operation in SolStakingApi.
 * @interface SolStakingAccountRequest
 */
export interface SolStakingAccountRequest {
    /**
     *
     * @type {number}
     * @memberof SolStakingApiSolStakingAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeSolStaking operation in SolStakingApi.
 * @interface SubscribeSolStakingRequest
 */
export interface SubscribeSolStakingRequest {
    /**
     * Amount in SOL.
     * @type {number}
     * @memberof SolStakingApiSubscribeSolStaking
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof SolStakingApiSubscribeSolStaking
     */
    readonly recvWindow?: number;
}

/**
 * SolStakingApi - object-oriented interface
 * @class SolStakingApi
 */
export class SolStakingApi implements SolStakingApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = SolStakingApiAxiosParamCreator(configuration);
    }

    /**
     * Claim Boost APR Airdrop Rewards
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Claim Boost Rewards(TRADE)
     * @param {ClaimBoostRewardsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ClaimBoostRewardsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/staking/Claim-Boost-Rewards Binance API Documentation}
     */
    public async claimBoostRewards(
        requestParameters: ClaimBoostRewardsRequest = {}
    ): Promise<RestApiResponse<ClaimBoostRewardsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.claimBoostRewards(
            requestParameters?.recvWindow
        );
        return sendRequest<ClaimBoostRewardsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BNSOL Rate History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BNSOL Rate History(USER_DATA)
     * @param {GetBnsolRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnsolRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-BNSOL-Rate-History Binance API Documentation}
     */
    public async getBnsolRateHistory(
        requestParameters: GetBnsolRateHistoryRequest = {}
    ): Promise<RestApiResponse<GetBnsolRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBnsolRateHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBnsolRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get BNSOL rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get BNSOL rewards history(USER_DATA)
     * @param {GetBnsolRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBnsolRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-BNSOL-rewards-history Binance API Documentation}
     */
    public async getBnsolRewardsHistory(
        requestParameters: GetBnsolRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetBnsolRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBnsolRewardsHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBnsolRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Boost rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Boost Rewards History(USER_DATA)
     * @param {GetBoostRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetBoostRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-Boost-Rewards-History Binance API Documentation}
     */
    public async getBoostRewardsHistory(
        requestParameters: GetBoostRewardsHistoryRequest
    ): Promise<RestApiResponse<GetBoostRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getBoostRewardsHistory(
            requestParameters?.type,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetBoostRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get SOL redemption history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get SOL redemption history(USER_DATA)
     * @param {GetSolRedemptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSolRedemptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-SOL-redemption-history Binance API Documentation}
     */
    public async getSolRedemptionHistory(
        requestParameters: GetSolRedemptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetSolRedemptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSolRedemptionHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetSolRedemptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get SOL staking history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get SOL staking history(USER_DATA)
     * @param {GetSolStakingHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSolStakingHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-SOL-staking-history Binance API Documentation}
     */
    public async getSolStakingHistory(
        requestParameters: GetSolStakingHistoryRequest = {}
    ): Promise<RestApiResponse<GetSolStakingHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSolStakingHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetSolStakingHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get SOL staking quota
     *
     * Weight: 150
     *
     * @summary Get SOL staking quota details(USER_DATA)
     * @param {GetSolStakingQuotaDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSolStakingQuotaDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/account/Get-SOL-staking-quota-details Binance API Documentation}
     */
    public async getSolStakingQuotaDetails(
        requestParameters: GetSolStakingQuotaDetailsRequest = {}
    ): Promise<RestApiResponse<GetSolStakingQuotaDetailsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getSolStakingQuotaDetails(
            requestParameters?.recvWindow
        );
        return sendRequest<GetSolStakingQuotaDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Unclaimed rewards
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Unclaimed Rewards(USER_DATA)
     * @param {GetUnclaimedRewardsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetUnclaimedRewardsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/history/Get-Unclaimed-Rewards Binance API Documentation}
     */
    public async getUnclaimedRewards(
        requestParameters: GetUnclaimedRewardsRequest = {}
    ): Promise<RestApiResponse<GetUnclaimedRewardsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getUnclaimedRewards(
            requestParameters?.recvWindow
        );
        return sendRequest<GetUnclaimedRewardsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem BNSOL get SOL
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem SOL(TRADE)
     * @param {RedeemSolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemSolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/staking/Redeem-SOL Binance API Documentation}
     */
    public async redeemSol(
        requestParameters: RedeemSolRequest
    ): Promise<RestApiResponse<RedeemSolResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemSol(
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemSolResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * SOL Staking account
     *
     * Weight: 150
     *
     * @summary SOL Staking account(USER_DATA)
     * @param {SolStakingAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SolStakingAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/account/SOL-Staking-account Binance API Documentation}
     */
    public async solStakingAccount(
        requestParameters: SolStakingAccountRequest = {}
    ): Promise<RestApiResponse<SolStakingAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.solStakingAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<SolStakingAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe SOL Staking
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe SOL Staking(TRADE)
     * @param {SubscribeSolStakingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeSolStakingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof SolStakingApi
     * @see {@link https://developers.binance.com/docs/staking/sol-staking/staking/Subscribe-SOL-Staking Binance API Documentation}
     */
    public async subscribeSolStaking(
        requestParameters: SubscribeSolStakingRequest
    ): Promise<RestApiResponse<SubscribeSolStakingResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeSolStaking(
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeSolStakingResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
