/**
 * Binance Staking REST API
 *
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetOnChainYieldsLockedPersonalLeftQuotaResponse,
    GetOnChainYieldsLockedProductListResponse,
    GetOnChainYieldsLockedProductPositionResponse,
    GetOnChainYieldsLockedRedemptionRecordResponse,
    GetOnChainYieldsLockedRewardsHistoryResponse,
    GetOnChainYieldsLockedSubscriptionPreviewResponse,
    GetOnChainYieldsLockedSubscriptionRecordResponse,
    OnChainYieldsAccountResponse,
    RedeemOnChainYieldsLockedProductResponse,
    SetOnChainYieldsLockedAutoSubscribeResponse,
    SetOnChainYieldsLockedProductRedeemOptionResponse,
    SubscribeOnChainYieldsLockedProductResponse,
} from '../types';

/**
 * OnChainYieldsApi - axios parameter creator
 */
const OnChainYieldsApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get On-chain Yields Locked Personal Left Quota
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Personal Left Quota (USER_DATA)
         * @param {string} projectId
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedPersonalLeftQuota: async (
            projectId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOnChainYieldsLockedPersonalLeftQuota', 'projectId', projectId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/personalLeftQuota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get available On-chain Yields Locked product list
         *
         * Get available On-chain Yields Locked product list
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Product List (USER_DATA)
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedProductList: async (
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get On-chain Yields Locked Product Position
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Product Position (USER_DATA)
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [positionId]
         * @param {string} [projectId]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedProductPosition: async (
            asset?: string,
            positionId?: number,
            projectId?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/position',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get On-chain Yields Locked Redemption Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Redemption Record (USER_DATA)
         * @param {number} [positionId]
         * @param {string} [redeemId]
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedRedemptionRecord: async (
            positionId?: number,
            redeemId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemId !== undefined && redeemId !== null) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/history/redemptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get On-chain Yields Locked Rewards History
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Rewards History (USER_DATA)
         * @param {string} [positionId]
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedRewardsHistory: async (
            positionId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/history/rewardsRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get On-chain Yields Locked Subscription Preview
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Subscription Preview (USER_DATA)
         * @param {string} projectId
         * @param {number} amount Amount in SOL.
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedSubscriptionPreview: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOnChainYieldsLockedSubscriptionPreview', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getOnChainYieldsLockedSubscriptionPreview', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/subscriptionPreview',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get On-chain Yields Locked Subscription Record
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 50
         *
         * @summary Get On-chain Yields Locked Subscription Record (USER_DATA)
         * @param {string} [purchaseId]
         * @param {string} [clientId]
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOnChainYieldsLockedSubscriptionRecord: async (
            purchaseId?: string,
            clientId?: string,
            asset?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (purchaseId !== undefined && purchaseId !== null) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (clientId !== undefined && clientId !== null) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/history/subscriptionRecord',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * On-chain Yields Account query
         *
         * Weight: 50
         *
         * @summary On-chain Yields Account (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        onChainYieldsAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem On-chain Yields Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 1/3s per account
         *
         * @summary Redeem On-chain Yields Locked Product (TRADE)
         * @param {string} positionId
         * @param {string} [channelId]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemOnChainYieldsLockedProduct: async (
            positionId: string,
            channelId?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('redeemOnChainYieldsLockedProduct', 'positionId', positionId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (channelId !== undefined && channelId !== null) {
                localVarQueryParameter['channelId'] = channelId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set On-chain Yield locked auto subscribe
         *
         * Weight: 50
         *
         * @summary Set On-chain Yields Locked Auto Subscribe(USER_DATA)
         * @param {string} positionId
         * @param {boolean} autoSubscribe true or false
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setOnChainYieldsLockedAutoSubscribe: async (
            positionId: string,
            autoSubscribe: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('setOnChainYieldsLockedAutoSubscribe', 'positionId', positionId);
            // verify required parameter 'autoSubscribe' is not null or undefined
            assertParamExists(
                'setOnChainYieldsLockedAutoSubscribe',
                'autoSubscribe',
                autoSubscribe
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/setAutoSubscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Set On-chain Yields redeem option for Locked product
         *
         * Weight: 50
         *
         * @summary Set On-chain Yields Locked Product Redeem Option(USER_DATA)
         * @param {string} positionId
         * @param {string} redeemTo 'SPOT','FLEXIBLE'
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        setOnChainYieldsLockedProductRedeemOption: async (
            positionId: string,
            redeemTo: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists(
                'setOnChainYieldsLockedProductRedeemOption',
                'positionId',
                positionId
            );
            // verify required parameter 'redeemTo' is not null or undefined
            assertParamExists('setOnChainYieldsLockedProductRedeemOption', 'redeemTo', redeemTo);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (positionId !== undefined && positionId !== null) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/setRedeemOption',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe On-chain Yields Locked Product
         *
         * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 200
         *
         * @summary Subscribe On-chain Yields Locked Product(TRADE)
         * @param {string} projectId
         * @param {number} amount Amount in SOL.
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] `SPOT`,`FUND`,`ALL`, default `SPOT`
         * @param {string} [redeemTo] `SPOT`,`FLEXIBLE`, default `FLEXIBLE` Takes effect when Auto Subscribe is false
         * @param {string} [channelId]
         * @param {string} [clientId]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeOnChainYieldsLockedProduct: async (
            projectId: string,
            amount: number,
            autoSubscribe?: boolean,
            sourceAccount?: string,
            redeemTo?: string,
            channelId?: string,
            clientId?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('subscribeOnChainYieldsLockedProduct', 'projectId', projectId);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeOnChainYieldsLockedProduct', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (projectId !== undefined && projectId !== null) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined && autoSubscribe !== null) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined && sourceAccount !== null) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (redeemTo !== undefined && redeemTo !== null) {
                localVarQueryParameter['redeemTo'] = redeemTo;
            }

            if (channelId !== undefined && channelId !== null) {
                localVarQueryParameter['channelId'] = channelId;
            }

            if (clientId !== undefined && clientId !== null) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/onchain-yields/locked/subscribe',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * OnChainYieldsApi - interface
 * @interface OnChainYieldsApi
 */
export interface OnChainYieldsApiInterface {
    /**
     * Get On-chain Yields Locked Personal Left Quota
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Personal Left Quota (USER_DATA)
     * @param {GetOnChainYieldsLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedPersonalLeftQuota(
        requestParameters: GetOnChainYieldsLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedPersonalLeftQuotaResponse>>;
    /**
     * Get available On-chain Yields Locked product list
     *
     * Get available On-chain Yields Locked product list
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Product List (USER_DATA)
     * @param {GetOnChainYieldsLockedProductListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedProductList(
        requestParameters?: GetOnChainYieldsLockedProductListRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedProductListResponse>>;
    /**
     * Get On-chain Yields Locked Product Position
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Product Position (USER_DATA)
     * @param {GetOnChainYieldsLockedProductPositionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedProductPosition(
        requestParameters?: GetOnChainYieldsLockedProductPositionRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedProductPositionResponse>>;
    /**
     * Get On-chain Yields Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Redemption Record (USER_DATA)
     * @param {GetOnChainYieldsLockedRedemptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedRedemptionRecord(
        requestParameters?: GetOnChainYieldsLockedRedemptionRecordRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedRedemptionRecordResponse>>;
    /**
     * Get On-chain Yields Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Rewards History (USER_DATA)
     * @param {GetOnChainYieldsLockedRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedRewardsHistory(
        requestParameters?: GetOnChainYieldsLockedRewardsHistoryRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedRewardsHistoryResponse>>;
    /**
     * Get On-chain Yields Locked Subscription Preview
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Subscription Preview (USER_DATA)
     * @param {GetOnChainYieldsLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedSubscriptionPreview(
        requestParameters: GetOnChainYieldsLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionPreviewResponse>>;
    /**
     * Get On-chain Yields Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Subscription Record (USER_DATA)
     * @param {GetOnChainYieldsLockedSubscriptionRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    getOnChainYieldsLockedSubscriptionRecord(
        requestParameters?: GetOnChainYieldsLockedSubscriptionRecordRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionRecordResponse>>;
    /**
     * On-chain Yields Account query
     *
     * Weight: 50
     *
     * @summary On-chain Yields Account (USER_DATA)
     * @param {OnChainYieldsAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    onChainYieldsAccount(
        requestParameters?: OnChainYieldsAccountRequest
    ): Promise<RestApiResponse<OnChainYieldsAccountResponse>>;
    /**
     * Redeem On-chain Yields Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem On-chain Yields Locked Product (TRADE)
     * @param {RedeemOnChainYieldsLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    redeemOnChainYieldsLockedProduct(
        requestParameters: RedeemOnChainYieldsLockedProductRequest
    ): Promise<RestApiResponse<RedeemOnChainYieldsLockedProductResponse>>;
    /**
     * Set On-chain Yield locked auto subscribe
     *
     * Weight: 50
     *
     * @summary Set On-chain Yields Locked Auto Subscribe(USER_DATA)
     * @param {SetOnChainYieldsLockedAutoSubscribeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    setOnChainYieldsLockedAutoSubscribe(
        requestParameters: SetOnChainYieldsLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetOnChainYieldsLockedAutoSubscribeResponse>>;
    /**
     * Set On-chain Yields redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set On-chain Yields Locked Product Redeem Option(USER_DATA)
     * @param {SetOnChainYieldsLockedProductRedeemOptionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    setOnChainYieldsLockedProductRedeemOption(
        requestParameters: SetOnChainYieldsLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetOnChainYieldsLockedProductRedeemOptionResponse>>;
    /**
     * Subscribe On-chain Yields Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 200
     *
     * @summary Subscribe On-chain Yields Locked Product(TRADE)
     * @param {SubscribeOnChainYieldsLockedProductRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApiInterface
     */
    subscribeOnChainYieldsLockedProduct(
        requestParameters: SubscribeOnChainYieldsLockedProductRequest
    ): Promise<RestApiResponse<SubscribeOnChainYieldsLockedProductResponse>>;
}

/**
 * Request parameters for getOnChainYieldsLockedPersonalLeftQuota operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedPersonalLeftQuotaRequest
 */
export interface GetOnChainYieldsLockedPersonalLeftQuotaRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedPersonalLeftQuota
     */
    readonly projectId: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedPersonalLeftQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedProductList operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedProductListRequest
 */
export interface GetOnChainYieldsLockedProductListRequest {
    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductList
     */
    readonly asset?: string;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductList
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductList
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedProductPosition operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedProductPositionRequest
 */
export interface GetOnChainYieldsLockedProductPositionRequest {
    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly projectId?: string;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedProductPosition
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedRedemptionRecord operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedRedemptionRecordRequest
 */
export interface GetOnChainYieldsLockedRedemptionRecordRequest {
    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly positionId?: number;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly redeemId?: string;

    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRedemptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedRewardsHistory operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedRewardsHistoryRequest
 */
export interface GetOnChainYieldsLockedRewardsHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly positionId?: string;

    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedSubscriptionPreview operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedSubscriptionPreviewRequest
 */
export interface GetOnChainYieldsLockedSubscriptionPreviewRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionPreview
     */
    readonly projectId: string;

    /**
     * Amount in SOL.
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionPreview
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionPreview
     */
    readonly autoSubscribe?: boolean;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionPreview
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOnChainYieldsLockedSubscriptionRecord operation in OnChainYieldsApi.
 * @interface GetOnChainYieldsLockedSubscriptionRecordRequest
 */
export interface GetOnChainYieldsLockedSubscriptionRecordRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly purchaseId?: string;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly clientId?: string;

    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiGetOnChainYieldsLockedSubscriptionRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for onChainYieldsAccount operation in OnChainYieldsApi.
 * @interface OnChainYieldsAccountRequest
 */
export interface OnChainYieldsAccountRequest {
    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiOnChainYieldsAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemOnChainYieldsLockedProduct operation in OnChainYieldsApi.
 * @interface RedeemOnChainYieldsLockedProductRequest
 */
export interface RedeemOnChainYieldsLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiRedeemOnChainYieldsLockedProduct
     */
    readonly positionId: string;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiRedeemOnChainYieldsLockedProduct
     */
    readonly channelId?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiRedeemOnChainYieldsLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setOnChainYieldsLockedAutoSubscribe operation in OnChainYieldsApi.
 * @interface SetOnChainYieldsLockedAutoSubscribeRequest
 */
export interface SetOnChainYieldsLockedAutoSubscribeRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedAutoSubscribe
     */
    readonly positionId: string;

    /**
     * true or false
     * @type {boolean}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedAutoSubscribe
     */
    readonly autoSubscribe: boolean;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedAutoSubscribe
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for setOnChainYieldsLockedProductRedeemOption operation in OnChainYieldsApi.
 * @interface SetOnChainYieldsLockedProductRedeemOptionRequest
 */
export interface SetOnChainYieldsLockedProductRedeemOptionRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedProductRedeemOption
     */
    readonly positionId: string;

    /**
     * 'SPOT','FLEXIBLE'
     * @type {string}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedProductRedeemOption
     */
    readonly redeemTo: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiSetOnChainYieldsLockedProductRedeemOption
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeOnChainYieldsLockedProduct operation in OnChainYieldsApi.
 * @interface SubscribeOnChainYieldsLockedProductRequest
 */
export interface SubscribeOnChainYieldsLockedProductRequest {
    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly projectId: string;

    /**
     * Amount in SOL.
     * @type {number}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly amount: number;

    /**
     * true or false, default true.
     * @type {boolean}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly autoSubscribe?: boolean;

    /**
     * `SPOT`,`FUND`,`ALL`, default `SPOT`
     * @type {string}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly sourceAccount?: string;

    /**
     * `SPOT`,`FLEXIBLE`, default `FLEXIBLE` Takes effect when Auto Subscribe is false
     * @type {string}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly redeemTo?: string;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly channelId?: string;

    /**
     *
     * @type {string}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly clientId?: string;

    /**
     *
     * @type {number}
     * @memberof OnChainYieldsApiSubscribeOnChainYieldsLockedProduct
     */
    readonly recvWindow?: number;
}

/**
 * OnChainYieldsApi - object-oriented interface
 * @class OnChainYieldsApi
 */
export class OnChainYieldsApi implements OnChainYieldsApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = OnChainYieldsApiAxiosParamCreator(configuration);
    }

    /**
     * Get On-chain Yields Locked Personal Left Quota
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Personal Left Quota (USER_DATA)
     * @param {GetOnChainYieldsLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedPersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Personal-Left-Quota Binance API Documentation}
     */
    public async getOnChainYieldsLockedPersonalLeftQuota(
        requestParameters: GetOnChainYieldsLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedPersonalLeftQuotaResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedPersonalLeftQuota(
                requestParameters?.projectId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedPersonalLeftQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get available On-chain Yields Locked product list
     *
     * Get available On-chain Yields Locked product list
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Product List (USER_DATA)
     * @param {GetOnChainYieldsLockedProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/account/ Binance API Documentation}
     */
    public async getOnChainYieldsLockedProductList(
        requestParameters: GetOnChainYieldsLockedProductListRequest = {}
    ): Promise<RestApiResponse<GetOnChainYieldsLockedProductListResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedProductList(
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedProductListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get On-chain Yields Locked Product Position
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Product Position (USER_DATA)
     * @param {GetOnChainYieldsLockedProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Product-Position Binance API Documentation}
     */
    public async getOnChainYieldsLockedProductPosition(
        requestParameters: GetOnChainYieldsLockedProductPositionRequest = {}
    ): Promise<RestApiResponse<GetOnChainYieldsLockedProductPositionResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedProductPosition(
                requestParameters?.asset,
                requestParameters?.positionId,
                requestParameters?.projectId,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedProductPositionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get On-chain Yields Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Redemption Record (USER_DATA)
     * @param {GetOnChainYieldsLockedRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Redemption-Record Binance API Documentation}
     */
    public async getOnChainYieldsLockedRedemptionRecord(
        requestParameters: GetOnChainYieldsLockedRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetOnChainYieldsLockedRedemptionRecordResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedRedemptionRecord(
                requestParameters?.positionId,
                requestParameters?.redeemId,
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedRedemptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get On-chain Yields Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Rewards History (USER_DATA)
     * @param {GetOnChainYieldsLockedRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Rewards-History Binance API Documentation}
     */
    public async getOnChainYieldsLockedRewardsHistory(
        requestParameters: GetOnChainYieldsLockedRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetOnChainYieldsLockedRewardsHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedRewardsHistory(
                requestParameters?.positionId,
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get On-chain Yields Locked Subscription Preview
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Subscription Preview (USER_DATA)
     * @param {GetOnChainYieldsLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/earn/ Binance API Documentation}
     */
    public async getOnChainYieldsLockedSubscriptionPreview(
        requestParameters: GetOnChainYieldsLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionPreviewResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedSubscriptionPreview(
                requestParameters?.projectId,
                requestParameters?.amount,
                requestParameters?.autoSubscribe,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedSubscriptionPreviewResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get On-chain Yields Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 50
     *
     * @summary Get On-chain Yields Locked Subscription Record (USER_DATA)
     * @param {GetOnChainYieldsLockedSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/history/ Binance API Documentation}
     */
    public async getOnChainYieldsLockedSubscriptionRecord(
        requestParameters: GetOnChainYieldsLockedSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetOnChainYieldsLockedSubscriptionRecordResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOnChainYieldsLockedSubscriptionRecord(
                requestParameters?.purchaseId,
                requestParameters?.clientId,
                requestParameters?.asset,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOnChainYieldsLockedSubscriptionRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * On-chain Yields Account query
     *
     * Weight: 50
     *
     * @summary On-chain Yields Account (USER_DATA)
     * @param {OnChainYieldsAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OnChainYieldsAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/account/Onchain-Account Binance API Documentation}
     */
    public async onChainYieldsAccount(
        requestParameters: OnChainYieldsAccountRequest = {}
    ): Promise<RestApiResponse<OnChainYieldsAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.onChainYieldsAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<OnChainYieldsAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem On-chain Yields Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem On-chain Yields Locked Product (TRADE)
     * @param {RedeemOnChainYieldsLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemOnChainYieldsLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/earn/Redeem-Onchain-Locked-Product Binance API Documentation}
     */
    public async redeemOnChainYieldsLockedProduct(
        requestParameters: RedeemOnChainYieldsLockedProductRequest
    ): Promise<RestApiResponse<RedeemOnChainYieldsLockedProductResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.redeemOnChainYieldsLockedProduct(
                requestParameters?.positionId,
                requestParameters?.channelId,
                requestParameters?.recvWindow
            );
        return sendRequest<RedeemOnChainYieldsLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set On-chain Yield locked auto subscribe
     *
     * Weight: 50
     *
     * @summary Set On-chain Yields Locked Auto Subscribe(USER_DATA)
     * @param {SetOnChainYieldsLockedAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetOnChainYieldsLockedAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Auto-Subscribe Binance API Documentation}
     */
    public async setOnChainYieldsLockedAutoSubscribe(
        requestParameters: SetOnChainYieldsLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetOnChainYieldsLockedAutoSubscribeResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.setOnChainYieldsLockedAutoSubscribe(
                requestParameters?.positionId,
                requestParameters?.autoSubscribe,
                requestParameters?.recvWindow
            );
        return sendRequest<SetOnChainYieldsLockedAutoSubscribeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Set On-chain Yields redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set On-chain Yields Locked Product Redeem Option(USER_DATA)
     * @param {SetOnChainYieldsLockedProductRedeemOptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetOnChainYieldsLockedProductRedeemOptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Redeem-Option Binance API Documentation}
     */
    public async setOnChainYieldsLockedProductRedeemOption(
        requestParameters: SetOnChainYieldsLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetOnChainYieldsLockedProductRedeemOptionResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.setOnChainYieldsLockedProductRedeemOption(
                requestParameters?.positionId,
                requestParameters?.redeemTo,
                requestParameters?.recvWindow
            );
        return sendRequest<SetOnChainYieldsLockedProductRedeemOptionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe On-chain Yields Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 200
     *
     * @summary Subscribe On-chain Yields Locked Product(TRADE)
     * @param {SubscribeOnChainYieldsLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeOnChainYieldsLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof OnChainYieldsApi
     * @see {@link https://developers.binance.com/docs/staking/on-chain-yields/earn/Subscribe-Onchain-Locked-Product Binance API Documentation}
     */
    public async subscribeOnChainYieldsLockedProduct(
        requestParameters: SubscribeOnChainYieldsLockedProductRequest
    ): Promise<RestApiResponse<SubscribeOnChainYieldsLockedProductResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.subscribeOnChainYieldsLockedProduct(
                requestParameters?.projectId,
                requestParameters?.amount,
                requestParameters?.autoSubscribe,
                requestParameters?.sourceAccount,
                requestParameters?.redeemTo,
                requestParameters?.channelId,
                requestParameters?.clientId,
                requestParameters?.recvWindow
            );
        return sendRequest<SubscribeOnChainYieldsLockedProductResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
