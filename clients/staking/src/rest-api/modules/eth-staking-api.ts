/**
 * Binance Public Staking REST API
 *
 * OpenAPI Specification for the Binance Public Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    EthStakingAccountResponse,
    GetCurrentEthStakingQuotaResponse,
    GetEthRedemptionHistoryResponse,
    GetEthStakingHistoryResponse,
    GetWbethRateHistoryResponse,
    GetWbethRewardsHistoryResponse,
    GetWbethUnwrapHistoryResponse,
    GetWbethWrapHistoryResponse,
    RedeemEthResponse,
    SubscribeEthStakingResponse,
    WrapBethResponse,
} from '../types';

/**
 * EthStakingApi - axios parameter creator
 */
const EthStakingApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * ETH Staking account
         *
         * Weight: 150
         *
         * @summary ETH Staking account(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        ethStakingAccount: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/eth-staking/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get current ETH staking quota
         *
         * Weight: 150
         *
         * @summary Get current ETH staking quota(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getCurrentEthStakingQuota: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/quota',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get ETH redemption history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get ETH redemption history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getEthRedemptionHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/history/redemptionHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get ETH staking history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get ETH staking history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getEthStakingHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/history/stakingHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get WBETH Rate History
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get WBETH Rate History(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getWbethRateHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/history/rateHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get WBETH rewards history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get WBETH rewards history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getWbethRewardsHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/history/wbethRewardsHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get WBETH unwrap history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get WBETH unwrap history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getWbethUnwrapHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/wbeth/history/unwrapHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get WBETH wrap history
         *
         * The time between `startTime` and `endTime` cannot be longer than 3 months.
         * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
         * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
         * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
         *
         * Weight: 150
         *
         * @summary Get WBETH wrap history(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Currently querying page. Start from 1. Default:1
         * @param {number} [size] Default:10, Max:100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getWbethWrapHistory: async (
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/wbeth/history/wrapHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Redeem WBETH or BETH and get ETH
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Redeem ETH(TRADE)
         * @param {number} amount Amount in SOL.
         * @param {string} [asset] WBETH or BETH, default to BETH
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        redeemEth: async (
            amount: number,
            asset?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('redeemEth', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/eth/redeem',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Subscribe ETH Staking
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Subscribe ETH Staking(TRADE)
         * @param {number} amount Amount in SOL.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        subscribeEthStaking: async (amount: number, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscribeEthStaking', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/eth-staking/eth/stake',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Wrap BETH
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         * Weight: 150
         *
         * @summary Wrap BETH(TRADE)
         * @param {number} amount Amount in SOL.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        wrapBeth: async (amount: number, recvWindow?: number): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('wrapBeth', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/eth-staking/wbeth/wrap',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * EthStakingApi - interface
 * @interface EthStakingApi
 */
export interface EthStakingApiInterface {
    /**
     * ETH Staking account
     *
     * Weight: 150
     *
     * @summary ETH Staking account(USER_DATA)
     * @param {EthStakingAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    ethStakingAccount(
        requestParameters?: EthStakingAccountRequest
    ): Promise<RestApiResponse<EthStakingAccountResponse>>;
    /**
     * Get current ETH staking quota
     *
     * Weight: 150
     *
     * @summary Get current ETH staking quota(USER_DATA)
     * @param {GetCurrentEthStakingQuotaRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getCurrentEthStakingQuota(
        requestParameters?: GetCurrentEthStakingQuotaRequest
    ): Promise<RestApiResponse<GetCurrentEthStakingQuotaResponse>>;
    /**
     * Get ETH redemption history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get ETH redemption history(USER_DATA)
     * @param {GetEthRedemptionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getEthRedemptionHistory(
        requestParameters?: GetEthRedemptionHistoryRequest
    ): Promise<RestApiResponse<GetEthRedemptionHistoryResponse>>;
    /**
     * Get ETH staking history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get ETH staking history(USER_DATA)
     * @param {GetEthStakingHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getEthStakingHistory(
        requestParameters?: GetEthStakingHistoryRequest
    ): Promise<RestApiResponse<GetEthStakingHistoryResponse>>;
    /**
     * Get WBETH Rate History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH Rate History(USER_DATA)
     * @param {GetWbethRateHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getWbethRateHistory(
        requestParameters?: GetWbethRateHistoryRequest
    ): Promise<RestApiResponse<GetWbethRateHistoryResponse>>;
    /**
     * Get WBETH rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH rewards history(USER_DATA)
     * @param {GetWbethRewardsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getWbethRewardsHistory(
        requestParameters?: GetWbethRewardsHistoryRequest
    ): Promise<RestApiResponse<GetWbethRewardsHistoryResponse>>;
    /**
     * Get WBETH unwrap history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH unwrap history(USER_DATA)
     * @param {GetWbethUnwrapHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getWbethUnwrapHistory(
        requestParameters?: GetWbethUnwrapHistoryRequest
    ): Promise<RestApiResponse<GetWbethUnwrapHistoryResponse>>;
    /**
     * Get WBETH wrap history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH wrap history(USER_DATA)
     * @param {GetWbethWrapHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    getWbethWrapHistory(
        requestParameters?: GetWbethWrapHistoryRequest
    ): Promise<RestApiResponse<GetWbethWrapHistoryResponse>>;
    /**
     * Redeem WBETH or BETH and get ETH
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem ETH(TRADE)
     * @param {RedeemEthRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    redeemEth(requestParameters: RedeemEthRequest): Promise<RestApiResponse<RedeemEthResponse>>;
    /**
     * Subscribe ETH Staking
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe ETH Staking(TRADE)
     * @param {SubscribeEthStakingRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    subscribeEthStaking(
        requestParameters: SubscribeEthStakingRequest
    ): Promise<RestApiResponse<SubscribeEthStakingResponse>>;
    /**
     * Wrap BETH
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Wrap BETH(TRADE)
     * @param {WrapBethRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApiInterface
     */
    wrapBeth(requestParameters: WrapBethRequest): Promise<RestApiResponse<WrapBethResponse>>;
}

/**
 * Request parameters for ethStakingAccount operation in EthStakingApi.
 * @interface EthStakingAccountRequest
 */
export interface EthStakingAccountRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiEthStakingAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCurrentEthStakingQuota operation in EthStakingApi.
 * @interface GetCurrentEthStakingQuotaRequest
 */
export interface GetCurrentEthStakingQuotaRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetCurrentEthStakingQuota
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getEthRedemptionHistory operation in EthStakingApi.
 * @interface GetEthRedemptionHistoryRequest
 */
export interface GetEthRedemptionHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthRedemptionHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthRedemptionHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetEthRedemptionHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetEthRedemptionHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthRedemptionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getEthStakingHistory operation in EthStakingApi.
 * @interface GetEthStakingHistoryRequest
 */
export interface GetEthStakingHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthStakingHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthStakingHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetEthStakingHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetEthStakingHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetEthStakingHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getWbethRateHistory operation in EthStakingApi.
 * @interface GetWbethRateHistoryRequest
 */
export interface GetWbethRateHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRateHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRateHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetWbethRateHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetWbethRateHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRateHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getWbethRewardsHistory operation in EthStakingApi.
 * @interface GetWbethRewardsHistoryRequest
 */
export interface GetWbethRewardsHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRewardsHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRewardsHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetWbethRewardsHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetWbethRewardsHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethRewardsHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getWbethUnwrapHistory operation in EthStakingApi.
 * @interface GetWbethUnwrapHistoryRequest
 */
export interface GetWbethUnwrapHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethUnwrapHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethUnwrapHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetWbethUnwrapHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetWbethUnwrapHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethUnwrapHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getWbethWrapHistory operation in EthStakingApi.
 * @interface GetWbethWrapHistoryRequest
 */
export interface GetWbethWrapHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethWrapHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethWrapHistory
     */
    readonly endTime?: number;

    /**
     * Currently querying page. Start from 1. Default:1
     * @type {number}
     * @memberof EthStakingApiGetWbethWrapHistory
     */
    readonly current?: number;

    /**
     * Default:10, Max:100
     * @type {number}
     * @memberof EthStakingApiGetWbethWrapHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiGetWbethWrapHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for redeemEth operation in EthStakingApi.
 * @interface RedeemEthRequest
 */
export interface RedeemEthRequest {
    /**
     * Amount in SOL.
     * @type {number}
     * @memberof EthStakingApiRedeemEth
     */
    readonly amount: number;

    /**
     * WBETH or BETH, default to BETH
     * @type {string}
     * @memberof EthStakingApiRedeemEth
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiRedeemEth
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for subscribeEthStaking operation in EthStakingApi.
 * @interface SubscribeEthStakingRequest
 */
export interface SubscribeEthStakingRequest {
    /**
     * Amount in SOL.
     * @type {number}
     * @memberof EthStakingApiSubscribeEthStaking
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiSubscribeEthStaking
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for wrapBeth operation in EthStakingApi.
 * @interface WrapBethRequest
 */
export interface WrapBethRequest {
    /**
     * Amount in SOL.
     * @type {number}
     * @memberof EthStakingApiWrapBeth
     */
    readonly amount: number;

    /**
     *
     * @type {number}
     * @memberof EthStakingApiWrapBeth
     */
    readonly recvWindow?: number;
}

/**
 * EthStakingApi - object-oriented interface
 * @class EthStakingApi
 */
export class EthStakingApi implements EthStakingApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = EthStakingApiAxiosParamCreator(configuration);
    }

    /**
     * ETH Staking account
     *
     * Weight: 150
     *
     * @summary ETH Staking account(USER_DATA)
     * @param {EthStakingAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<EthStakingAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/account/ETH-Staking-account Binance API Documentation}
     */
    public async ethStakingAccount(
        requestParameters: EthStakingAccountRequest = {}
    ): Promise<RestApiResponse<EthStakingAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.ethStakingAccount(
            requestParameters?.recvWindow
        );
        return sendRequest<EthStakingAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get current ETH staking quota
     *
     * Weight: 150
     *
     * @summary Get current ETH staking quota(USER_DATA)
     * @param {GetCurrentEthStakingQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCurrentEthStakingQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/account/Get-current-ETH-staking-quota Binance API Documentation}
     */
    public async getCurrentEthStakingQuota(
        requestParameters: GetCurrentEthStakingQuotaRequest = {}
    ): Promise<RestApiResponse<GetCurrentEthStakingQuotaResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getCurrentEthStakingQuota(
            requestParameters?.recvWindow
        );
        return sendRequest<GetCurrentEthStakingQuotaResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get ETH redemption history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get ETH redemption history(USER_DATA)
     * @param {GetEthRedemptionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetEthRedemptionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-ETH-redemption-history Binance API Documentation}
     */
    public async getEthRedemptionHistory(
        requestParameters: GetEthRedemptionHistoryRequest = {}
    ): Promise<RestApiResponse<GetEthRedemptionHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getEthRedemptionHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetEthRedemptionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get ETH staking history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get ETH staking history(USER_DATA)
     * @param {GetEthStakingHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetEthStakingHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-ETH-staking-history Binance API Documentation}
     */
    public async getEthStakingHistory(
        requestParameters: GetEthStakingHistoryRequest = {}
    ): Promise<RestApiResponse<GetEthStakingHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getEthStakingHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetEthStakingHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get WBETH Rate History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH Rate History(USER_DATA)
     * @param {GetWbethRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetWbethRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-BETH-Rate-History Binance API Documentation}
     */
    public async getWbethRateHistory(
        requestParameters: GetWbethRateHistoryRequest = {}
    ): Promise<RestApiResponse<GetWbethRateHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getWbethRateHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetWbethRateHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get WBETH rewards history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH rewards history(USER_DATA)
     * @param {GetWbethRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetWbethRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-WBETH-rewards-history Binance API Documentation}
     */
    public async getWbethRewardsHistory(
        requestParameters: GetWbethRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetWbethRewardsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getWbethRewardsHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetWbethRewardsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get WBETH unwrap history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH unwrap history(USER_DATA)
     * @param {GetWbethUnwrapHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetWbethUnwrapHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-WBETH-unwrap-history Binance API Documentation}
     */
    public async getWbethUnwrapHistory(
        requestParameters: GetWbethUnwrapHistoryRequest = {}
    ): Promise<RestApiResponse<GetWbethUnwrapHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getWbethUnwrapHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetWbethUnwrapHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get WBETH wrap history
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get WBETH wrap history(USER_DATA)
     * @param {GetWbethWrapHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetWbethWrapHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/history/Get-WBETH-wrap-history Binance API Documentation}
     */
    public async getWbethWrapHistory(
        requestParameters: GetWbethWrapHistoryRequest = {}
    ): Promise<RestApiResponse<GetWbethWrapHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getWbethWrapHistory(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<GetWbethWrapHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Redeem WBETH or BETH and get ETH
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Redeem ETH(TRADE)
     * @param {RedeemEthRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemEthResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/staking/Redeem-ETH Binance API Documentation}
     */
    public async redeemEth(
        requestParameters: RedeemEthRequest
    ): Promise<RestApiResponse<RedeemEthResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.redeemEth(
            requestParameters?.amount,
            requestParameters?.asset,
            requestParameters?.recvWindow
        );
        return sendRequest<RedeemEthResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Subscribe ETH Staking
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Subscribe ETH Staking(TRADE)
     * @param {SubscribeEthStakingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeEthStakingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/staking/Subscribe-ETH-Staking Binance API Documentation}
     */
    public async subscribeEthStaking(
        requestParameters: SubscribeEthStakingRequest
    ): Promise<RestApiResponse<SubscribeEthStakingResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.subscribeEthStaking(
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<SubscribeEthStakingResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Wrap BETH
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
     *
     * Weight: 150
     *
     * @summary Wrap BETH(TRADE)
     * @param {WrapBethRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WrapBethResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof EthStakingApi
     * @see {@link https://developers.binance.com/docs/staking/eth-staking/staking/Wrap-BETH Binance API Documentation}
     */
    public async wrapBeth(
        requestParameters: WrapBethRequest
    ): Promise<RestApiResponse<WrapBethResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.wrapBeth(
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<WrapBethResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
