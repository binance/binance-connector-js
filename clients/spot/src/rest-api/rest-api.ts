/**
 * Binance Spot REST API
 *
 * OpenAPI Specifications for the Binance Spot REST API
 *
 * API documents:
 * - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
 * - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest, TimeUnit } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { GeneralApi } from './modules/general-api';
import { MarketApi } from './modules/market-api';
import { TradeApi } from './modules/trade-api';
import { UserDataStreamApi } from './modules/user-data-stream-api';

import type {
    AccountCommissionRequest,
    GetAccountRequest,
    MyAllocationsRequest,
    MyPreventedMatchesRequest,
    MyTradesRequest,
    OrderAmendmentsRequest,
    RateLimitOrderRequest,
} from './modules/account-api';
import type { ExchangeInfoRequest } from './modules/general-api';
import type {
    AggTradesRequest,
    AvgPriceRequest,
    DepthRequest,
    GetTradesRequest,
    HistoricalTradesRequest,
    KlinesRequest,
    TickerRequest,
    Ticker24hrRequest,
    TickerBookTickerRequest,
    TickerPriceRequest,
    TickerTradingDayRequest,
    UiKlinesRequest,
} from './modules/market-api';
import type {
    AllOrderListRequest,
    AllOrdersRequest,
    DeleteOpenOrdersRequest,
    DeleteOrderRequest,
    DeleteOrderListRequest,
    GetOpenOrdersRequest,
    GetOrderRequest,
    GetOrderListRequest,
    NewOrderRequest,
    OpenOrderListRequest,
    OrderAmendKeepPriorityRequest,
    OrderCancelReplaceRequest,
    OrderListOcoRequest,
    OrderListOtoRequest,
    OrderListOtocoRequest,
    OrderOcoRequest,
    OrderTestRequest,
    SorOrderRequest,
    SorOrderTestRequest,
} from './modules/trade-api';
import type {
    DeleteUserDataStreamRequest,
    PutUserDataStreamRequest,
} from './modules/user-data-stream-api';

import type {
    AccountCommissionResponse,
    GetAccountResponse,
    MyAllocationsResponse,
    MyPreventedMatchesResponse,
    MyTradesResponse,
    OrderAmendmentsResponse,
    RateLimitOrderResponse,
} from './types';
import type { ExchangeInfoResponse, TimeResponse } from './types';
import type {
    AggTradesResponse,
    AvgPriceResponse,
    DepthResponse,
    GetTradesResponse,
    HistoricalTradesResponse,
    KlinesResponse,
    TickerResponse,
    Ticker24hrResponse,
    TickerBookTickerResponse,
    TickerPriceResponse,
    TickerTradingDayResponse,
    UiKlinesResponse,
} from './types';
import type {
    AllOrderListResponse,
    AllOrdersResponse,
    DeleteOpenOrdersResponse,
    DeleteOrderResponse,
    DeleteOrderListResponse,
    GetOpenOrdersResponse,
    GetOrderResponse,
    GetOrderListResponse,
    NewOrderResponse,
    OpenOrderListResponse,
    OrderAmendKeepPriorityResponse,
    OrderCancelReplaceResponse,
    OrderListOcoResponse,
    OrderListOtoResponse,
    OrderListOtocoResponse,
    OrderOcoResponse,
    OrderTestResponse,
    SorOrderResponse,
    SorOrderTestResponse,
} from './types';
import type { NewUserDataStreamResponse } from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private generalApi: GeneralApi;
    private marketApi: MarketApi;
    private tradeApi: TradeApi;
    private userDataStreamApi: UserDataStreamApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.generalApi = new GeneralApi(configuration);
        this.marketApi = new MarketApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.userDataStreamApi = new UserDataStreamApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     * @param timeUnit - The time unit for the request.
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {},
        timeUnit: TimeUnit = this.configuration?.timeUnit as TimeUnit
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, timeUnit);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     * @param timeUnit - The time unit for the request.
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {},
        timeUnit: TimeUnit = this.configuration?.timeUnit as TimeUnit
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, timeUnit, {
            isSigned: true,
        });
    }

    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary Query Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountCommissionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-commission-rates-user_data Binance API Documentation}
     */
    accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<RestApiResponse<AccountCommissionResponse>> {
        return this.accountApi.accountCommission(requestParameters);
    }

    /**
     * Get current account information.
     * Weight: 20
     *
     * @summary Account information
     * @param {GetAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#account-information-user_data Binance API Documentation}
     */
    getAccount(
        requestParameters: GetAccountRequest = {}
    ): Promise<RestApiResponse<GetAccountResponse>> {
        return this.accountApi.getAccount(requestParameters);
    }

    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary Query Allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyAllocationsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-allocations-user_data Binance API Documentation}
     */
    myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<RestApiResponse<MyAllocationsResponse>> {
        return this.accountApi.myAllocations(requestParameters);
    }

    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary Query Prevented Matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyPreventedMatchesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-prevented-matches-user_data Binance API Documentation}
     */
    myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<RestApiResponse<MyPreventedMatchesResponse>> {
        return this.accountApi.myPreventedMatches(requestParameters);
    }

    /**
     * Get trades for a specific account and symbol.
     * Weight: Condition| Weight|
     * ---| ---
     * |Without orderId|20|
     * |With orderId|5|
     *
     * @summary Account trade list
     * @param {MyTradesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyTradesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#account-trade-list-user_data Binance API Documentation}
     */
    myTrades(requestParameters: MyTradesRequest): Promise<RestApiResponse<MyTradesResponse>> {
        return this.accountApi.myTrades(requestParameters);
    }

    /**
     * Queries all amendments of a single order.
     * Weight: 4
     *
     * @summary Query Order Amendments
     * @param {OrderAmendmentsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderAmendmentsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-order-amendments-user_data Binance API Documentation}
     */
    orderAmendments(
        requestParameters: OrderAmendmentsRequest
    ): Promise<RestApiResponse<OrderAmendmentsResponse>> {
        return this.accountApi.orderAmendments(requestParameters);
    }

    /**
     * Displays the user's unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary Query Unfilled Order Count
     * @param {RateLimitOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RateLimitOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-unfilled-order-count-user_data Binance API Documentation}
     */
    rateLimitOrder(
        requestParameters: RateLimitOrderRequest = {}
    ): Promise<RestApiResponse<RateLimitOrderResponse>> {
        return this.accountApi.rateLimitOrder(requestParameters);
    }

    /**
     * Current exchange trading rules and symbol information
     * Weight: 20
     *
     * @summary Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ExchangeInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#exchange-information Binance API Documentation}
     */
    exchangeInfo(
        requestParameters: ExchangeInfoRequest = {}
    ): Promise<RestApiResponse<ExchangeInfoResponse>> {
        return this.generalApi.exchangeInfo(requestParameters);
    }

    /**
     * Test connectivity to the Rest API.
     * Weight: 1
     *
     * @summary Test connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#test-connectivity Binance API Documentation}
     */
    ping(): Promise<RestApiResponse<void>> {
        return this.generalApi.ping();
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     * Weight: 1
     *
     * @summary Check server time
     * @returns {Promise<RestApiResponse<TimeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#check-server-time Binance API Documentation}
     */
    time(): Promise<RestApiResponse<TimeResponse>> {
        return this.generalApi.time();
    }

    /**
     * Get compressed, aggregate trades. Trades that fill at the time, from the same taker order, with the same price will have the quantity aggregated.
     * Weight: 4
     *
     * @summary Compressed/Aggregate trades list
     * @param {AggTradesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AggTradesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#compressedaggregate-trades-list Binance API Documentation}
     */
    aggTrades(requestParameters: AggTradesRequest): Promise<RestApiResponse<AggTradesResponse>> {
        return this.marketApi.aggTrades(requestParameters);
    }

    /**
     * Current average price for a symbol.
     * Weight: 2
     *
     * @summary Current average price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AvgPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#current-average-price Binance API Documentation}
     */
    avgPrice(requestParameters: AvgPriceRequest): Promise<RestApiResponse<AvgPriceResponse>> {
        return this.marketApi.avgPrice(requestParameters);
    }

    /**
     *
     * Weight: Adjusted based on the limit:
     *
     * |Limit|Request Weight
     * ------|-------
     * 1-100|  5
     * 101-500| 25
     * 501-1000| 50
     * 1001-5000| 250
     *
     * @summary Order book
     * @param {DepthRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepthResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#order-book Binance API Documentation}
     */
    depth(requestParameters: DepthRequest): Promise<RestApiResponse<DepthResponse>> {
        return this.marketApi.depth(requestParameters);
    }

    /**
     * Get recent trades.
     * Weight: 25
     *
     * @summary Recent trades list
     * @param {GetTradesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetTradesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#recent-trades-list Binance API Documentation}
     */
    getTrades(requestParameters: GetTradesRequest): Promise<RestApiResponse<GetTradesResponse>> {
        return this.marketApi.getTrades(requestParameters);
    }

    /**
     * Get older trades.
     * Weight: 25
     *
     * @summary Old trade lookup
     * @param {HistoricalTradesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HistoricalTradesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#old-trade-lookup Binance API Documentation}
     */
    historicalTrades(
        requestParameters: HistoricalTradesRequest
    ): Promise<RestApiResponse<HistoricalTradesResponse>> {
        return this.marketApi.historicalTrades(requestParameters);
    }

    /**
     * Kline/candlestick bars for a symbol.
     * Klines are uniquely identified by their open time.
     * Weight: 2
     *
     * @summary Kline/Candlestick data
     * @param {KlinesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<KlinesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#klinecandlestick-data Binance API Documentation}
     */
    klines(requestParameters: KlinesRequest): Promise<RestApiResponse<KlinesResponse>> {
        return this.marketApi.klines(requestParameters);
    }

    /**
     *
     * Weight: 4 for each requested <tt>symbol</tt> regardless of <tt>windowSize</tt>. <br/><br/> The weight for this request will cap at 200 once the number of `symbols` in the request is more than 50.
     *
     * @summary Rolling window price change statistics
     * @param {TickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#rolling-window-price-change-statistics Binance API Documentation}
     */
    ticker(requestParameters: TickerRequest = {}): Promise<RestApiResponse<TickerResponse>> {
        return this.marketApi.ticker(requestParameters);
    }

    /**
     * 24 hour rolling window price change statistics. **Careful** when accessing this with no symbol.
     * Weight: <table>
     * <thead>
     * <tr>
     * <th>Parameter</th>
     * <th>Symbols Provided</th>
     * <th>Weight</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td rowspan="2">symbol</td>
     * <td>1</td>
     * <td>2</td>
     * </tr>
     * <tr>
     * <td>symbol parameter is omitted</td>
     * <td>80</td>
     * </tr>
     * <tr>
     * <td rowspan="4">symbols</td>
     * <td>1-20</td>
     * <td>2</td>
     * </tr>
     * <tr>
     * <td>21-100</td>
     * <td>40</td>
     * </tr>
     * <tr>
     * <td>101 or more</td>
     * <td>80</td>
     * </tr>
     * <tr>
     * <td>symbols parameter is omitted</td>
     * <td>80</td>
     * </tr>
     * </tbody>
     * </table>
     *
     * @summary 24hr ticker price change statistics
     * @param {Ticker24hrRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<Ticker24hrResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#24hr-ticker-price-change-statistics Binance API Documentation}
     */
    ticker24hr(
        requestParameters: Ticker24hrRequest = {}
    ): Promise<RestApiResponse<Ticker24hrResponse>> {
        return this.marketApi.ticker24hr(requestParameters);
    }

    /**
     * Best price/qty on the order book for a symbol or symbols.
     * Weight: <table>
     * <thead>
     * <tr>
     * <th>Parameter</th>
     * <th>Symbols Provided</th>
     * <th>Weight</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td rowspan="2">symbol</td>
     * <td>1</td>
     * <td>2</td>
     * </tr>
     * <tr>
     * <td>symbol parameter is omitted</td>
     * <td>4</td>
     * </tr>
     * <tr>
     * <td>symbols</td>
     * <td>Any</td>
     * <td>4</td>
     * </tr>
     * </tbody>
     * </table>
     *
     * @summary Symbol order book ticker
     * @param {TickerBookTickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TickerBookTickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#symbol-order-book-ticker Binance API Documentation}
     */
    tickerBookTicker(
        requestParameters: TickerBookTickerRequest = {}
    ): Promise<RestApiResponse<TickerBookTickerResponse>> {
        return this.marketApi.tickerBookTicker(requestParameters);
    }

    /**
     * Latest price for a symbol or symbols.
     * Weight: <table>
     * <thead>
     * <tr>
     * <th>Parameter</th>
     * <th>Symbols Provided</th>
     * <th>Weight</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td rowspan="2">symbol</td>
     * <td>1</td>
     * <td>2</td>
     * </tr>
     * <tr>
     * <td>symbol parameter is omitted</td>
     * <td>4</td>
     * </tr>
     * <tr>
     * <td>symbols</td>
     * <td>Any</td>
     * <td>4</td>
     * </tr>
     * </tbody>
     * </table>
     *
     * @summary Symbol price ticker
     * @param {TickerPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TickerPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#symbol-price-ticker Binance API Documentation}
     */
    tickerPrice(
        requestParameters: TickerPriceRequest = {}
    ): Promise<RestApiResponse<TickerPriceResponse>> {
        return this.marketApi.tickerPrice(requestParameters);
    }

    /**
     * Price change statistics for a trading day.
     * Weight: 4 for each requested <tt>symbol</tt>. <br/><br/> The weight for this request will cap at 200 once the number of `symbols` in the request is more than 50.
     *
     * @summary Trading Day Ticker
     * @param {TickerTradingDayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TickerTradingDayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#trading-day-ticker Binance API Documentation}
     */
    tickerTradingDay(
        requestParameters: TickerTradingDayRequest = {}
    ): Promise<RestApiResponse<TickerTradingDayResponse>> {
        return this.marketApi.tickerTradingDay(requestParameters);
    }

    /**
     * The request is similar to klines having the same parameters and response.
     *
     * `uiKlines` return modified kline data, optimized for presentation of candlestick charts.
     * Weight: 2
     *
     * @summary UIKlines
     * @param {UiKlinesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UiKlinesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/market-data-endpoints#uiklines Binance API Documentation}
     */
    uiKlines(requestParameters: UiKlinesRequest): Promise<RestApiResponse<UiKlinesResponse>> {
        return this.marketApi.uiKlines(requestParameters);
    }

    /**
     * Retrieves all order lists based on provided optional parameters.
     *
     * Note that the time between `startTime` and `endTime` can't be longer than 24 hours.
     * Weight: 20
     *
     * @summary Query all Order lists
     * @param {AllOrderListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AllOrderListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#query-all-order-lists-user_data Binance API Documentation}
     */
    allOrderList(
        requestParameters: AllOrderListRequest = {}
    ): Promise<RestApiResponse<AllOrderListResponse>> {
        return this.tradeApi.allOrderList(requestParameters);
    }

    /**
     * Get all account orders; active, canceled, or filled.
     * Weight: 20
     *
     * @summary All orders
     * @param {AllOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AllOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#all-orders-user_data Binance API Documentation}
     */
    allOrders(requestParameters: AllOrdersRequest): Promise<RestApiResponse<AllOrdersResponse>> {
        return this.tradeApi.allOrders(requestParameters);
    }

    /**
     * Cancels all active orders on a symbol.
     * This includes orders that are part of an order list.
     * Weight: 1
     *
     * @summary Cancel All Open Orders on a Symbol
     * @param {DeleteOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DeleteOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-all-open-orders-on-a-symbol-trade Binance API Documentation}
     */
    deleteOpenOrders(
        requestParameters: DeleteOpenOrdersRequest
    ): Promise<RestApiResponse<DeleteOpenOrdersResponse>> {
        return this.tradeApi.deleteOpenOrders(requestParameters);
    }

    /**
     * Cancel an active order.
     * Weight: 1
     *
     * @summary Cancel order
     * @param {DeleteOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DeleteOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-order-trade Binance API Documentation}
     */
    deleteOrder(
        requestParameters: DeleteOrderRequest
    ): Promise<RestApiResponse<DeleteOrderResponse>> {
        return this.tradeApi.deleteOrder(requestParameters);
    }

    /**
     * Cancel an entire Order list
     * Weight: 1
     *
     * @summary Cancel Order list
     * @param {DeleteOrderListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DeleteOrderListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-order-list-trade Binance API Documentation}
     */
    deleteOrderList(
        requestParameters: DeleteOrderListRequest
    ): Promise<RestApiResponse<DeleteOrderListResponse>> {
        return this.tradeApi.deleteOrderList(requestParameters);
    }

    /**
     * Get all open orders on a symbol. **Careful** when accessing this with no symbol.
     * Weight: 6 for a single symbol; **80** when the symbol parameter is omitted
     *
     * @summary Current open orders
     * @param {GetOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#current-open-orders-user_data Binance API Documentation}
     */
    getOpenOrders(
        requestParameters: GetOpenOrdersRequest = {}
    ): Promise<RestApiResponse<GetOpenOrdersResponse>> {
        return this.tradeApi.getOpenOrders(requestParameters);
    }

    /**
     * Check an order's status.
     * Weight: 4
     *
     * @summary Query order
     * @param {GetOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#query-order-user_data Binance API Documentation}
     */
    getOrder(requestParameters: GetOrderRequest): Promise<RestApiResponse<GetOrderResponse>> {
        return this.tradeApi.getOrder(requestParameters);
    }

    /**
     * Retrieves a specific order list based on provided optional parameters.
     * Weight: 4
     *
     * @summary Query Order list
     * @param {GetOrderListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOrderListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#query-order-list-user_data Binance API Documentation}
     */
    getOrderList(
        requestParameters: GetOrderListRequest = {}
    ): Promise<RestApiResponse<GetOrderListResponse>> {
        return this.tradeApi.getOrderList(requestParameters);
    }

    /**
     * Send in a new order.
     * Weight: 1
     *
     * @summary New order
     * @param {NewOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-trade Binance API Documentation}
     */
    newOrder(requestParameters: NewOrderRequest): Promise<RestApiResponse<NewOrderResponse>> {
        return this.tradeApi.newOrder(requestParameters);
    }

    /**
     *
     * Weight: 6
     *
     * @summary Query Open Order lists
     * @param {OpenOrderListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OpenOrderListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#query-open-order-lists-user_data Binance API Documentation}
     */
    openOrderList(
        requestParameters: OpenOrderListRequest = {}
    ): Promise<RestApiResponse<OpenOrderListResponse>> {
        return this.tradeApi.openOrderList(requestParameters);
    }

    /**
     * Reduce the quantity of an existing open order.
     *
     * Read [Order Amend Keep Priority FAQ](faqs/order_amend_keep_priority.md) to learn more.
     * Weight: 4
     *
     * @summary Order Amend Keep Priority
     * @param {OrderAmendKeepPriorityRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderAmendKeepPriorityResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#order-amend-keep-priority-trade Binance API Documentation}
     */
    orderAmendKeepPriority(
        requestParameters: OrderAmendKeepPriorityRequest
    ): Promise<RestApiResponse<OrderAmendKeepPriorityResponse>> {
        return this.tradeApi.orderAmendKeepPriority(requestParameters);
    }

    /**
     * Cancels an existing order and places a new order on the same symbol.
     *
     * Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs.
     *
     * A new order that was not attempted (i.e. when `newOrderResult: NOT_ATTEMPTED` ), will still increase the order count by 1.
     * Weight: 1
     *
     * @summary Cancel an Existing Order and Send a New Order
     * @param {OrderCancelReplaceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderCancelReplaceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#cancel-an-existing-order-and-send-a-new-order-trade Binance API Documentation}
     */
    orderCancelReplace(
        requestParameters: OrderCancelReplaceRequest
    ): Promise<RestApiResponse<OrderCancelReplaceResponse>> {
        return this.tradeApi.orderCancelReplace(requestParameters);
    }

    /**
     * Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.
     *
     * An OCO has 2 orders called the **above order** and **below order**.
     * One of the orders must be a `LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT` order and the other must be `STOP_LOSS` or `STOP_LOSS_LIMIT` order.
     * Price restrictions
     * If the OCO is on the `SELL` side:
     * `LIMIT_MAKER/TAKE_PROFIT_LIMIT` `price` > Last Traded Price >  `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * If the OCO is on the `BUY` side:
     * `LIMIT_MAKER/TAKE_PROFIT_LIMIT price` < Last Traded Price < `stopPrice`
     * `TAKE_PROFIT stopPrice` < Last Traded Price < `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * OCOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter, and the `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary New Order list - OCO
     * @param {OrderListOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderListOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---oco-trade Binance API Documentation}
     */
    orderListOco(
        requestParameters: OrderListOcoRequest
    ): Promise<RestApiResponse<OrderListOcoResponse>> {
        return this.tradeApi.orderListOco(requestParameters);
    }

    /**
     * Places an OTO.
     *
     * An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
     * If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
     * When the order list is placed, if the working order gets **immediately fully filled**, the placement response will show the working order as `FILLED` but the pending order will still appear as `PENDING_NEW`. You need to query the status of the pending order again to see its updated status.
     * OTOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary New Order list - OTO
     * @param {OrderListOtoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderListOtoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---oto-trade Binance API Documentation}
     */
    orderListOto(
        requestParameters: OrderListOtoRequest
    ): Promise<RestApiResponse<OrderListOtoResponse>> {
        return this.tradeApi.orderListOto(requestParameters);
    }

    /**
     * Place an OTOCO.
     *
     * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
     *
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The behavior of the working order is the same as the [OTO](#new-order-list---oto-trade).
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
     * The rules of the pending above and pending below follow the same rules as the [Order list OCO](#new-order-list---oco-trade).
     * OTOCOs add **3 orders** against the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary New Order list - OTOCO
     * @param {OrderListOtocoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderListOtocoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-list---otoco-trade Binance API Documentation}
     */
    orderListOtoco(
        requestParameters: OrderListOtocoRequest
    ): Promise<RestApiResponse<OrderListOtocoResponse>> {
        return this.tradeApi.orderListOtoco(requestParameters);
    }

    /**
     * Send in a new OCO.
     *
     * Price Restrictions:
     * `SELL`: Limit Price > Last Price > Stop Price
     * `BUY`: Limit Price < Last Price < Stop Price
     * Quantity Restrictions:
     * Both legs must have the same quantity.
     * `ICEBERG` quantities however do not have to be the same
     * `OCO` adds **2 orders** to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter and the `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary New OCO - Deprecated
     * @param {OrderOcoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderOcoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-oco---deprecated-trade Binance API Documentation}
     */
    orderOco(requestParameters: OrderOcoRequest): Promise<RestApiResponse<OrderOcoResponse>> {
        return this.tradeApi.orderOco(requestParameters);
    }

    /**
     * Test new order creation and signature/recvWindow long.
     * Creates and validates a new order but does not send it into the matching engine.
     * Weight: |Condition| Request Weight|
     * |------------           | ------------ |
     * |Without `computeCommissionRates`| 1|
     * |With `computeCommissionRates`|20|
     *
     * @summary Test new order
     * @param {OrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderTestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#test-new-order-trade Binance API Documentation}
     */
    orderTest(
        requestParameters: OrderTestRequest = {}
    ): Promise<RestApiResponse<OrderTestResponse>> {
        return this.tradeApi.orderTest(requestParameters);
    }

    /**
     * Places an order using smart order routing (SOR).
     *
     * Read [SOR FAQ](faqs/sor_faq.md) to learn more.
     * Weight: 1
     *
     * @summary New order using SOR
     * @param {SorOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SorOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#new-order-using-sor-trade Binance API Documentation}
     */
    sorOrder(requestParameters: SorOrderRequest): Promise<RestApiResponse<SorOrderResponse>> {
        return this.tradeApi.sorOrder(requestParameters);
    }

    /**
     * Test new order creation and signature/recvWindow using smart order routing (SOR).
     * Creates and validates a new order but does not send it into the matching engine.
     * Weight: | Condition | Request Weight |
     * | --------- | -------------- |
     * | Without `computeCommissionRates`  |  1 |
     * | With `computeCommissionRates`     | 20 |
     *
     * @summary Test new order using SOR
     * @param {SorOrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SorOrderTestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/trading-endpoints#test-new-order-using-sor-trade Binance API Documentation}
     */
    sorOrderTest(
        requestParameters: SorOrderTestRequest = {}
    ): Promise<RestApiResponse<SorOrderTestResponse>> {
        return this.tradeApi.sorOrderTest(requestParameters);
    }

    /**
     * Close out a user data stream.
     * Weight: 2
     *
     * @summary Close user data stream
     * @param {DeleteUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#close-user-data-stream-user_stream Binance API Documentation}
     */
    deleteUserDataStream(
        requestParameters: DeleteUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        return this.userDataStreamApi.deleteUserDataStream(requestParameters);
    }

    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
     * Weight: 2
     *
     * @summary Start user data stream
     * @returns {Promise<RestApiResponse<NewUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#start-user-data-stream-user_stream Binance API Documentation}
     */
    newUserDataStream(): Promise<RestApiResponse<NewUserDataStreamResponse>> {
        return this.userDataStreamApi.newUserDataStream();
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     * Weight: 2
     *
     * @summary Keepalive user data stream
     * @param {PutUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints---deprecated#keepalive-user-data-stream-user_stream Binance API Documentation}
     */
    putUserDataStream(requestParameters: PutUserDataStreamRequest): Promise<RestApiResponse<void>> {
        return this.userDataStreamApi.putUserDataStream(requestParameters);
    }
}
