/**
 * Binance Public Spot REST API
 *
 * OpenAPI Specifications for the Binance Public Spot REST API
 *
 * API documents:
 * - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
 * - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { NewUserDataStreamResponse } from '../types';

/**
 * UserdatastreamApi - axios parameter creator
 */
const UserdatastreamApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Close out a user data stream.
         * Weight: 2
         *
         * @summary Close user data stream
         * @param {string} listenKey
         *
         * @throws {RequiredError}
         */
        deleteUserDataStream: async (listenKey: string): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('deleteUserDataStream', 'listenKey', listenKey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (listenKey !== undefined && listenKey !== null) {
                localVarQueryParameter['listenKey'] = listenKey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/userDataStream',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
         * Weight: 2
         *
         * @summary Start user data stream
         *
         * @throws {RequiredError}
         */
        newUserDataStream: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/userDataStream',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
         * Weight: 2
         *
         * @summary Keepalive user data stream
         * @param {string} listenKey
         *
         * @throws {RequiredError}
         */
        putUserDataStream: async (listenKey: string): Promise<RequestArgs> => {
            // verify required parameter 'listenKey' is not null or undefined
            assertParamExists('putUserDataStream', 'listenKey', listenKey);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (listenKey !== undefined && listenKey !== null) {
                localVarQueryParameter['listenKey'] = listenKey;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/userDataStream',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * UserdatastreamApi - interface
 * @interface UserdatastreamApi
 */
export interface UserdatastreamApiInterface {
    /**
     * Close out a user data stream.
     * Weight: 2
     *
     * @summary Close user data stream
     * @param {DeleteUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApiInterface
     */
    deleteUserDataStream(
        requestParameters: DeleteUserDataStreamRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
     * Weight: 2
     *
     * @summary Start user data stream
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApiInterface
     */
    newUserDataStream(): Promise<RestApiResponse<NewUserDataStreamResponse>>;
    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     * Weight: 2
     *
     * @summary Keepalive user data stream
     * @param {PutUserDataStreamRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApiInterface
     */
    putUserDataStream(requestParameters: PutUserDataStreamRequest): Promise<RestApiResponse<void>>;
}

/**
 * Request parameters for deleteUserDataStream operation in UserdatastreamApi.
 * @interface DeleteUserDataStreamRequest
 */
export interface DeleteUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof UserdatastreamApiDeleteUserDataStream
     */
    readonly listenKey: string;
}

/**
 * Request parameters for putUserDataStream operation in UserdatastreamApi.
 * @interface PutUserDataStreamRequest
 */
export interface PutUserDataStreamRequest {
    /**
     *
     * @type {string}
     * @memberof UserdatastreamApiPutUserDataStream
     */
    readonly listenKey: string;
}

/**
 * UserdatastreamApi - object-oriented interface
 * @class UserdatastreamApi
 */
export class UserdatastreamApi implements UserdatastreamApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = UserdatastreamApiAxiosParamCreator(configuration);
    }

    /**
     * Close out a user data stream.
     * Weight: 2
     *
     * @summary Close user data stream
     * @param {DeleteUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints#close-user-data-stream-user_stream Binance API Documentation}
     */
    public async deleteUserDataStream(
        requestParameters: DeleteUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.deleteUserDataStream(
            requestParameters?.listenKey
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.
     * Weight: 2
     *
     * @summary Start user data stream
     * @returns {Promise<RestApiResponse<NewUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints#start-user-data-stream-user_stream Binance API Documentation}
     */
    public async newUserDataStream(): Promise<RestApiResponse<NewUserDataStreamResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.newUserDataStream();
        return sendRequest<NewUserDataStreamResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
     * Weight: 2
     *
     * @summary Keepalive user data stream
     * @param {PutUserDataStreamRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof UserdatastreamApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/user-data-stream-endpoints#keepalive-user-data-stream-user_stream Binance API Documentation}
     */
    public async putUserDataStream(
        requestParameters: PutUserDataStreamRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.putUserDataStream(
            requestParameters?.listenKey
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
