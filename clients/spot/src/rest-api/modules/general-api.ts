/**
 * Binance Spot REST API
 *
 * OpenAPI Specifications for the Binance Spot REST API
 *
 * API documents:
 * - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
 * - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type { ExchangeInfoResponse, TimeResponse } from '../types';

/**
 * GeneralApi - axios parameter creator
 */
const GeneralApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Current exchange trading rules and symbol information
         * Weight: 20
         *
         * @summary Exchange information
         * @param {string} [symbol] Symbol to query
         * @param {Array<string>} [symbols] List of symbols to query
         * @param {Array<string>} [permissions] List of permissions to query
         * @param {boolean} [showPermissionSets] Controls whether the content of the `permissionSets` field is populated or not. Defaults to `true`
         * @param {ExchangeInfoSymbolStatusEnum} [symbolStatus]
         *
         * @throws {RequiredError}
         */
        exchangeInfo: async (
            symbol?: string,
            symbols?: Array<string>,
            permissions?: Array<string>,
            showPermissionSets?: boolean,
            symbolStatus?: ExchangeInfoSymbolStatusEnum
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (symbols) {
                localVarQueryParameter['symbols'] = symbols;
            }

            if (permissions) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (showPermissionSets !== undefined && showPermissionSets !== null) {
                localVarQueryParameter['showPermissionSets'] = showPermissionSets;
            }

            if (symbolStatus !== undefined && symbolStatus !== null) {
                localVarQueryParameter['symbolStatus'] = symbolStatus;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/exchangeInfo',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Test connectivity to the Rest API.
         * Weight: 1
         *
         * @summary Test connectivity
         *
         * @throws {RequiredError}
         */
        ping: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/ping',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Test connectivity to the Rest API and get the current server time.
         * Weight: 1
         *
         * @summary Check server time
         *
         * @throws {RequiredError}
         */
        time: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/time',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * GeneralApi - interface
 * @interface GeneralApi
 */
export interface GeneralApiInterface {
    /**
     * Current exchange trading rules and symbol information
     * Weight: 20
     *
     * @summary Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApiInterface
     */
    exchangeInfo(
        requestParameters?: ExchangeInfoRequest
    ): Promise<RestApiResponse<ExchangeInfoResponse>>;
    /**
     * Test connectivity to the Rest API.
     * Weight: 1
     *
     * @summary Test connectivity
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApiInterface
     */
    ping(): Promise<RestApiResponse<void>>;
    /**
     * Test connectivity to the Rest API and get the current server time.
     * Weight: 1
     *
     * @summary Check server time
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApiInterface
     */
    time(): Promise<RestApiResponse<TimeResponse>>;
}

/**
 * Request parameters for exchangeInfo operation in GeneralApi.
 * @interface ExchangeInfoRequest
 */
export interface ExchangeInfoRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbols?: Array<string>;

    /**
     * List of permissions to query
     * @type {Array<string>}
     * @memberof GeneralApiExchangeInfo
     */
    readonly permissions?: Array<string>;

    /**
     * Controls whether the content of the `permissionSets` field is populated or not. Defaults to `true`
     * @type {boolean}
     * @memberof GeneralApiExchangeInfo
     */
    readonly showPermissionSets?: boolean;

    /**
     *
     * @type {'PRE_TRADING' | 'TRADING' | 'POST_TRADING' | 'END_OF_DAY' | 'HALT' | 'AUCTION_MATCH' | 'BREAK'}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbolStatus?: ExchangeInfoSymbolStatusEnum;
}

/**
 * GeneralApi - object-oriented interface
 * @class GeneralApi
 */
export class GeneralApi implements GeneralApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration);
    }

    /**
     * Current exchange trading rules and symbol information
     * Weight: 20
     *
     * @summary Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ExchangeInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#exchange-information Binance API Documentation}
     */
    public async exchangeInfo(
        requestParameters: ExchangeInfoRequest = {}
    ): Promise<RestApiResponse<ExchangeInfoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.exchangeInfo(
            requestParameters?.symbol,
            requestParameters?.symbols,
            requestParameters?.permissions,
            requestParameters?.showPermissionSets,
            requestParameters?.symbolStatus
        );
        return sendRequest<ExchangeInfoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Test connectivity to the Rest API.
     * Weight: 1
     *
     * @summary Test connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#test-connectivity Binance API Documentation}
     */
    public async ping(): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.ping();
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     * Weight: 1
     *
     * @summary Check server time
     * @returns {Promise<RestApiResponse<TimeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-endpoints#check-server-time Binance API Documentation}
     */
    public async time(): Promise<RestApiResponse<TimeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.time();
        return sendRequest<TimeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}

export const ExchangeInfoSymbolStatusEnum = {
    PRE_TRADING: 'PRE_TRADING',
    TRADING: 'TRADING',
    POST_TRADING: 'POST_TRADING',
    END_OF_DAY: 'END_OF_DAY',
    HALT: 'HALT',
    AUCTION_MATCH: 'AUCTION_MATCH',
    BREAK: 'BREAK',
} as const;
export type ExchangeInfoSymbolStatusEnum =
    (typeof ExchangeInfoSymbolStatusEnum)[keyof typeof ExchangeInfoSymbolStatusEnum];
