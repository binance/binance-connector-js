/**
 * Binance Spot REST API
 *
 * OpenAPI Specifications for the Binance Spot REST API
 *
 * API documents:
 * - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)
 * - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountCommissionResponse,
    GetAccountResponse,
    MyAllocationsResponse,
    MyPreventedMatchesResponse,
    MyTradesResponse,
    OrderAmendmentsResponse,
    RateLimitOrderResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get current account commission rates.
         * Weight: 20
         *
         * @summary Query Commission Rates
         * @param {string} symbol
         *
         * @throws {RequiredError}
         */
        accountCommission: async (symbol: string): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('accountCommission', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/account/commission',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get current account information.
         * Weight: 20
         *
         * @summary Account information
         * @param {boolean} [omitZeroBalances] When set to `true`, emits only the non-zero balances of an account. <br>Default value: `false`
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        getAccount: async (
            omitZeroBalances?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (omitZeroBalances !== undefined && omitZeroBalances !== null) {
                localVarQueryParameter['omitZeroBalances'] = omitZeroBalances;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Retrieves allocations resulting from SOR order placement.
         * Weight: 20
         *
         * @summary Query Allocations
         * @param {string} symbol
         * @param {number} [startTime] Timestamp in ms to get aggregate trades from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get aggregate trades until INCLUSIVE.
         * @param {number} [fromAllocationId]
         * @param {number} [limit] Default: 500; Maximum: 1000.
         * @param {number} [orderId]
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        myAllocations: async (
            symbol: string,
            startTime?: number,
            endTime?: number,
            fromAllocationId?: number,
            limit?: number,
            orderId?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('myAllocations', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromAllocationId !== undefined && fromAllocationId !== null) {
                localVarQueryParameter['fromAllocationId'] = fromAllocationId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/myAllocations',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Displays the list of orders that were expired due to STP.
         *
         * These are the combinations supported:
         *
         * `symbol` + `preventedMatchId`
         * `symbol` + `orderId`
         * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
         * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
         * Weight: Case                            | Weight
         * ----                            | -----
         * If `symbol` is invalid          | 2
         * Querying by `preventedMatchId`  | 2
         * Querying by `orderId`           | 20
         *
         * @summary Query Prevented Matches
         * @param {string} symbol
         * @param {number} [preventedMatchId]
         * @param {number} [orderId]
         * @param {number} [fromPreventedMatchId]
         * @param {number} [limit] Default: 500; Maximum: 1000.
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        myPreventedMatches: async (
            symbol: string,
            preventedMatchId?: number,
            orderId?: number,
            fromPreventedMatchId?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('myPreventedMatches', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (preventedMatchId !== undefined && preventedMatchId !== null) {
                localVarQueryParameter['preventedMatchId'] = preventedMatchId;
            }

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (fromPreventedMatchId !== undefined && fromPreventedMatchId !== null) {
                localVarQueryParameter['fromPreventedMatchId'] = fromPreventedMatchId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/myPreventedMatches',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get trades for a specific account and symbol.
         * Weight: Condition| Weight|
         * ---| ---
         * |Without orderId|20|
         * |With orderId|5|
         *
         * @summary Account trade list
         * @param {string} symbol
         * @param {number} [orderId]
         * @param {number} [startTime] Timestamp in ms to get aggregate trades from INCLUSIVE.
         * @param {number} [endTime] Timestamp in ms to get aggregate trades until INCLUSIVE.
         * @param {number} [fromId] ID to get aggregate trades from INCLUSIVE.
         * @param {number} [limit] Default: 500; Maximum: 1000.
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        myTrades: async (
            symbol: string,
            orderId?: number,
            startTime?: number,
            endTime?: number,
            fromId?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('myTrades', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (fromId !== undefined && fromId !== null) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/myTrades',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Queries all amendments of a single order.
         * Weight: 4
         *
         * @summary Query Order Amendments
         * @param {string} symbol
         * @param {number} orderId
         * @param {number} [fromExecutionId]
         * @param {number} [limit] Default:500; Maximum: 1000
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        orderAmendments: async (
            symbol: string,
            orderId: number,
            fromExecutionId?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('orderAmendments', 'symbol', symbol);
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderAmendments', 'orderId', orderId);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (orderId !== undefined && orderId !== null) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (fromExecutionId !== undefined && fromExecutionId !== null) {
                localVarQueryParameter['fromExecutionId'] = fromExecutionId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/order/amendments',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Displays the user's unfilled order count for all intervals.
         * Weight: 40
         *
         * @summary Query Unfilled Order Count
         * @param {number} [recvWindow] The value cannot be greater than ```60000```
         *
         * @throws {RequiredError}
         */
        rateLimitOrder: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/api/v3/rateLimit/order',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary Query Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<RestApiResponse<AccountCommissionResponse>>;
    /**
     * Get current account information.
     * Weight: 20
     *
     * @summary Account information
     * @param {GetAccountRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getAccount(requestParameters?: GetAccountRequest): Promise<RestApiResponse<GetAccountResponse>>;
    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary Query Allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<RestApiResponse<MyAllocationsResponse>>;
    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary Query Prevented Matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<RestApiResponse<MyPreventedMatchesResponse>>;
    /**
     * Get trades for a specific account and symbol.
     * Weight: Condition| Weight|
     * ---| ---
     * |Without orderId|20|
     * |With orderId|5|
     *
     * @summary Account trade list
     * @param {MyTradesRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    myTrades(requestParameters: MyTradesRequest): Promise<RestApiResponse<MyTradesResponse>>;
    /**
     * Queries all amendments of a single order.
     * Weight: 4
     *
     * @summary Query Order Amendments
     * @param {OrderAmendmentsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    orderAmendments(
        requestParameters: OrderAmendmentsRequest
    ): Promise<RestApiResponse<OrderAmendmentsResponse>>;
    /**
     * Displays the user's unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary Query Unfilled Order Count
     * @param {RateLimitOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    rateLimitOrder(
        requestParameters?: RateLimitOrderRequest
    ): Promise<RestApiResponse<RateLimitOrderResponse>>;
}

/**
 * Request parameters for accountCommission operation in AccountApi.
 * @interface AccountCommissionRequest
 */
export interface AccountCommissionRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountCommission
     */
    readonly symbol: string;
}

/**
 * Request parameters for getAccount operation in AccountApi.
 * @interface GetAccountRequest
 */
export interface GetAccountRequest {
    /**
     * When set to `true`, emits only the non-zero balances of an account. <br>Default value: `false`
     * @type {boolean}
     * @memberof AccountApiGetAccount
     */
    readonly omitZeroBalances?: boolean;

    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiGetAccount
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myAllocations operation in AccountApi.
 * @interface MyAllocationsRequest
 */
export interface MyAllocationsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyAllocations
     */
    readonly symbol: string;

    /**
     * Timestamp in ms to get aggregate trades from INCLUSIVE.
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly startTime?: number;

    /**
     * Timestamp in ms to get aggregate trades until INCLUSIVE.
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly fromAllocationId?: number;

    /**
     * Default: 500; Maximum: 1000.
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly orderId?: number;

    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myPreventedMatches operation in AccountApi.
 * @interface MyPreventedMatchesRequest
 */
export interface MyPreventedMatchesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly preventedMatchId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly orderId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly fromPreventedMatchId?: number;

    /**
     * Default: 500; Maximum: 1000.
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myTrades operation in AccountApi.
 * @interface MyTradesRequest
 */
export interface MyTradesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyTrades
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly orderId?: number;

    /**
     * Timestamp in ms to get aggregate trades from INCLUSIVE.
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly startTime?: number;

    /**
     * Timestamp in ms to get aggregate trades until INCLUSIVE.
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly endTime?: number;

    /**
     * ID to get aggregate trades from INCLUSIVE.
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly fromId?: number;

    /**
     * Default: 500; Maximum: 1000.
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderAmendments operation in AccountApi.
 * @interface OrderAmendmentsRequest
 */
export interface OrderAmendmentsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiOrderAmendments
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiOrderAmendments
     */
    readonly orderId: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiOrderAmendments
     */
    readonly fromExecutionId?: number;

    /**
     * Default:500; Maximum: 1000
     * @type {number}
     * @memberof AccountApiOrderAmendments
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiOrderAmendments
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for rateLimitOrder operation in AccountApi.
 * @interface RateLimitOrderRequest
 */
export interface RateLimitOrderRequest {
    /**
     * The value cannot be greater than ```60000```
     * @type {number}
     * @memberof AccountApiRateLimitOrder
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary Query Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountCommissionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-commission-rates-user_data Binance API Documentation}
     */
    public async accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<RestApiResponse<AccountCommissionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountCommission(
            requestParameters?.symbol
        );
        return sendRequest<AccountCommissionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get current account information.
     * Weight: 20
     *
     * @summary Account information
     * @param {GetAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#account-information-user_data Binance API Documentation}
     */
    public async getAccount(
        requestParameters: GetAccountRequest = {}
    ): Promise<RestApiResponse<GetAccountResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getAccount(
            requestParameters?.omitZeroBalances,
            requestParameters?.recvWindow
        );
        return sendRequest<GetAccountResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary Query Allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyAllocationsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-allocations-user_data Binance API Documentation}
     */
    public async myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<RestApiResponse<MyAllocationsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.myAllocations(
            requestParameters?.symbol,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.fromAllocationId,
            requestParameters?.limit,
            requestParameters?.orderId,
            requestParameters?.recvWindow
        );
        return sendRequest<MyAllocationsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary Query Prevented Matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyPreventedMatchesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-prevented-matches-user_data Binance API Documentation}
     */
    public async myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<RestApiResponse<MyPreventedMatchesResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.myPreventedMatches(
            requestParameters?.symbol,
            requestParameters?.preventedMatchId,
            requestParameters?.orderId,
            requestParameters?.fromPreventedMatchId,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<MyPreventedMatchesResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get trades for a specific account and symbol.
     * Weight: Condition| Weight|
     * ---| ---
     * |Without orderId|20|
     * |With orderId|5|
     *
     * @summary Account trade list
     * @param {MyTradesRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<MyTradesResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#account-trade-list-user_data Binance API Documentation}
     */
    public async myTrades(
        requestParameters: MyTradesRequest
    ): Promise<RestApiResponse<MyTradesResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.myTrades(
            requestParameters?.symbol,
            requestParameters?.orderId,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.fromId,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<MyTradesResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Queries all amendments of a single order.
     * Weight: 4
     *
     * @summary Query Order Amendments
     * @param {OrderAmendmentsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderAmendmentsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-order-amendments-user_data Binance API Documentation}
     */
    public async orderAmendments(
        requestParameters: OrderAmendmentsRequest
    ): Promise<RestApiResponse<OrderAmendmentsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.orderAmendments(
            requestParameters?.symbol,
            requestParameters?.orderId,
            requestParameters?.fromExecutionId,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<OrderAmendmentsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Displays the user's unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary Query Unfilled Order Count
     * @param {RateLimitOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RateLimitOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/rest-api/account-endpoints#query-unfilled-order-count-user_data Binance API Documentation}
     */
    public async rateLimitOrder(
        requestParameters: RateLimitOrderRequest = {}
    ): Promise<RestApiResponse<RateLimitOrderResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.rateLimitOrder(
            requestParameters?.recvWindow
        );
        return sendRequest<RateLimitOrderResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
