/**
 * Binance Public Spot WebSocket Streams
 *
 * OpenAPI Specifications for the Binance Public Spot WebSocket Streams
 *
 * API documents:
 * - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
 * - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    WebsocketStreamsBase,
    WebsocketStream,
    assertParamExists,
    replaceWebsocketStreamsPlaceholders,
    createStreamHandler,
} from '@binance/common';
import type {
    AggTradeResponse,
    AllMarketRollingWindowTickerResponse,
    AllMiniTickerResponse,
    AllTickerResponse,
    AvgPriceResponse,
    BookTickerResponse,
    DiffBookDepthResponse,
    KlineOffsetResponse,
    KlineResponse,
    MiniTickerResponse,
    PartialBookDepthResponse,
    RollingWindowTickerResponse,
    TickerResponse,
    TradeResponse,
} from '../types';

const WebSocketStreamsApiParamCreator = function () {
    return {
        /**
         * The Aggregate Trade Streams push trade information that is aggregated for a single taker order.
         *
         * @summary WebSocket Aggregate Trade Streams
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        aggTrade: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('aggTrade', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@aggTrade'.slice(1), {
                symbol,
                id,
            });
        },
        /**
         * Rolling window ticker statistics for all market symbols, computed over multiple windows.
         * Note that only tickers that have changed will be present in the array.
         *
         * @summary WebSocket All Market Rolling Window Statistics Streams
         * @param {AllMarketRollingWindowTickerWindowSizeEnum} windowSize
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        allMarketRollingWindowTicker: (
            windowSize: AllMarketRollingWindowTickerWindowSizeEnum,
            id?: string
        ): string => {
            // verify required parameter 'windowSize' is not null or undefined
            assertParamExists('allMarketRollingWindowTicker', 'windowSize', windowSize);

            return replaceWebsocketStreamsPlaceholders('/!ticker_<window-size>@arr'.slice(1), {
                windowSize,
                id,
            });
        },
        /**
         * 24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
         *
         * @summary WebSocket All Market Mini Tickers Stream
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        allMiniTicker: (id?: string): string => {
            return replaceWebsocketStreamsPlaceholders('/!miniTicker@arr'.slice(1), { id });
        },
        /**
         * 24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
         *
         * @summary WebSocket All Market Tickers Stream
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        allTicker: (id?: string): string => {
            return replaceWebsocketStreamsPlaceholders('/!ticker@arr'.slice(1), { id });
        },
        /**
         * Average price streams push changes in the average price over a fixed time interval.
         *
         * @summary WebSocket Average Price
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        avgPrice: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('avgPrice', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@avgPrice'.slice(1), {
                symbol,
                id,
            });
        },
        /**
         * Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.
         * Multiple `<symbol>@bookTicker` streams can be subscribed to over one connection.
         *
         * @summary WebSocket Individual Symbol Book Ticker Streams
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        bookTicker: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('bookTicker', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@bookTicker'.slice(1), {
                symbol,
                id,
            });
        },
        /**
         * Order book price and quantity depth updates used to locally manage an order book.
         *
         * @summary WebSocket Diff. Depth Stream
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         * @param {string} [updateSpeed] 1000ms or 100ms
         *
         * @throws {RequiredError}
         */
        diffBookDepth: (symbol: string, id?: string, updateSpeed?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('diffBookDepth', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@depth<updateSpeed>'.slice(1), {
                symbol,
                id,
                updateSpeed,
            });
        },
        /**
         * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+0` timezone
         *
         * <a id="kline-intervals"></a>
         *
         * @summary WebSocket Kline/Candlestick Streams for UTC
         * @param {string} symbol Symbol to query
         * @param {KlineIntervalEnum} interval
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        kline: (symbol: string, interval: KlineIntervalEnum, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('kline', 'symbol', symbol);
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('kline', 'interval', interval);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), {
                symbol,
                interval,
                id,
            });
        },
        /**
         * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+8` timezone
         *
         * @summary WebSocket Kline/Candlestick Streams with timezone offset
         * @param {string} symbol Symbol to query
         * @param {KlineOffsetIntervalEnum} interval
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        klineOffset: (symbol: string, interval: KlineOffsetIntervalEnum, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('klineOffset', 'symbol', symbol);
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('klineOffset', 'interval', interval);

            return replaceWebsocketStreamsPlaceholders(
                '/<symbol>@kline_<interval>@+08:00'.slice(1),
                { symbol, interval, id }
            );
        },
        /**
         * 24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
         *
         * @summary WebSocket Individual Symbol Mini Ticker Stream
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        miniTicker: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('miniTicker', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@miniTicker'.slice(1), {
                symbol,
                id,
            });
        },
        /**
         * Top **\<levels\>** bids and asks, pushed every second. Valid **\<levels\>** are 5, 10, or 20.
         *
         * @summary WebSocket Partial Book Depth Streams
         * @param {string} symbol Symbol to query
         * @param {PartialBookDepthLevelsEnum} levels
         * @param {string} [id] Unique WebSocket request ID.
         * @param {string} [updateSpeed] 1000ms or 100ms
         *
         * @throws {RequiredError}
         */
        partialBookDepth: (
            symbol: string,
            levels: PartialBookDepthLevelsEnum,
            id?: string,
            updateSpeed?: string
        ): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('partialBookDepth', 'symbol', symbol);
            // verify required parameter 'levels' is not null or undefined
            assertParamExists('partialBookDepth', 'levels', levels);

            return replaceWebsocketStreamsPlaceholders(
                '/<symbol>@depth<levels><updateSpeed>'.slice(1),
                { symbol, levels, id, updateSpeed }
            );
        },
        /**
         * Rolling window ticker statistics for a single symbol, computed over multiple windows.
         *
         * @summary WebSocket Individual Symbol Rolling Window Statistics Streams
         * @param {string} symbol Symbol to query
         * @param {RollingWindowTickerWindowSizeEnum} windowSize
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        rollingWindowTicker: (
            symbol: string,
            windowSize: RollingWindowTickerWindowSizeEnum,
            id?: string
        ): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('rollingWindowTicker', 'symbol', symbol);
            // verify required parameter 'windowSize' is not null or undefined
            assertParamExists('rollingWindowTicker', 'windowSize', windowSize);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@ticker_<window_size>'.slice(1), {
                symbol,
                windowSize,
                id,
            });
        },
        /**
         * 24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
         *
         * @summary WebSocket Individual Symbol Ticker Streams
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        ticker: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('ticker', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), { symbol, id });
        },
        /**
         * The Trade Streams push raw trade information; each trade has a unique buyer and seller.
         *
         * @summary WebSocket Trade Streams
         * @param {string} symbol Symbol to query
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        trade: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('trade', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@trade'.slice(1), { symbol, id });
        },
    };
};

/**
 * WebSocketStreamsApi - interface
 * @interface WebSocketStreamsApi
 */
export interface WebSocketStreamsApiInterface {
    /**
     * The Aggregate Trade Streams push trade information that is aggregated for a single taker order.
     *
     * @summary WebSocket Aggregate Trade Streams
     * @param {AggTradeRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<AggTradeResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    aggTrade(requestParameters: AggTradeRequest): WebsocketStream<AggTradeResponse>;

    /**
     * Rolling window ticker statistics for all market symbols, computed over multiple windows.
     * Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Rolling Window Statistics Streams
     * @param {AllMarketRollingWindowTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<AllMarketRollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    allMarketRollingWindowTicker(
        requestParameters: AllMarketRollingWindowTickerRequest
    ): WebsocketStream<AllMarketRollingWindowTickerResponse>;

    /**
     * 24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Mini Tickers Stream
     * @param {AllMiniTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<AllMiniTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    allMiniTicker(requestParameters?: AllMiniTickerRequest): WebsocketStream<AllMiniTickerResponse>;

    /**
     * 24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Tickers Stream
     * @param {AllTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<AllTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    allTicker(requestParameters?: AllTickerRequest): WebsocketStream<AllTickerResponse>;

    /**
     * Average price streams push changes in the average price over a fixed time interval.
     *
     * @summary WebSocket Average Price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<AvgPriceResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    avgPrice(requestParameters: AvgPriceRequest): WebsocketStream<AvgPriceResponse>;

    /**
     * Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.
     * Multiple `<symbol>@bookTicker` streams can be subscribed to over one connection.
     *
     * @summary WebSocket Individual Symbol Book Ticker Streams
     * @param {BookTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<BookTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    bookTicker(requestParameters: BookTickerRequest): WebsocketStream<BookTickerResponse>;

    /**
     * Order book price and quantity depth updates used to locally manage an order book.
     *
     * @summary WebSocket Diff. Depth Stream
     * @param {DiffBookDepthRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<DiffBookDepthResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    diffBookDepth(requestParameters: DiffBookDepthRequest): WebsocketStream<DiffBookDepthResponse>;

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+0` timezone
     *
     * <a id="kline-intervals"></a>
     *
     * @summary WebSocket Kline/Candlestick Streams for UTC
     * @param {KlineRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<KlineResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    kline(requestParameters: KlineRequest): WebsocketStream<KlineResponse>;

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+8` timezone
     *
     * @summary WebSocket Kline/Candlestick Streams with timezone offset
     * @param {KlineOffsetRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<KlineOffsetResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    klineOffset(requestParameters: KlineOffsetRequest): WebsocketStream<KlineOffsetResponse>;

    /**
     * 24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Mini Ticker Stream
     * @param {MiniTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<MiniTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    miniTicker(requestParameters: MiniTickerRequest): WebsocketStream<MiniTickerResponse>;

    /**
     * Top **\<levels\>** bids and asks, pushed every second. Valid **\<levels\>** are 5, 10, or 20.
     *
     * @summary WebSocket Partial Book Depth Streams
     * @param {PartialBookDepthRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<PartialBookDepthResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    partialBookDepth(
        requestParameters: PartialBookDepthRequest
    ): WebsocketStream<PartialBookDepthResponse>;

    /**
     * Rolling window ticker statistics for a single symbol, computed over multiple windows.
     *
     * @summary WebSocket Individual Symbol Rolling Window Statistics Streams
     * @param {RollingWindowTickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<RollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    rollingWindowTicker(
        requestParameters: RollingWindowTickerRequest
    ): WebsocketStream<RollingWindowTickerResponse>;

    /**
     * 24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Ticker Streams
     * @param {TickerRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<TickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    ticker(requestParameters: TickerRequest): WebsocketStream<TickerResponse>;

    /**
     * The Trade Streams push raw trade information; each trade has a unique buyer and seller.
     *
     * @summary WebSocket Trade Streams
     * @param {TradeRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<TradeResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApiInterface
     */
    trade(requestParameters: TradeRequest): WebsocketStream<TradeResponse>;
}

/**
 * Request parameters for aggTrade operation in WebSocketStreamsApi.
 * @interface AggTradeRequest
 */
export interface AggTradeRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiAggTrade
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiAggTrade
     */
    readonly id?: string;
}

/**
 * Request parameters for allMarketRollingWindowTicker operation in WebSocketStreamsApi.
 * @interface AllMarketRollingWindowTickerRequest
 */
export interface AllMarketRollingWindowTickerRequest {
    /**
     *
     * @type {'1h' | '4h' | '1d'}
     * @memberof WebSocketStreamsApiAllMarketRollingWindowTicker
     */
    readonly windowSize: AllMarketRollingWindowTickerWindowSizeEnum;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiAllMarketRollingWindowTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for allMiniTicker operation in WebSocketStreamsApi.
 * @interface AllMiniTickerRequest
 */
export interface AllMiniTickerRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiAllMiniTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for allTicker operation in WebSocketStreamsApi.
 * @interface AllTickerRequest
 */
export interface AllTickerRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiAllTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for avgPrice operation in WebSocketStreamsApi.
 * @interface AvgPriceRequest
 */
export interface AvgPriceRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiAvgPrice
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiAvgPrice
     */
    readonly id?: string;
}

/**
 * Request parameters for bookTicker operation in WebSocketStreamsApi.
 * @interface BookTickerRequest
 */
export interface BookTickerRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiBookTicker
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiBookTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for diffBookDepth operation in WebSocketStreamsApi.
 * @interface DiffBookDepthRequest
 */
export interface DiffBookDepthRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiDiffBookDepth
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiDiffBookDepth
     */
    readonly id?: string;

    /**
     * 1000ms or 100ms
     * @type {string}
     * @memberof WebSocketStreamsApiDiffBookDepth
     */
    readonly updateSpeed?: string;
}

/**
 * Request parameters for kline operation in WebSocketStreamsApi.
 * @interface KlineRequest
 */
export interface KlineRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiKline
     */
    readonly symbol: string;

    /**
     *
     * @type {'1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M'}
     * @memberof WebSocketStreamsApiKline
     */
    readonly interval: KlineIntervalEnum;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiKline
     */
    readonly id?: string;
}

/**
 * Request parameters for klineOffset operation in WebSocketStreamsApi.
 * @interface KlineOffsetRequest
 */
export interface KlineOffsetRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiKlineOffset
     */
    readonly symbol: string;

    /**
     *
     * @type {'1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M'}
     * @memberof WebSocketStreamsApiKlineOffset
     */
    readonly interval: KlineOffsetIntervalEnum;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiKlineOffset
     */
    readonly id?: string;
}

/**
 * Request parameters for miniTicker operation in WebSocketStreamsApi.
 * @interface MiniTickerRequest
 */
export interface MiniTickerRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiMiniTicker
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiMiniTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for partialBookDepth operation in WebSocketStreamsApi.
 * @interface PartialBookDepthRequest
 */
export interface PartialBookDepthRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiPartialBookDepth
     */
    readonly symbol: string;

    /**
     *
     * @type {'5' | '10' | '20'}
     * @memberof WebSocketStreamsApiPartialBookDepth
     */
    readonly levels: PartialBookDepthLevelsEnum;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiPartialBookDepth
     */
    readonly id?: string;

    /**
     * 1000ms or 100ms
     * @type {string}
     * @memberof WebSocketStreamsApiPartialBookDepth
     */
    readonly updateSpeed?: string;
}

/**
 * Request parameters for rollingWindowTicker operation in WebSocketStreamsApi.
 * @interface RollingWindowTickerRequest
 */
export interface RollingWindowTickerRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiRollingWindowTicker
     */
    readonly symbol: string;

    /**
     *
     * @type {'1h' | '4h' | '1d'}
     * @memberof WebSocketStreamsApiRollingWindowTicker
     */
    readonly windowSize: RollingWindowTickerWindowSizeEnum;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiRollingWindowTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for ticker operation in WebSocketStreamsApi.
 * @interface TickerRequest
 */
export interface TickerRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiTicker
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiTicker
     */
    readonly id?: string;
}

/**
 * Request parameters for trade operation in WebSocketStreamsApi.
 * @interface TradeRequest
 */
export interface TradeRequest {
    /**
     * Symbol to query
     * @type {string}
     * @memberof WebSocketStreamsApiTrade
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebSocketStreamsApiTrade
     */
    readonly id?: string;
}

/**
 * WebSocketStreamsApi - interface
 * @class WebSocketStreamsApi
 * @extends {WebsocketStreamsBase}
 */
export class WebSocketStreamsApi implements WebSocketStreamsApiInterface {
    private readonly websocketBase: WebsocketStreamsBase;
    private localVarParamCreator;

    constructor(websocketBase: WebsocketStreamsBase) {
        this.websocketBase = websocketBase;
        this.localVarParamCreator = WebSocketStreamsApiParamCreator();
    }

    /**
     * The Aggregate Trade Streams push trade information that is aggregated for a single taker order.
     *
     * @summary WebSocket Aggregate Trade Streams
     * @param {AggTradeRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AggTradeResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#aggregate-trade-streams Binance API Documentation}
     */
    public aggTrade(requestParameters: AggTradeRequest): WebsocketStream<AggTradeResponse> {
        const stream = this.localVarParamCreator.aggTrade(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<AggTradeResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Rolling window ticker statistics for all market symbols, computed over multiple windows.
     * Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Rolling Window Statistics Streams
     * @param {AllMarketRollingWindowTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllMarketRollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-rolling-window-statistics-streams Binance API Documentation}
     */
    public allMarketRollingWindowTicker(
        requestParameters: AllMarketRollingWindowTickerRequest
    ): WebsocketStream<AllMarketRollingWindowTickerResponse> {
        const stream = this.localVarParamCreator.allMarketRollingWindowTicker(
            requestParameters?.windowSize,
            requestParameters?.id
        );

        return createStreamHandler<AllMarketRollingWindowTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Mini Tickers Stream
     * @param {AllMiniTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllMiniTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-mini-tickers-stream Binance API Documentation}
     */
    public allMiniTicker(
        requestParameters: AllMiniTickerRequest = {}
    ): WebsocketStream<AllMiniTickerResponse> {
        const stream = this.localVarParamCreator.allMiniTicker(requestParameters?.id);

        return createStreamHandler<AllMiniTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Tickers Stream
     * @param {AllTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-tickers-stream Binance API Documentation}
     */
    public allTicker(requestParameters: AllTickerRequest = {}): WebsocketStream<AllTickerResponse> {
        const stream = this.localVarParamCreator.allTicker(requestParameters?.id);

        return createStreamHandler<AllTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Average price streams push changes in the average price over a fixed time interval.
     *
     * @summary WebSocket Average Price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AvgPriceResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#average-price Binance API Documentation}
     */
    public avgPrice(requestParameters: AvgPriceRequest): WebsocketStream<AvgPriceResponse> {
        const stream = this.localVarParamCreator.avgPrice(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<AvgPriceResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.
     * Multiple `<symbol>@bookTicker` streams can be subscribed to over one connection.
     *
     * @summary WebSocket Individual Symbol Book Ticker Streams
     * @param {BookTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<BookTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-book-ticker-streams Binance API Documentation}
     */
    public bookTicker(requestParameters: BookTickerRequest): WebsocketStream<BookTickerResponse> {
        const stream = this.localVarParamCreator.bookTicker(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<BookTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Order book price and quantity depth updates used to locally manage an order book.
     *
     * @summary WebSocket Diff. Depth Stream
     * @param {DiffBookDepthRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<DiffBookDepthResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#diff-depth-stream Binance API Documentation}
     */
    public diffBookDepth(
        requestParameters: DiffBookDepthRequest
    ): WebsocketStream<DiffBookDepthResponse> {
        const stream = this.localVarParamCreator.diffBookDepth(
            requestParameters?.symbol,
            requestParameters?.id,
            requestParameters?.updateSpeed
        );

        return createStreamHandler<DiffBookDepthResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+0` timezone
     *
     * <a id="kline-intervals"></a>
     *
     * @summary WebSocket Kline/Candlestick Streams for UTC
     * @param {KlineRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#klinecandlestick-streams-for-utc Binance API Documentation}
     */
    public kline(requestParameters: KlineRequest): WebsocketStream<KlineResponse> {
        const stream = this.localVarParamCreator.kline(
            requestParameters?.symbol,
            requestParameters?.interval,
            requestParameters?.id
        );

        return createStreamHandler<KlineResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+8` timezone
     *
     * @summary WebSocket Kline/Candlestick Streams with timezone offset
     * @param {KlineOffsetRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineOffsetResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#klinecandlestick-streams-with-timezone-offset Binance API Documentation}
     */
    public klineOffset(
        requestParameters: KlineOffsetRequest
    ): WebsocketStream<KlineOffsetResponse> {
        const stream = this.localVarParamCreator.klineOffset(
            requestParameters?.symbol,
            requestParameters?.interval,
            requestParameters?.id
        );

        return createStreamHandler<KlineOffsetResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Mini Ticker Stream
     * @param {MiniTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<MiniTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-mini-ticker-stream Binance API Documentation}
     */
    public miniTicker(requestParameters: MiniTickerRequest): WebsocketStream<MiniTickerResponse> {
        const stream = this.localVarParamCreator.miniTicker(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<MiniTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Top **\<levels\>** bids and asks, pushed every second. Valid **\<levels\>** are 5, 10, or 20.
     *
     * @summary WebSocket Partial Book Depth Streams
     * @param {PartialBookDepthRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<PartialBookDepthResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#partial-book-depth-streams Binance API Documentation}
     */
    public partialBookDepth(
        requestParameters: PartialBookDepthRequest
    ): WebsocketStream<PartialBookDepthResponse> {
        const stream = this.localVarParamCreator.partialBookDepth(
            requestParameters?.symbol,
            requestParameters?.levels,
            requestParameters?.id,
            requestParameters?.updateSpeed
        );

        return createStreamHandler<PartialBookDepthResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Rolling window ticker statistics for a single symbol, computed over multiple windows.
     *
     * @summary WebSocket Individual Symbol Rolling Window Statistics Streams
     * @param {RollingWindowTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<RollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-rolling-window-statistics-streams Binance API Documentation}
     */
    public rollingWindowTicker(
        requestParameters: RollingWindowTickerRequest
    ): WebsocketStream<RollingWindowTickerResponse> {
        const stream = this.localVarParamCreator.rollingWindowTicker(
            requestParameters?.symbol,
            requestParameters?.windowSize,
            requestParameters?.id
        );

        return createStreamHandler<RollingWindowTickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Ticker Streams
     * @param {TickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TickerResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-ticker-streams Binance API Documentation}
     */
    public ticker(requestParameters: TickerRequest): WebsocketStream<TickerResponse> {
        const stream = this.localVarParamCreator.ticker(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<TickerResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The Trade Streams push raw trade information; each trade has a unique buyer and seller.
     *
     * @summary WebSocket Trade Streams
     * @param {TradeRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TradeResponse>}
     * @throws {RequiredError}
     * @memberof WebSocketStreamsApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#trade-streams Binance API Documentation}
     */
    public trade(requestParameters: TradeRequest): WebsocketStream<TradeResponse> {
        const stream = this.localVarParamCreator.trade(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<TradeResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }
}

export const AllMarketRollingWindowTickerWindowSizeEnum = {
    WINDOW_SIZE_1h: '1h',
    WINDOW_SIZE_4h: '4h',
    WINDOW_SIZE_1d: '1d',
} as const;
export type AllMarketRollingWindowTickerWindowSizeEnum =
    (typeof AllMarketRollingWindowTickerWindowSizeEnum)[keyof typeof AllMarketRollingWindowTickerWindowSizeEnum];
export const KlineIntervalEnum = {
    INTERVAL_1s: '1s',
    INTERVAL_1m: '1m',
    INTERVAL_3m: '3m',
    INTERVAL_5m: '5m',
    INTERVAL_15m: '15m',
    INTERVAL_30m: '30m',
    INTERVAL_1h: '1h',
    INTERVAL_2h: '2h',
    INTERVAL_4h: '4h',
    INTERVAL_6h: '6h',
    INTERVAL_8h: '8h',
    INTERVAL_12h: '12h',
    INTERVAL_1d: '1d',
    INTERVAL_3d: '3d',
    INTERVAL_1w: '1w',
    INTERVAL_1M: '1M',
} as const;
export type KlineIntervalEnum = (typeof KlineIntervalEnum)[keyof typeof KlineIntervalEnum];
export const KlineOffsetIntervalEnum = {
    INTERVAL_1s: '1s',
    INTERVAL_1m: '1m',
    INTERVAL_3m: '3m',
    INTERVAL_5m: '5m',
    INTERVAL_15m: '15m',
    INTERVAL_30m: '30m',
    INTERVAL_1h: '1h',
    INTERVAL_2h: '2h',
    INTERVAL_4h: '4h',
    INTERVAL_6h: '6h',
    INTERVAL_8h: '8h',
    INTERVAL_12h: '12h',
    INTERVAL_1d: '1d',
    INTERVAL_3d: '3d',
    INTERVAL_1w: '1w',
    INTERVAL_1M: '1M',
} as const;
export type KlineOffsetIntervalEnum =
    (typeof KlineOffsetIntervalEnum)[keyof typeof KlineOffsetIntervalEnum];
export const PartialBookDepthLevelsEnum = {
    LEVELS_5: '5',
    LEVELS_10: '10',
    LEVELS_20: '20',
} as const;
export type PartialBookDepthLevelsEnum =
    (typeof PartialBookDepthLevelsEnum)[keyof typeof PartialBookDepthLevelsEnum];
export const RollingWindowTickerWindowSizeEnum = {
    WINDOW_SIZE_1h: '1h',
    WINDOW_SIZE_4h: '4h',
    WINDOW_SIZE_1d: '1d',
} as const;
export type RollingWindowTickerWindowSizeEnum =
    (typeof RollingWindowTickerWindowSizeEnum)[keyof typeof RollingWindowTickerWindowSizeEnum];
