/**
 * Binance Public Spot WebSocket Streams
 *
 * OpenAPI Specifications for the Binance Public Spot WebSocket Streams
 *
 * API documents:
 * - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
 * - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketStreamsBase, WebsocketStream, createStreamHandler } from '@binance/common';
import { WebSocketStreamsApi } from './modules/web-socket-streams-api';

import type {
    AggTradeRequest,
    AllMarketRollingWindowTickerRequest,
    AllMiniTickerRequest,
    AllTickerRequest,
    AvgPriceRequest,
    BookTickerRequest,
    DiffBookDepthRequest,
    KlineRequest,
    KlineOffsetRequest,
    MiniTickerRequest,
    PartialBookDepthRequest,
    RollingWindowTickerRequest,
    TickerRequest,
    TradeRequest,
} from './modules/web-socket-streams-api';

import type {
    AggTradeResponse,
    AllMarketRollingWindowTickerResponse,
    AllMiniTickerResponse,
    AllTickerResponse,
    AvgPriceResponse,
    BookTickerResponse,
    DiffBookDepthResponse,
    KlineResponse,
    KlineOffsetResponse,
    MiniTickerResponse,
    PartialBookDepthResponse,
    RollingWindowTickerResponse,
    TickerResponse,
    TradeResponse,
} from './types';

export class WebsocketStreamsConnection {
    private websocketBase: WebsocketStreamsBase;
    private webSocketStreamsApi: WebSocketStreamsApi;

    constructor(websocketBase: WebsocketStreamsBase) {
        this.websocketBase = websocketBase;
        this.webSocketStreamsApi = new WebSocketStreamsApi(websocketBase);
    }

    /**
     * Adds an event listener for the specified WebSocket event.
     * @param event - The WebSocket event to listen for, such as 'open', 'message', 'error', 'close', 'ping', or 'pong'.
     * @param listener - The callback function to be executed when the event is triggered. The function can accept any number of arguments.
     */
    on(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.on(event, listener);
    }

    /**
     * Removes an event listener for the specified WebSocket event.
     * @param event - The WebSocket event to stop listening for, such as 'open', 'message', 'error', 'close', 'ping', or 'pong'.
     * @param listener - The callback function that was previously added as the event listener.
     */
    off(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.off(event, listener);
    }

    /**
     * Disconnects from the WebSocket server.
     * If there is no active connection, a warning is logged.
     * Otherwise, all connections in the connection pool are closed gracefully,
     * and a message is logged indicating that the connection has been disconnected.
     * @returns A Promise that resolves when all connections have been closed.
     * @throws Error if the WebSocket client is not set.
     */
    disconnect(): Promise<void> {
        return this.websocketBase.disconnect();
    }

    /**
     * Checks if the WebSocket connection is currently open.
     * @returns `true` if the connection is open, `false` otherwise.
     */
    isConnected(): boolean {
        return this.websocketBase.isConnected();
    }

    /**
     * Sends a ping message to all connected Websocket servers in the pool.
     * If no connections are ready, a warning is logged.
     * For each active connection, the ping message is sent, and debug logs provide details.
     * @throws Error if a Websocket client is not set for a connection.
     */
    pingServer(): void {
        this.websocketBase.pingServer();
    }

    /**
     * Subscribes to one or multiple WebSocket streams
     * Handles both single and pool modes
     * @param stream Single stream name or array of stream names to subscribe to
     * @param id Optional subscription ID
     * @returns void
     */
    subscribe(stream: string | string[], id?: string): void {
        this.websocketBase.subscribe(stream, id);
    }

    /**
     * Unsubscribes from one or multiple WebSocket streams
     * Handles both single and pool modes
     * @param stream Single stream name or array of stream names to unsubscribe from
     * @param id Optional unsubscription ID
     * @returns void
     */
    unsubscribe(stream: string | string[], id?: string): void {
        this.websocketBase.unsubscribe(stream, id);
    }

    /**
     * Checks if the WebSocket connection is subscribed to the specified stream.
     * @param stream The name of the WebSocket stream to check.
     * @returns `true` if the connection is subscribed to the stream, `false` otherwise.
     */
    isSubscribed(stream: string): boolean {
        return this.websocketBase.isSubscribed(stream);
    }

    /**
     * Subscribes to the user data WebSocket stream using the provided listen key.
     * @param listenKey - The listen key for the user data WebSocket stream.
     * @param id - Optional user data stream ID
     * @returns A WebSocket stream handler for the user data stream.
     */
    userData(listenKey: string, id?: string): WebsocketStream<object> {
        return createStreamHandler<object>(this.websocketBase, listenKey, id);
    }

    /**
     * The Aggregate Trade Streams push trade information that is aggregated for a single taker order.
     *
     * @summary WebSocket Aggregate Trade Streams
     * @param {AggTradeRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AggTradeResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#aggregate-trade-streams Binance API Documentation}
     */
    aggTrade(requestParameters: AggTradeRequest): WebsocketStream<AggTradeResponse> {
        return this.webSocketStreamsApi.aggTrade(requestParameters);
    }

    /**
     * Rolling window ticker statistics for all market symbols, computed over multiple windows.
     * Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Rolling Window Statistics Streams
     * @param {AllMarketRollingWindowTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllMarketRollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-rolling-window-statistics-streams Binance API Documentation}
     */
    allMarketRollingWindowTicker(
        requestParameters: AllMarketRollingWindowTickerRequest
    ): WebsocketStream<AllMarketRollingWindowTickerResponse> {
        return this.webSocketStreamsApi.allMarketRollingWindowTicker(requestParameters);
    }

    /**
     * 24hr rolling window mini-ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Mini Tickers Stream
     * @param {AllMiniTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllMiniTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-mini-tickers-stream Binance API Documentation}
     */
    allMiniTicker(
        requestParameters: AllMiniTickerRequest = {}
    ): WebsocketStream<AllMiniTickerResponse> {
        return this.webSocketStreamsApi.allMiniTicker(requestParameters);
    }

    /**
     * 24hr rolling window ticker statistics for all symbols that changed in an array. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs. Note that only tickers that have changed will be present in the array.
     *
     * @summary WebSocket All Market Tickers Stream
     * @param {AllTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AllTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#all-market-tickers-stream Binance API Documentation}
     */
    allTicker(requestParameters: AllTickerRequest = {}): WebsocketStream<AllTickerResponse> {
        return this.webSocketStreamsApi.allTicker(requestParameters);
    }

    /**
     * Average price streams push changes in the average price over a fixed time interval.
     *
     * @summary WebSocket Average Price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<AvgPriceResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#average-price Binance API Documentation}
     */
    avgPrice(requestParameters: AvgPriceRequest): WebsocketStream<AvgPriceResponse> {
        return this.webSocketStreamsApi.avgPrice(requestParameters);
    }

    /**
     * Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.
     * Multiple `<symbol>@bookTicker` streams can be subscribed to over one connection.
     *
     * @summary WebSocket Individual Symbol Book Ticker Streams
     * @param {BookTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<BookTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-book-ticker-streams Binance API Documentation}
     */
    bookTicker(requestParameters: BookTickerRequest): WebsocketStream<BookTickerResponse> {
        return this.webSocketStreamsApi.bookTicker(requestParameters);
    }

    /**
     * Order book price and quantity depth updates used to locally manage an order book.
     *
     * @summary WebSocket Diff. Depth Stream
     * @param {DiffBookDepthRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<DiffBookDepthResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#diff-depth-stream Binance API Documentation}
     */
    diffBookDepth(requestParameters: DiffBookDepthRequest): WebsocketStream<DiffBookDepthResponse> {
        return this.webSocketStreamsApi.diffBookDepth(requestParameters);
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+0` timezone
     *
     * <a id="kline-intervals"></a>
     *
     * @summary WebSocket Kline/Candlestick Streams for UTC
     * @param {KlineRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#klinecandlestick-streams-for-utc Binance API Documentation}
     */
    kline(requestParameters: KlineRequest): WebsocketStream<KlineResponse> {
        return this.webSocketStreamsApi.kline(requestParameters);
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second in `UTC+8` timezone
     *
     * @summary WebSocket Kline/Candlestick Streams with timezone offset
     * @param {KlineOffsetRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineOffsetResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#klinecandlestick-streams-with-timezone-offset Binance API Documentation}
     */
    klineOffset(requestParameters: KlineOffsetRequest): WebsocketStream<KlineOffsetResponse> {
        return this.webSocketStreamsApi.klineOffset(requestParameters);
    }

    /**
     * 24hr rolling window mini-ticker statistics. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Mini Ticker Stream
     * @param {MiniTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<MiniTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-mini-ticker-stream Binance API Documentation}
     */
    miniTicker(requestParameters: MiniTickerRequest): WebsocketStream<MiniTickerResponse> {
        return this.webSocketStreamsApi.miniTicker(requestParameters);
    }

    /**
     * Top **\<levels\>** bids and asks, pushed every second. Valid **\<levels\>** are 5, 10, or 20.
     *
     * @summary WebSocket Partial Book Depth Streams
     * @param {PartialBookDepthRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<PartialBookDepthResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#partial-book-depth-streams Binance API Documentation}
     */
    partialBookDepth(
        requestParameters: PartialBookDepthRequest
    ): WebsocketStream<PartialBookDepthResponse> {
        return this.webSocketStreamsApi.partialBookDepth(requestParameters);
    }

    /**
     * Rolling window ticker statistics for a single symbol, computed over multiple windows.
     *
     * @summary WebSocket Individual Symbol Rolling Window Statistics Streams
     * @param {RollingWindowTickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<RollingWindowTickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-rolling-window-statistics-streams Binance API Documentation}
     */
    rollingWindowTicker(
        requestParameters: RollingWindowTickerRequest
    ): WebsocketStream<RollingWindowTickerResponse> {
        return this.webSocketStreamsApi.rollingWindowTicker(requestParameters);
    }

    /**
     * 24hr rolling window ticker statistics for a single symbol. These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.
     *
     * @summary WebSocket Individual Symbol Ticker Streams
     * @param {TickerRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TickerResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#individual-symbol-ticker-streams Binance API Documentation}
     */
    ticker(requestParameters: TickerRequest): WebsocketStream<TickerResponse> {
        return this.webSocketStreamsApi.ticker(requestParameters);
    }

    /**
     * The Trade Streams push raw trade information; each trade has a unique buyer and seller.
     *
     * @summary WebSocket Trade Streams
     * @param {TradeRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TradeResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams#trade-streams Binance API Documentation}
     */
    trade(requestParameters: TradeRequest): WebsocketStream<TradeResponse> {
        return this.webSocketStreamsApi.trade(requestParameters);
    }
}
