/**
 * Binance Public Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Public Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketSendMsgOptions, WebsocketApiResponse } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { AuthApi } from './modules/auth-api';
import { GeneralApi } from './modules/general-api';
import { MarketApi } from './modules/market-api';
import { TradeApi } from './modules/trade-api';
import { UserDataStreamApi } from './modules/user-data-stream-api';

import type {
    AccountCommissionRequest,
    AccountRateLimitsOrdersRequest,
    AccountStatusRequest,
    AllOrderListsRequest,
    AllOrdersRequest,
    MyAllocationsRequest,
    MyPreventedMatchesRequest,
    MyTradesRequest,
} from './modules/account-api';
import type {
    SessionLogonRequest,
    SessionLogoutRequest,
    SessionStatusRequest,
} from './modules/auth-api';
import type { ExchangeInfoRequest, PingRequest, TimeRequest } from './modules/general-api';
import type {
    AvgPriceRequest,
    DepthRequest,
    KlinesRequest,
    TickerRequest,
    Ticker24hrRequest,
    TickerBookRequest,
    TickerPriceRequest,
    TickerTradingDayRequest,
    TradesAggregateRequest,
    TradesHistoricalRequest,
    TradesRecentRequest,
    UiKlinesRequest,
} from './modules/market-api';
import type {
    OpenOrderListsStatusRequest,
    OpenOrdersCancelAllRequest,
    OpenOrdersStatusRequest,
    OrderCancelRequest,
    OrderCancelReplaceRequest,
    OrderListCancelRequest,
    OrderListPlaceRequest,
    OrderListPlaceOcoRequest,
    OrderListPlaceOtoRequest,
    OrderListPlaceOtocoRequest,
    OrderListStatusRequest,
    OrderPlaceRequest,
    OrderStatusRequest,
    OrderTestRequest,
    SorOrderPlaceRequest,
    SorOrderTestRequest,
} from './modules/trade-api';
import type {
    UserDataStreamPingRequest,
    UserDataStreamStartRequest,
    UserDataStreamStopRequest,
    UserDataStreamSubscribeRequest,
    UserDataStreamUnsubscribeRequest,
} from './modules/user-data-stream-api';

import type {
    AccountCommissionResponse,
    AccountRateLimitsOrdersResponse,
    AccountStatusResponse,
    AllOrderListsResponse,
    AllOrdersResponse,
    MyAllocationsResponse,
    MyPreventedMatchesResponse,
    MyTradesResponse,
} from './types';
import type { SessionLogonResponse, SessionLogoutResponse, SessionStatusResponse } from './types';
import type { ExchangeInfoResponse, TimeResponse } from './types';
import type {
    AvgPriceResponse,
    DepthResponse,
    KlinesResponse,
    TickerResponse,
    Ticker24hrResponse,
    TickerBookResponse,
    TickerPriceResponse,
    TickerTradingDayResponse,
    TradesAggregateResponse,
    TradesHistoricalResponse,
    TradesRecentResponse,
    UiKlinesResponse,
} from './types';
import type {
    OpenOrderListsStatusResponse,
    OpenOrdersCancelAllResponse,
    OpenOrdersStatusResponse,
    OrderCancelResponse,
    OrderCancelReplaceResponse,
    OrderListCancelResponse,
    OrderListPlaceResponse,
    OrderListPlaceOcoResponse,
    OrderListPlaceOtoResponse,
    OrderListPlaceOtocoResponse,
    OrderListStatusResponse,
    OrderPlaceResponse,
    OrderStatusResponse,
    OrderTestResponse,
    SorOrderPlaceResponse,
    SorOrderTestResponse,
} from './types';
import type {
    UserDataStreamPingResponse,
    UserDataStreamStartResponse,
    UserDataStreamStopResponse,
    UserDataStreamSubscribeResponse,
    UserDataStreamUnsubscribeResponse,
} from './types';

export class WebsocketAPIConnection {
    private websocketBase: WebsocketAPIBase;
    private accountApi: AccountApi;
    private authApi: AuthApi;
    private generalApi: GeneralApi;
    private marketApi: MarketApi;
    private tradeApi: TradeApi;
    private userDataStreamApi: UserDataStreamApi;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
        this.accountApi = new AccountApi(websocketBase);
        this.authApi = new AuthApi(websocketBase);
        this.generalApi = new GeneralApi(websocketBase);
        this.marketApi = new MarketApi(websocketBase);
        this.tradeApi = new TradeApi(websocketBase);
        this.userDataStreamApi = new UserDataStreamApi(websocketBase);
    }

    on(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.on(event, listener);
    }

    off(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.off(event, listener);
    }

    /**
     * Disconnects from the WebSocket server.
     * If there is no active connection, a warning is logged.
     * Otherwise, all connections in the connection pool are closed gracefully,
     * and a message is logged indicating that the connection has been disconnected.
     * @returns A Promise that resolves when all connections have been closed.
     * @throws Error if the WebSocket client is not set.
     */
    disconnect() {
        return this.websocketBase.disconnect();
    }

    /**
     * Checks if the WebSocket connection is currently open.
     * @returns `true` if the connection is open, `false` otherwise.
     */
    isConnected() {
        return this.websocketBase.isConnected();
    }

    /**
     * Sends a ping message to all connected Websocket servers in the pool.
     * If no connections are ready, a warning is logged.
     * For each active connection, the ping message is sent, and debug logs provide details.
     * @throws Error if a Websocket client is not set for a connection.
     */
    pingServer() {
        this.websocketBase.pingServer();
    }

    /**
     * Sends an unsigned message to the WebSocket server
     * @param method The API method to call
     * @param payload Message parameters and options
     * @returns Promise that resolves with the server response
     * @throws Error if not connected
     */
    sendMessage(method: string, payload: WebsocketSendMsgOptions = {}) {
        return this.websocketBase.sendMessage(method, payload);
    }

    /**
     * Sends a signed message to the WebSocket server with authentication
     * @param method The API method to call
     * @param payload Message parameters and options
     * @returns Promise that resolves with the server response
     * @throws Error if not connected
     */
    sendSignedMessage(method: string, payload: WebsocketSendMsgOptions = {}) {
        return this.websocketBase.sendMessage(method, payload, { isSigned: true });
    }

    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary WebSocket Account Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     * @returns {Promise<AccountCommissionResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-commission-rates-user_data Binance API Documentation}
     */
    accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<WebsocketApiResponse<AccountCommissionResponse>> {
        return this.accountApi.accountCommission(requestParameters);
    }

    /**
     * Query your current unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary WebSocket Unfilled Order Count
     * @param {AccountRateLimitsOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<AccountRateLimitsOrdersResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#unfilled-order-count-user_data Binance API Documentation}
     */
    accountRateLimitsOrders(
        requestParameters: AccountRateLimitsOrdersRequest = {}
    ): Promise<WebsocketApiResponse<AccountRateLimitsOrdersResponse>> {
        return this.accountApi.accountRateLimitsOrders(requestParameters);
    }

    /**
     * Query information about your account.
     * Weight: 20
     *
     * @summary WebSocket Account information
     * @param {AccountStatusRequest} requestParameters Request parameters.
     * @returns {Promise<AccountStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-information-user_data Binance API Documentation}
     */
    accountStatus(
        requestParameters: AccountStatusRequest = {}
    ): Promise<WebsocketApiResponse<AccountStatusResponse>> {
        return this.accountApi.accountStatus(requestParameters);
    }

    /**
     * Query information about all your order lists, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account Order list history
     * @param {AllOrderListsRequest} requestParameters Request parameters.
     * @returns {Promise<AllOrderListsResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-order-list-history-user_data Binance API Documentation}
     */
    allOrderLists(
        requestParameters: AllOrderListsRequest = {}
    ): Promise<WebsocketApiResponse<AllOrderListsResponse>> {
        return this.accountApi.allOrderLists(requestParameters);
    }

    /**
     * Query information about all your orders â€“ active, canceled, filled â€“ filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account order history
     * @param {AllOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<AllOrdersResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-order-history-user_data Binance API Documentation}
     */
    allOrders(
        requestParameters: AllOrdersRequest
    ): Promise<WebsocketApiResponse<AllOrdersResponse>> {
        return this.accountApi.allOrders(requestParameters);
    }

    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary WebSocket Account allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     * @returns {Promise<MyAllocationsResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-allocations-user_data Binance API Documentation}
     */
    myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<WebsocketApiResponse<MyAllocationsResponse>> {
        return this.accountApi.myAllocations(requestParameters);
    }

    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary WebSocket Account prevented matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     * @returns {Promise<MyPreventedMatchesResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-prevented-matches-user_data Binance API Documentation}
     */
    myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<WebsocketApiResponse<MyPreventedMatchesResponse>> {
        return this.accountApi.myPreventedMatches(requestParameters);
    }

    /**
     * Query information about all your trades, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account trade history
     * @param {MyTradesRequest} requestParameters Request parameters.
     * @returns {Promise<MyTradesResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-trade-history-user_data Binance API Documentation}
     */
    myTrades(requestParameters: MyTradesRequest): Promise<WebsocketApiResponse<MyTradesResponse>> {
        return this.accountApi.myTrades(requestParameters);
    }

    /**
     * Authenticate WebSocket connection using the provided API key.
     *
     * After calling `session.logon`, you can omit `apiKey` and `signature` parameters for future requests that require them.
     *
     * Note that only one API key can be authenticated.
     * Calling `session.logon` multiple times changes the current authenticated API key.
     * Weight: 2
     *
     * @summary WebSocket Log in with API key
     * @param {SessionLogonRequest} requestParameters Request parameters.
     * @returns {Promise<SessionLogonResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/authentication-requests#log-in-with-api-key-signed Binance API Documentation}
     */
    sessionLogon(
        requestParameters: SessionLogonRequest = {}
    ): Promise<WebsocketApiResponse<SessionLogonResponse>> {
        return this.authApi.sessionLogon(requestParameters);
    }

    /**
     * Forget the API key previously authenticated.
     * If the connection is not authenticated, this request does nothing.
     *
     * Note that the WebSocket connection stays open after `session.logout` request.
     * You can continue using the connection,
     * but now you will have to explicitly provide the `apiKey` and `signature` parameters where needed.
     * Weight: 2
     *
     * @summary WebSocket Log out of the session
     * @param {SessionLogoutRequest} requestParameters Request parameters.
     * @returns {Promise<SessionLogoutResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/authentication-requests#log-out-of-the-session Binance API Documentation}
     */
    sessionLogout(
        requestParameters: SessionLogoutRequest = {}
    ): Promise<WebsocketApiResponse<SessionLogoutResponse>> {
        return this.authApi.sessionLogout(requestParameters);
    }

    /**
     * Query the status of the WebSocket connection,
     * inspecting which API key (if any) is used to authorize requests.
     * Weight: 2
     *
     * @summary WebSocket Query session status
     * @param {SessionStatusRequest} requestParameters Request parameters.
     * @returns {Promise<SessionStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/authentication-requests#query-session-status Binance API Documentation}
     */
    sessionStatus(
        requestParameters: SessionStatusRequest = {}
    ): Promise<WebsocketApiResponse<SessionStatusResponse>> {
        return this.authApi.sessionStatus(requestParameters);
    }

    /**
     * Query current exchange trading rules, rate limits, and symbol information.
     * Weight: 20
     *
     * @summary WebSocket Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     * @returns {Promise<ExchangeInfoResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-requests#exchange-information Binance API Documentation}
     */
    exchangeInfo(
        requestParameters: ExchangeInfoRequest
    ): Promise<WebsocketApiResponse<ExchangeInfoResponse>> {
        return this.generalApi.exchangeInfo(requestParameters);
    }

    /**
     * Test connectivity to the WebSocket API.
     * Weight: 1
     *
     * @summary WebSocket Test connectivity
     * @param {PingRequest} requestParameters Request parameters.
     * @returns {Promise<void>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-requests#test-connectivity Binance API Documentation}
     */
    ping(requestParameters: PingRequest = {}): Promise<WebsocketApiResponse<void>> {
        return this.generalApi.ping(requestParameters);
    }

    /**
     * Test connectivity to the WebSocket API and get the current server time.
     * Weight: 1
     *
     * @summary WebSocket Check server time
     * @param {TimeRequest} requestParameters Request parameters.
     * @returns {Promise<TimeResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-requests#check-server-time Binance API Documentation}
     */
    time(requestParameters: TimeRequest = {}): Promise<WebsocketApiResponse<TimeResponse>> {
        return this.generalApi.time(requestParameters);
    }

    /**
     * Get current average price for a symbol.
     * Weight: 2
     *
     * @summary WebSocket Current average price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     * @returns {Promise<AvgPriceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#current-average-price Binance API Documentation}
     */
    avgPrice(requestParameters: AvgPriceRequest): Promise<WebsocketApiResponse<AvgPriceResponse>> {
        return this.marketApi.avgPrice(requestParameters);
    }

    /**
     * Get current order book.
     *
     * Note that this request returns limited market depth.
     *
     * If you need to continuously monitor order book updates, please consider using WebSocket Streams:
     *
     * `<symbol>@depth<levels>`
     * `<symbol>@depth`
     *
     * You can use `depth` request together with `<symbol>@depth` streams to [maintain a local order book](web-socket-streams.md#how-to-manage-a-local-order-book-correctly).
     * Weight: Adjusted based on the limit:
     *
     * |  Limit    | Weight |
     * |:---------:|:------:|
     * |     1â€“100 |      5 |
     * |   101â€“500 |      25|
     * |  501â€“1000 |     50 |
     * | 1001â€“5000 |     250 |
     *
     * @summary WebSocket Order book
     * @param {DepthRequest} requestParameters Request parameters.
     * @returns {Promise<DepthResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#order-book Binance API Documentation}
     */
    depth(requestParameters: DepthRequest): Promise<WebsocketApiResponse<DepthResponse>> {
        return this.marketApi.depth(requestParameters);
    }

    /**
     * Get klines (candlestick bars).
     *
     * Klines are uniquely identified by their open & close time.
     *
     * If you need access to real-time kline updates, please consider using WebSocket Streams:
     *
     * `<symbol>@kline_<interval>`
     *
     * If you need historical kline data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#klines).
     * Weight: 2
     *
     * @summary WebSocket Klines
     * @param {KlinesRequest} requestParameters Request parameters.
     * @returns {Promise<KlinesResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#klines Binance API Documentation}
     */
    klines(requestParameters: KlinesRequest): Promise<WebsocketApiResponse<KlinesResponse>> {
        return this.marketApi.klines(requestParameters);
    }

    /**
     * Get rolling window price change statistics with a custom window.
     *
     * This request is similar to `ticker.24hr`,
     * but statistics are computed on demand using the arbitrary window you specify.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols | Weight |
     * |:-------:|:------:|
     * |    1â€“50 | 4 per symbol |
     * |  51â€“100 |    200 |
     *
     * @summary WebSocket Rolling window price change statistics
     * @param {TickerRequest} requestParameters Request parameters.
     * @returns {Promise<TickerResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#rolling-window-price-change-statistics Binance API Documentation}
     */
    ticker(requestParameters: TickerRequest): Promise<WebsocketApiResponse<TickerResponse>> {
        return this.marketApi.ticker(requestParameters);
    }

    /**
     * Get 24-hour rolling window price change statistics.
     *
     * If you need to continuously monitor trading statistics, please consider using WebSocket Streams:
     *
     * `<symbol>@ticker` or `!ticker@arr`
     * `<symbol>@miniTicker` or `!miniTicker@arr`
     *
     * If you need different window sizes,
     * use the `ticker` request.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols     | Weight |
     * |:-----------:|:------:|
     * |        1â€“20 |      2 |
     * |      21â€“100 |     40 |
     * | 101 or more |     80 |
     * | all symbols |     80 |
     *
     * @summary WebSocket 24hr ticker price change statistics
     * @param {Ticker24hrRequest} requestParameters Request parameters.
     * @returns {Promise<Ticker24hrResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#24hr-ticker-price-change-statistics Binance API Documentation}
     */
    ticker24hr(
        requestParameters: Ticker24hrRequest
    ): Promise<WebsocketApiResponse<Ticker24hrResponse>> {
        return this.marketApi.ticker24hr(requestParameters);
    }

    /**
     * Get the current best price and quantity on the order book.
     *
     * If you need access to real-time order book ticker updates, please consider using WebSocket Streams:
     *
     * `<symbol>@bookTicker`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol order book ticker
     * @param {TickerBookRequest} requestParameters Request parameters.
     * @returns {Promise<TickerBookResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#symbol-order-book-ticker Binance API Documentation}
     */
    tickerBook(
        requestParameters: TickerBookRequest
    ): Promise<WebsocketApiResponse<TickerBookResponse>> {
        return this.marketApi.tickerBook(requestParameters);
    }

    /**
     * Get the latest market price for a symbol.
     *
     * If you need access to real-time price updates, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     * `<symbol>@trade`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol price ticker
     * @param {TickerPriceRequest} requestParameters Request parameters.
     * @returns {Promise<TickerPriceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#symbol-price-ticker Binance API Documentation}
     */
    tickerPrice(
        requestParameters: TickerPriceRequest
    ): Promise<WebsocketApiResponse<TickerPriceResponse>> {
        return this.marketApi.tickerPrice(requestParameters);
    }

    /**
     * Price change statistics for a trading day.
     * Weight: 4 for each requested <tt>symbol</tt>. <br/><br/> The weight for this request will cap at 200 once the number of `symbols` in the request is more than 50.
     *
     * @summary WebSocket Trading Day Ticker
     * @param {TickerTradingDayRequest} requestParameters Request parameters.
     * @returns {Promise<TickerTradingDayResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#trading-day-ticker Binance API Documentation}
     */
    tickerTradingDay(
        requestParameters: TickerTradingDayRequest
    ): Promise<WebsocketApiResponse<TickerTradingDayResponse>> {
        return this.marketApi.tickerTradingDay(requestParameters);
    }

    /**
     * Get aggregate trades.
     *
     * An *aggregate trade* (aggtrade) represents one or more individual trades.
     * Trades that fill at the same time, from the same taker order, with the same price â€“
     * those trades are collected into an aggregate trade with total quantity of the individual trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     *
     * If you need historical aggregate trade data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#aggtrades).
     * Weight: 4
     *
     * @summary WebSocket Aggregate trades
     * @param {TradesAggregateRequest} requestParameters Request parameters.
     * @returns {Promise<TradesAggregateResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#aggregate-trades Binance API Documentation}
     */
    tradesAggregate(
        requestParameters: TradesAggregateRequest
    ): Promise<WebsocketApiResponse<TradesAggregateResponse>> {
        return this.marketApi.tradesAggregate(requestParameters);
    }

    /**
     * Get historical trades.
     * Weight: 25
     *
     * @summary WebSocket Historical trades
     * @param {TradesHistoricalRequest} requestParameters Request parameters.
     * @returns {Promise<TradesHistoricalResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#historical-trades Binance API Documentation}
     */
    tradesHistorical(
        requestParameters: TradesHistoricalRequest
    ): Promise<WebsocketApiResponse<TradesHistoricalResponse>> {
        return this.marketApi.tradesHistorical(requestParameters);
    }

    /**
     * Get recent trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@trade`
     * Weight: 25
     *
     * @summary WebSocket Recent trades
     * @param {TradesRecentRequest} requestParameters Request parameters.
     * @returns {Promise<TradesRecentResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#recent-trades Binance API Documentation}
     */
    tradesRecent(
        requestParameters: TradesRecentRequest
    ): Promise<WebsocketApiResponse<TradesRecentResponse>> {
        return this.marketApi.tradesRecent(requestParameters);
    }

    /**
     * Get klines (candlestick bars) optimized for presentation.
     *
     * This request is similar to `klines`, having the same parameters and response.
     * `uiKlines` return modified kline data, optimized for presentation of candlestick charts.
     * Weight: 2
     *
     * @summary WebSocket UI Klines
     * @param {UiKlinesRequest} requestParameters Request parameters.
     * @returns {Promise<UiKlinesResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/market-data-requests#ui-klines Binance API Documentation}
     */
    uiKlines(requestParameters: UiKlinesRequest): Promise<WebsocketApiResponse<UiKlinesResponse>> {
        return this.marketApi.uiKlines(requestParameters);
    }

    /**
     * Query execution status of all open order lists.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: 6
     *
     * @summary WebSocket Current open Order lists
     * @param {OpenOrderListsStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrderListsStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#current-open-order-lists-user_data Binance API Documentation}
     */
    openOrderListsStatus(
        requestParameters: OpenOrderListsStatusRequest = {}
    ): Promise<WebsocketApiResponse<OpenOrderListsStatusResponse>> {
        return this.tradeApi.openOrderListsStatus(requestParameters);
    }

    /**
     * Cancel all open orders on a symbol.
     * This includes orders that are part of an order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel open orders
     * @param {OpenOrdersCancelAllRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrdersCancelAllResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-open-orders-trade Binance API Documentation}
     */
    openOrdersCancelAll(
        requestParameters: OpenOrdersCancelAllRequest
    ): Promise<WebsocketApiResponse<OpenOrdersCancelAllResponse>> {
        return this.tradeApi.openOrdersCancelAll(requestParameters);
    }

    /**
     * Query execution status of all open orders.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- | ------ |
     * | `symbol`  |      6 |
     * | none      |     80 |
     *
     * @summary WebSocket Current open orders
     * @param {OpenOrdersStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrdersStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#current-open-orders-user_data Binance API Documentation}
     */
    openOrdersStatus(
        requestParameters: OpenOrdersStatusRequest
    ): Promise<WebsocketApiResponse<OpenOrdersStatusResponse>> {
        return this.tradeApi.openOrdersStatus(requestParameters);
    }

    /**
     * Cancel an active order.
     * Weight: 1
     *
     * @summary WebSocket Cancel order
     * @param {OrderCancelRequest} requestParameters Request parameters.
     * @returns {Promise<OrderCancelResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-order-trade Binance API Documentation}
     */
    orderCancel(
        requestParameters: OrderCancelRequest
    ): Promise<WebsocketApiResponse<OrderCancelResponse>> {
        return this.tradeApi.orderCancel(requestParameters);
    }

    /**
     * Cancel an existing order and immediately place a new order instead of the canceled one.
     * Weight: 1
     *
     * @summary WebSocket Cancel and replace order
     * @param {OrderCancelReplaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderCancelReplaceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-and-replace-order-trade Binance API Documentation}
     */
    orderCancelReplace(
        requestParameters: OrderCancelReplaceRequest
    ): Promise<WebsocketApiResponse<OrderCancelReplaceResponse>> {
        return this.tradeApi.orderCancelReplace(requestParameters);
    }

    /**
     * Cancel an active order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel Order list
     * @param {OrderListCancelRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListCancelResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-order-list-trade Binance API Documentation}
     */
    orderListCancel(
        requestParameters: OrderListCancelRequest
    ): Promise<WebsocketApiResponse<OrderListCancelResponse>> {
        return this.tradeApi.orderListCancel(requestParameters);
    }

    /**
     * Send in a new one-cancels-the-other (OCO) pair:
     * `LIMIT_MAKER` + `STOP_LOSS`/`STOP_LOSS_LIMIT` orders (called *legs*),
     * where activation of one order immediately cancels the other.
     * Weight: 1
     *
     * @summary WebSocket Place new OCO - Deprecated
     * @param {OrderListPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-oco---deprecated-trade Binance API Documentation}
     */
    orderListPlace(
        requestParameters: OrderListPlaceRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceResponse>> {
        return this.tradeApi.orderListPlace(requestParameters);
    }

    /**
     * Send in an one-cancels the other (OCO) pair, where activation of one order immediately cancels the other.
     *
     * An OCO has 2 orders called the **above order** and **below order**.
     * One of the orders must be a `LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT` order and the other must be `STOP_LOSS` or `STOP_LOSS_LIMIT` order.
     * Price restrictions:
     * If the OCO is on the `SELL` side:
     * `LIMIT_MAKER/TAKE_PROFIT_LIMIT` `price` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * If the OCO is on the `BUY` side:
     * `LIMIT_MAKER` `price` < Last Traded Price < `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * OCOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     *
     *
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OCO
     * @param {OrderListPlaceOcoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOcoResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---oco-trade Binance API Documentation}
     */
    orderListPlaceOco(
        requestParameters: OrderListPlaceOcoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOcoResponse>> {
        return this.tradeApi.orderListPlaceOco(requestParameters);
    }

    /**
     * Places an OTO.
     *
     * An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
     * If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
     * OTOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTO
     * @param {OrderListPlaceOtoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOtoResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---oto-trade Binance API Documentation}
     */
    orderListPlaceOto(
        requestParameters: OrderListPlaceOtoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtoResponse>> {
        return this.tradeApi.orderListPlaceOto(requestParameters);
    }

    /**
     * Place an OTOCO.
     *
     * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The behavior of the working order is the same as the [OTO](#place-new-order-list---oto-trade).
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
     * OTOCOs add **3 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTOCO
     * @param {OrderListPlaceOtocoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOtocoResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---otoco-trade Binance API Documentation}
     */
    orderListPlaceOtoco(
        requestParameters: OrderListPlaceOtocoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtocoResponse>> {
        return this.tradeApi.orderListPlaceOtoco(requestParameters);
    }

    /**
     * Check execution status of an Order list.
     *
     * For execution status of individual orders, use `order.status`.
     * Weight: 4
     *
     * @summary WebSocket Query Order list
     * @param {OrderListStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#query-order-list-user_data Binance API Documentation}
     */
    orderListStatus(
        requestParameters: OrderListStatusRequest = {}
    ): Promise<WebsocketApiResponse<OrderListStatusResponse>> {
        return this.tradeApi.orderListStatus(requestParameters);
    }

    /**
     * Send in a new order.
     * Weight: 1
     *
     * @summary WebSocket Place new order
     * @param {OrderPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderPlaceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-trade Binance API Documentation}
     */
    orderPlace(
        requestParameters: OrderPlaceRequest
    ): Promise<WebsocketApiResponse<OrderPlaceResponse>> {
        return this.tradeApi.orderPlace(requestParameters);
    }

    /**
     * Check execution status of an order.
     * Weight: 4
     *
     * @summary WebSocket Query order
     * @param {OrderStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OrderStatusResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#query-order-user_data Binance API Documentation}
     */
    orderStatus(
        requestParameters: OrderStatusRequest
    ): Promise<WebsocketApiResponse<OrderStatusResponse>> {
        return this.tradeApi.orderStatus(requestParameters);
    }

    /**
     * Test order placement.
     *
     * Validates new order parameters and verifies your signature
     * but does not send the order into the matching engine.
     * Weight: |Condition| Request Weight|
     * |------------           | ------------ |
     * |Without `computeCommissionRates`| 1|
     * |With `computeCommissionRates`|20|
     *
     * @summary WebSocket Test new order
     * @param {OrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<OrderTestResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#test-new-order-trade Binance API Documentation}
     */
    orderTest(
        requestParameters: OrderTestRequest = {}
    ): Promise<WebsocketApiResponse<OrderTestResponse>> {
        return this.tradeApi.orderTest(requestParameters);
    }

    /**
     * Places an order using smart order routing (SOR).
     * Weight: 1
     *
     * @summary WebSocket Place new order using SOR
     * @param {SorOrderPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<SorOrderPlaceResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-using-sor-trade Binance API Documentation}
     */
    sorOrderPlace(
        requestParameters: SorOrderPlaceRequest
    ): Promise<WebsocketApiResponse<SorOrderPlaceResponse>> {
        return this.tradeApi.sorOrderPlace(requestParameters);
    }

    /**
     * Test new order creation and signature/recvWindow using smart order routing (SOR).
     * Creates and validates a new order but does not send it into the matching engine.
     * Weight: |Condition                       | Request Weight|
     * |------------                    | ------------ |
     * |Without `computeCommissionRates`| 1            |
     * |With `computeCommissionRates`   |20            |
     *
     * @summary WebSocket Test new order using SOR
     * @param {SorOrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<SorOrderTestResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#test-new-order-using-sor-trade Binance API Documentation}
     */
    sorOrderTest(
        requestParameters: SorOrderTestRequest = {}
    ): Promise<WebsocketApiResponse<SorOrderTestResponse>> {
        return this.tradeApi.sorOrderTest(requestParameters);
    }

    /**
     * Ping a user data stream to keep it alive.
     *
     * User data streams close automatically after 60 minutes,
     * even if you're listening to them on WebSocket Streams.
     * In order to keep the stream open, you have to regularly send pings using the `userDataStream.ping` request.
     *
     * It is recommended to send a ping once every 30 minutes.
     * Weight: 2
     *
     * @summary WebSocket Ping user data stream
     * @param {UserDataStreamPingRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamPingResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/user-Data-Stream-requests#ping-user-data-stream-user_stream Binance API Documentation}
     */
    userDataStreamPing(
        requestParameters: UserDataStreamPingRequest
    ): Promise<WebsocketApiResponse<UserDataStreamPingResponse>> {
        return this.userDataStreamApi.userDataStreamPing(requestParameters);
    }

    /**
     * Start a new user data stream.
     * Weight: 2
     *
     * @summary WebSocket Start user data stream
     * @param {UserDataStreamStartRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamStartResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/user-Data-Stream-requests#start-user-data-stream-user_stream Binance API Documentation}
     */
    userDataStreamStart(
        requestParameters: UserDataStreamStartRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamStartResponse>> {
        return this.userDataStreamApi.userDataStreamStart(requestParameters);
    }

    /**
     * Explicitly stop and close the user data stream.
     * Weight: 2
     *
     * @summary WebSocket Stop user data stream
     * @param {UserDataStreamStopRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamStopResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/user-Data-Stream-requests#stop-user-data-stream-user_stream Binance API Documentation}
     */
    userDataStreamStop(
        requestParameters: UserDataStreamStopRequest
    ): Promise<WebsocketApiResponse<UserDataStreamStopResponse>> {
        return this.userDataStreamApi.userDataStreamStop(requestParameters);
    }

    /**
     * Subscribe to the User Data Stream in the current WebSocket connection.
     * Weight: 2
     *
     * @summary WebSocket Subscribe to User Data Stream
     * @param {UserDataStreamSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamSubscribeResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/user-Data-Stream-requests#subscribe-to-user-data-stream-user_stream Binance API Documentation}
     */
    userDataStreamSubscribe(
        requestParameters: UserDataStreamSubscribeRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamSubscribeResponse>> {
        return this.userDataStreamApi.userDataStreamSubscribe(requestParameters);
    }

    /**
     * Stop listening to the User Data Stream in the current WebSocket connection.
     * Weight: 2
     *
     * @summary WebSocket Unsubscribe from User Data Stream
     * @param {UserDataStreamUnsubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<UserDataStreamUnsubscribeResponse>}
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/user-Data-Stream-requests#unsubscribe-from-user-data-stream-user_stream Binance API Documentation}
     */
    userDataStreamUnsubscribe(
        requestParameters: UserDataStreamUnsubscribeRequest = {}
    ): Promise<WebsocketApiResponse<UserDataStreamUnsubscribeResponse>> {
        return this.userDataStreamApi.userDataStreamUnsubscribe(requestParameters);
    }
}
