/**
 * Binance Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    AvgPriceResponse,
    DepthResponse,
    KlinesResponse,
    Ticker24hrResponse,
    TickerBookResponse,
    TickerPriceResponse,
    TickerResponse,
    TickerTradingDayResponse,
    TradesAggregateResponse,
    TradesHistoricalResponse,
    TradesRecentResponse,
    UiKlinesResponse,
} from '../types';

/**
 * MarketApi - interface
 *
 * @interface MarketApi
 */
export interface MarketApiInterface {
    /**
     * Get current average price for a symbol.
     * Weight: 2
     *
     * @summary WebSocket Current average price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AvgPriceResponse>}
     * @memberof MarketApiInterface
     */
    avgPrice(requestParameters: AvgPriceRequest): Promise<WebsocketApiResponse<AvgPriceResponse>>;

    /**
     * Get current order book.
     *
     * Note that this request returns limited market depth.
     *
     * If you need to continuously monitor order book updates, please consider using WebSocket Streams:
     *
     * `<symbol>@depth<levels>`
     * `<symbol>@depth`
     *
     * You can use `depth` request together with `<symbol>@depth` streams to [maintain a local order book](web-socket-streams.md#how-to-manage-a-local-order-book-correctly).
     * Weight: Adjusted based on the limit:
     *
     * |  Limit    | Weight |
     * |:---------:|:------:|
     * |     1–100 |      5 |
     * |   101–500 |      25|
     * |  501–1000 |     50 |
     * | 1001–5000 |     250 |
     *
     * @summary WebSocket Order book
     * @param {DepthRequest} requestParameters Request parameters.
     *
     * @returns {Promise<DepthResponse>}
     * @memberof MarketApiInterface
     */
    depth(requestParameters: DepthRequest): Promise<WebsocketApiResponse<DepthResponse>>;

    /**
     * Get klines (candlestick bars).
     *
     * Klines are uniquely identified by their open & close time.
     *
     * If you need access to real-time kline updates, please consider using WebSocket Streams:
     *
     * `<symbol>@kline_<interval>`
     *
     * If you need historical kline data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#klines).
     * Weight: 2
     *
     * @summary WebSocket Klines
     * @param {KlinesRequest} requestParameters Request parameters.
     *
     * @returns {Promise<KlinesResponse>}
     * @memberof MarketApiInterface
     */
    klines(requestParameters: KlinesRequest): Promise<WebsocketApiResponse<KlinesResponse>>;

    /**
     * Get rolling window price change statistics with a custom window.
     *
     * This request is similar to `ticker.24hr`,
     * but statistics are computed on demand using the arbitrary window you specify.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols | Weight |
     * |:-------:|:------:|
     * |    1–50 | 4 per symbol |
     * |  51–100 |    200 |
     *
     * @summary WebSocket Rolling window price change statistics
     * @param {TickerRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TickerResponse>}
     * @memberof MarketApiInterface
     */
    ticker(requestParameters?: TickerRequest): Promise<WebsocketApiResponse<TickerResponse>>;

    /**
     * Get 24-hour rolling window price change statistics.
     *
     * If you need to continuously monitor trading statistics, please consider using WebSocket Streams:
     *
     * `<symbol>@ticker` or `!ticker@arr`
     * `<symbol>@miniTicker` or `!miniTicker@arr`
     *
     * If you need different window sizes,
     * use the `ticker` request.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols     | Weight |
     * |:-----------:|:------:|
     * |        1–20 |      2 |
     * |      21–100 |     40 |
     * | 101 or more |     80 |
     * | all symbols |     80 |
     *
     * @summary WebSocket 24hr ticker price change statistics
     * @param {Ticker24hrRequest} requestParameters Request parameters.
     *
     * @returns {Promise<Ticker24hrResponse>}
     * @memberof MarketApiInterface
     */
    ticker24hr(
        requestParameters?: Ticker24hrRequest
    ): Promise<WebsocketApiResponse<Ticker24hrResponse>>;

    /**
     * Get the current best price and quantity on the order book.
     *
     * If you need access to real-time order book ticker updates, please consider using WebSocket Streams:
     *
     * `<symbol>@bookTicker`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol order book ticker
     * @param {TickerBookRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TickerBookResponse>}
     * @memberof MarketApiInterface
     */
    tickerBook(
        requestParameters?: TickerBookRequest
    ): Promise<WebsocketApiResponse<TickerBookResponse>>;

    /**
     * Get the latest market price for a symbol.
     *
     * If you need access to real-time price updates, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     * `<symbol>@trade`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol price ticker
     * @param {TickerPriceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TickerPriceResponse>}
     * @memberof MarketApiInterface
     */
    tickerPrice(
        requestParameters?: TickerPriceRequest
    ): Promise<WebsocketApiResponse<TickerPriceResponse>>;

    /**
     * Price change statistics for a trading day.
     * Weight: 4 for each requested <tt>symbol</tt>. <br/><br/> The weight for this request will cap at 200 once the number of `symbols` in the request is more than 50.
     *
     * @summary WebSocket Trading Day Ticker
     * @param {TickerTradingDayRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TickerTradingDayResponse>}
     * @memberof MarketApiInterface
     */
    tickerTradingDay(
        requestParameters?: TickerTradingDayRequest
    ): Promise<WebsocketApiResponse<TickerTradingDayResponse>>;

    /**
     * Get aggregate trades.
     *
     * An *aggregate trade* (aggtrade) represents one or more individual trades.
     * Trades that fill at the same time, from the same taker order, with the same price –
     * those trades are collected into an aggregate trade with total quantity of the individual trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     *
     * If you need historical aggregate trade data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#aggtrades).
     * Weight: 4
     *
     * @summary WebSocket Aggregate trades
     * @param {TradesAggregateRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TradesAggregateResponse>}
     * @memberof MarketApiInterface
     */
    tradesAggregate(
        requestParameters: TradesAggregateRequest
    ): Promise<WebsocketApiResponse<TradesAggregateResponse>>;

    /**
     * Get historical trades.
     * Weight: 25
     *
     * @summary WebSocket Historical trades
     * @param {TradesHistoricalRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TradesHistoricalResponse>}
     * @memberof MarketApiInterface
     */
    tradesHistorical(
        requestParameters: TradesHistoricalRequest
    ): Promise<WebsocketApiResponse<TradesHistoricalResponse>>;

    /**
     * Get recent trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@trade`
     * Weight: 25
     *
     * @summary WebSocket Recent trades
     * @param {TradesRecentRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TradesRecentResponse>}
     * @memberof MarketApiInterface
     */
    tradesRecent(
        requestParameters: TradesRecentRequest
    ): Promise<WebsocketApiResponse<TradesRecentResponse>>;

    /**
     * Get klines (candlestick bars) optimized for presentation.
     *
     * This request is similar to `klines`, having the same parameters and response.
     * `uiKlines` return modified kline data, optimized for presentation of candlestick charts.
     * Weight: 2
     *
     * @summary WebSocket UI Klines
     * @param {UiKlinesRequest} requestParameters Request parameters.
     *
     * @returns {Promise<UiKlinesResponse>}
     * @memberof MarketApiInterface
     */
    uiKlines(requestParameters: UiKlinesRequest): Promise<WebsocketApiResponse<UiKlinesResponse>>;
}

/**
 * Request parameters for avgPrice operation in MarketApi.
 * @interface AvgPriceRequest
 */
export interface AvgPriceRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiAvgPrice
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiAvgPrice
     */
    readonly id?: string;
}

/**
 * Request parameters for depth operation in MarketApi.
 * @interface DepthRequest
 */
export interface DepthRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiDepth
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiDepth
     */
    readonly id?: string;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiDepth
     */
    readonly limit?: number;
}

/**
 * Request parameters for klines operation in MarketApi.
 * @interface KlinesRequest
 */
export interface KlinesRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiKlines
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiKlines
     */
    readonly id?: string;

    /**
     *
     * @type {'1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M'}
     * @memberof MarketApiKlines
     */
    readonly interval?: KlinesIntervalEnum;

    /**
     *
     * @type {number}
     * @memberof MarketApiKlines
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof MarketApiKlines
     */
    readonly endTime?: number;

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketApiKlines
     */
    readonly timeZone?: string;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiKlines
     */
    readonly limit?: number;
}

/**
 * Request parameters for ticker operation in MarketApi.
 * @interface TickerRequest
 */
export interface TickerRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTicker
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof MarketApiTicker
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof MarketApiTicker
     */
    readonly symbols?: Array<string>;

    /**
     *
     * @type {'FULL' | 'MINI'}
     * @memberof MarketApiTicker
     */
    readonly type?: TickerTypeEnum;

    /**
     *
     * @type {'1m' | '2m' | '3m' | '4m' | '5m' | '6m' | '7m' | '8m' | '9m' | '10m' | '11m' | '12m' | '13m' | '14m' | '15m' | '16m' | '17m' | '18m' | '19m' | '20m' | '21m' | '22m' | '23m' | '24m' | '25m' | '26m' | '27m' | '28m' | '29m' | '30m' | '31m' | '32m' | '33m' | '34m' | '35m' | '36m' | '37m' | '38m' | '39m' | '40m' | '41m' | '42m' | '43m' | '44m' | '45m' | '46m' | '47m' | '48m' | '49m' | '50m' | '51m' | '52m' | '53m' | '54m' | '55m' | '56m' | '57m' | '58m' | '59m' | '1h' | '2h' | '3h' | '4h' | '5h' | '6h' | '7h' | '8h' | '9h' | '10h' | '11h' | '12h' | '13h' | '14h' | '15h' | '16h' | '17h' | '18h' | '19h' | '20h' | '21h' | '22h' | '23h' | '1d' | '2d' | '3d' | '4d' | '5d' | '6d'}
     * @memberof MarketApiTicker
     */
    readonly windowSize?: TickerWindowSizeEnum;
}

/**
 * Request parameters for ticker24hr operation in MarketApi.
 * @interface Ticker24hrRequest
 */
export interface Ticker24hrRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTicker24hr
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof MarketApiTicker24hr
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof MarketApiTicker24hr
     */
    readonly symbols?: Array<string>;

    /**
     *
     * @type {'FULL' | 'MINI'}
     * @memberof MarketApiTicker24hr
     */
    readonly type?: Ticker24hrTypeEnum;
}

/**
 * Request parameters for tickerBook operation in MarketApi.
 * @interface TickerBookRequest
 */
export interface TickerBookRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTickerBook
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof MarketApiTickerBook
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof MarketApiTickerBook
     */
    readonly symbols?: Array<string>;
}

/**
 * Request parameters for tickerPrice operation in MarketApi.
 * @interface TickerPriceRequest
 */
export interface TickerPriceRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTickerPrice
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof MarketApiTickerPrice
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof MarketApiTickerPrice
     */
    readonly symbols?: Array<string>;
}

/**
 * Request parameters for tickerTradingDay operation in MarketApi.
 * @interface TickerTradingDayRequest
 */
export interface TickerTradingDayRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTickerTradingDay
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof MarketApiTickerTradingDay
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof MarketApiTickerTradingDay
     */
    readonly symbols?: Array<string>;

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketApiTickerTradingDay
     */
    readonly timeZone?: string;

    /**
     *
     * @type {'FULL' | 'MINI'}
     * @memberof MarketApiTickerTradingDay
     */
    readonly type?: TickerTradingDayTypeEnum;
}

/**
 * Request parameters for tradesAggregate operation in MarketApi.
 * @interface TradesAggregateRequest
 */
export interface TradesAggregateRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiTradesAggregate
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTradesAggregate
     */
    readonly id?: string;

    /**
     * Aggregate trade ID to begin at
     * @type {number}
     * @memberof MarketApiTradesAggregate
     */
    readonly fromId?: number;

    /**
     *
     * @type {number}
     * @memberof MarketApiTradesAggregate
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof MarketApiTradesAggregate
     */
    readonly endTime?: number;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiTradesAggregate
     */
    readonly limit?: number;
}

/**
 * Request parameters for tradesHistorical operation in MarketApi.
 * @interface TradesHistoricalRequest
 */
export interface TradesHistoricalRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiTradesHistorical
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTradesHistorical
     */
    readonly id?: string;

    /**
     * Aggregate trade ID to begin at
     * @type {number}
     * @memberof MarketApiTradesHistorical
     */
    readonly fromId?: number;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiTradesHistorical
     */
    readonly limit?: number;
}

/**
 * Request parameters for tradesRecent operation in MarketApi.
 * @interface TradesRecentRequest
 */
export interface TradesRecentRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiTradesRecent
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiTradesRecent
     */
    readonly id?: string;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiTradesRecent
     */
    readonly limit?: number;
}

/**
 * Request parameters for uiKlines operation in MarketApi.
 * @interface UiKlinesRequest
 */
export interface UiKlinesRequest {
    /**
     *
     * @type {string}
     * @memberof MarketApiUiKlines
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof MarketApiUiKlines
     */
    readonly id?: string;

    /**
     *
     * @type {'1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M'}
     * @memberof MarketApiUiKlines
     */
    readonly interval?: UiKlinesIntervalEnum;

    /**
     *
     * @type {number}
     * @memberof MarketApiUiKlines
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof MarketApiUiKlines
     */
    readonly endTime?: number;

    /**
     * Default: 0 (UTC)
     * @type {string}
     * @memberof MarketApiUiKlines
     */
    readonly timeZone?: string;

    /**
     * Default: 100; Maximum: 5000
     * @type {number}
     * @memberof MarketApiUiKlines
     */
    readonly limit?: number;
}

/**
 * MarketApi - object-oriented interface
 * @class MarketApi
 * @extends {WebsocketAPIBase}
 */
export class MarketApi implements MarketApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Get current average price for a symbol.
     * Weight: 2
     *
     * @summary WebSocket Current average price
     * @param {AvgPriceRequest} requestParameters Request parameters.
     * @returns {Promise<AvgPriceResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#current-average-price Binance API Documentation}
     */
    public avgPrice(
        requestParameters: AvgPriceRequest
    ): Promise<WebsocketApiResponse<AvgPriceResponse>> {
        return this.websocketBase.sendMessage<AvgPriceResponse>(
            '/avgPrice'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get current order book.
     *
     * Note that this request returns limited market depth.
     *
     * If you need to continuously monitor order book updates, please consider using WebSocket Streams:
     *
     * `<symbol>@depth<levels>`
     * `<symbol>@depth`
     *
     * You can use `depth` request together with `<symbol>@depth` streams to [maintain a local order book](web-socket-streams.md#how-to-manage-a-local-order-book-correctly).
     * Weight: Adjusted based on the limit:
     *
     * |  Limit    | Weight |
     * |:---------:|:------:|
     * |     1–100 |      5 |
     * |   101–500 |      25|
     * |  501–1000 |     50 |
     * | 1001–5000 |     250 |
     *
     * @summary WebSocket Order book
     * @param {DepthRequest} requestParameters Request parameters.
     * @returns {Promise<DepthResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#order-book Binance API Documentation}
     */
    public depth(requestParameters: DepthRequest): Promise<WebsocketApiResponse<DepthResponse>> {
        return this.websocketBase.sendMessage<DepthResponse>(
            '/depth'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get klines (candlestick bars).
     *
     * Klines are uniquely identified by their open & close time.
     *
     * If you need access to real-time kline updates, please consider using WebSocket Streams:
     *
     * `<symbol>@kline_<interval>`
     *
     * If you need historical kline data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#klines).
     * Weight: 2
     *
     * @summary WebSocket Klines
     * @param {KlinesRequest} requestParameters Request parameters.
     * @returns {Promise<KlinesResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#klines Binance API Documentation}
     */
    public klines(requestParameters: KlinesRequest): Promise<WebsocketApiResponse<KlinesResponse>> {
        return this.websocketBase.sendMessage<KlinesResponse>(
            '/klines'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get rolling window price change statistics with a custom window.
     *
     * This request is similar to `ticker.24hr`,
     * but statistics are computed on demand using the arbitrary window you specify.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols | Weight |
     * |:-------:|:------:|
     * |    1–50 | 4 per symbol |
     * |  51–100 |    200 |
     *
     * @summary WebSocket Rolling window price change statistics
     * @param {TickerRequest} requestParameters Request parameters.
     * @returns {Promise<TickerResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#rolling-window-price-change-statistics Binance API Documentation}
     */
    public ticker(
        requestParameters: TickerRequest = {}
    ): Promise<WebsocketApiResponse<TickerResponse>> {
        return this.websocketBase.sendMessage<TickerResponse>(
            '/ticker'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get 24-hour rolling window price change statistics.
     *
     * If you need to continuously monitor trading statistics, please consider using WebSocket Streams:
     *
     * `<symbol>@ticker` or `!ticker@arr`
     * `<symbol>@miniTicker` or `!miniTicker@arr`
     *
     * If you need different window sizes,
     * use the `ticker` request.
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Symbols     | Weight |
     * |:-----------:|:------:|
     * |        1–20 |      2 |
     * |      21–100 |     40 |
     * | 101 or more |     80 |
     * | all symbols |     80 |
     *
     * @summary WebSocket 24hr ticker price change statistics
     * @param {Ticker24hrRequest} requestParameters Request parameters.
     * @returns {Promise<Ticker24hrResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#24hr-ticker-price-change-statistics Binance API Documentation}
     */
    public ticker24hr(
        requestParameters: Ticker24hrRequest = {}
    ): Promise<WebsocketApiResponse<Ticker24hrResponse>> {
        return this.websocketBase.sendMessage<Ticker24hrResponse>(
            '/ticker.24hr'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get the current best price and quantity on the order book.
     *
     * If you need access to real-time order book ticker updates, please consider using WebSocket Streams:
     *
     * `<symbol>@bookTicker`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol order book ticker
     * @param {TickerBookRequest} requestParameters Request parameters.
     * @returns {Promise<TickerBookResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#symbol-order-book-ticker Binance API Documentation}
     */
    public tickerBook(
        requestParameters: TickerBookRequest = {}
    ): Promise<WebsocketApiResponse<TickerBookResponse>> {
        return this.websocketBase.sendMessage<TickerBookResponse>(
            '/ticker.book'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get the latest market price for a symbol.
     *
     * If you need access to real-time price updates, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     * `<symbol>@trade`
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- |:------:|
     * | `symbol`  |      2 |
     * | `symbols` |      4 |
     * | none      |      4 |
     *
     * @summary WebSocket Symbol price ticker
     * @param {TickerPriceRequest} requestParameters Request parameters.
     * @returns {Promise<TickerPriceResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#symbol-price-ticker Binance API Documentation}
     */
    public tickerPrice(
        requestParameters: TickerPriceRequest = {}
    ): Promise<WebsocketApiResponse<TickerPriceResponse>> {
        return this.websocketBase.sendMessage<TickerPriceResponse>(
            '/ticker.price'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Price change statistics for a trading day.
     * Weight: 4 for each requested <tt>symbol</tt>. <br/><br/> The weight for this request will cap at 200 once the number of `symbols` in the request is more than 50.
     *
     * @summary WebSocket Trading Day Ticker
     * @param {TickerTradingDayRequest} requestParameters Request parameters.
     * @returns {Promise<TickerTradingDayResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#trading-day-ticker Binance API Documentation}
     */
    public tickerTradingDay(
        requestParameters: TickerTradingDayRequest = {}
    ): Promise<WebsocketApiResponse<TickerTradingDayResponse>> {
        return this.websocketBase.sendMessage<TickerTradingDayResponse>(
            '/ticker.tradingDay'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get aggregate trades.
     *
     * An *aggregate trade* (aggtrade) represents one or more individual trades.
     * Trades that fill at the same time, from the same taker order, with the same price –
     * those trades are collected into an aggregate trade with total quantity of the individual trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@aggTrade`
     *
     * If you need historical aggregate trade data,
     * please consider using [data.binance.vision](https://github.com/binance/binance-public-data/#aggtrades).
     * Weight: 4
     *
     * @summary WebSocket Aggregate trades
     * @param {TradesAggregateRequest} requestParameters Request parameters.
     * @returns {Promise<TradesAggregateResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#aggregate-trades Binance API Documentation}
     */
    public tradesAggregate(
        requestParameters: TradesAggregateRequest
    ): Promise<WebsocketApiResponse<TradesAggregateResponse>> {
        return this.websocketBase.sendMessage<TradesAggregateResponse>(
            '/trades.aggregate'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get historical trades.
     * Weight: 25
     *
     * @summary WebSocket Historical trades
     * @param {TradesHistoricalRequest} requestParameters Request parameters.
     * @returns {Promise<TradesHistoricalResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#historical-trades Binance API Documentation}
     */
    public tradesHistorical(
        requestParameters: TradesHistoricalRequest
    ): Promise<WebsocketApiResponse<TradesHistoricalResponse>> {
        return this.websocketBase.sendMessage<TradesHistoricalResponse>(
            '/trades.historical'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get recent trades.
     *
     * If you need access to real-time trading activity, please consider using WebSocket Streams:
     *
     * `<symbol>@trade`
     * Weight: 25
     *
     * @summary WebSocket Recent trades
     * @param {TradesRecentRequest} requestParameters Request parameters.
     * @returns {Promise<TradesRecentResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#recent-trades Binance API Documentation}
     */
    public tradesRecent(
        requestParameters: TradesRecentRequest
    ): Promise<WebsocketApiResponse<TradesRecentResponse>> {
        return this.websocketBase.sendMessage<TradesRecentResponse>(
            '/trades.recent'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Get klines (candlestick bars) optimized for presentation.
     *
     * This request is similar to `klines`, having the same parameters and response.
     * `uiKlines` return modified kline data, optimized for presentation of candlestick charts.
     * Weight: 2
     *
     * @summary WebSocket UI Klines
     * @param {UiKlinesRequest} requestParameters Request parameters.
     * @returns {Promise<UiKlinesResponse>}
     * @memberof MarketApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#ui-klines Binance API Documentation}
     */
    public uiKlines(
        requestParameters: UiKlinesRequest
    ): Promise<WebsocketApiResponse<UiKlinesResponse>> {
        return this.websocketBase.sendMessage<UiKlinesResponse>(
            '/uiKlines'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }
}

/**
 * @enum {string}
 */
export const KlinesIntervalEnum = {
    INTERVAL_1s: '1s',
    INTERVAL_1m: '1m',
    INTERVAL_3m: '3m',
    INTERVAL_5m: '5m',
    INTERVAL_15m: '15m',
    INTERVAL_30m: '30m',
    INTERVAL_1h: '1h',
    INTERVAL_2h: '2h',
    INTERVAL_4h: '4h',
    INTERVAL_6h: '6h',
    INTERVAL_8h: '8h',
    INTERVAL_12h: '12h',
    INTERVAL_1d: '1d',
    INTERVAL_3d: '3d',
    INTERVAL_1w: '1w',
    INTERVAL_1M: '1M',
} as const;
export type KlinesIntervalEnum = (typeof KlinesIntervalEnum)[keyof typeof KlinesIntervalEnum];

/**
 * @enum {string}
 */
export const TickerTypeEnum = {
    FULL: 'FULL',
    MINI: 'MINI',
} as const;
export type TickerTypeEnum = (typeof TickerTypeEnum)[keyof typeof TickerTypeEnum];

/**
 * @enum {string}
 */
export const TickerWindowSizeEnum = {
    WINDOW_SIZE_1m: '1m',
    WINDOW_SIZE_2m: '2m',
    WINDOW_SIZE_3m: '3m',
    WINDOW_SIZE_4m: '4m',
    WINDOW_SIZE_5m: '5m',
    WINDOW_SIZE_6m: '6m',
    WINDOW_SIZE_7m: '7m',
    WINDOW_SIZE_8m: '8m',
    WINDOW_SIZE_9m: '9m',
    WINDOW_SIZE_10m: '10m',
    WINDOW_SIZE_11m: '11m',
    WINDOW_SIZE_12m: '12m',
    WINDOW_SIZE_13m: '13m',
    WINDOW_SIZE_14m: '14m',
    WINDOW_SIZE_15m: '15m',
    WINDOW_SIZE_16m: '16m',
    WINDOW_SIZE_17m: '17m',
    WINDOW_SIZE_18m: '18m',
    WINDOW_SIZE_19m: '19m',
    WINDOW_SIZE_20m: '20m',
    WINDOW_SIZE_21m: '21m',
    WINDOW_SIZE_22m: '22m',
    WINDOW_SIZE_23m: '23m',
    WINDOW_SIZE_24m: '24m',
    WINDOW_SIZE_25m: '25m',
    WINDOW_SIZE_26m: '26m',
    WINDOW_SIZE_27m: '27m',
    WINDOW_SIZE_28m: '28m',
    WINDOW_SIZE_29m: '29m',
    WINDOW_SIZE_30m: '30m',
    WINDOW_SIZE_31m: '31m',
    WINDOW_SIZE_32m: '32m',
    WINDOW_SIZE_33m: '33m',
    WINDOW_SIZE_34m: '34m',
    WINDOW_SIZE_35m: '35m',
    WINDOW_SIZE_36m: '36m',
    WINDOW_SIZE_37m: '37m',
    WINDOW_SIZE_38m: '38m',
    WINDOW_SIZE_39m: '39m',
    WINDOW_SIZE_40m: '40m',
    WINDOW_SIZE_41m: '41m',
    WINDOW_SIZE_42m: '42m',
    WINDOW_SIZE_43m: '43m',
    WINDOW_SIZE_44m: '44m',
    WINDOW_SIZE_45m: '45m',
    WINDOW_SIZE_46m: '46m',
    WINDOW_SIZE_47m: '47m',
    WINDOW_SIZE_48m: '48m',
    WINDOW_SIZE_49m: '49m',
    WINDOW_SIZE_50m: '50m',
    WINDOW_SIZE_51m: '51m',
    WINDOW_SIZE_52m: '52m',
    WINDOW_SIZE_53m: '53m',
    WINDOW_SIZE_54m: '54m',
    WINDOW_SIZE_55m: '55m',
    WINDOW_SIZE_56m: '56m',
    WINDOW_SIZE_57m: '57m',
    WINDOW_SIZE_58m: '58m',
    WINDOW_SIZE_59m: '59m',
    WINDOW_SIZE_1h: '1h',
    WINDOW_SIZE_2h: '2h',
    WINDOW_SIZE_3h: '3h',
    WINDOW_SIZE_4h: '4h',
    WINDOW_SIZE_5h: '5h',
    WINDOW_SIZE_6h: '6h',
    WINDOW_SIZE_7h: '7h',
    WINDOW_SIZE_8h: '8h',
    WINDOW_SIZE_9h: '9h',
    WINDOW_SIZE_10h: '10h',
    WINDOW_SIZE_11h: '11h',
    WINDOW_SIZE_12h: '12h',
    WINDOW_SIZE_13h: '13h',
    WINDOW_SIZE_14h: '14h',
    WINDOW_SIZE_15h: '15h',
    WINDOW_SIZE_16h: '16h',
    WINDOW_SIZE_17h: '17h',
    WINDOW_SIZE_18h: '18h',
    WINDOW_SIZE_19h: '19h',
    WINDOW_SIZE_20h: '20h',
    WINDOW_SIZE_21h: '21h',
    WINDOW_SIZE_22h: '22h',
    WINDOW_SIZE_23h: '23h',
    WINDOW_SIZE_1d: '1d',
    WINDOW_SIZE_2d: '2d',
    WINDOW_SIZE_3d: '3d',
    WINDOW_SIZE_4d: '4d',
    WINDOW_SIZE_5d: '5d',
    WINDOW_SIZE_6d: '6d',
} as const;
export type TickerWindowSizeEnum = (typeof TickerWindowSizeEnum)[keyof typeof TickerWindowSizeEnum];
/**
 * @enum {string}
 */
export const Ticker24hrTypeEnum = {
    FULL: 'FULL',
    MINI: 'MINI',
} as const;
export type Ticker24hrTypeEnum = (typeof Ticker24hrTypeEnum)[keyof typeof Ticker24hrTypeEnum];
/**
 * @enum {string}
 */
export const TickerTradingDayTypeEnum = {
    FULL: 'FULL',
    MINI: 'MINI',
} as const;
export type TickerTradingDayTypeEnum =
    (typeof TickerTradingDayTypeEnum)[keyof typeof TickerTradingDayTypeEnum];
/**
 * @enum {string}
 */
export const UiKlinesIntervalEnum = {
    INTERVAL_1s: '1s',
    INTERVAL_1m: '1m',
    INTERVAL_3m: '3m',
    INTERVAL_5m: '5m',
    INTERVAL_15m: '15m',
    INTERVAL_30m: '30m',
    INTERVAL_1h: '1h',
    INTERVAL_2h: '2h',
    INTERVAL_4h: '4h',
    INTERVAL_6h: '6h',
    INTERVAL_8h: '8h',
    INTERVAL_12h: '12h',
    INTERVAL_1d: '1d',
    INTERVAL_3d: '3d',
    INTERVAL_1w: '1w',
    INTERVAL_1M: '1M',
} as const;
export type UiKlinesIntervalEnum = (typeof UiKlinesIntervalEnum)[keyof typeof UiKlinesIntervalEnum];
