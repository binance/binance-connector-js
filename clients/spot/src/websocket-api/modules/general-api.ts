/**
 * Binance Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type { ExchangeInfoResponse, TimeResponse } from '../types';

/**
 * GeneralApi - interface
 *
 * @interface GeneralApi
 */
export interface GeneralApiInterface {
    /**
     * Query current exchange trading rules, rate limits, and symbol information.
     * Weight: 20
     *
     * @summary WebSocket Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     *
     * @returns {Promise<ExchangeInfoResponse>}
     * @memberof GeneralApiInterface
     */
    exchangeInfo(
        requestParameters?: ExchangeInfoRequest
    ): Promise<WebsocketApiResponse<ExchangeInfoResponse>>;

    /**
     * Test connectivity to the WebSocket API.
     * Weight: 1
     *
     * @summary WebSocket Test connectivity
     * @param {PingRequest} requestParameters Request parameters.
     *
     * @returns {Promise<void>}
     * @memberof GeneralApiInterface
     */
    ping(requestParameters?: PingRequest): Promise<WebsocketApiResponse<void>>;

    /**
     * Test connectivity to the WebSocket API and get the current server time.
     * Weight: 1
     *
     * @summary WebSocket Check server time
     * @param {TimeRequest} requestParameters Request parameters.
     *
     * @returns {Promise<TimeResponse>}
     * @memberof GeneralApiInterface
     */
    time(requestParameters?: TimeRequest): Promise<WebsocketApiResponse<TimeResponse>>;
}

/**
 * Request parameters for exchangeInfo operation in GeneralApi.
 * @interface ExchangeInfoRequest
 */
export interface ExchangeInfoRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof GeneralApiExchangeInfo
     */
    readonly id?: string;

    /**
     * Describe a single symbol
     * @type {string}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbol?: string;

    /**
     * List of symbols to query
     * @type {Array<string>}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbols?: Array<string>;

    /**
     *
     * @type {Array<string>}
     * @memberof GeneralApiExchangeInfo
     */
    readonly permissions?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof GeneralApiExchangeInfo
     */
    readonly showPermissionSets?: boolean;

    /**
     *
     * @type {'PRE_TRADING' | 'TRADING' | 'POST_TRADING' | 'END_OF_DAY' | 'HALT' | 'AUCTION_MATCH' | 'BREAK'}
     * @memberof GeneralApiExchangeInfo
     */
    readonly symbolStatus?: ExchangeInfoSymbolStatusEnum;
}

/**
 * Request parameters for ping operation in GeneralApi.
 * @interface PingRequest
 */
export interface PingRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof GeneralApiPing
     */
    readonly id?: string;
}

/**
 * Request parameters for time operation in GeneralApi.
 * @interface TimeRequest
 */
export interface TimeRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof GeneralApiTime
     */
    readonly id?: string;
}

/**
 * GeneralApi - object-oriented interface
 * @class GeneralApi
 * @extends {WebsocketAPIBase}
 */
export class GeneralApi implements GeneralApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Query current exchange trading rules, rate limits, and symbol information.
     * Weight: 20
     *
     * @summary WebSocket Exchange information
     * @param {ExchangeInfoRequest} requestParameters Request parameters.
     * @returns {Promise<ExchangeInfoResponse>}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/general-requests#exchange-information Binance API Documentation}
     */
    public exchangeInfo(
        requestParameters: ExchangeInfoRequest = {}
    ): Promise<WebsocketApiResponse<ExchangeInfoResponse>> {
        return this.websocketBase.sendMessage<ExchangeInfoResponse>(
            '/exchangeInfo'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Test connectivity to the WebSocket API.
     * Weight: 1
     *
     * @summary WebSocket Test connectivity
     * @param {PingRequest} requestParameters Request parameters.
     * @returns {Promise<void>}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/general-requests#test-connectivity Binance API Documentation}
     */
    public ping(requestParameters: PingRequest = {}): Promise<WebsocketApiResponse<void>> {
        return this.websocketBase.sendMessage<void>(
            '/ping'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }

    /**
     * Test connectivity to the WebSocket API and get the current server time.
     * Weight: 1
     *
     * @summary WebSocket Check server time
     * @param {TimeRequest} requestParameters Request parameters.
     * @returns {Promise<TimeResponse>}
     * @memberof GeneralApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/general-requests#check-server-time Binance API Documentation}
     */
    public time(requestParameters: TimeRequest = {}): Promise<WebsocketApiResponse<TimeResponse>> {
        return this.websocketBase.sendMessage<TimeResponse>(
            '/time'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: false, withApiKey: false }
        );
    }
}

/**
 * @enum {string}
 */
export const ExchangeInfoSymbolStatusEnum = {
    PRE_TRADING: 'PRE_TRADING',
    TRADING: 'TRADING',
    POST_TRADING: 'POST_TRADING',
    END_OF_DAY: 'END_OF_DAY',
    HALT: 'HALT',
    AUCTION_MATCH: 'AUCTION_MATCH',
    BREAK: 'BREAK',
} as const;
export type ExchangeInfoSymbolStatusEnum =
    (typeof ExchangeInfoSymbolStatusEnum)[keyof typeof ExchangeInfoSymbolStatusEnum];
