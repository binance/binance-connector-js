/**
 * Binance Public Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Public Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    OpenOrderListsStatusResponse,
    OpenOrdersCancelAllResponse,
    OpenOrdersStatusResponse,
    OrderCancelReplaceResponse,
    OrderCancelResponse,
    OrderListCancelResponse,
    OrderListPlaceOcoResponse,
    OrderListPlaceOtoResponse,
    OrderListPlaceOtocoResponse,
    OrderListPlaceResponse,
    OrderListStatusResponse,
    OrderPlaceResponse,
    OrderStatusResponse,
    OrderTestResponse,
    SorOrderPlaceResponse,
    SorOrderTestResponse,
} from '../types';

/**
 * TradeApi - interface
 *
 * @interface TradeApi
 */
export interface TradeApiInterface {
    /**
     * Query execution status of all open order lists.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: 6
     *
     * @summary WebSocket Current open Order lists
     * @param {OpenOrderListsStatusRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OpenOrderListsStatusResponse>}
     * @memberof TradeApiInterface
     */
    openOrderListsStatus(
        requestParameters?: OpenOrderListsStatusRequest
    ): Promise<WebsocketApiResponse<OpenOrderListsStatusResponse>>;

    /**
     * Cancel all open orders on a symbol.
     * This includes orders that are part of an order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel open orders
     * @param {OpenOrdersCancelAllRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OpenOrdersCancelAllResponse>}
     * @memberof TradeApiInterface
     */
    openOrdersCancelAll(
        requestParameters: OpenOrdersCancelAllRequest
    ): Promise<WebsocketApiResponse<OpenOrdersCancelAllResponse>>;

    /**
     * Query execution status of all open orders.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- | ------ |
     * | `symbol`  |      6 |
     * | none      |     80 |
     *
     * @summary WebSocket Current open orders
     * @param {OpenOrdersStatusRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OpenOrdersStatusResponse>}
     * @memberof TradeApiInterface
     */
    openOrdersStatus(
        requestParameters: OpenOrdersStatusRequest
    ): Promise<WebsocketApiResponse<OpenOrdersStatusResponse>>;

    /**
     * Cancel an active order.
     * Weight: 1
     *
     * @summary WebSocket Cancel order
     * @param {OrderCancelRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderCancelResponse>}
     * @memberof TradeApiInterface
     */
    orderCancel(
        requestParameters: OrderCancelRequest
    ): Promise<WebsocketApiResponse<OrderCancelResponse>>;

    /**
     * Cancel an existing order and immediately place a new order instead of the canceled one.
     * Weight: 1
     *
     * @summary WebSocket Cancel and replace order
     * @param {OrderCancelReplaceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderCancelReplaceResponse>}
     * @memberof TradeApiInterface
     */
    orderCancelReplace(
        requestParameters: OrderCancelReplaceRequest
    ): Promise<WebsocketApiResponse<OrderCancelReplaceResponse>>;

    /**
     * Cancel an active order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel Order list
     * @param {OrderListCancelRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListCancelResponse>}
     * @memberof TradeApiInterface
     */
    orderListCancel(
        requestParameters: OrderListCancelRequest
    ): Promise<WebsocketApiResponse<OrderListCancelResponse>>;

    /**
     * Send in a new one-cancels-the-other (OCO) pair:
     * `LIMIT_MAKER` + `STOP_LOSS`/`STOP_LOSS_LIMIT` orders (called *legs*),
     * where activation of one order immediately cancels the other.
     * Weight: 1
     *
     * @summary WebSocket Place new OCO - Deprecated
     * @param {OrderListPlaceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListPlaceResponse>}
     * @memberof TradeApiInterface
     */
    orderListPlace(
        requestParameters: OrderListPlaceRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceResponse>>;

    /**
     * Send in an one-cancels the other (OCO) pair, where activation of one order immediately cancels the other.
     *
     * An OCO has 2 orders called the **above order** and **below order**.
     * One of the orders must be a `LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT` order and the other must be `STOP_LOSS` or `STOP_LOSS_LIMIT` order.
     * Price restrictions:
     * If the OCO is on the `SELL` side:
     * `LIMIT_MAKER/TAKE_PROFIT_LIMIT` `price` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * If the OCO is on the `BUY` side:
     * `LIMIT_MAKER` `price` < Last Traded Price < `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * OCOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     *
     *
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OCO
     * @param {OrderListPlaceOcoRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListPlaceOcoResponse>}
     * @memberof TradeApiInterface
     */
    orderListPlaceOco(
        requestParameters: OrderListPlaceOcoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOcoResponse>>;

    /**
     * Places an OTO.
     *
     * An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
     * If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
     * OTOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTO
     * @param {OrderListPlaceOtoRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListPlaceOtoResponse>}
     * @memberof TradeApiInterface
     */
    orderListPlaceOto(
        requestParameters: OrderListPlaceOtoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtoResponse>>;

    /**
     * Place an OTOCO.
     *
     * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The behavior of the working order is the same as the [OTO](#place-new-order-list---oto-trade).
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
     * OTOCOs add **3 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTOCO
     * @param {OrderListPlaceOtocoRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListPlaceOtocoResponse>}
     * @memberof TradeApiInterface
     */
    orderListPlaceOtoco(
        requestParameters: OrderListPlaceOtocoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtocoResponse>>;

    /**
     * Check execution status of an Order list.
     *
     * For execution status of individual orders, use `order.status`.
     * Weight: 4
     *
     * @summary WebSocket Query Order list
     * @param {OrderListStatusRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderListStatusResponse>}
     * @memberof TradeApiInterface
     */
    orderListStatus(
        requestParameters?: OrderListStatusRequest
    ): Promise<WebsocketApiResponse<OrderListStatusResponse>>;

    /**
     * Send in a new order.
     * Weight: 1
     *
     * @summary WebSocket Place new order
     * @param {OrderPlaceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderPlaceResponse>}
     * @memberof TradeApiInterface
     */
    orderPlace(
        requestParameters: OrderPlaceRequest
    ): Promise<WebsocketApiResponse<OrderPlaceResponse>>;

    /**
     * Check execution status of an order.
     * Weight: 4
     *
     * @summary WebSocket Query order
     * @param {OrderStatusRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderStatusResponse>}
     * @memberof TradeApiInterface
     */
    orderStatus(
        requestParameters: OrderStatusRequest
    ): Promise<WebsocketApiResponse<OrderStatusResponse>>;

    /**
     * Test order placement.
     *
     * Validates new order parameters and verifies your signature
     * but does not send the order into the matching engine.
     * Weight: |Condition| Request Weight|
     * |------------           | ------------ |
     * |Without `computeCommissionRates`| 1|
     * |With `computeCommissionRates`|20|
     *
     * @summary WebSocket Test new order
     * @param {OrderTestRequest} requestParameters Request parameters.
     *
     * @returns {Promise<OrderTestResponse>}
     * @memberof TradeApiInterface
     */
    orderTest(
        requestParameters?: OrderTestRequest
    ): Promise<WebsocketApiResponse<OrderTestResponse>>;

    /**
     * Places an order using smart order routing (SOR).
     * Weight: 1
     *
     * @summary WebSocket Place new order using SOR
     * @param {SorOrderPlaceRequest} requestParameters Request parameters.
     *
     * @returns {Promise<SorOrderPlaceResponse>}
     * @memberof TradeApiInterface
     */
    sorOrderPlace(
        requestParameters: SorOrderPlaceRequest
    ): Promise<WebsocketApiResponse<SorOrderPlaceResponse>>;

    /**
     * Test new order creation and signature/recvWindow using smart order routing (SOR).
     * Creates and validates a new order but does not send it into the matching engine.
     * Weight: |Condition                       | Request Weight|
     * |------------                    | ------------ |
     * |Without `computeCommissionRates`| 1            |
     * |With `computeCommissionRates`   |20            |
     *
     * @summary WebSocket Test new order using SOR
     * @param {SorOrderTestRequest} requestParameters Request parameters.
     *
     * @returns {Promise<SorOrderTestResponse>}
     * @memberof TradeApiInterface
     */
    sorOrderTest(
        requestParameters?: SorOrderTestRequest
    ): Promise<WebsocketApiResponse<SorOrderTestResponse>>;
}

/**
 * Request parameters for openOrderListsStatus operation in TradeApi.
 * @interface OpenOrderListsStatusRequest
 */
export interface OpenOrderListsStatusRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOpenOrderListsStatus
     */
    readonly id?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOpenOrderListsStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for openOrdersCancelAll operation in TradeApi.
 * @interface OpenOrdersCancelAllRequest
 */
export interface OpenOrdersCancelAllRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOpenOrdersCancelAll
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOpenOrdersCancelAll
     */
    readonly id?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOpenOrdersCancelAll
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for openOrdersStatus operation in TradeApi.
 * @interface OpenOrdersStatusRequest
 */
export interface OpenOrdersStatusRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOpenOrdersStatus
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOpenOrdersStatus
     */
    readonly id?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOpenOrdersStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderCancel operation in TradeApi.
 * @interface OrderCancelRequest
 */
export interface OrderCancelRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderCancel
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderCancel
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderCancel
     */
    readonly orderId?: number;

    /**
     * Query order list by listClientOrderId
     * @type {string}
     * @memberof TradeApiOrderCancel
     */
    readonly origClientOrderId?: string;

    /**
     * Arbitrary unique ID among open orders. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderCancel
     */
    readonly newClientOrderId?: string;

    /**
     *
     * @type {'ONLY_NEW' | 'NEW' | 'ONLY_PARTIALLY_FILLED' | 'PARTIALLY_FILLED'}
     * @memberof TradeApiOrderCancel
     */
    readonly cancelRestrictions?: OrderCancelCancelRestrictionsEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderCancel
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderCancelReplace operation in TradeApi.
 * @interface OrderCancelReplaceRequest
 */
export interface OrderCancelReplaceRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly quantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly id?: string;

    /**
     *
     * @type {'STOP_ON_FAILURE' | 'ALLOW_FAILURE'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly cancelReplaceMode?: OrderCancelReplaceCancelReplaceModeEnum;

    /**
     * Cancel order by orderId
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly cancelOrderId?: number;

    /**
     *
     * @type {string}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly cancelOrigClientOrderId?: string;

    /**
     * New ID for the canceled order. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly cancelNewClientOrderId?: string;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly side?: OrderCancelReplaceSideEnum;

    /**
     *
     * @type {'MARKET' | 'LIMIT' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly type?: OrderCancelReplaceTypeEnum;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly timeInForce?: OrderCancelReplaceTimeInForceEnum;

    /**
     * Applicable only to `LIMIT` order type
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly price?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly quoteOrderQty?: number;

    /**
     * Arbitrary unique ID among open orders. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly newClientOrderId?: string;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly newOrderRespType?: OrderCancelReplaceNewOrderRespTypeEnum;

    /**
     * Either `stopPrice` or `trailingDelta`, or both must be specified
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly stopPrice?: number;

    /**
     * See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md)
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly trailingDelta?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly icebergQty?: number;

    /**
     * Arbitrary numeric value identifying the order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly strategyId?: number;

    /**
     * <p>Arbitrary numeric value identifying the order strategy.</p><p>Values smaller than `1000000` are reserved and cannot be used.</p>
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly strategyType?: number;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly selfTradePreventionMode?: OrderCancelReplaceSelfTradePreventionModeEnum;

    /**
     *
     * @type {'ONLY_NEW' | 'NEW' | 'ONLY_PARTIALLY_FILLED' | 'PARTIALLY_FILLED'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly cancelRestrictions?: OrderCancelReplaceCancelRestrictionsEnum;

    /**
     *
     * @type {'DO_NOTHING' | 'CANCEL_ONLY'}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly orderRateLimitExceededMode?: OrderCancelReplaceOrderRateLimitExceededModeEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderCancelReplace
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListCancel operation in TradeApi.
 * @interface OrderListCancelRequest
 */
export interface OrderListCancelRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListCancel
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListCancel
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListCancel
     */
    readonly orderListId?: number;

    /**
     * Arbitrary unique ID among open order lists. Automatically generated if not sent. <br>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
     * @type {string}
     * @memberof TradeApiOrderListCancel
     */
    readonly listClientOrderId?: string;

    /**
     * Arbitrary unique ID among open orders. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderListCancel
     */
    readonly newClientOrderId?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListCancel
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListPlace operation in TradeApi.
 * @interface OrderListPlaceRequest
 */
export interface OrderListPlaceRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListPlace
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly quantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListPlace
     */
    readonly id?: string;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlace
     */
    readonly side?: OrderListPlaceSideEnum;

    /**
     * Applicable only to `LIMIT` order type
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly price?: number;

    /**
     * Arbitrary unique ID among open order lists. Automatically generated if not sent. <br>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
     * @type {string}
     * @memberof TradeApiOrderListPlace
     */
    readonly listClientOrderId?: string;

    /**
     * Arbitrary unique ID among open orders for the limit order. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderListPlace
     */
    readonly limitClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly limitIcebergQty?: number;

    /**
     * Arbitrary numeric value identifying the limit order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly limitStrategyId?: number;

    /**
     * <p>Arbitrary numeric value identifying the limit order strategy.</p><p>Values smaller than `1000000` are reserved and cannot be used.</p>
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly limitStrategyType?: number;

    /**
     * Either `stopPrice` or `trailingDelta`, or both must be specified
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopPrice?: number;

    /**
     * See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md)
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly trailingDelta?: number;

    /**
     * Arbitrary unique ID among open orders for the stop order. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopLimitPrice?: number;

    /**
     *
     * @type {'GTC' | 'FOK' | 'IOC'}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopLimitTimeInForce?: OrderListPlaceStopLimitTimeInForceEnum;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopIcebergQty?: number;

    /**
     * Arbitrary numeric value identifying the stop order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopStrategyId?: number;

    /**
     * <p>Arbitrary numeric value identifying the stop order strategy.</p><p>Values smaller than `1000000` are reserved and cannot be used.</p>
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly stopStrategyType?: number;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderListPlace
     */
    readonly newOrderRespType?: OrderListPlaceNewOrderRespTypeEnum;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderListPlace
     */
    readonly selfTradePreventionMode?: OrderListPlaceSelfTradePreventionModeEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListPlace
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListPlaceOco operation in TradeApi.
 * @interface OrderListPlaceOcoRequest
 */
export interface OrderListPlaceOcoRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly quantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly id?: string;

    /**
     * Arbitrary unique ID among open order lists. Automatically generated if not sent. <br>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly listClientOrderId?: string;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly side?: OrderListPlaceOcoSideEnum;

    /**
     *
     * @type {'STOP_LOSS_LIMIT' | 'STOP_LOSS' | 'LIMIT_MAKER' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveType?: OrderListPlaceOcoAboveTypeEnum;

    /**
     * Arbitrary unique ID among open orders for the above order. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveClientOrderId?: string;

    /**
     * Note that this can only be used if `aboveTimeInForce` is `GTC`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveIcebergQty?: number;

    /**
     * Can be used if `aboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly abovePrice?: number;

    /**
     * Can be used if `aboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT` <br>Either `aboveStopPrice` or `aboveTrailingDelta` or both, must be specified.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveStopPrice?: number;

    /**
     * See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveTrailingDelta?: number;

    /**
     * Required if `aboveType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveTimeInForce?: number;

    /**
     * Arbitrary numeric value identifying the above order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the above order strategy. <br>Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly aboveStrategyType?: number;

    /**
     *
     * @type {'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowType?: OrderListPlaceOcoBelowTypeEnum;

    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowClientOrderId?: string;

    /**
     * Note that this can only be used if `belowTimeInForce` is `GTC`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowIcebergQty?: number;

    /**
     * Can be used if `belowType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowPrice?: number;

    /**
     * Can be used if `belowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT` or `TAKE_PROFIT_LIMIT`. Either `belowStopPrice` or `belowTrailingDelta` or both, must be specified.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowStopPrice?: number;

    /**
     * See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md).
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowTrailingDelta?: number;

    /**
     *
     * @type {'belowType' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT_LIMIT'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowTimeInForce?: OrderListPlaceOcoBelowTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the below order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the below order strategy. <br>Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly belowStrategyType?: number;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly newOrderRespType?: OrderListPlaceOcoNewOrderRespTypeEnum;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly selfTradePreventionMode?: OrderListPlaceOcoSelfTradePreventionModeEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListPlaceOco
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListPlaceOto operation in TradeApi.
 * @interface OrderListPlaceOtoRequest
 */
export interface OrderListPlaceOtoRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingPrice: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingQuantity: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingQuantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly id?: string;

    /**
     * Arbitrary unique ID among open order lists. Automatically generated if not sent. <br>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly listClientOrderId?: string;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly newOrderRespType?: OrderListPlaceOtoNewOrderRespTypeEnum;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly selfTradePreventionMode?: OrderListPlaceOtoSelfTradePreventionModeEnum;

    /**
     *
     * @type {'LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingType?: OrderListPlaceOtoWorkingTypeEnum;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingSide?: OrderListPlaceOtoWorkingSideEnum;

    /**
     * Arbitrary unique ID among open orders for the working order.<br> Automatically generated if not sent.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingClientOrderId?: string;

    /**
     * This can only be used if `workingTimeInForce` is `GTC`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingIcebergQty?: number;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingTimeInForce?: OrderListPlaceOtoWorkingTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the working order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the working order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly workingStrategyType?: number;

    /**
     *
     * @type {'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingType?: OrderListPlaceOtoPendingTypeEnum;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingSide?: OrderListPlaceOtoPendingSideEnum;

    /**
     * Arbitrary unique ID among open orders for the pending order.<br> Automatically generated if not sent.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingPrice?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingStopPrice?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingTrailingDelta?: number;

    /**
     * This can only be used if `pendingTimeInForce` is `GTC`, or if `pendingType` is `LIMIT_MAKER`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingIcebergQty?: number;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingTimeInForce?: OrderListPlaceOtoPendingTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the pending order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the pending order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly pendingStrategyType?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListPlaceOto
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListPlaceOtoco operation in TradeApi.
 * @interface OrderListPlaceOtocoRequest
 */
export interface OrderListPlaceOtocoRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingPrice: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingQuantity: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingQuantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly id?: string;

    /**
     * Arbitrary unique ID among open order lists. Automatically generated if not sent. <br>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly listClientOrderId?: string;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly newOrderRespType?: OrderListPlaceOtocoNewOrderRespTypeEnum;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly selfTradePreventionMode?: OrderListPlaceOtocoSelfTradePreventionModeEnum;

    /**
     *
     * @type {'LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingType?: OrderListPlaceOtocoWorkingTypeEnum;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingSide?: OrderListPlaceOtocoWorkingSideEnum;

    /**
     * Arbitrary unique ID among open orders for the working order.<br> Automatically generated if not sent.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingClientOrderId?: string;

    /**
     * This can only be used if `workingTimeInForce` is `GTC`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingIcebergQty?: number;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingTimeInForce?: OrderListPlaceOtocoWorkingTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the working order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the working order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly workingStrategyType?: number;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingSide?: OrderListPlaceOtocoPendingSideEnum;

    /**
     *
     * @type {'STOP_LOSS_LIMIT' | 'STOP_LOSS' | 'LIMIT_MAKER' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveType?: OrderListPlaceOtocoPendingAboveTypeEnum;

    /**
     * Arbitrary unique ID among open orders for the pending above order.<br> Automatically generated if not sent.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveClientOrderId?: string;

    /**
     * Can be used if `pendingAboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAbovePrice?: number;

    /**
     * Can be used if `pendingAboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveStopPrice?: number;

    /**
     * See [Trailing Stop FAQ](faqs/trailing-stop-faq.md)
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveTrailingDelta?: number;

    /**
     * This can only be used if `pendingAboveTimeInForce` is `GTC` or if `pendingAboveType` is `LIMIT_MAKER`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveIcebergQty?: number;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveTimeInForce?: OrderListPlaceOtocoPendingAboveTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the pending above order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the pending above order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingAboveStrategyType?: number;

    /**
     *
     * @type {'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowType?: OrderListPlaceOtocoPendingBelowTypeEnum;

    /**
     * Arbitrary unique ID among open orders for the pending below order.<br> Automatically generated if not sent.
     * @type {string}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowClientOrderId?: string;

    /**
     * Can be used if `pendingBelowType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT` to specify limit price
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowPrice?: number;

    /**
     * Can be used if `pendingBelowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT or TAKE_PROFIT_LIMIT`. Either `pendingBelowStopPrice` or `pendingBelowTrailingDelta` or both, must be specified.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowStopPrice?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowTrailingDelta?: number;

    /**
     * This can only be used if `pendingBelowTimeInForce` is `GTC`, or if `pendingBelowType` is `LIMIT_MAKER`.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowIcebergQty?: number;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowTimeInForce?: OrderListPlaceOtocoPendingBelowTimeInForceEnum;

    /**
     * Arbitrary numeric value identifying the pending below order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowStrategyId?: number;

    /**
     * Arbitrary numeric value identifying the pending below order strategy. <br> Values smaller than 1000000 are reserved and cannot be used.
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly pendingBelowStrategyType?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListPlaceOtoco
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderListStatus operation in TradeApi.
 * @interface OrderListStatusRequest
 */
export interface OrderListStatusRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderListStatus
     */
    readonly id?: string;

    /**
     * Query order list by listClientOrderId
     * @type {string}
     * @memberof TradeApiOrderListStatus
     */
    readonly origClientOrderId?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderListStatus
     */
    readonly orderListId?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderListStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderPlace operation in TradeApi.
 * @interface OrderPlaceRequest
 */
export interface OrderPlaceRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderPlace
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly quantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderPlace
     */
    readonly id?: string;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiOrderPlace
     */
    readonly side?: OrderPlaceSideEnum;

    /**
     *
     * @type {'MARKET' | 'LIMIT' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiOrderPlace
     */
    readonly type?: OrderPlaceTypeEnum;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiOrderPlace
     */
    readonly timeInForce?: OrderPlaceTimeInForceEnum;

    /**
     * Applicable only to `LIMIT` order type
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly price?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly quoteOrderQty?: number;

    /**
     * Arbitrary unique ID among open orders. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiOrderPlace
     */
    readonly newClientOrderId?: string;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiOrderPlace
     */
    readonly newOrderRespType?: OrderPlaceNewOrderRespTypeEnum;

    /**
     * Either `stopPrice` or `trailingDelta`, or both must be specified
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly stopPrice?: number;

    /**
     * See [Trailing Stop order FAQ](faqs/trailing-stop-faq.md)
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly trailingDelta?: number;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly icebergQty?: number;

    /**
     * Arbitrary numeric value identifying the order within an order strategy.
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly strategyId?: number;

    /**
     * <p>Arbitrary numeric value identifying the order strategy.</p><p>Values smaller than `1000000` are reserved and cannot be used.</p>
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly strategyType?: number;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiOrderPlace
     */
    readonly selfTradePreventionMode?: OrderPlaceSelfTradePreventionModeEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderPlace
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderStatus operation in TradeApi.
 * @interface OrderStatusRequest
 */
export interface OrderStatusRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiOrderStatus
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderStatus
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiOrderStatus
     */
    readonly orderId?: number;

    /**
     * Query order list by listClientOrderId
     * @type {string}
     * @memberof TradeApiOrderStatus
     */
    readonly origClientOrderId?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiOrderStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for orderTest operation in TradeApi.
 * @interface OrderTestRequest
 */
export interface OrderTestRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiOrderTest
     */
    readonly id?: string;

    /**
     * Default: `false`
     * @type {boolean}
     * @memberof TradeApiOrderTest
     */
    readonly computeCommissionRates?: boolean;
}

/**
 * Request parameters for sorOrderPlace operation in TradeApi.
 * @interface SorOrderPlaceRequest
 */
export interface SorOrderPlaceRequest {
    /**
     *
     * @type {string}
     * @memberof TradeApiSorOrderPlace
     */
    readonly symbol: string;

    /**
     *
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly quantity: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiSorOrderPlace
     */
    readonly id?: string;

    /**
     *
     * @type {'BUY' | 'SELL'}
     * @memberof TradeApiSorOrderPlace
     */
    readonly side?: SorOrderPlaceSideEnum;

    /**
     *
     * @type {'MARKET' | 'LIMIT' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER'}
     * @memberof TradeApiSorOrderPlace
     */
    readonly type?: SorOrderPlaceTypeEnum;

    /**
     *
     * @type {'GTC' | 'IOC' | 'FOK'}
     * @memberof TradeApiSorOrderPlace
     */
    readonly timeInForce?: SorOrderPlaceTimeInForceEnum;

    /**
     * Applicable only to `LIMIT` order type
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly price?: number;

    /**
     * Arbitrary unique ID among open orders. Automatically generated if not sent
     * @type {string}
     * @memberof TradeApiSorOrderPlace
     */
    readonly newClientOrderId?: string;

    /**
     *
     * @type {'ACK' | 'RESULT' | 'FULL' | 'MARKET' | 'LIMIT'}
     * @memberof TradeApiSorOrderPlace
     */
    readonly newOrderRespType?: SorOrderPlaceNewOrderRespTypeEnum;

    /**
     *
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly icebergQty?: number;

    /**
     * Arbitrary numeric value identifying the order within an order strategy.
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly strategyId?: number;

    /**
     * <p>Arbitrary numeric value identifying the order strategy.</p><p>Values smaller than `1000000` are reserved and cannot be used.</p>
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly strategyType?: number;

    /**
     *
     * @type {'NONE' | 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH'}
     * @memberof TradeApiSorOrderPlace
     */
    readonly selfTradePreventionMode?: SorOrderPlaceSelfTradePreventionModeEnum;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof TradeApiSorOrderPlace
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for sorOrderTest operation in TradeApi.
 * @interface SorOrderTestRequest
 */
export interface SorOrderTestRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof TradeApiSorOrderTest
     */
    readonly id?: string;

    /**
     * Default: `false`
     * @type {boolean}
     * @memberof TradeApiSorOrderTest
     */
    readonly computeCommissionRates?: boolean;
}

/**
 * TradeApi - object-oriented interface
 * @class TradeApi
 * @extends {WebsocketAPIBase}
 */
export class TradeApi implements TradeApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Query execution status of all open order lists.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: 6
     *
     * @summary WebSocket Current open Order lists
     * @param {OpenOrderListsStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrderListsStatusResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#current-open-order-lists-user_data Binance API Documentation}
     */
    public openOrderListsStatus(
        requestParameters: OpenOrderListsStatusRequest = {}
    ): Promise<WebsocketApiResponse<OpenOrderListsStatusResponse>> {
        return this.websocketBase.sendMessage<OpenOrderListsStatusResponse>(
            '/openOrderLists.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Cancel all open orders on a symbol.
     * This includes orders that are part of an order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel open orders
     * @param {OpenOrdersCancelAllRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrdersCancelAllResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-open-orders-trade Binance API Documentation}
     */
    public openOrdersCancelAll(
        requestParameters: OpenOrdersCancelAllRequest
    ): Promise<WebsocketApiResponse<OpenOrdersCancelAllResponse>> {
        return this.websocketBase.sendMessage<OpenOrdersCancelAllResponse>(
            '/openOrders.cancelAll'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query execution status of all open orders.
     *
     * If you need to continuously monitor order status updates, please consider using WebSocket Streams:
     *
     * `userDataStream.start` request
     * `executionReport` user data stream event
     * Weight: Adjusted based on the number of requested symbols:
     *
     * | Parameter | Weight |
     * | --------- | ------ |
     * | `symbol`  |      6 |
     * | none      |     80 |
     *
     * @summary WebSocket Current open orders
     * @param {OpenOrdersStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OpenOrdersStatusResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#current-open-orders-user_data Binance API Documentation}
     */
    public openOrdersStatus(
        requestParameters: OpenOrdersStatusRequest
    ): Promise<WebsocketApiResponse<OpenOrdersStatusResponse>> {
        return this.websocketBase.sendMessage<OpenOrdersStatusResponse>(
            '/openOrders.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Cancel an active order.
     * Weight: 1
     *
     * @summary WebSocket Cancel order
     * @param {OrderCancelRequest} requestParameters Request parameters.
     * @returns {Promise<OrderCancelResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-order-trade Binance API Documentation}
     */
    public orderCancel(
        requestParameters: OrderCancelRequest
    ): Promise<WebsocketApiResponse<OrderCancelResponse>> {
        return this.websocketBase.sendMessage<OrderCancelResponse>(
            '/order.cancel'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Cancel an existing order and immediately place a new order instead of the canceled one.
     * Weight: 1
     *
     * @summary WebSocket Cancel and replace order
     * @param {OrderCancelReplaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderCancelReplaceResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-and-replace-order-trade Binance API Documentation}
     */
    public orderCancelReplace(
        requestParameters: OrderCancelReplaceRequest
    ): Promise<WebsocketApiResponse<OrderCancelReplaceResponse>> {
        return this.websocketBase.sendMessage<OrderCancelReplaceResponse>(
            '/order.cancelReplace'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Cancel an active order list.
     * Weight: 1
     *
     * @summary WebSocket Cancel Order list
     * @param {OrderListCancelRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListCancelResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#cancel-order-list-trade Binance API Documentation}
     */
    public orderListCancel(
        requestParameters: OrderListCancelRequest
    ): Promise<WebsocketApiResponse<OrderListCancelResponse>> {
        return this.websocketBase.sendMessage<OrderListCancelResponse>(
            '/orderList.cancel'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Send in a new one-cancels-the-other (OCO) pair:
     * `LIMIT_MAKER` + `STOP_LOSS`/`STOP_LOSS_LIMIT` orders (called *legs*),
     * where activation of one order immediately cancels the other.
     * Weight: 1
     *
     * @summary WebSocket Place new OCO - Deprecated
     * @param {OrderListPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-oco---deprecated-trade Binance API Documentation}
     */
    public orderListPlace(
        requestParameters: OrderListPlaceRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceResponse>> {
        return this.websocketBase.sendMessage<OrderListPlaceResponse>(
            '/orderList.place'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Send in an one-cancels the other (OCO) pair, where activation of one order immediately cancels the other.
     *
     * An OCO has 2 orders called the **above order** and **below order**.
     * One of the orders must be a `LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT` order and the other must be `STOP_LOSS` or `STOP_LOSS_LIMIT` order.
     * Price restrictions:
     * If the OCO is on the `SELL` side:
     * `LIMIT_MAKER/TAKE_PROFIT_LIMIT` `price` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * If the OCO is on the `BUY` side:
     * `LIMIT_MAKER` `price` < Last Traded Price < `STOP_LOSS/STOP_LOSS_LIMIT` `stopPrice`
     * `TAKE_PROFIT stopPrice` > Last Traded Price > `STOP_LOSS/STOP_LOSS_LIMIT stopPrice`
     * OCOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     *
     *
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OCO
     * @param {OrderListPlaceOcoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOcoResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---oco-trade Binance API Documentation}
     */
    public orderListPlaceOco(
        requestParameters: OrderListPlaceOcoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOcoResponse>> {
        return this.websocketBase.sendMessage<OrderListPlaceOcoResponse>(
            '/orderList.place.oco'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Places an OTO.
     *
     * An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The second order is called the **pending order**. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets **fully filled**.
     * If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
     * OTOs add **2 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTO
     * @param {OrderListPlaceOtoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOtoResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---oto-trade Binance API Documentation}
     */
    public orderListPlaceOto(
        requestParameters: OrderListPlaceOtoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtoResponse>> {
        return this.websocketBase.sendMessage<OrderListPlaceOtoResponse>(
            '/orderList.place.oto'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Place an OTOCO.
     *
     * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
     * The first order is called the **working order** and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
     * The behavior of the working order is the same as the [OTO](#place-new-order-list---oto-trade).
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets **fully filled**.
     * OTOCOs add **3 orders** to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
     * Weight: 1
     *
     * @summary WebSocket Place new Order list - OTOCO
     * @param {OrderListPlaceOtocoRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListPlaceOtocoResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-list---otoco-trade Binance API Documentation}
     */
    public orderListPlaceOtoco(
        requestParameters: OrderListPlaceOtocoRequest
    ): Promise<WebsocketApiResponse<OrderListPlaceOtocoResponse>> {
        return this.websocketBase.sendMessage<OrderListPlaceOtocoResponse>(
            '/orderList.place.otoco'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Check execution status of an Order list.
     *
     * For execution status of individual orders, use `order.status`.
     * Weight: 4
     *
     * @summary WebSocket Query Order list
     * @param {OrderListStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OrderListStatusResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#query-order-list-user_data Binance API Documentation}
     */
    public orderListStatus(
        requestParameters: OrderListStatusRequest = {}
    ): Promise<WebsocketApiResponse<OrderListStatusResponse>> {
        return this.websocketBase.sendMessage<OrderListStatusResponse>(
            '/orderList.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Send in a new order.
     * Weight: 1
     *
     * @summary WebSocket Place new order
     * @param {OrderPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<OrderPlaceResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-trade Binance API Documentation}
     */
    public orderPlace(
        requestParameters: OrderPlaceRequest
    ): Promise<WebsocketApiResponse<OrderPlaceResponse>> {
        return this.websocketBase.sendMessage<OrderPlaceResponse>(
            '/order.place'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Check execution status of an order.
     * Weight: 4
     *
     * @summary WebSocket Query order
     * @param {OrderStatusRequest} requestParameters Request parameters.
     * @returns {Promise<OrderStatusResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#query-order-user_data Binance API Documentation}
     */
    public orderStatus(
        requestParameters: OrderStatusRequest
    ): Promise<WebsocketApiResponse<OrderStatusResponse>> {
        return this.websocketBase.sendMessage<OrderStatusResponse>(
            '/order.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Test order placement.
     *
     * Validates new order parameters and verifies your signature
     * but does not send the order into the matching engine.
     * Weight: |Condition| Request Weight|
     * |------------           | ------------ |
     * |Without `computeCommissionRates`| 1|
     * |With `computeCommissionRates`|20|
     *
     * @summary WebSocket Test new order
     * @param {OrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<OrderTestResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#test-new-order-trade Binance API Documentation}
     */
    public orderTest(
        requestParameters: OrderTestRequest = {}
    ): Promise<WebsocketApiResponse<OrderTestResponse>> {
        return this.websocketBase.sendMessage<OrderTestResponse>(
            '/order.test'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Places an order using smart order routing (SOR).
     * Weight: 1
     *
     * @summary WebSocket Place new order using SOR
     * @param {SorOrderPlaceRequest} requestParameters Request parameters.
     * @returns {Promise<SorOrderPlaceResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#place-new-order-using-sor-trade Binance API Documentation}
     */
    public sorOrderPlace(
        requestParameters: SorOrderPlaceRequest
    ): Promise<WebsocketApiResponse<SorOrderPlaceResponse>> {
        return this.websocketBase.sendMessage<SorOrderPlaceResponse>(
            '/sor.order.place'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Test new order creation and signature/recvWindow using smart order routing (SOR).
     * Creates and validates a new order but does not send it into the matching engine.
     * Weight: |Condition                       | Request Weight|
     * |------------                    | ------------ |
     * |Without `computeCommissionRates`| 1            |
     * |With `computeCommissionRates`   |20            |
     *
     * @summary WebSocket Test new order using SOR
     * @param {SorOrderTestRequest} requestParameters Request parameters.
     * @returns {Promise<SorOrderTestResponse>}
     * @memberof TradeApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/trading-requests#test-new-order-using-sor-trade Binance API Documentation}
     */
    public sorOrderTest(
        requestParameters: SorOrderTestRequest = {}
    ): Promise<WebsocketApiResponse<SorOrderTestResponse>> {
        return this.websocketBase.sendMessage<SorOrderTestResponse>(
            '/sor.order.test'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }
}

/**
 * @enum {string}
 */
export const OrderCancelCancelRestrictionsEnum = {
    ONLY_NEW: 'ONLY_NEW',
    NEW: 'NEW',
    ONLY_PARTIALLY_FILLED: 'ONLY_PARTIALLY_FILLED',
    PARTIALLY_FILLED: 'PARTIALLY_FILLED',
} as const;
export type OrderCancelCancelRestrictionsEnum =
    (typeof OrderCancelCancelRestrictionsEnum)[keyof typeof OrderCancelCancelRestrictionsEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceCancelReplaceModeEnum = {
    STOP_ON_FAILURE: 'STOP_ON_FAILURE',
    ALLOW_FAILURE: 'ALLOW_FAILURE',
} as const;
export type OrderCancelReplaceCancelReplaceModeEnum =
    (typeof OrderCancelReplaceCancelReplaceModeEnum)[keyof typeof OrderCancelReplaceCancelReplaceModeEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderCancelReplaceSideEnum =
    (typeof OrderCancelReplaceSideEnum)[keyof typeof OrderCancelReplaceSideEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceTypeEnum = {
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type OrderCancelReplaceTypeEnum =
    (typeof OrderCancelReplaceTypeEnum)[keyof typeof OrderCancelReplaceTypeEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderCancelReplaceTimeInForceEnum =
    (typeof OrderCancelReplaceTimeInForceEnum)[keyof typeof OrderCancelReplaceTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderCancelReplaceNewOrderRespTypeEnum =
    (typeof OrderCancelReplaceNewOrderRespTypeEnum)[keyof typeof OrderCancelReplaceNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderCancelReplaceSelfTradePreventionModeEnum =
    (typeof OrderCancelReplaceSelfTradePreventionModeEnum)[keyof typeof OrderCancelReplaceSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceCancelRestrictionsEnum = {
    ONLY_NEW: 'ONLY_NEW',
    NEW: 'NEW',
    ONLY_PARTIALLY_FILLED: 'ONLY_PARTIALLY_FILLED',
    PARTIALLY_FILLED: 'PARTIALLY_FILLED',
} as const;
export type OrderCancelReplaceCancelRestrictionsEnum =
    (typeof OrderCancelReplaceCancelRestrictionsEnum)[keyof typeof OrderCancelReplaceCancelRestrictionsEnum];

/**
 * @enum {string}
 */
export const OrderCancelReplaceOrderRateLimitExceededModeEnum = {
    DO_NOTHING: 'DO_NOTHING',
    CANCEL_ONLY: 'CANCEL_ONLY',
} as const;
export type OrderCancelReplaceOrderRateLimitExceededModeEnum =
    (typeof OrderCancelReplaceOrderRateLimitExceededModeEnum)[keyof typeof OrderCancelReplaceOrderRateLimitExceededModeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceSideEnum =
    (typeof OrderListPlaceSideEnum)[keyof typeof OrderListPlaceSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceStopLimitTimeInForceEnum = {
    GTC: 'GTC',
    FOK: 'FOK',
    IOC: 'IOC',
} as const;
export type OrderListPlaceStopLimitTimeInForceEnum =
    (typeof OrderListPlaceStopLimitTimeInForceEnum)[keyof typeof OrderListPlaceStopLimitTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderListPlaceNewOrderRespTypeEnum =
    (typeof OrderListPlaceNewOrderRespTypeEnum)[keyof typeof OrderListPlaceNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderListPlaceSelfTradePreventionModeEnum =
    (typeof OrderListPlaceSelfTradePreventionModeEnum)[keyof typeof OrderListPlaceSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceOcoSideEnum =
    (typeof OrderListPlaceOcoSideEnum)[keyof typeof OrderListPlaceOcoSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoAboveTypeEnum = {
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    STOP_LOSS: 'STOP_LOSS',
    LIMIT_MAKER: 'LIMIT_MAKER',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
} as const;
export type OrderListPlaceOcoAboveTypeEnum =
    (typeof OrderListPlaceOcoAboveTypeEnum)[keyof typeof OrderListPlaceOcoAboveTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoBelowTypeEnum = {
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
} as const;
export type OrderListPlaceOcoBelowTypeEnum =
    (typeof OrderListPlaceOcoBelowTypeEnum)[keyof typeof OrderListPlaceOcoBelowTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoBelowTimeInForceEnum = {
    belowType: 'belowType',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
} as const;
export type OrderListPlaceOcoBelowTimeInForceEnum =
    (typeof OrderListPlaceOcoBelowTimeInForceEnum)[keyof typeof OrderListPlaceOcoBelowTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderListPlaceOcoNewOrderRespTypeEnum =
    (typeof OrderListPlaceOcoNewOrderRespTypeEnum)[keyof typeof OrderListPlaceOcoNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOcoSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderListPlaceOcoSelfTradePreventionModeEnum =
    (typeof OrderListPlaceOcoSelfTradePreventionModeEnum)[keyof typeof OrderListPlaceOcoSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderListPlaceOtoNewOrderRespTypeEnum =
    (typeof OrderListPlaceOtoNewOrderRespTypeEnum)[keyof typeof OrderListPlaceOtoNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderListPlaceOtoSelfTradePreventionModeEnum =
    (typeof OrderListPlaceOtoSelfTradePreventionModeEnum)[keyof typeof OrderListPlaceOtoSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoWorkingTypeEnum = {
    LIMIT: 'LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type OrderListPlaceOtoWorkingTypeEnum =
    (typeof OrderListPlaceOtoWorkingTypeEnum)[keyof typeof OrderListPlaceOtoWorkingTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoWorkingSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceOtoWorkingSideEnum =
    (typeof OrderListPlaceOtoWorkingSideEnum)[keyof typeof OrderListPlaceOtoWorkingSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoWorkingTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderListPlaceOtoWorkingTimeInForceEnum =
    (typeof OrderListPlaceOtoWorkingTimeInForceEnum)[keyof typeof OrderListPlaceOtoWorkingTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoPendingTypeEnum = {
    LIMIT: 'LIMIT',
    MARKET: 'MARKET',
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type OrderListPlaceOtoPendingTypeEnum =
    (typeof OrderListPlaceOtoPendingTypeEnum)[keyof typeof OrderListPlaceOtoPendingTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoPendingSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceOtoPendingSideEnum =
    (typeof OrderListPlaceOtoPendingSideEnum)[keyof typeof OrderListPlaceOtoPendingSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtoPendingTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderListPlaceOtoPendingTimeInForceEnum =
    (typeof OrderListPlaceOtoPendingTimeInForceEnum)[keyof typeof OrderListPlaceOtoPendingTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderListPlaceOtocoNewOrderRespTypeEnum =
    (typeof OrderListPlaceOtocoNewOrderRespTypeEnum)[keyof typeof OrderListPlaceOtocoNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderListPlaceOtocoSelfTradePreventionModeEnum =
    (typeof OrderListPlaceOtocoSelfTradePreventionModeEnum)[keyof typeof OrderListPlaceOtocoSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoWorkingTypeEnum = {
    LIMIT: 'LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type OrderListPlaceOtocoWorkingTypeEnum =
    (typeof OrderListPlaceOtocoWorkingTypeEnum)[keyof typeof OrderListPlaceOtocoWorkingTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoWorkingSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceOtocoWorkingSideEnum =
    (typeof OrderListPlaceOtocoWorkingSideEnum)[keyof typeof OrderListPlaceOtocoWorkingSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoWorkingTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderListPlaceOtocoWorkingTimeInForceEnum =
    (typeof OrderListPlaceOtocoWorkingTimeInForceEnum)[keyof typeof OrderListPlaceOtocoWorkingTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoPendingSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderListPlaceOtocoPendingSideEnum =
    (typeof OrderListPlaceOtocoPendingSideEnum)[keyof typeof OrderListPlaceOtocoPendingSideEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoPendingAboveTypeEnum = {
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    STOP_LOSS: 'STOP_LOSS',
    LIMIT_MAKER: 'LIMIT_MAKER',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
} as const;
export type OrderListPlaceOtocoPendingAboveTypeEnum =
    (typeof OrderListPlaceOtocoPendingAboveTypeEnum)[keyof typeof OrderListPlaceOtocoPendingAboveTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoPendingAboveTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderListPlaceOtocoPendingAboveTimeInForceEnum =
    (typeof OrderListPlaceOtocoPendingAboveTimeInForceEnum)[keyof typeof OrderListPlaceOtocoPendingAboveTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoPendingBelowTypeEnum = {
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
} as const;
export type OrderListPlaceOtocoPendingBelowTypeEnum =
    (typeof OrderListPlaceOtocoPendingBelowTypeEnum)[keyof typeof OrderListPlaceOtocoPendingBelowTypeEnum];

/**
 * @enum {string}
 */
export const OrderListPlaceOtocoPendingBelowTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderListPlaceOtocoPendingBelowTimeInForceEnum =
    (typeof OrderListPlaceOtocoPendingBelowTimeInForceEnum)[keyof typeof OrderListPlaceOtocoPendingBelowTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderPlaceSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type OrderPlaceSideEnum = (typeof OrderPlaceSideEnum)[keyof typeof OrderPlaceSideEnum];

/**
 * @enum {string}
 */
export const OrderPlaceTypeEnum = {
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type OrderPlaceTypeEnum = (typeof OrderPlaceTypeEnum)[keyof typeof OrderPlaceTypeEnum];

/**
 * @enum {string}
 */
export const OrderPlaceTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type OrderPlaceTimeInForceEnum =
    (typeof OrderPlaceTimeInForceEnum)[keyof typeof OrderPlaceTimeInForceEnum];

/**
 * @enum {string}
 */
export const OrderPlaceNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type OrderPlaceNewOrderRespTypeEnum =
    (typeof OrderPlaceNewOrderRespTypeEnum)[keyof typeof OrderPlaceNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const OrderPlaceSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type OrderPlaceSelfTradePreventionModeEnum =
    (typeof OrderPlaceSelfTradePreventionModeEnum)[keyof typeof OrderPlaceSelfTradePreventionModeEnum];

/**
 * @enum {string}
 */
export const SorOrderPlaceSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type SorOrderPlaceSideEnum =
    (typeof SorOrderPlaceSideEnum)[keyof typeof SorOrderPlaceSideEnum];

/**
 * @enum {string}
 */
export const SorOrderPlaceTypeEnum = {
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
    STOP_LOSS: 'STOP_LOSS',
    STOP_LOSS_LIMIT: 'STOP_LOSS_LIMIT',
    TAKE_PROFIT: 'TAKE_PROFIT',
    TAKE_PROFIT_LIMIT: 'TAKE_PROFIT_LIMIT',
    LIMIT_MAKER: 'LIMIT_MAKER',
} as const;
export type SorOrderPlaceTypeEnum =
    (typeof SorOrderPlaceTypeEnum)[keyof typeof SorOrderPlaceTypeEnum];

/**
 * @enum {string}
 */
export const SorOrderPlaceTimeInForceEnum = {
    GTC: 'GTC',
    IOC: 'IOC',
    FOK: 'FOK',
} as const;
export type SorOrderPlaceTimeInForceEnum =
    (typeof SorOrderPlaceTimeInForceEnum)[keyof typeof SorOrderPlaceTimeInForceEnum];

/**
 * @enum {string}
 */
export const SorOrderPlaceNewOrderRespTypeEnum = {
    ACK: 'ACK',
    RESULT: 'RESULT',
    FULL: 'FULL',
    MARKET: 'MARKET',
    LIMIT: 'LIMIT',
} as const;
export type SorOrderPlaceNewOrderRespTypeEnum =
    (typeof SorOrderPlaceNewOrderRespTypeEnum)[keyof typeof SorOrderPlaceNewOrderRespTypeEnum];

/**
 * @enum {string}
 */
export const SorOrderPlaceSelfTradePreventionModeEnum = {
    NONE: 'NONE',
    EXPIRE_TAKER: 'EXPIRE_TAKER',
    EXPIRE_MAKER: 'EXPIRE_MAKER',
    EXPIRE_BOTH: 'EXPIRE_BOTH',
} as const;
export type SorOrderPlaceSelfTradePreventionModeEnum =
    (typeof SorOrderPlaceSelfTradePreventionModeEnum)[keyof typeof SorOrderPlaceSelfTradePreventionModeEnum];
