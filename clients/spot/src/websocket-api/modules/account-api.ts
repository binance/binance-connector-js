/**
 * Binance Public Spot WebSocket API
 *
 * OpenAPI Specifications for the Binance Public Spot WebSocket API
 *
 * API documents:
 * - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)
 * - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketAPIBase, WebsocketApiResponse, WebsocketSendMsgOptions } from '@binance/common';
import type {
    AccountCommissionResponse,
    AccountRateLimitsOrdersResponse,
    AccountStatusResponse,
    AllOrderListsResponse,
    AllOrdersResponse,
    MyAllocationsResponse,
    MyPreventedMatchesResponse,
    MyTradesResponse,
} from '../types';

/**
 * AccountApi - interface
 *
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary WebSocket Account Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AccountCommissionResponse>}
     * @memberof AccountApiInterface
     */
    accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<WebsocketApiResponse<AccountCommissionResponse>>;

    /**
     * Query your current unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary WebSocket Unfilled Order Count
     * @param {AccountRateLimitsOrdersRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AccountRateLimitsOrdersResponse>}
     * @memberof AccountApiInterface
     */
    accountRateLimitsOrders(
        requestParameters?: AccountRateLimitsOrdersRequest
    ): Promise<WebsocketApiResponse<AccountRateLimitsOrdersResponse>>;

    /**
     * Query information about your account.
     * Weight: 20
     *
     * @summary WebSocket Account information
     * @param {AccountStatusRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AccountStatusResponse>}
     * @memberof AccountApiInterface
     */
    accountStatus(
        requestParameters?: AccountStatusRequest
    ): Promise<WebsocketApiResponse<AccountStatusResponse>>;

    /**
     * Query information about all your order lists, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account Order list history
     * @param {AllOrderListsRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AllOrderListsResponse>}
     * @memberof AccountApiInterface
     */
    allOrderLists(
        requestParameters?: AllOrderListsRequest
    ): Promise<WebsocketApiResponse<AllOrderListsResponse>>;

    /**
     * Query information about all your orders – active, canceled, filled – filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account order history
     * @param {AllOrdersRequest} requestParameters Request parameters.
     *
     * @returns {Promise<AllOrdersResponse>}
     * @memberof AccountApiInterface
     */
    allOrders(
        requestParameters: AllOrdersRequest
    ): Promise<WebsocketApiResponse<AllOrdersResponse>>;

    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary WebSocket Account allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     *
     * @returns {Promise<MyAllocationsResponse>}
     * @memberof AccountApiInterface
     */
    myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<WebsocketApiResponse<MyAllocationsResponse>>;

    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary WebSocket Account prevented matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     *
     * @returns {Promise<MyPreventedMatchesResponse>}
     * @memberof AccountApiInterface
     */
    myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<WebsocketApiResponse<MyPreventedMatchesResponse>>;

    /**
     * Query information about all your trades, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account trade history
     * @param {MyTradesRequest} requestParameters Request parameters.
     *
     * @returns {Promise<MyTradesResponse>}
     * @memberof AccountApiInterface
     */
    myTrades(requestParameters: MyTradesRequest): Promise<WebsocketApiResponse<MyTradesResponse>>;
}

/**
 * Request parameters for accountCommission operation in AccountApi.
 * @interface AccountCommissionRequest
 */
export interface AccountCommissionRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountCommission
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiAccountCommission
     */
    readonly id?: string;
}

/**
 * Request parameters for accountRateLimitsOrders operation in AccountApi.
 * @interface AccountRateLimitsOrdersRequest
 */
export interface AccountRateLimitsOrdersRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiAccountRateLimitsOrders
     */
    readonly id?: string;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiAccountRateLimitsOrders
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for accountStatus operation in AccountApi.
 * @interface AccountStatusRequest
 */
export interface AccountStatusRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiAccountStatus
     */
    readonly id?: string;

    /**
     * When set to `true`, emits only the non-zero balances of an account. <br>Default value: false
     * @type {boolean}
     * @memberof AccountApiAccountStatus
     */
    readonly omitZeroBalances?: boolean;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiAccountStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for allOrderLists operation in AccountApi.
 * @interface AllOrderListsRequest
 */
export interface AllOrderListsRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiAllOrderLists
     */
    readonly id?: string;

    /**
     * First trade ID to query
     * @type {number}
     * @memberof AccountApiAllOrderLists
     */
    readonly fromId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiAllOrderLists
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiAllOrderLists
     */
    readonly endTime?: number;

    /**
     * Default 500; max 1000
     * @type {number}
     * @memberof AccountApiAllOrderLists
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiAllOrderLists
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for allOrders operation in AccountApi.
 * @interface AllOrdersRequest
 */
export interface AllOrdersRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAllOrders
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiAllOrders
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiAllOrders
     */
    readonly orderId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiAllOrders
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiAllOrders
     */
    readonly endTime?: number;

    /**
     * Default 500; max 1000
     * @type {number}
     * @memberof AccountApiAllOrders
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiAllOrders
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myAllocations operation in AccountApi.
 * @interface MyAllocationsRequest
 */
export interface MyAllocationsRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyAllocations
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiMyAllocations
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly fromAllocationId?: number;

    /**
     * Default 500; max 1000
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly orderId?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiMyAllocations
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myPreventedMatches operation in AccountApi.
 * @interface MyPreventedMatchesRequest
 */
export interface MyPreventedMatchesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly preventedMatchId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly orderId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly fromPreventedMatchId?: number;

    /**
     * Default 500; max 1000
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiMyPreventedMatches
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for myTrades operation in AccountApi.
 * @interface MyTradesRequest
 */
export interface MyTradesRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiMyTrades
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof AccountApiMyTrades
     */
    readonly id?: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly orderId?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly endTime?: number;

    /**
     * First trade ID to query
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly fromId?: number;

    /**
     * Default 500; max 1000
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly limit?: number;

    /**
     * The value cannot be greater than `60000`
     * @type {number}
     * @memberof AccountApiMyTrades
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 * @extends {WebsocketAPIBase}
 */
export class AccountApi implements AccountApiInterface {
    private readonly websocketBase: WebsocketAPIBase;

    constructor(websocketBase: WebsocketAPIBase) {
        this.websocketBase = websocketBase;
    }

    /**
     * Get current account commission rates.
     * Weight: 20
     *
     * @summary WebSocket Account Commission Rates
     * @param {AccountCommissionRequest} requestParameters Request parameters.
     * @returns {Promise<AccountCommissionResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-commission-rates-user_data Binance API Documentation}
     */
    public accountCommission(
        requestParameters: AccountCommissionRequest
    ): Promise<WebsocketApiResponse<AccountCommissionResponse>> {
        return this.websocketBase.sendMessage<AccountCommissionResponse>(
            '/account.commission'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query your current unfilled order count for all intervals.
     * Weight: 40
     *
     * @summary WebSocket Unfilled Order Count
     * @param {AccountRateLimitsOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<AccountRateLimitsOrdersResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#unfilled-order-count-user_data Binance API Documentation}
     */
    public accountRateLimitsOrders(
        requestParameters: AccountRateLimitsOrdersRequest = {}
    ): Promise<WebsocketApiResponse<AccountRateLimitsOrdersResponse>> {
        return this.websocketBase.sendMessage<AccountRateLimitsOrdersResponse>(
            '/account.rateLimits.orders'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query information about your account.
     * Weight: 20
     *
     * @summary WebSocket Account information
     * @param {AccountStatusRequest} requestParameters Request parameters.
     * @returns {Promise<AccountStatusResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-information-user_data Binance API Documentation}
     */
    public accountStatus(
        requestParameters: AccountStatusRequest = {}
    ): Promise<WebsocketApiResponse<AccountStatusResponse>> {
        return this.websocketBase.sendMessage<AccountStatusResponse>(
            '/account.status'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query information about all your order lists, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account Order list history
     * @param {AllOrderListsRequest} requestParameters Request parameters.
     * @returns {Promise<AllOrderListsResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-order-list-history-user_data Binance API Documentation}
     */
    public allOrderLists(
        requestParameters: AllOrderListsRequest = {}
    ): Promise<WebsocketApiResponse<AllOrderListsResponse>> {
        return this.websocketBase.sendMessage<AllOrderListsResponse>(
            '/allOrderLists'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query information about all your orders – active, canceled, filled – filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account order history
     * @param {AllOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<AllOrdersResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-order-history-user_data Binance API Documentation}
     */
    public allOrders(
        requestParameters: AllOrdersRequest
    ): Promise<WebsocketApiResponse<AllOrdersResponse>> {
        return this.websocketBase.sendMessage<AllOrdersResponse>(
            '/allOrders'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Retrieves allocations resulting from SOR order placement.
     * Weight: 20
     *
     * @summary WebSocket Account allocations
     * @param {MyAllocationsRequest} requestParameters Request parameters.
     * @returns {Promise<MyAllocationsResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-allocations-user_data Binance API Documentation}
     */
    public myAllocations(
        requestParameters: MyAllocationsRequest
    ): Promise<WebsocketApiResponse<MyAllocationsResponse>> {
        return this.websocketBase.sendMessage<MyAllocationsResponse>(
            '/myAllocations'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Displays the list of orders that were expired due to STP.
     *
     * These are the combinations supported:
     *
     * `symbol` + `preventedMatchId`
     * `symbol` + `orderId`
     * `symbol` + `orderId` + `fromPreventedMatchId` (`limit` will default to 500)
     * `symbol` + `orderId` + `fromPreventedMatchId` + `limit`
     * Weight: Case                            | Weight
     * ----                            | -----
     * If `symbol` is invalid          | 2
     * Querying by `preventedMatchId`  | 2
     * Querying by `orderId`           | 20
     *
     * @summary WebSocket Account prevented matches
     * @param {MyPreventedMatchesRequest} requestParameters Request parameters.
     * @returns {Promise<MyPreventedMatchesResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-prevented-matches-user_data Binance API Documentation}
     */
    public myPreventedMatches(
        requestParameters: MyPreventedMatchesRequest
    ): Promise<WebsocketApiResponse<MyPreventedMatchesResponse>> {
        return this.websocketBase.sendMessage<MyPreventedMatchesResponse>(
            '/myPreventedMatches'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }

    /**
     * Query information about all your trades, filtered by time range.
     * Weight: 20
     *
     * @summary WebSocket Account trade history
     * @param {MyTradesRequest} requestParameters Request parameters.
     * @returns {Promise<MyTradesResponse>}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/account-requests#account-trade-history-user_data Binance API Documentation}
     */
    public myTrades(
        requestParameters: MyTradesRequest
    ): Promise<WebsocketApiResponse<MyTradesResponse>> {
        return this.websocketBase.sendMessage<MyTradesResponse>(
            '/myTrades'.slice(1),
            requestParameters as unknown as WebsocketSendMsgOptions,
            { isSigned: true, withApiKey: false }
        );
    }
}
