/**
 * Binance Spot WebSocket Streams
 *
 * OpenAPI Specifications for the Binance Spot WebSocket Streams
 *
 * API documents:
 * - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
 * - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, describe, it } from '@jest/globals';
import {
    ConfigurationWebsocketStreams,
    WebsocketStreamsBase,
    replaceWebsocketStreamsPlaceholders,
} from '@binance/common';
import {
    AggTradeRequest,
    AllMarketRollingWindowTickerRequest,
    AllMiniTickerRequest,
    AllTickerRequest,
    AvgPriceRequest,
    BookTickerRequest,
    DiffBookDepthRequest,
    KlineRequest,
    KlineOffsetRequest,
    MiniTickerRequest,
    PartialBookDepthRequest,
    RollingWindowTickerRequest,
    TickerRequest,
    TradeRequest,
} from '../../../src/websocket-streams';
import {
    WebSocketStreamsApi,
    AllMarketRollingWindowTickerWindowSizeEnum,
    KlineIntervalEnum,
    KlineOffsetIntervalEnum,
    PartialBookDepthLevelsEnum,
    RollingWindowTickerWindowSizeEnum,
} from '../../../src/websocket-streams';
import { mockSubscription } from './utils';

describe('WebSocketStreamsApi', () => {
    describe('aggTrade()', () => {
        it('should execute aggTrade() successfully', async () => {
            const params: AggTradeRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 1672515782136,
                s: 'BNBBTC',
                a: 12345,
                p: '0.001',
                q: '100',
                f: 100,
                l: 105,
                T: 1672515782136,
                m: true,
                M: true,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@aggTrade'.slice(1), params as unknown as Record<string, AggTradeRequest>)}`,
                mockResponse
            );
        });

        it('should handle aggTrade() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: AggTradeRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'aggTrade',
                E: 1672515782136,
                s: 'BNBBTC',
                a: 12345,
                p: '0.001',
                q: '100',
                f: 100,
                l: 105,
                T: 1672515782136,
                m: true,
                M: true,
            };

            const stream = websocketStreamApi.aggTrade(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@aggTrade'.slice(1),
                        params as unknown as Record<string, AggTradeRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: AggTradeRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.aggTrade(params)).toThrow(
                'Required parameter symbol was null or undefined when calling aggTrade.'
            );
        });
    });

    describe('allMarketRollingWindowTicker()', () => {
        it('should execute allMarketRollingWindowTicker() successfully', async () => {
            const params: AllMarketRollingWindowTickerRequest = {
                windowSize: AllMarketRollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '1hTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    p: '0.0015',
                    P: '250.00',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    c: '0.0025',
                    w: '0.0018',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 1675216573749,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!ticker_<windowSize>@arr'.slice(1), params as unknown as Record<string, AllMarketRollingWindowTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMarketRollingWindowTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: AllMarketRollingWindowTickerRequest = {
                windowSize: AllMarketRollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '1hTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    p: '0.0015',
                    P: '250.00',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    c: '0.0025',
                    w: '0.0018',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 1675216573749,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            const stream = websocketStreamApi.allMarketRollingWindowTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!ticker_<windowSize>@arr'.slice(1),
                        params as unknown as Record<string, AllMarketRollingWindowTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when windowSize is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: AllMarketRollingWindowTickerRequest = {
                windowSize: AllMarketRollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
            };
            const params = Object.assign({ ..._params });
            delete params?.windowSize;

            expect(() => websocketStreamApi.allMarketRollingWindowTicker(params)).toThrow(
                'Required parameter windowSize was null or undefined when calling allMarketRollingWindowTicker.'
            );
        });
    });

    describe('allMiniTicker()', () => {
        it('should execute allMiniTicker() successfully', async () => {
            const params: AllMiniTickerRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    c: '0.0025',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!miniTicker@arr'.slice(1), params as unknown as Record<string, AllMiniTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle allMiniTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: AllMiniTickerRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrMiniTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    c: '0.0025',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                },
            ];

            const stream = websocketStreamApi.allMiniTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!miniTicker@arr'.slice(1),
                        params as unknown as Record<string, AllMiniTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('allTicker()', () => {
        it('should execute allTicker() successfully', async () => {
            const params: AllTickerRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    p: '0.0015',
                    P: '250.00',
                    w: '0.0018',
                    x: '0.0009',
                    c: '0.0025',
                    Q: '10',
                    b: '0.0024',
                    B: '10',
                    a: '0.0026',
                    A: '100',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 86400000,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/!ticker@arr'.slice(1), params as unknown as Record<string, AllTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle allTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: AllTickerRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1672515782136,
                    s: 'BNBBTC',
                    p: '0.0015',
                    P: '250.00',
                    w: '0.0018',
                    x: '0.0009',
                    c: '0.0025',
                    Q: '10',
                    b: '0.0024',
                    B: '10',
                    a: '0.0026',
                    A: '100',
                    o: '0.0010',
                    h: '0.0025',
                    l: '0.0010',
                    v: '10000',
                    q: '18',
                    O: 0,
                    C: 86400000,
                    F: 0,
                    L: 18150,
                    n: 18151,
                },
            ];

            const stream = websocketStreamApi.allTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/!ticker@arr'.slice(1),
                        params as unknown as Record<string, AllTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('avgPrice()', () => {
        it('should execute avgPrice() successfully', async () => {
            const params: AvgPriceRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'avgPrice',
                E: 1693907033000,
                s: 'BTCUSDT',
                i: '5m',
                w: '25776.86000000',
                T: 1693907032213,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@avgPrice'.slice(1), params as unknown as Record<string, AvgPriceRequest>)}`,
                mockResponse
            );
        });

        it('should handle avgPrice() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: AvgPriceRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'avgPrice',
                E: 1693907033000,
                s: 'BTCUSDT',
                i: '5m',
                w: '25776.86000000',
                T: 1693907032213,
            };

            const stream = websocketStreamApi.avgPrice(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@avgPrice'.slice(1),
                        params as unknown as Record<string, AvgPriceRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: AvgPriceRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.avgPrice(params)).toThrow(
                'Required parameter symbol was null or undefined when calling avgPrice.'
            );
        });
    });

    describe('bookTicker()', () => {
        it('should execute bookTicker() successfully', async () => {
            const params: BookTickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                u: 400900217,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@bookTicker'.slice(1), params as unknown as Record<string, BookTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle bookTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: BookTickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                u: 400900217,
                s: 'BNBUSDT',
                b: '25.35190000',
                B: '31.21000000',
                a: '25.36520000',
                A: '40.66000000',
            };

            const stream = websocketStreamApi.bookTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@bookTicker'.slice(1),
                        params as unknown as Record<string, BookTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: BookTickerRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.bookTicker(params)).toThrow(
                'Required parameter symbol was null or undefined when calling bookTicker.'
            );
        });
    });

    describe('diffBookDepth()', () => {
        it('should execute diffBookDepth() successfully', async () => {
            const params: DiffBookDepthRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: '100ms',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1672515782136,
                s: 'BNBBTC',
                U: 157,
                u: 160,
                b: [['0.0024', '10']],
                a: [['0.0026', '100']],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth@<updateSpeed>'.slice(1), params as unknown as Record<string, DiffBookDepthRequest>)}`,
                mockResponse
            );
        });

        it('should handle diffBookDepth() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: DiffBookDepthRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: '100ms',
            };

            const mockResponse = {
                e: 'depthUpdate',
                E: 1672515782136,
                s: 'BNBBTC',
                U: 157,
                u: 160,
                b: [['0.0024', '10']],
                a: [['0.0026', '100']],
            };

            const stream = websocketStreamApi.diffBookDepth(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth@<updateSpeed>'.slice(1),
                        params as unknown as Record<string, DiffBookDepthRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: DiffBookDepthRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.diffBookDepth(params)).toThrow(
                'Required parameter symbol was null or undefined when calling diffBookDepth.'
            );
        });
    });

    describe('kline()', () => {
        it('should execute kline() successfully', async () => {
            const params: KlineRequest = {
                symbol: 'bnbusdt',
                interval: KlineIntervalEnum.INTERVAL_1s,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1672515782136,
                s: 'BNBBTC',
                k: {
                    t: 1672515780000,
                    T: 1672515839999,
                    s: 'BNBBTC',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), params as unknown as Record<string, KlineRequest>)}`,
                mockResponse
            );
        });

        it('should handle kline() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: KlineRequest = {
                symbol: 'bnbusdt',
                interval: KlineIntervalEnum.INTERVAL_1s,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1672515782136,
                s: 'BNBBTC',
                k: {
                    t: 1672515780000,
                    T: 1672515839999,
                    s: 'BNBBTC',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            const stream = websocketStreamApi.kline(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@kline_<interval>'.slice(1),
                        params as unknown as Record<string, KlineRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: KlineRequest = {
                symbol: 'bnbusdt',
                interval: KlineIntervalEnum.INTERVAL_1s,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.kline(params)).toThrow(
                'Required parameter symbol was null or undefined when calling kline.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: KlineRequest = {
                symbol: 'bnbusdt',
                interval: KlineIntervalEnum.INTERVAL_1s,
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.kline(params)).toThrow(
                'Required parameter interval was null or undefined when calling kline.'
            );
        });
    });

    describe('klineOffset()', () => {
        it('should execute klineOffset() successfully', async () => {
            const params: KlineOffsetRequest = {
                symbol: 'bnbusdt',
                interval: KlineOffsetIntervalEnum.INTERVAL_1s,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1672515782136,
                s: 'BNBBTC',
                k: {
                    t: 1672515780000,
                    T: 1672515839999,
                    s: 'BNBBTC',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>@+08:00'.slice(1), params as unknown as Record<string, KlineOffsetRequest>)}`,
                mockResponse
            );
        });

        it('should handle klineOffset() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: KlineOffsetRequest = {
                symbol: 'bnbusdt',
                interval: KlineOffsetIntervalEnum.INTERVAL_1s,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1672515782136,
                s: 'BNBBTC',
                k: {
                    t: 1672515780000,
                    T: 1672515839999,
                    s: 'BNBBTC',
                    i: '1m',
                    f: 100,
                    L: 200,
                    o: '0.0010',
                    c: '0.0020',
                    h: '0.0025',
                    l: '0.0015',
                    v: '1000',
                    n: 100,
                    x: false,
                    q: '1.0000',
                    V: '500',
                    Q: '0.500',
                    B: '123456',
                },
            };

            const stream = websocketStreamApi.klineOffset(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@kline_<interval>@+08:00'.slice(1),
                        params as unknown as Record<string, KlineOffsetRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: KlineOffsetRequest = {
                symbol: 'bnbusdt',
                interval: KlineOffsetIntervalEnum.INTERVAL_1s,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.klineOffset(params)).toThrow(
                'Required parameter symbol was null or undefined when calling klineOffset.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: KlineOffsetRequest = {
                symbol: 'bnbusdt',
                interval: KlineOffsetIntervalEnum.INTERVAL_1s,
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.klineOffset(params)).toThrow(
                'Required parameter interval was null or undefined when calling klineOffset.'
            );
        });
    });

    describe('miniTicker()', () => {
        it('should execute miniTicker() successfully', async () => {
            const params: MiniTickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                c: '0.0025',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@miniTicker'.slice(1), params as unknown as Record<string, MiniTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle miniTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: MiniTickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrMiniTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                c: '0.0025',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
            };

            const stream = websocketStreamApi.miniTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@miniTicker'.slice(1),
                        params as unknown as Record<string, MiniTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: MiniTickerRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.miniTicker(params)).toThrow(
                'Required parameter symbol was null or undefined when calling miniTicker.'
            );
        });
    });

    describe('partialBookDepth()', () => {
        it('should execute partialBookDepth() successfully', async () => {
            const params: PartialBookDepthRequest = {
                symbol: 'bnbusdt',
                levels: PartialBookDepthLevelsEnum.LEVELS_5,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: '100ms',
            };

            const mockResponse = {
                lastUpdateId: 160,
                bids: [['0.0024', '10']],
                asks: [['0.0026', '100']],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<levels>@<updateSpeed>'.slice(1), params as unknown as Record<string, PartialBookDepthRequest>)}`,
                mockResponse
            );
        });

        it('should handle partialBookDepth() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: PartialBookDepthRequest = {
                symbol: 'bnbusdt',
                levels: PartialBookDepthLevelsEnum.LEVELS_5,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: '100ms',
            };

            const mockResponse = {
                lastUpdateId: 160,
                bids: [['0.0024', '10']],
                asks: [['0.0026', '100']],
            };

            const stream = websocketStreamApi.partialBookDepth(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<levels>@<updateSpeed>'.slice(1),
                        params as unknown as Record<string, PartialBookDepthRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthRequest = {
                symbol: 'bnbusdt',
                levels: PartialBookDepthLevelsEnum.LEVELS_5,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.partialBookDepth(params)).toThrow(
                'Required parameter symbol was null or undefined when calling partialBookDepth.'
            );
        });

        it('should throw RequiredError when levels is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthRequest = {
                symbol: 'bnbusdt',
                levels: PartialBookDepthLevelsEnum.LEVELS_5,
            };
            const params = Object.assign({ ..._params });
            delete params?.levels;

            expect(() => websocketStreamApi.partialBookDepth(params)).toThrow(
                'Required parameter levels was null or undefined when calling partialBookDepth.'
            );
        });
    });

    describe('rollingWindowTicker()', () => {
        it('should execute rollingWindowTicker() successfully', async () => {
            const params: RollingWindowTickerRequest = {
                symbol: 'bnbusdt',
                windowSize: RollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '1hTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                p: '0.0015',
                P: '250.00',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                c: '0.0025',
                w: '0.0018',
                v: '10000',
                q: '18',
                O: 0,
                C: 1675216573749,
                F: 0,
                L: 18150,
                n: 18151,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@ticker_<windowSize>'.slice(1), params as unknown as Record<string, RollingWindowTickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle rollingWindowTicker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: RollingWindowTickerRequest = {
                symbol: 'bnbusdt',
                windowSize: RollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '1hTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                p: '0.0015',
                P: '250.00',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                c: '0.0025',
                w: '0.0018',
                v: '10000',
                q: '18',
                O: 0,
                C: 1675216573749,
                F: 0,
                L: 18150,
                n: 18151,
            };

            const stream = websocketStreamApi.rollingWindowTicker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@ticker_<windowSize>'.slice(1),
                        params as unknown as Record<string, RollingWindowTickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: RollingWindowTickerRequest = {
                symbol: 'bnbusdt',
                windowSize: RollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.rollingWindowTicker(params)).toThrow(
                'Required parameter symbol was null or undefined when calling rollingWindowTicker.'
            );
        });

        it('should throw RequiredError when windowSize is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: RollingWindowTickerRequest = {
                symbol: 'bnbusdt',
                windowSize: RollingWindowTickerWindowSizeEnum.WINDOW_SIZE_1h,
            };
            const params = Object.assign({ ..._params });
            delete params?.windowSize;

            expect(() => websocketStreamApi.rollingWindowTicker(params)).toThrow(
                'Required parameter windowSize was null or undefined when calling rollingWindowTicker.'
            );
        });
    });

    describe('ticker()', () => {
        it('should execute ticker() successfully', async () => {
            const params: TickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                p: '0.0015',
                P: '250.00',
                w: '0.0018',
                x: '0.0009',
                c: '0.0025',
                Q: '10',
                b: '0.0024',
                B: '10',
                a: '0.0026',
                A: '100',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
                O: 0,
                C: 86400000,
                F: 0,
                L: 18150,
                n: 18151,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), params as unknown as Record<string, TickerRequest>)}`,
                mockResponse
            );
        });

        it('should handle ticker() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: TickerRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1672515782136,
                s: 'BNBBTC',
                p: '0.0015',
                P: '250.00',
                w: '0.0018',
                x: '0.0009',
                c: '0.0025',
                Q: '10',
                b: '0.0024',
                B: '10',
                a: '0.0026',
                A: '100',
                o: '0.0010',
                h: '0.0025',
                l: '0.0010',
                v: '10000',
                q: '18',
                O: 0,
                C: 86400000,
                F: 0,
                L: 18150,
                n: 18151,
            };

            const stream = websocketStreamApi.ticker(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@ticker'.slice(1),
                        params as unknown as Record<string, TickerRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: TickerRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.ticker(params)).toThrow(
                'Required parameter symbol was null or undefined when calling ticker.'
            );
        });
    });

    describe('trade()', () => {
        it('should execute trade() successfully', async () => {
            const params: TradeRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'trade',
                E: 1672515782136,
                s: 'BNBBTC',
                t: 12345,
                p: '0.001',
                q: '100',
                T: 1672515782136,
                m: true,
                M: true,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@trade'.slice(1), params as unknown as Record<string, TradeRequest>)}`,
                mockResponse
            );
        });

        it('should handle trade() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const params: TradeRequest = {
                symbol: 'bnbusdt',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'trade',
                E: 1672515782136,
                s: 'BNBBTC',
                t: 12345,
                p: '0.001',
                q: '100',
                T: 1672515782136,
                m: true,
                M: true,
            };

            const stream = websocketStreamApi.trade(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@trade'.slice(1),
                        params as unknown as Record<string, TradeRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebSocketStreamsApi(websocketStreamClient);

            const _params: TradeRequest = {
                symbol: 'bnbusdt',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.trade(params)).toThrow(
                'Required parameter symbol was null or undefined when calling trade.'
            );
        });
    });
});
