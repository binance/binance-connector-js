/**
 * Binance Crypto Loan REST API
 *
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { StableRateApi } from '../../../src/rest-api';
import {
    CheckCollateralRepayRateStableRateRequest,
    GetCryptoLoansIncomeHistoryRequest,
    GetLoanBorrowHistoryRequest,
    GetLoanLtvAdjustmentHistoryRequest,
    GetLoanRepaymentHistoryRequest,
} from '../../../src/rest-api';
import type {
    CheckCollateralRepayRateStableRateResponse,
    GetCryptoLoansIncomeHistoryResponse,
    GetLoanBorrowHistoryResponse,
    GetLoanLtvAdjustmentHistoryResponse,
    GetLoanRepaymentHistoryResponse,
} from '../../../src/rest-api/types';

describe('StableRateApi', () => {
    let client: StableRateApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new StableRateApi(config);
    });

    describe('checkCollateralRepayRateStableRate()', () => {
        it('should execute checkCollateralRepayRateStableRate() successfully with required parameters only', async () => {
            const params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
            };

            mockResponse = {
                loanlCoin: 'BUSD',
                collateralCoin: 'BNB',
                repayAmount: '1000',
                rate: '300.36781234',
            };

            const spy = jest.spyOn(client, 'checkCollateralRepayRateStableRate').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<CheckCollateralRepayRateStableRateResponse>)
            );
            const response = await client.checkCollateralRepayRateStableRate(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute checkCollateralRepayRateStableRate() successfully with optional parameters', async () => {
            const params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
                recvWindow: 5000,
            };

            mockResponse = {
                loanlCoin: 'BUSD',
                collateralCoin: 'BNB',
                repayAmount: '1000',
                rate: '300.36781234',
            };

            const spy = jest.spyOn(client, 'checkCollateralRepayRateStableRate').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<CheckCollateralRepayRateStableRateResponse>)
            );
            const response = await client.checkCollateralRepayRateStableRate(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when loanCoin is missing', async () => {
            const _params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
            };
            const params = Object.assign({ ..._params });
            delete params?.loanCoin;

            await expect(client.checkCollateralRepayRateStableRate(params)).rejects.toThrow(
                'Required parameter loanCoin was null or undefined when calling checkCollateralRepayRateStableRate.'
            );
        });

        it('should throw RequiredError when collateralCoin is missing', async () => {
            const _params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
            };
            const params = Object.assign({ ..._params });
            delete params?.collateralCoin;

            await expect(client.checkCollateralRepayRateStableRate(params)).rejects.toThrow(
                'Required parameter collateralCoin was null or undefined when calling checkCollateralRepayRateStableRate.'
            );
        });

        it('should throw RequiredError when repayAmount is missing', async () => {
            const _params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
            };
            const params = Object.assign({ ..._params });
            delete params?.repayAmount;

            await expect(client.checkCollateralRepayRateStableRate(params)).rejects.toThrow(
                'Required parameter repayAmount was null or undefined when calling checkCollateralRepayRateStableRate.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: CheckCollateralRepayRateStableRateRequest = {
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                repayAmount: 1.0,
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'checkCollateralRepayRateStableRate')
                .mockRejectedValueOnce(mockError);
            await expect(client.checkCollateralRepayRateStableRate(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });

    describe('getCryptoLoansIncomeHistory()', () => {
        it('should execute getCryptoLoansIncomeHistory() successfully with required parameters only', async () => {
            mockResponse = [
                {
                    asset: 'BUSD',
                    type: 'borrowIn',
                    amount: '100',
                    timestamp: 1633771139847,
                    tranId: '80423589583',
                },
                {
                    asset: 'BUSD',
                    type: 'borrowIn',
                    amount: '100',
                    timestamp: 1634638371496,
                    tranId: '81685123491',
                },
            ];

            const spy = jest.spyOn(client, 'getCryptoLoansIncomeHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCryptoLoansIncomeHistoryResponse>)
            );
            const response = await client.getCryptoLoansIncomeHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getCryptoLoansIncomeHistory() successfully with optional parameters', async () => {
            const params: GetCryptoLoansIncomeHistoryRequest = {
                asset: 'asset_example',
                type: '0',
                startTime: 1623319461670,
                endTime: 1641782889000,
                limit: 10,
                recvWindow: 5000,
            };

            mockResponse = [
                {
                    asset: 'BUSD',
                    type: 'borrowIn',
                    amount: '100',
                    timestamp: 1633771139847,
                    tranId: '80423589583',
                },
                {
                    asset: 'BUSD',
                    type: 'borrowIn',
                    amount: '100',
                    timestamp: 1634638371496,
                    tranId: '81685123491',
                },
            ];

            const spy = jest.spyOn(client, 'getCryptoLoansIncomeHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetCryptoLoansIncomeHistoryResponse>)
            );
            const response = await client.getCryptoLoansIncomeHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getCryptoLoansIncomeHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getCryptoLoansIncomeHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getLoanBorrowHistory()', () => {
        it('should execute getLoanBorrowHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        orderId: 100000001,
                        loanCoin: 'BUSD',
                        initialLoanAmount: '10000',
                        hourlyInterestRate: '0.000057',
                        loanTerm: '7',
                        collateralCoin: 'BNB',
                        initialCollateralAmount: '49.27565492',
                        borrowTime: 1575018510000,
                        status: 'Repaid',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanBorrowHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanBorrowHistoryResponse>)
            );
            const response = await client.getLoanBorrowHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getLoanBorrowHistory() successfully with optional parameters', async () => {
            const params: GetLoanBorrowHistoryRequest = {
                orderId: 1,
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                limit: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        orderId: 100000001,
                        loanCoin: 'BUSD',
                        initialLoanAmount: '10000',
                        hourlyInterestRate: '0.000057',
                        loanTerm: '7',
                        collateralCoin: 'BNB',
                        initialCollateralAmount: '49.27565492',
                        borrowTime: 1575018510000,
                        status: 'Repaid',
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanBorrowHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanBorrowHistoryResponse>)
            );
            const response = await client.getLoanBorrowHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest.spyOn(client, 'getLoanBorrowHistory').mockRejectedValueOnce(mockError);
            await expect(client.getLoanBorrowHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getLoanLtvAdjustmentHistory()', () => {
        it('should execute getLoanLtvAdjustmentHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        collateralCoin: 'BNB',
                        direction: 'ADDITIONAL',
                        amount: '5.235',
                        preLTV: '0.78',
                        afterLTV: '0.56',
                        adjustTime: 1575018510000,
                        orderId: 756783308056935400,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanLtvAdjustmentHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanLtvAdjustmentHistoryResponse>)
            );
            const response = await client.getLoanLtvAdjustmentHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getLoanLtvAdjustmentHistory() successfully with optional parameters', async () => {
            const params: GetLoanLtvAdjustmentHistoryRequest = {
                orderId: 1,
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                limit: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        collateralCoin: 'BNB',
                        direction: 'ADDITIONAL',
                        amount: '5.235',
                        preLTV: '0.78',
                        afterLTV: '0.56',
                        adjustTime: 1575018510000,
                        orderId: 756783308056935400,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanLtvAdjustmentHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanLtvAdjustmentHistoryResponse>)
            );
            const response = await client.getLoanLtvAdjustmentHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getLoanLtvAdjustmentHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getLoanLtvAdjustmentHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getLoanRepaymentHistory()', () => {
        it('should execute getLoanRepaymentHistory() successfully with required parameters only', async () => {
            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        repayAmount: '10000',
                        collateralCoin: 'BNB',
                        collateralUsed: '0',
                        collateralReturn: '49.27565492',
                        repayType: '1',
                        repayStatus: 'Repaid',
                        repayTime: 1575018510000,
                        orderId: 756783308056935400,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanRepaymentHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanRepaymentHistoryResponse>)
            );
            const response = await client.getLoanRepaymentHistory();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getLoanRepaymentHistory() successfully with optional parameters', async () => {
            const params: GetLoanRepaymentHistoryRequest = {
                orderId: 1,
                loanCoin: 'loanCoin_example',
                collateralCoin: 'collateralCoin_example',
                startTime: 1623319461670,
                endTime: 1641782889000,
                current: 1,
                limit: 10,
                recvWindow: 5000,
            };

            mockResponse = {
                rows: [
                    {
                        loanCoin: 'BUSD',
                        repayAmount: '10000',
                        collateralCoin: 'BNB',
                        collateralUsed: '0',
                        collateralReturn: '49.27565492',
                        repayType: '1',
                        repayStatus: 'Repaid',
                        repayTime: 1575018510000,
                        orderId: 756783308056935400,
                    },
                ],
                total: 1,
            };

            const spy = jest.spyOn(client, 'getLoanRepaymentHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetLoanRepaymentHistoryResponse>)
            );
            const response = await client.getLoanRepaymentHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getLoanRepaymentHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getLoanRepaymentHistory()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
