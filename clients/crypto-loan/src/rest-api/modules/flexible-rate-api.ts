/**
 * Binance Crypto Loan REST API
 *
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CheckCollateralRepayRateResponse,
    FlexibleLoanAdjustLtvResponse,
    FlexibleLoanBorrowResponse,
    FlexibleLoanCollateralRepaymentResponse,
    FlexibleLoanRepayResponse,
    GetFlexibleLoanAssetsDataResponse,
    GetFlexibleLoanBorrowHistoryResponse,
    GetFlexibleLoanCollateralAssetsDataResponse,
    GetFlexibleLoanLiquidationHistoryResponse,
    GetFlexibleLoanLtvAdjustmentHistoryResponse,
    GetFlexibleLoanOngoingOrdersResponse,
    GetFlexibleLoanRepaymentHistoryResponse,
} from '../types';

/**
 * FlexibleRateApi - axios parameter creator
 */
const FlexibleRateApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         *
         * Weight: 6000
         *
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin
         * @param {string} collateralCoin
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        checkCollateralRepayRate: async (
            loanCoin: string,
            collateralCoin: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('checkCollateralRepayRate', 'loanCoin', loanCoin);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('checkCollateralRepayRate', 'collateralCoin', collateralCoin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/repay/rate',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Flexible Loan Adjust LTV
         *
         * API Key needs Spot & Margin Trading permission for this endpoint
         *
         * Weight: 6000
         *
         * @summary Flexible Loan Adjust LTV(TRADE)
         * @param {string} loanCoin
         * @param {string} collateralCoin
         * @param {number} adjustmentAmount
         * @param {string} direction "ADDITIONAL", "REDUCED"
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        flexibleLoanAdjustLtv: async (
            loanCoin: string,
            collateralCoin: string,
            adjustmentAmount: number,
            direction: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('flexibleLoanAdjustLtv', 'loanCoin', loanCoin);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('flexibleLoanAdjustLtv', 'collateralCoin', collateralCoin);
            // verify required parameter 'adjustmentAmount' is not null or undefined
            assertParamExists('flexibleLoanAdjustLtv', 'adjustmentAmount', adjustmentAmount);
            // verify required parameter 'direction' is not null or undefined
            assertParamExists('flexibleLoanAdjustLtv', 'direction', direction);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (adjustmentAmount !== undefined && adjustmentAmount !== null) {
                localVarQueryParameter['adjustmentAmount'] = adjustmentAmount;
            }

            if (direction !== undefined && direction !== null) {
                localVarQueryParameter['direction'] = direction;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/adjust/ltv',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Borrow Flexible Loan
         *
         *
         * Only available for master account
         * You can customize LTV by entering loanAmount and collateralAmount.
         *
         * Weight: 6000
         *
         * @summary Flexible Loan Borrow(TRADE)
         * @param {string} loanCoin
         * @param {string} collateralCoin
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        flexibleLoanBorrow: async (
            loanCoin: string,
            collateralCoin: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('flexibleLoanBorrow', 'loanCoin', loanCoin);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('flexibleLoanBorrow', 'collateralCoin', collateralCoin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/borrow',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         *
         * Weight: 6000
         *
         * @summary Flexible Loan Collateral Repayment (TRADE)
         * @param {string} loanCoin
         * @param {string} collateralCoin
         * @param {number} repayAmount repay amount of loanCoin
         * @param {boolean} [fullRepayment] Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        flexibleLoanCollateralRepayment: async (
            loanCoin: string,
            collateralCoin: string,
            repayAmount: number,
            fullRepayment?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('flexibleLoanCollateralRepayment', 'loanCoin', loanCoin);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('flexibleLoanCollateralRepayment', 'collateralCoin', collateralCoin);
            // verify required parameter 'repayAmount' is not null or undefined
            assertParamExists('flexibleLoanCollateralRepayment', 'repayAmount', repayAmount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (repayAmount !== undefined && repayAmount !== null) {
                localVarQueryParameter['repayAmount'] = repayAmount;
            }

            if (fullRepayment !== undefined && fullRepayment !== null) {
                localVarQueryParameter['fullRepayment'] = fullRepayment;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/repay/collateral',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Flexible Loan Repay
         *
         *
         * repayAmount is mandatory even fullRepayment = FALSE
         *
         * Weight: 6000
         *
         * @summary Flexible Loan Repay(TRADE)
         * @param {string} loanCoin
         * @param {string} collateralCoin
         * @param {number} repayAmount repay amount of loanCoin
         * @param {boolean} [collateralReturn] Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order, and lower LTV.
         * @param {boolean} [fullRepayment] Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        flexibleLoanRepay: async (
            loanCoin: string,
            collateralCoin: string,
            repayAmount: number,
            collateralReturn?: boolean,
            fullRepayment?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            assertParamExists('flexibleLoanRepay', 'loanCoin', loanCoin);
            // verify required parameter 'collateralCoin' is not null or undefined
            assertParamExists('flexibleLoanRepay', 'collateralCoin', collateralCoin);
            // verify required parameter 'repayAmount' is not null or undefined
            assertParamExists('flexibleLoanRepay', 'repayAmount', repayAmount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (repayAmount !== undefined && repayAmount !== null) {
                localVarQueryParameter['repayAmount'] = repayAmount;
            }

            if (collateralReturn !== undefined && collateralReturn !== null) {
                localVarQueryParameter['collateralReturn'] = collateralReturn;
            }

            if (fullRepayment !== undefined && fullRepayment !== null) {
                localVarQueryParameter['fullRepayment'] = fullRepayment;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/repay',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan Assets Data(USER_DATA)
         * @param {string} [loanCoin]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanAssetsData: async (
            loanCoin?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/loanable/data',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Loan Borrow History
         *
         * If startTime and endTime are not sent, the recent 90-day data will be returned.
         * The max interval between startTime and endTime is 180 days.
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan Borrow History(USER_DATA)
         * @param {string} [loanCoin]
         * @param {string} [collateralCoin]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanBorrowHistory: async (
            loanCoin?: string,
            collateralCoin?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/borrow/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
         * @param {string} [collateralCoin]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanCollateralAssetsData: async (
            collateralCoin?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/collateral/data',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan Liquidation History (USER_DATA)
         * @param {string} [loanCoin]
         * @param {string} [collateralCoin]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanLiquidationHistory: async (
            loanCoin?: string,
            collateralCoin?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/liquidation/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Loan LTV Adjustment History
         *
         * If startTime and endTime are not sent, the recent 90-day data will be returned.
         * The max interval between startTime and endTime is 180 days.
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
         * @param {string} [loanCoin]
         * @param {string} [collateralCoin]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanLtvAdjustmentHistory: async (
            loanCoin?: string,
            collateralCoin?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/ltv/adjustment/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Loan Ongoing Orders
         *
         * Weight: 300
         *
         * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
         * @param {string} [loanCoin]
         * @param {string} [collateralCoin]
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanOngoingOrders: async (
            loanCoin?: string,
            collateralCoin?: string,
            current?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/ongoing/orders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Flexible Loan Repayment History
         *
         * If startTime and endTime are not sent, the recent 90-day data will be returned.
         * The max interval between startTime and endTime is 180 days.
         *
         * Weight: 400
         *
         * @summary Get Flexible Loan Repayment History(USER_DATA)
         * @param {string} [loanCoin]
         * @param {string} [collateralCoin]
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] Current querying page. Start from 1; default: 1; max: 1000
         * @param {number} [limit] Default: 10; max: 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFlexibleLoanRepaymentHistory: async (
            loanCoin?: string,
            collateralCoin?: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (loanCoin !== undefined && loanCoin !== null) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined && collateralCoin !== null) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/loan/flexible/repay/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * FlexibleRateApi - interface
 * @interface FlexibleRateApi
 */
export interface FlexibleRateApiInterface {
    /**
     *
     * Weight: 6000
     *
     * @summary Check Collateral Repay Rate (USER_DATA)
     * @param {CheckCollateralRepayRateRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    checkCollateralRepayRate(
        requestParameters: CheckCollateralRepayRateRequest
    ): Promise<RestApiResponse<CheckCollateralRepayRateResponse>>;
    /**
     * Flexible Loan Adjust LTV
     *
     * API Key needs Spot & Margin Trading permission for this endpoint
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Adjust LTV(TRADE)
     * @param {FlexibleLoanAdjustLtvRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    flexibleLoanAdjustLtv(
        requestParameters: FlexibleLoanAdjustLtvRequest
    ): Promise<RestApiResponse<FlexibleLoanAdjustLtvResponse>>;
    /**
     * Borrow Flexible Loan
     *
     *
     * Only available for master account
     * You can customize LTV by entering loanAmount and collateralAmount.
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Borrow(TRADE)
     * @param {FlexibleLoanBorrowRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    flexibleLoanBorrow(
        requestParameters: FlexibleLoanBorrowRequest
    ): Promise<RestApiResponse<FlexibleLoanBorrowResponse>>;
    /**
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Collateral Repayment (TRADE)
     * @param {FlexibleLoanCollateralRepaymentRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    flexibleLoanCollateralRepayment(
        requestParameters: FlexibleLoanCollateralRepaymentRequest
    ): Promise<RestApiResponse<FlexibleLoanCollateralRepaymentResponse>>;
    /**
     * Flexible Loan Repay
     *
     *
     * repayAmount is mandatory even fullRepayment = FALSE
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Repay(TRADE)
     * @param {FlexibleLoanRepayRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    flexibleLoanRepay(
        requestParameters: FlexibleLoanRepayRequest
    ): Promise<RestApiResponse<FlexibleLoanRepayResponse>>;
    /**
     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Assets Data(USER_DATA)
     * @param {GetFlexibleLoanAssetsDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanAssetsData(
        requestParameters?: GetFlexibleLoanAssetsDataRequest
    ): Promise<RestApiResponse<GetFlexibleLoanAssetsDataResponse>>;
    /**
     * Get Flexible Loan Borrow History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Borrow History(USER_DATA)
     * @param {GetFlexibleLoanBorrowHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanBorrowHistory(
        requestParameters?: GetFlexibleLoanBorrowHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleLoanBorrowHistoryResponse>>;
    /**
     * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
     * @param {GetFlexibleLoanCollateralAssetsDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanCollateralAssetsData(
        requestParameters?: GetFlexibleLoanCollateralAssetsDataRequest
    ): Promise<RestApiResponse<GetFlexibleLoanCollateralAssetsDataResponse>>;
    /**
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Liquidation History (USER_DATA)
     * @param {GetFlexibleLoanLiquidationHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanLiquidationHistory(
        requestParameters?: GetFlexibleLoanLiquidationHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleLoanLiquidationHistoryResponse>>;
    /**
     * Get Flexible Loan LTV Adjustment History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
     * @param {GetFlexibleLoanLtvAdjustmentHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanLtvAdjustmentHistory(
        requestParameters?: GetFlexibleLoanLtvAdjustmentHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleLoanLtvAdjustmentHistoryResponse>>;
    /**
     * Get Flexible Loan Ongoing Orders
     *
     * Weight: 300
     *
     * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
     * @param {GetFlexibleLoanOngoingOrdersRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanOngoingOrders(
        requestParameters?: GetFlexibleLoanOngoingOrdersRequest
    ): Promise<RestApiResponse<GetFlexibleLoanOngoingOrdersResponse>>;
    /**
     * Get Flexible Loan Repayment History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Repayment History(USER_DATA)
     * @param {GetFlexibleLoanRepaymentHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApiInterface
     */
    getFlexibleLoanRepaymentHistory(
        requestParameters?: GetFlexibleLoanRepaymentHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleLoanRepaymentHistoryResponse>>;
}

/**
 * Request parameters for checkCollateralRepayRate operation in FlexibleRateApi.
 * @interface CheckCollateralRepayRateRequest
 */
export interface CheckCollateralRepayRateRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiCheckCollateralRepayRate
     */
    readonly loanCoin: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiCheckCollateralRepayRate
     */
    readonly collateralCoin: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiCheckCollateralRepayRate
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for flexibleLoanAdjustLtv operation in FlexibleRateApi.
 * @interface FlexibleLoanAdjustLtvRequest
 */
export interface FlexibleLoanAdjustLtvRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanAdjustLtv
     */
    readonly loanCoin: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanAdjustLtv
     */
    readonly collateralCoin: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanAdjustLtv
     */
    readonly adjustmentAmount: number;

    /**
     * "ADDITIONAL", "REDUCED"
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanAdjustLtv
     */
    readonly direction: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanAdjustLtv
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for flexibleLoanBorrow operation in FlexibleRateApi.
 * @interface FlexibleLoanBorrowRequest
 */
export interface FlexibleLoanBorrowRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanBorrow
     */
    readonly loanCoin: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanBorrow
     */
    readonly collateralCoin: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanBorrow
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for flexibleLoanCollateralRepayment operation in FlexibleRateApi.
 * @interface FlexibleLoanCollateralRepaymentRequest
 */
export interface FlexibleLoanCollateralRepaymentRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanCollateralRepayment
     */
    readonly loanCoin: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanCollateralRepayment
     */
    readonly collateralCoin: string;

    /**
     * repay amount of loanCoin
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanCollateralRepayment
     */
    readonly repayAmount: number;

    /**
     * Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount
     * @type {boolean}
     * @memberof FlexibleRateApiFlexibleLoanCollateralRepayment
     */
    readonly fullRepayment?: boolean;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanCollateralRepayment
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for flexibleLoanRepay operation in FlexibleRateApi.
 * @interface FlexibleLoanRepayRequest
 */
export interface FlexibleLoanRepayRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly loanCoin: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly collateralCoin: string;

    /**
     * repay amount of loanCoin
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly repayAmount: number;

    /**
     * Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order, and lower LTV.
     * @type {boolean}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly collateralReturn?: boolean;

    /**
     * Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount
     * @type {boolean}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly fullRepayment?: boolean;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiFlexibleLoanRepay
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanAssetsData operation in FlexibleRateApi.
 * @interface GetFlexibleLoanAssetsDataRequest
 */
export interface GetFlexibleLoanAssetsDataRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanAssetsData
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanAssetsData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanBorrowHistory operation in FlexibleRateApi.
 * @interface GetFlexibleLoanBorrowHistoryRequest
 */
export interface GetFlexibleLoanBorrowHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly endTime?: number;

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly current?: number;

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanBorrowHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanCollateralAssetsData operation in FlexibleRateApi.
 * @interface GetFlexibleLoanCollateralAssetsDataRequest
 */
export interface GetFlexibleLoanCollateralAssetsDataRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanCollateralAssetsData
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanCollateralAssetsData
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanLiquidationHistory operation in FlexibleRateApi.
 * @interface GetFlexibleLoanLiquidationHistoryRequest
 */
export interface GetFlexibleLoanLiquidationHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly endTime?: number;

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly current?: number;

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLiquidationHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanLtvAdjustmentHistory operation in FlexibleRateApi.
 * @interface GetFlexibleLoanLtvAdjustmentHistoryRequest
 */
export interface GetFlexibleLoanLtvAdjustmentHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly endTime?: number;

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly current?: number;

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanLtvAdjustmentHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanOngoingOrders operation in FlexibleRateApi.
 * @interface GetFlexibleLoanOngoingOrdersRequest
 */
export interface GetFlexibleLoanOngoingOrdersRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanOngoingOrders
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanOngoingOrders
     */
    readonly collateralCoin?: string;

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanOngoingOrders
     */
    readonly current?: number;

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanOngoingOrders
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanOngoingOrders
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFlexibleLoanRepaymentHistory operation in FlexibleRateApi.
 * @interface GetFlexibleLoanRepaymentHistoryRequest
 */
export interface GetFlexibleLoanRepaymentHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly loanCoin?: string;

    /**
     *
     * @type {string}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly collateralCoin?: string;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly endTime?: number;

    /**
     * Current querying page. Start from 1; default: 1; max: 1000
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly current?: number;

    /**
     * Default: 10; max: 100
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof FlexibleRateApiGetFlexibleLoanRepaymentHistory
     */
    readonly recvWindow?: number;
}

/**
 * FlexibleRateApi - object-oriented interface
 * @class FlexibleRateApi
 */
export class FlexibleRateApi implements FlexibleRateApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = FlexibleRateApiAxiosParamCreator(configuration);
    }

    /**
     *
     * Weight: 6000
     *
     * @summary Check Collateral Repay Rate (USER_DATA)
     * @param {CheckCollateralRepayRateRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CheckCollateralRepayRateResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Check-Collateral-Repay-Rate Binance API Documentation}
     */
    public async checkCollateralRepayRate(
        requestParameters: CheckCollateralRepayRateRequest
    ): Promise<RestApiResponse<CheckCollateralRepayRateResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.checkCollateralRepayRate(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.recvWindow
        );
        return sendRequest<CheckCollateralRepayRateResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Flexible Loan Adjust LTV
     *
     * API Key needs Spot & Margin Trading permission for this endpoint
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Adjust LTV(TRADE)
     * @param {FlexibleLoanAdjustLtvRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FlexibleLoanAdjustLtvResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Adjust-LTV Binance API Documentation}
     */
    public async flexibleLoanAdjustLtv(
        requestParameters: FlexibleLoanAdjustLtvRequest
    ): Promise<RestApiResponse<FlexibleLoanAdjustLtvResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.flexibleLoanAdjustLtv(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.adjustmentAmount,
            requestParameters?.direction,
            requestParameters?.recvWindow
        );
        return sendRequest<FlexibleLoanAdjustLtvResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Borrow Flexible Loan
     *
     *
     * Only available for master account
     * You can customize LTV by entering loanAmount and collateralAmount.
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Borrow(TRADE)
     * @param {FlexibleLoanBorrowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FlexibleLoanBorrowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Borrow Binance API Documentation}
     */
    public async flexibleLoanBorrow(
        requestParameters: FlexibleLoanBorrowRequest
    ): Promise<RestApiResponse<FlexibleLoanBorrowResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.flexibleLoanBorrow(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.recvWindow
        );
        return sendRequest<FlexibleLoanBorrowResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Collateral Repayment (TRADE)
     * @param {FlexibleLoanCollateralRepaymentRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FlexibleLoanCollateralRepaymentResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Collateral-Repay Binance API Documentation}
     */
    public async flexibleLoanCollateralRepayment(
        requestParameters: FlexibleLoanCollateralRepaymentRequest
    ): Promise<RestApiResponse<FlexibleLoanCollateralRepaymentResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.flexibleLoanCollateralRepayment(
                requestParameters?.loanCoin,
                requestParameters?.collateralCoin,
                requestParameters?.repayAmount,
                requestParameters?.fullRepayment,
                requestParameters?.recvWindow
            );
        return sendRequest<FlexibleLoanCollateralRepaymentResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Flexible Loan Repay
     *
     *
     * repayAmount is mandatory even fullRepayment = FALSE
     *
     * Weight: 6000
     *
     * @summary Flexible Loan Repay(TRADE)
     * @param {FlexibleLoanRepayRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FlexibleLoanRepayResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Repay Binance API Documentation}
     */
    public async flexibleLoanRepay(
        requestParameters: FlexibleLoanRepayRequest
    ): Promise<RestApiResponse<FlexibleLoanRepayResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.flexibleLoanRepay(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.repayAmount,
            requestParameters?.collateralReturn,
            requestParameters?.fullRepayment,
            requestParameters?.recvWindow
        );
        return sendRequest<FlexibleLoanRepayResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Assets Data(USER_DATA)
     * @param {GetFlexibleLoanAssetsDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanAssetsDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Assets-Data Binance API Documentation}
     */
    public async getFlexibleLoanAssetsData(
        requestParameters: GetFlexibleLoanAssetsDataRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanAssetsDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleLoanAssetsData(
            requestParameters?.loanCoin,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleLoanAssetsDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Loan Borrow History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Borrow History(USER_DATA)
     * @param {GetFlexibleLoanBorrowHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanBorrowHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Borrow-History Binance API Documentation}
     */
    public async getFlexibleLoanBorrowHistory(
        requestParameters: GetFlexibleLoanBorrowHistoryRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanBorrowHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleLoanBorrowHistory(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.current,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleLoanBorrowHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Collateral Assets Data(USER_DATA)
     * @param {GetFlexibleLoanCollateralAssetsDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanCollateralAssetsDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Collateral-Assets-Data Binance API Documentation}
     */
    public async getFlexibleLoanCollateralAssetsData(
        requestParameters: GetFlexibleLoanCollateralAssetsDataRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanCollateralAssetsDataResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleLoanCollateralAssetsData(
                requestParameters?.collateralCoin,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleLoanCollateralAssetsDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Liquidation History (USER_DATA)
     * @param {GetFlexibleLoanLiquidationHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanLiquidationHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Liquidation-History Binance API Documentation}
     */
    public async getFlexibleLoanLiquidationHistory(
        requestParameters: GetFlexibleLoanLiquidationHistoryRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanLiquidationHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleLoanLiquidationHistory(
                requestParameters?.loanCoin,
                requestParameters?.collateralCoin,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleLoanLiquidationHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Loan LTV Adjustment History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan LTV Adjustment History(USER_DATA)
     * @param {GetFlexibleLoanLtvAdjustmentHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanLtvAdjustmentHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-LTV-Adjustment-History Binance API Documentation}
     */
    public async getFlexibleLoanLtvAdjustmentHistory(
        requestParameters: GetFlexibleLoanLtvAdjustmentHistoryRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanLtvAdjustmentHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleLoanLtvAdjustmentHistory(
                requestParameters?.loanCoin,
                requestParameters?.collateralCoin,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleLoanLtvAdjustmentHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Loan Ongoing Orders
     *
     * Weight: 300
     *
     * @summary Get Flexible Loan Ongoing Orders(USER_DATA)
     * @param {GetFlexibleLoanOngoingOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanOngoingOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Ongoing-Orders Binance API Documentation}
     */
    public async getFlexibleLoanOngoingOrders(
        requestParameters: GetFlexibleLoanOngoingOrdersRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanOngoingOrdersResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFlexibleLoanOngoingOrders(
            requestParameters?.loanCoin,
            requestParameters?.collateralCoin,
            requestParameters?.current,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFlexibleLoanOngoingOrdersResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Flexible Loan Repayment History
     *
     * If startTime and endTime are not sent, the recent 90-day data will be returned.
     * The max interval between startTime and endTime is 180 days.
     *
     * Weight: 400
     *
     * @summary Get Flexible Loan Repayment History(USER_DATA)
     * @param {GetFlexibleLoanRepaymentHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleLoanRepaymentHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FlexibleRateApi
     * @see {@link https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Repayment-History Binance API Documentation}
     */
    public async getFlexibleLoanRepaymentHistory(
        requestParameters: GetFlexibleLoanRepaymentHistoryRequest = {}
    ): Promise<RestApiResponse<GetFlexibleLoanRepaymentHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFlexibleLoanRepaymentHistory(
                requestParameters?.loanCoin,
                requestParameters?.collateralCoin,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.limit,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFlexibleLoanRepaymentHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
