/**
 * Binance Public Derivatives Trading Options WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WebsocketStreamsBase, WebsocketStream, createStreamHandler } from '@binance/common';
import { WebsocketMarketStreamsApi } from './modules/websocket-market-streams-api';

import type {
    IndexPriceStreamsRequest,
    KlineCandlestickStreamsRequest,
    MarkPriceRequest,
    NewSymbolInfoRequest,
    OpenInterestRequest,
    PartialBookDepthStreamsRequest,
    Ticker24HourRequest,
    Ticker24HourByUnderlyingAssetAndExpirationDataRequest,
    TradeStreamsRequest,
} from './modules/websocket-market-streams-api';

import type {
    IndexPriceStreamsResponse,
    KlineCandlestickStreamsResponse,
    MarkPriceResponse,
    NewSymbolInfoResponse,
    OpenInterestResponse,
    PartialBookDepthStreamsResponse,
    Ticker24HourResponse,
    Ticker24HourByUnderlyingAssetAndExpirationDataResponse,
    TradeStreamsResponse,
} from './types';

export class WebsocketStreamsConnection {
    private websocketBase: WebsocketStreamsBase;
    private websocketMarketStreamsApi: WebsocketMarketStreamsApi;

    constructor(websocketBase: WebsocketStreamsBase) {
        this.websocketBase = websocketBase;
        this.websocketMarketStreamsApi = new WebsocketMarketStreamsApi(websocketBase);
    }

    /**
     * Adds an event listener for the specified WebSocket event.
     * @param event - The WebSocket event to listen for, such as 'open', 'message', 'error', 'close', 'ping', or 'pong'.
     * @param listener - The callback function to be executed when the event is triggered. The function can accept any number of arguments.
     */
    on(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.on(event, listener);
    }

    /**
     * Removes an event listener for the specified WebSocket event.
     * @param event - The WebSocket event to stop listening for, such as 'open', 'message', 'error', 'close', 'ping', or 'pong'.
     * @param listener - The callback function that was previously added as the event listener.
     */
    off(
        event: 'open' | 'message' | 'error' | 'close' | 'ping' | 'pong',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        listener: (...args: any[]) => void
    ) {
        this.websocketBase.off(event, listener);
    }

    /**
     * Disconnects from the WebSocket server.
     * If there is no active connection, a warning is logged.
     * Otherwise, all connections in the connection pool are closed gracefully,
     * and a message is logged indicating that the connection has been disconnected.
     * @returns A Promise that resolves when all connections have been closed.
     * @throws Error if the WebSocket client is not set.
     */
    disconnect(): Promise<void> {
        return this.websocketBase.disconnect();
    }

    /**
     * Checks if the WebSocket connection is currently open.
     * @returns `true` if the connection is open, `false` otherwise.
     */
    isConnected(): boolean {
        return this.websocketBase.isConnected();
    }

    /**
     * Sends a ping message to all connected Websocket servers in the pool.
     * If no connections are ready, a warning is logged.
     * For each active connection, the ping message is sent, and debug logs provide details.
     * @throws Error if a Websocket client is not set for a connection.
     */
    pingServer(): void {
        this.websocketBase.pingServer();
    }

    /**
     * Subscribes to one or multiple WebSocket streams
     * Handles both single and pool modes
     * @param stream Single stream name or array of stream names to subscribe to
     * @param id Optional subscription ID
     * @returns void
     */
    subscribe(stream: string | string[], id?: string): void {
        this.websocketBase.subscribe(stream, id);
    }

    /**
     * Unsubscribes from one or multiple WebSocket streams
     * Handles both single and pool modes
     * @param stream Single stream name or array of stream names to unsubscribe from
     * @param id Optional unsubscription ID
     * @returns void
     */
    unsubscribe(stream: string | string[], id?: string): void {
        this.websocketBase.unsubscribe(stream, id);
    }

    /**
     * Checks if the WebSocket connection is subscribed to the specified stream.
     * @param stream The name of the WebSocket stream to check.
     * @returns `true` if the connection is subscribed to the stream, `false` otherwise.
     */
    isSubscribed(stream: string): boolean {
        return this.websocketBase.isSubscribed(stream);
    }

    /**
     * Subscribes to the user data WebSocket stream using the provided listen key.
     * @param listenKey - The listen key for the user data WebSocket stream.
     * @param id - Optional user data stream ID
     * @returns A WebSocket stream handler for the user data stream.
     */
    userData(listenKey: string, id?: string): WebsocketStream<object> {
        return createStreamHandler<object>(this.websocketBase, listenKey, id);
    }

    /**
     * Underlying(e.g ETHUSDT) index stream.
     *
     * Update Speed: 1000ms
     *
     * @summary Index Price Streams
     * @param {IndexPriceStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<IndexPriceStreamsResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Index-Price-Streams Binance API Documentation}
     */
    indexPriceStreams(
        requestParameters: IndexPriceStreamsRequest
    ): WebsocketStream<IndexPriceStreamsResponse> {
        return this.websocketMarketStreamsApi.indexPriceStreams(requestParameters);
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every 1000 milliseconds (if existing).
     *
     * Update Speed: 1000ms
     *
     * @summary Kline/Candlestick Streams
     * @param {KlineCandlestickStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineCandlestickStreamsResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Kline-Candlestick-Streams Binance API Documentation}
     */
    klineCandlestickStreams(
        requestParameters: KlineCandlestickStreamsRequest
    ): WebsocketStream<KlineCandlestickStreamsResponse> {
        return this.websocketMarketStreamsApi.klineCandlestickStreams(requestParameters);
    }

    /**
     * The mark price for all option symbols on specific underlying asset. E.g.[ETH@markPrice](wss://nbstream.binance.com/eoptions/stream?streams=ETH@markPrice)
     *
     * Update Speed: 1000ms
     *
     * @summary Mark Price
     * @param {MarkPriceRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<MarkPriceResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Mark-Price Binance API Documentation}
     */
    markPrice(requestParameters: MarkPriceRequest): WebsocketStream<MarkPriceResponse> {
        return this.websocketMarketStreamsApi.markPrice(requestParameters);
    }

    /**
     * New symbol listing stream.
     *
     * Update Speed: 50ms
     *
     * @summary New Symbol Info
     * @param {NewSymbolInfoRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<NewSymbolInfoResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/New-Symbol-Info Binance API Documentation}
     */
    newSymbolInfo(
        requestParameters: NewSymbolInfoRequest = {}
    ): WebsocketStream<NewSymbolInfoResponse> {
        return this.websocketMarketStreamsApi.newSymbolInfo(requestParameters);
    }

    /**
     * Option open interest for specific underlying asset on specific expiration date. E.g.[ETH@openInterest@221125](wss://nbstream.binance.com/eoptions/stream?streams=ETH@openInterest@221125)
     *
     * Update Speed: 60s
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<OpenInterestResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Open-Interest Binance API Documentation}
     */
    openInterest(requestParameters: OpenInterestRequest): WebsocketStream<OpenInterestResponse> {
        return this.websocketMarketStreamsApi.openInterest(requestParameters);
    }

    /**
     * Top **<levels\>** bids and asks, Valid levels are **<levels\>** are 10, 20, 50, 100.
     *
     * Update Speed: 100ms or 1000ms, 500ms(default when update speed isn't used)
     *
     * @summary Partial Book Depth Streams
     * @param {PartialBookDepthStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<PartialBookDepthStreamsResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Partial-Book-Depth-Streams Binance API Documentation}
     */
    partialBookDepthStreams(
        requestParameters: PartialBookDepthStreamsRequest
    ): WebsocketStream<PartialBookDepthStreamsResponse> {
        return this.websocketMarketStreamsApi.partialBookDepthStreams(requestParameters);
    }

    /**
     * 24hr ticker info for all symbols. Only symbols whose ticker info changed will be sent.
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER
     * @param {Ticker24HourRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<Ticker24HourResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/24-hour-TICKER Binance API Documentation}
     */
    ticker24Hour(requestParameters: Ticker24HourRequest): WebsocketStream<Ticker24HourResponse> {
        return this.websocketMarketStreamsApi.ticker24Hour(requestParameters);
    }

    /**
     * 24hr ticker info by underlying asset and expiration date. E.g.[ETH@ticker@220930](wss://nbstream.binance.com/eoptions/stream?streams=ETH@ticker@220930)
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER by underlying asset and expiration data
     * @param {Ticker24HourByUnderlyingAssetAndExpirationDataRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/24-hour-TICKER-by-underlying-asset-and-expiration-data Binance API Documentation}
     */
    ticker24HourByUnderlyingAssetAndExpirationData(
        requestParameters: Ticker24HourByUnderlyingAssetAndExpirationDataRequest
    ): WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse> {
        return this.websocketMarketStreamsApi.ticker24HourByUnderlyingAssetAndExpirationData(
            requestParameters
        );
    }

    /**
     * The Trade Streams push raw trade information for specific symbol or underlying asset. E.g.[ETH@trade](wss://nbstream.binance.com/eoptions/stream?streams=ETH@trade)
     *
     * Update Speed: 50ms
     *
     * @summary Trade Streams
     * @param {TradeStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TradeStreamsResponse>}
     * @throws {RequiredError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Trade-Streams Binance API Documentation}
     */
    tradeStreams(requestParameters: TradeStreamsRequest): WebsocketStream<TradeStreamsResponse> {
        return this.websocketMarketStreamsApi.tradeStreams(requestParameters);
    }
}
