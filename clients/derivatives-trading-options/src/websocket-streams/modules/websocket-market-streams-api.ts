/**
 * Binance Derivatives Trading Options WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    WebsocketStreamsBase,
    WebsocketStream,
    assertParamExists,
    replaceWebsocketStreamsPlaceholders,
    createStreamHandler,
} from '@binance/common';
import type {
    IndexPriceStreamsResponse,
    KlineCandlestickStreamsResponse,
    MarkPriceResponse,
    NewSymbolInfoResponse,
    OpenInterestResponse,
    PartialBookDepthStreamsResponse,
    Ticker24HourByUnderlyingAssetAndExpirationDataResponse,
    Ticker24HourResponse,
    TradeStreamsResponse,
} from '../types';

const WebsocketMarketStreamsApiParamCreator = function () {
    return {
        /**
         * Underlying(e.g ETHUSDT) index stream.
         *
         * Update Speed: 1000ms
         *
         * @summary Index Price Streams
         * @param {string} symbol The symbol parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        indexPriceStreams: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('indexPriceStreams', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@index'.slice(1), { symbol, id });
        },
        /**
         * The Kline/Candlestick Stream push updates to the current klines/candlestick every 1000 milliseconds (if existing).
         *
         * Update Speed: 1000ms
         *
         * @summary Kline/Candlestick Streams
         * @param {string} symbol The symbol parameter
         * @param {string} interval The interval parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        klineCandlestickStreams: (symbol: string, interval: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('klineCandlestickStreams', 'symbol', symbol);
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('klineCandlestickStreams', 'interval', interval);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), {
                symbol,
                interval,
                id,
            });
        },
        /**
         * The mark price for all option symbols on specific underlying asset. E.g.[ETH@markPrice](wss://nbstream.binance.com/eoptions/stream?streams=ETH@markPrice)
         *
         * Update Speed: 1000ms
         *
         * @summary Mark Price
         * @param {string} underlyingAsset The underlyingAsset parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        markPrice: (underlyingAsset: string, id?: string): string => {
            // verify required parameter 'underlyingAsset' is not null or undefined
            assertParamExists('markPrice', 'underlyingAsset', underlyingAsset);

            return replaceWebsocketStreamsPlaceholders('/<underlyingAsset>@markPrice'.slice(1), {
                underlyingAsset,
                id,
            });
        },
        /**
         * New symbol listing stream.
         *
         * Update Speed: 50ms
         *
         * @summary New Symbol Info
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        newSymbolInfo: (id?: string): string => {
            return replaceWebsocketStreamsPlaceholders('/option_pair'.slice(1), { id });
        },
        /**
         * Option open interest for specific underlying asset on specific expiration date. E.g.[ETH@openInterest@221125](wss://nbstream.binance.com/eoptions/stream?streams=ETH@openInterest@221125)
         *
         * Update Speed: 60s
         *
         * @summary Open Interest
         * @param {string} underlyingAsset The underlyingAsset parameter
         * @param {string} expirationDate The expirationDate parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        openInterest: (underlyingAsset: string, expirationDate: string, id?: string): string => {
            // verify required parameter 'underlyingAsset' is not null or undefined
            assertParamExists('openInterest', 'underlyingAsset', underlyingAsset);
            // verify required parameter 'expirationDate' is not null or undefined
            assertParamExists('openInterest', 'expirationDate', expirationDate);

            return replaceWebsocketStreamsPlaceholders(
                '/<underlyingAsset>@openInterest@<expirationDate>'.slice(1),
                { underlyingAsset, expirationDate, id }
            );
        },
        /**
         * Top **<levels\>** bids and asks, Valid levels are **<levels\>** are 10, 20, 50, 100.
         *
         * Update Speed: 100ms or 1000ms, 500ms(default when update speed isn't used)
         *
         * @summary Partial Book Depth Streams
         * @param {string} symbol The symbol parameter
         * @param {number} levels The levels parameter
         * @param {string} [id] Unique WebSocket request ID.
         * @param {string} [updateSpeed] WebSocket stream update speed
         *
         * @throws {RequiredError}
         */
        partialBookDepthStreams: (
            symbol: string,
            levels: number,
            id?: string,
            updateSpeed?: string
        ): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('partialBookDepthStreams', 'symbol', symbol);
            // verify required parameter 'levels' is not null or undefined
            assertParamExists('partialBookDepthStreams', 'levels', levels);

            return replaceWebsocketStreamsPlaceholders(
                '/<symbol>@depth<levels><updateSpeed>'.slice(1),
                { symbol, levels, id, updateSpeed }
            );
        },
        /**
         * 24hr ticker info for all symbols. Only symbols whose ticker info changed will be sent.
         *
         * Update Speed: 1000ms
         *
         * @summary 24-hour TICKER
         * @param {string} symbol The symbol parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        ticker24Hour: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('ticker24Hour', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), { symbol, id });
        },
        /**
         * 24hr ticker info by underlying asset and expiration date. E.g.[ETH@ticker@220930](wss://nbstream.binance.com/eoptions/stream?streams=ETH@ticker@220930)
         *
         * Update Speed: 1000ms
         *
         * @summary 24-hour TICKER by underlying asset and expiration data
         * @param {string} underlyingAsset The underlyingAsset parameter
         * @param {string} expirationDate The expirationDate parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        ticker24HourByUnderlyingAssetAndExpirationData: (
            underlyingAsset: string,
            expirationDate: string,
            id?: string
        ): string => {
            // verify required parameter 'underlyingAsset' is not null or undefined
            assertParamExists(
                'ticker24HourByUnderlyingAssetAndExpirationData',
                'underlyingAsset',
                underlyingAsset
            );
            // verify required parameter 'expirationDate' is not null or undefined
            assertParamExists(
                'ticker24HourByUnderlyingAssetAndExpirationData',
                'expirationDate',
                expirationDate
            );

            return replaceWebsocketStreamsPlaceholders(
                '/<underlyingAsset>@ticker@<expirationDate>'.slice(1),
                { underlyingAsset, expirationDate, id }
            );
        },
        /**
         * The Trade Streams push raw trade information for specific symbol or underlying asset. E.g.[ETH@trade](wss://nbstream.binance.com/eoptions/stream?streams=ETH@trade)
         *
         * Update Speed: 50ms
         *
         * @summary Trade Streams
         * @param {string} symbol The symbol parameter
         * @param {string} [id] Unique WebSocket request ID.
         *
         * @throws {RequiredError}
         */
        tradeStreams: (symbol: string, id?: string): string => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('tradeStreams', 'symbol', symbol);

            return replaceWebsocketStreamsPlaceholders('/<symbol>@trade'.slice(1), { symbol, id });
        },
    };
};

/**
 * WebsocketMarketStreamsApi - interface
 * @interface WebsocketMarketStreamsApi
 */
export interface WebsocketMarketStreamsApiInterface {
    /**
     * Underlying(e.g ETHUSDT) index stream.
     *
     * Update Speed: 1000ms
     *
     * @summary Index Price Streams
     * @param {IndexPriceStreamsRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<IndexPriceStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    indexPriceStreams(
        requestParameters: IndexPriceStreamsRequest
    ): WebsocketStream<IndexPriceStreamsResponse>;

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every 1000 milliseconds (if existing).
     *
     * Update Speed: 1000ms
     *
     * @summary Kline/Candlestick Streams
     * @param {KlineCandlestickStreamsRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<KlineCandlestickStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    klineCandlestickStreams(
        requestParameters: KlineCandlestickStreamsRequest
    ): WebsocketStream<KlineCandlestickStreamsResponse>;

    /**
     * The mark price for all option symbols on specific underlying asset. E.g.[ETH@markPrice](wss://nbstream.binance.com/eoptions/stream?streams=ETH@markPrice)
     *
     * Update Speed: 1000ms
     *
     * @summary Mark Price
     * @param {MarkPriceRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<MarkPriceResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    markPrice(requestParameters: MarkPriceRequest): WebsocketStream<MarkPriceResponse>;

    /**
     * New symbol listing stream.
     *
     * Update Speed: 50ms
     *
     * @summary New Symbol Info
     * @param {NewSymbolInfoRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<NewSymbolInfoResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    newSymbolInfo(requestParameters?: NewSymbolInfoRequest): WebsocketStream<NewSymbolInfoResponse>;

    /**
     * Option open interest for specific underlying asset on specific expiration date. E.g.[ETH@openInterest@221125](wss://nbstream.binance.com/eoptions/stream?streams=ETH@openInterest@221125)
     *
     * Update Speed: 60s
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<OpenInterestResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    openInterest(requestParameters: OpenInterestRequest): WebsocketStream<OpenInterestResponse>;

    /**
     * Top **<levels\>** bids and asks, Valid levels are **<levels\>** are 10, 20, 50, 100.
     *
     * Update Speed: 100ms or 1000ms, 500ms(default when update speed isn't used)
     *
     * @summary Partial Book Depth Streams
     * @param {PartialBookDepthStreamsRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<PartialBookDepthStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    partialBookDepthStreams(
        requestParameters: PartialBookDepthStreamsRequest
    ): WebsocketStream<PartialBookDepthStreamsResponse>;

    /**
     * 24hr ticker info for all symbols. Only symbols whose ticker info changed will be sent.
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER
     * @param {Ticker24HourRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<Ticker24HourResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    ticker24Hour(requestParameters: Ticker24HourRequest): WebsocketStream<Ticker24HourResponse>;

    /**
     * 24hr ticker info by underlying asset and expiration date. E.g.[ETH@ticker@220930](wss://nbstream.binance.com/eoptions/stream?streams=ETH@ticker@220930)
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER by underlying asset and expiration data
     * @param {Ticker24HourByUnderlyingAssetAndExpirationDataRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    ticker24HourByUnderlyingAssetAndExpirationData(
        requestParameters: Ticker24HourByUnderlyingAssetAndExpirationDataRequest
    ): WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse>;

    /**
     * The Trade Streams push raw trade information for specific symbol or underlying asset. E.g.[ETH@trade](wss://nbstream.binance.com/eoptions/stream?streams=ETH@trade)
     *
     * Update Speed: 50ms
     *
     * @summary Trade Streams
     * @param {TradeStreamsRequest} requestParameters Request parameters.
     *
     * @returns {WebsocketStream<TradeStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApiInterface
     */
    tradeStreams(requestParameters: TradeStreamsRequest): WebsocketStream<TradeStreamsResponse>;
}

/**
 * Request parameters for indexPriceStreams operation in WebsocketMarketStreamsApi.
 * @interface IndexPriceStreamsRequest
 */
export interface IndexPriceStreamsRequest {
    /**
     * The symbol parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiIndexPriceStreams
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiIndexPriceStreams
     */
    readonly id?: string;
}

/**
 * Request parameters for klineCandlestickStreams operation in WebsocketMarketStreamsApi.
 * @interface KlineCandlestickStreamsRequest
 */
export interface KlineCandlestickStreamsRequest {
    /**
     * The symbol parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiKlineCandlestickStreams
     */
    readonly symbol: string;

    /**
     * The interval parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiKlineCandlestickStreams
     */
    readonly interval: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiKlineCandlestickStreams
     */
    readonly id?: string;
}

/**
 * Request parameters for markPrice operation in WebsocketMarketStreamsApi.
 * @interface MarkPriceRequest
 */
export interface MarkPriceRequest {
    /**
     * The underlyingAsset parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiMarkPrice
     */
    readonly underlyingAsset: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiMarkPrice
     */
    readonly id?: string;
}

/**
 * Request parameters for newSymbolInfo operation in WebsocketMarketStreamsApi.
 * @interface NewSymbolInfoRequest
 */
export interface NewSymbolInfoRequest {
    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiNewSymbolInfo
     */
    readonly id?: string;
}

/**
 * Request parameters for openInterest operation in WebsocketMarketStreamsApi.
 * @interface OpenInterestRequest
 */
export interface OpenInterestRequest {
    /**
     * The underlyingAsset parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiOpenInterest
     */
    readonly underlyingAsset: string;

    /**
     * The expirationDate parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiOpenInterest
     */
    readonly expirationDate: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiOpenInterest
     */
    readonly id?: string;
}

/**
 * Request parameters for partialBookDepthStreams operation in WebsocketMarketStreamsApi.
 * @interface PartialBookDepthStreamsRequest
 */
export interface PartialBookDepthStreamsRequest {
    /**
     * The symbol parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiPartialBookDepthStreams
     */
    readonly symbol: string;

    /**
     * The levels parameter
     * @type {number}
     * @memberof WebsocketMarketStreamsApiPartialBookDepthStreams
     */
    readonly levels: number;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiPartialBookDepthStreams
     */
    readonly id?: string;

    /**
     * WebSocket stream update speed
     * @type {string}
     * @memberof WebsocketMarketStreamsApiPartialBookDepthStreams
     */
    readonly updateSpeed?: string;
}

/**
 * Request parameters for ticker24Hour operation in WebsocketMarketStreamsApi.
 * @interface Ticker24HourRequest
 */
export interface Ticker24HourRequest {
    /**
     * The symbol parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTicker24Hour
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTicker24Hour
     */
    readonly id?: string;
}

/**
 * Request parameters for ticker24HourByUnderlyingAssetAndExpirationData operation in WebsocketMarketStreamsApi.
 * @interface Ticker24HourByUnderlyingAssetAndExpirationDataRequest
 */
export interface Ticker24HourByUnderlyingAssetAndExpirationDataRequest {
    /**
     * The underlyingAsset parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTicker24HourByUnderlyingAssetAndExpirationData
     */
    readonly underlyingAsset: string;

    /**
     * The expirationDate parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTicker24HourByUnderlyingAssetAndExpirationData
     */
    readonly expirationDate: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTicker24HourByUnderlyingAssetAndExpirationData
     */
    readonly id?: string;
}

/**
 * Request parameters for tradeStreams operation in WebsocketMarketStreamsApi.
 * @interface TradeStreamsRequest
 */
export interface TradeStreamsRequest {
    /**
     * The symbol parameter
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTradeStreams
     */
    readonly symbol: string;

    /**
     * Unique WebSocket request ID.
     * @type {string}
     * @memberof WebsocketMarketStreamsApiTradeStreams
     */
    readonly id?: string;
}

/**
 * WebsocketMarketStreamsApi - interface
 * @class WebsocketMarketStreamsApi
 * @extends {WebsocketStreamsBase}
 */
export class WebsocketMarketStreamsApi implements WebsocketMarketStreamsApiInterface {
    private readonly websocketBase: WebsocketStreamsBase;
    private localVarParamCreator;

    constructor(websocketBase: WebsocketStreamsBase) {
        this.websocketBase = websocketBase;
        this.localVarParamCreator = WebsocketMarketStreamsApiParamCreator();
    }

    /**
     * Underlying(e.g ETHUSDT) index stream.
     *
     * Update Speed: 1000ms
     *
     * @summary Index Price Streams
     * @param {IndexPriceStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<IndexPriceStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Index-Price-Streams Binance API Documentation}
     */
    public indexPriceStreams(
        requestParameters: IndexPriceStreamsRequest
    ): WebsocketStream<IndexPriceStreamsResponse> {
        const stream = this.localVarParamCreator.indexPriceStreams(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<IndexPriceStreamsResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The Kline/Candlestick Stream push updates to the current klines/candlestick every 1000 milliseconds (if existing).
     *
     * Update Speed: 1000ms
     *
     * @summary Kline/Candlestick Streams
     * @param {KlineCandlestickStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<KlineCandlestickStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Kline-Candlestick-Streams Binance API Documentation}
     */
    public klineCandlestickStreams(
        requestParameters: KlineCandlestickStreamsRequest
    ): WebsocketStream<KlineCandlestickStreamsResponse> {
        const stream = this.localVarParamCreator.klineCandlestickStreams(
            requestParameters?.symbol,
            requestParameters?.interval,
            requestParameters?.id
        );

        return createStreamHandler<KlineCandlestickStreamsResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The mark price for all option symbols on specific underlying asset. E.g.[ETH@markPrice](wss://nbstream.binance.com/eoptions/stream?streams=ETH@markPrice)
     *
     * Update Speed: 1000ms
     *
     * @summary Mark Price
     * @param {MarkPriceRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<MarkPriceResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Mark-Price Binance API Documentation}
     */
    public markPrice(requestParameters: MarkPriceRequest): WebsocketStream<MarkPriceResponse> {
        const stream = this.localVarParamCreator.markPrice(
            requestParameters?.underlyingAsset,
            requestParameters?.id
        );

        return createStreamHandler<MarkPriceResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * New symbol listing stream.
     *
     * Update Speed: 50ms
     *
     * @summary New Symbol Info
     * @param {NewSymbolInfoRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<NewSymbolInfoResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/New-Symbol-Info Binance API Documentation}
     */
    public newSymbolInfo(
        requestParameters: NewSymbolInfoRequest = {}
    ): WebsocketStream<NewSymbolInfoResponse> {
        const stream = this.localVarParamCreator.newSymbolInfo(requestParameters?.id);

        return createStreamHandler<NewSymbolInfoResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Option open interest for specific underlying asset on specific expiration date. E.g.[ETH@openInterest@221125](wss://nbstream.binance.com/eoptions/stream?streams=ETH@openInterest@221125)
     *
     * Update Speed: 60s
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<OpenInterestResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Open-Interest Binance API Documentation}
     */
    public openInterest(
        requestParameters: OpenInterestRequest
    ): WebsocketStream<OpenInterestResponse> {
        const stream = this.localVarParamCreator.openInterest(
            requestParameters?.underlyingAsset,
            requestParameters?.expirationDate,
            requestParameters?.id
        );

        return createStreamHandler<OpenInterestResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * Top **<levels\>** bids and asks, Valid levels are **<levels\>** are 10, 20, 50, 100.
     *
     * Update Speed: 100ms or 1000ms, 500ms(default when update speed isn't used)
     *
     * @summary Partial Book Depth Streams
     * @param {PartialBookDepthStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<PartialBookDepthStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Partial-Book-Depth-Streams Binance API Documentation}
     */
    public partialBookDepthStreams(
        requestParameters: PartialBookDepthStreamsRequest
    ): WebsocketStream<PartialBookDepthStreamsResponse> {
        const stream = this.localVarParamCreator.partialBookDepthStreams(
            requestParameters?.symbol,
            requestParameters?.levels,
            requestParameters?.id,
            requestParameters?.updateSpeed
        );

        return createStreamHandler<PartialBookDepthStreamsResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr ticker info for all symbols. Only symbols whose ticker info changed will be sent.
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER
     * @param {Ticker24HourRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<Ticker24HourResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/24-hour-TICKER Binance API Documentation}
     */
    public ticker24Hour(
        requestParameters: Ticker24HourRequest
    ): WebsocketStream<Ticker24HourResponse> {
        const stream = this.localVarParamCreator.ticker24Hour(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<Ticker24HourResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * 24hr ticker info by underlying asset and expiration date. E.g.[ETH@ticker@220930](wss://nbstream.binance.com/eoptions/stream?streams=ETH@ticker@220930)
     *
     * Update Speed: 1000ms
     *
     * @summary 24-hour TICKER by underlying asset and expiration data
     * @param {Ticker24HourByUnderlyingAssetAndExpirationDataRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/24-hour-TICKER-by-underlying-asset-and-expiration-data Binance API Documentation}
     */
    public ticker24HourByUnderlyingAssetAndExpirationData(
        requestParameters: Ticker24HourByUnderlyingAssetAndExpirationDataRequest
    ): WebsocketStream<Ticker24HourByUnderlyingAssetAndExpirationDataResponse> {
        const stream = this.localVarParamCreator.ticker24HourByUnderlyingAssetAndExpirationData(
            requestParameters?.underlyingAsset,
            requestParameters?.expirationDate,
            requestParameters?.id
        );

        return createStreamHandler<Ticker24HourByUnderlyingAssetAndExpirationDataResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }

    /**
     * The Trade Streams push raw trade information for specific symbol or underlying asset. E.g.[ETH@trade](wss://nbstream.binance.com/eoptions/stream?streams=ETH@trade)
     *
     * Update Speed: 50ms
     *
     * @summary Trade Streams
     * @param {TradeStreamsRequest} requestParameters Request parameters.
     * @returns {WebsocketStream<TradeStreamsResponse>}
     * @throws {RequiredError}
     * @memberof WebsocketMarketStreamsApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/websocket-market-streams/Trade-Streams Binance API Documentation}
     */
    public tradeStreams(
        requestParameters: TradeStreamsRequest
    ): WebsocketStream<TradeStreamsResponse> {
        const stream = this.localVarParamCreator.tradeStreams(
            requestParameters?.symbol,
            requestParameters?.id
        );

        return createStreamHandler<TradeStreamsResponse>(
            this.websocketBase,
            stream,
            requestParameters?.id
        );
    }
}
