/**
 * Binance Public Derivatives Trading Options REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { MarketDataApi } from './modules/market-data-api';
import { MarketMakerBlockTradeApi } from './modules/market-maker-block-trade-api';
import { MarketMakerEndpointsApi } from './modules/market-maker-endpoints-api';
import { TradeApi } from './modules/trade-api';
import { UserDataStreamsApi } from './modules/user-data-streams-api';

import type {
    AccountFundingFlowRequest,
    GetDownloadIdForOptionTransactionHistoryRequest,
    GetOptionTransactionHistoryDownloadLinkByIdRequest,
    OptionAccountInformationRequest,
} from './modules/account-api';
import type {
    HistoricalExerciseRecordsRequest,
    KlineCandlestickDataRequest,
    OldTradesLookupRequest,
    OpenInterestRequest,
    OptionMarkPriceRequest,
    OrderBookRequest,
    RecentBlockTradesListRequest,
    RecentTradesListRequest,
    SymbolPriceTickerRequest,
    Ticker24hrPriceChangeStatisticsRequest,
} from './modules/market-data-api';
import type {
    AcceptBlockTradeOrderRequest,
    AccountBlockTradeListRequest,
    CancelBlockTradeOrderRequest,
    ExtendBlockTradeOrderRequest,
    NewBlockTradeOrderRequest,
    QueryBlockTradeDetailsRequest,
    QueryBlockTradeOrderRequest,
} from './modules/market-maker-block-trade-api';
import type {
    AutoCancelAllOpenOrdersRequest,
    GetAutoCancelAllOpenOrdersRequest,
    GetMarketMakerProtectionConfigRequest,
    OptionMarginAccountInformationRequest,
    ResetMarketMakerProtectionConfigRequest,
    SetAutoCancelAllOpenOrdersRequest,
    SetMarketMakerProtectionConfigRequest,
} from './modules/market-maker-endpoints-api';
import type {
    AccountTradeListRequest,
    CancelAllOptionOrdersByUnderlyingRequest,
    CancelAllOptionOrdersOnSpecificSymbolRequest,
    CancelMultipleOptionOrdersRequest,
    CancelOptionOrderRequest,
    NewOrderRequest,
    OptionPositionInformationRequest,
    PlaceMultipleOrdersRequest,
    QueryCurrentOpenOptionOrdersRequest,
    QueryOptionOrderHistoryRequest,
    QuerySingleOrderRequest,
    UserExerciseRecordRequest,
} from './modules/trade-api';
import type {} from './modules/user-data-streams-api';

import type {
    AccountFundingFlowResponse,
    GetDownloadIdForOptionTransactionHistoryResponse,
    GetOptionTransactionHistoryDownloadLinkByIdResponse,
    OptionAccountInformationResponse,
} from './types';
import type {
    CheckServerTimeResponse,
    ExchangeInformationResponse,
    HistoricalExerciseRecordsResponse,
    KlineCandlestickDataResponse,
    OldTradesLookupResponse,
    OpenInterestResponse,
    OptionMarkPriceResponse,
    OrderBookResponse,
    RecentBlockTradesListResponse,
    RecentTradesListResponse,
    SymbolPriceTickerResponse,
    Ticker24hrPriceChangeStatisticsResponse,
} from './types';
import type {
    AcceptBlockTradeOrderResponse,
    AccountBlockTradeListResponse,
    ExtendBlockTradeOrderResponse,
    NewBlockTradeOrderResponse,
    QueryBlockTradeDetailsResponse,
    QueryBlockTradeOrderResponse,
} from './types';
import type {
    AutoCancelAllOpenOrdersResponse,
    GetAutoCancelAllOpenOrdersResponse,
    GetMarketMakerProtectionConfigResponse,
    OptionMarginAccountInformationResponse,
    ResetMarketMakerProtectionConfigResponse,
    SetAutoCancelAllOpenOrdersResponse,
    SetMarketMakerProtectionConfigResponse,
} from './types';
import type {
    AccountTradeListResponse,
    CancelAllOptionOrdersByUnderlyingResponse,
    CancelAllOptionOrdersOnSpecificSymbolResponse,
    CancelMultipleOptionOrdersResponse,
    CancelOptionOrderResponse,
    NewOrderResponse,
    OptionPositionInformationResponse,
    PlaceMultipleOrdersResponse,
    QueryCurrentOpenOptionOrdersResponse,
    QueryOptionOrderHistoryResponse,
    QuerySingleOrderResponse,
    UserExerciseRecordResponse,
} from './types';
import type { StartUserDataStreamResponse } from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private marketDataApi: MarketDataApi;
    private marketMakerBlockTradeApi: MarketMakerBlockTradeApi;
    private marketMakerEndpointsApi: MarketMakerEndpointsApi;
    private tradeApi: TradeApi;
    private userDataStreamsApi: UserDataStreamsApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.marketDataApi = new MarketDataApi(configuration);
        this.marketMakerBlockTradeApi = new MarketMakerBlockTradeApi(configuration);
        this.marketMakerEndpointsApi = new MarketMakerEndpointsApi(configuration);
        this.tradeApi = new TradeApi(configuration);
        this.userDataStreamsApi = new UserDataStreamsApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Query account funding flows.
     *
     * Weight: 1
     *
     * @summary Account Funding Flow (USER_DATA)
     * @param {AccountFundingFlowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountFundingFlowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Account-Funding-Flow Binance API Documentation}
     */
    accountFundingFlow(
        requestParameters: AccountFundingFlowRequest
    ): Promise<RestApiResponse<AccountFundingFlowResponse>> {
        return this.accountApi.accountFundingFlow(requestParameters);
    }

    /**
     * Get download id for option transaction history
     *
     * Request Limitation is 5 times per month, shared by > front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Option Transaction History (USER_DATA)
     * @param {GetDownloadIdForOptionTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForOptionTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Get-Download-Id-For-Option-Transaction-History Binance API Documentation}
     */
    getDownloadIdForOptionTransactionHistory(
        requestParameters: GetDownloadIdForOptionTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForOptionTransactionHistoryResponse>> {
        return this.accountApi.getDownloadIdForOptionTransactionHistory(requestParameters);
    }

    /**
     * Get option transaction history download Link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Option Transaction History Download Link by Id (USER_DATA)
     * @param {GetOptionTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOptionTransactionHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Get-Option-Transaction-History-Download-Link-by-Id Binance API Documentation}
     */
    getOptionTransactionHistoryDownloadLinkById(
        requestParameters: GetOptionTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetOptionTransactionHistoryDownloadLinkByIdResponse>> {
        return this.accountApi.getOptionTransactionHistoryDownloadLinkById(requestParameters);
    }

    /**
     * Get current account information.
     *
     * Weight: 3
     *
     * @summary Option Account Information(TRADE)
     * @param {OptionAccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionAccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Option-Account-Information Binance API Documentation}
     */
    optionAccountInformation(
        requestParameters: OptionAccountInformationRequest = {}
    ): Promise<RestApiResponse<OptionAccountInformationResponse>> {
        return this.accountApi.optionAccountInformation(requestParameters);
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     *
     * Weight: 1
     *
     * @summary Check Server Time
     * @returns {Promise<RestApiResponse<CheckServerTimeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Check-Server-Time Binance API Documentation}
     */
    checkServerTime(): Promise<RestApiResponse<CheckServerTimeResponse>> {
        return this.marketDataApi.checkServerTime();
    }

    /**
     * Current exchange trading rules and symbol information
     *
     * Weight: 1
     *
     * @summary Exchange Information
     * @returns {Promise<RestApiResponse<ExchangeInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Exchange-Information Binance API Documentation}
     */
    exchangeInformation(): Promise<RestApiResponse<ExchangeInformationResponse>> {
        return this.marketDataApi.exchangeInformation();
    }

    /**
     * Get historical exercise records.
     * REALISTIC_VALUE_STRICKEN -> Exercised
     * EXTRINSIC_VALUE_EXPIRED -> Expired OTM
     *
     * Weight: 3
     *
     * @summary Historical Exercise Records
     * @param {HistoricalExerciseRecordsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HistoricalExerciseRecordsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Historical-Exercise-Records Binance API Documentation}
     */
    historicalExerciseRecords(
        requestParameters: HistoricalExerciseRecordsRequest = {}
    ): Promise<RestApiResponse<HistoricalExerciseRecordsResponse>> {
        return this.marketDataApi.historicalExerciseRecords(requestParameters);
    }

    /**
     * Kline/candlestick bars for an option symbol.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: 1
     *
     * @summary Kline/Candlestick Data
     * @param {KlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<KlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Kline-Candlestick-Data Binance API Documentation}
     */
    klineCandlestickData(
        requestParameters: KlineCandlestickDataRequest
    ): Promise<RestApiResponse<KlineCandlestickDataResponse>> {
        return this.marketDataApi.klineCandlestickData(requestParameters);
    }

    /**
     * Get older market historical trades.
     *
     * Weight: 20
     *
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {OldTradesLookupRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OldTradesLookupResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Old-Trades-Lookup Binance API Documentation}
     */
    oldTradesLookup(
        requestParameters: OldTradesLookupRequest
    ): Promise<RestApiResponse<OldTradesLookupResponse>> {
        return this.marketDataApi.oldTradesLookup(requestParameters);
    }

    /**
     * Get open interest for specific underlying asset on specific expiration date.
     *
     * Weight: 0
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OpenInterestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Open-Interest Binance API Documentation}
     */
    openInterest(
        requestParameters: OpenInterestRequest
    ): Promise<RestApiResponse<OpenInterestResponse>> {
        return this.marketDataApi.openInterest(requestParameters);
    }

    /**
     * Option mark price and greek info.
     *
     * Weight: 5
     *
     * @summary Option Mark Price
     * @param {OptionMarkPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionMarkPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Option-Mark-Price Binance API Documentation}
     */
    optionMarkPrice(
        requestParameters: OptionMarkPriceRequest = {}
    ): Promise<RestApiResponse<OptionMarkPriceResponse>> {
        return this.marketDataApi.optionMarkPrice(requestParameters);
    }

    /**
     * Check orderbook depth on specific symbol
     *
     * Weight: limit         | weight
     * ------------  | ------------
     * 5, 10, 20, 50 | 2
     * 100           | 5
     * 500           | 10
     * 1000          | 20
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderBookResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Order-Book Binance API Documentation}
     */
    orderBook(requestParameters: OrderBookRequest): Promise<RestApiResponse<OrderBookResponse>> {
        return this.marketDataApi.orderBook(requestParameters);
    }

    /**
     * Get recent block trades
     *
     * Weight: 5
     *
     * @summary Recent Block Trades List
     * @param {RecentBlockTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RecentBlockTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Recent-Block-Trade-List Binance API Documentation}
     */
    recentBlockTradesList(
        requestParameters: RecentBlockTradesListRequest = {}
    ): Promise<RestApiResponse<RecentBlockTradesListResponse>> {
        return this.marketDataApi.recentBlockTradesList(requestParameters);
    }

    /**
     * Get recent market trades
     *
     * Weight: 5
     *
     * @summary Recent Trades List
     * @param {RecentTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RecentTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Recent-Trades-List Binance API Documentation}
     */
    recentTradesList(
        requestParameters: RecentTradesListRequest
    ): Promise<RestApiResponse<RecentTradesListResponse>> {
        return this.marketDataApi.recentTradesList(requestParameters);
    }

    /**
     * Get spot index price for option underlying.
     *
     * Weight: 1
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolPriceTickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Symbol-Price-Ticker Binance API Documentation}
     */
    symbolPriceTicker(
        requestParameters: SymbolPriceTickerRequest
    ): Promise<RestApiResponse<SymbolPriceTickerResponse>> {
        return this.marketDataApi.symbolPriceTicker(requestParameters);
    }

    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     *
     * @summary Test Connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Test-Connectivity Binance API Documentation}
     */
    testConnectivity(): Promise<RestApiResponse<void>> {
        return this.marketDataApi.testConnectivity();
    }

    /**
     * 24 hour rolling window price change statistics.
     *
     * Weight: 5
     *
     * @summary 24hr Ticker Price Change Statistics
     * @param {Ticker24hrPriceChangeStatisticsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/24hr-Ticker-Price-Change-Statistics Binance API Documentation}
     */
    ticker24hrPriceChangeStatistics(
        requestParameters: Ticker24hrPriceChangeStatisticsRequest = {}
    ): Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>> {
        return this.marketDataApi.ticker24hrPriceChangeStatistics(requestParameters);
    }

    /**
     * Accept a block trade order
     *
     * Weight: 5
     *
     * @summary Accept Block Trade Order (TRADE)
     * @param {AcceptBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AcceptBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Accept-Block-Trade-Order Binance API Documentation}
     */
    acceptBlockTradeOrder(
        requestParameters: AcceptBlockTradeOrderRequest
    ): Promise<RestApiResponse<AcceptBlockTradeOrderResponse>> {
        return this.marketMakerBlockTradeApi.acceptBlockTradeOrder(requestParameters);
    }

    /**
     * Gets block trades for a specific account.
     *
     * Weight: 5
     *
     * @summary Account Block Trade List (USER_DATA)
     * @param {AccountBlockTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountBlockTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Account-Block-Trade-List Binance API Documentation}
     */
    accountBlockTradeList(
        requestParameters: AccountBlockTradeListRequest = {}
    ): Promise<RestApiResponse<AccountBlockTradeListResponse>> {
        return this.marketMakerBlockTradeApi.accountBlockTradeList(requestParameters);
    }

    /**
     * Cancel a block trade order.
     *
     * Weight: 5
     *
     * @summary Cancel Block Trade Order (TRADE)
     * @param {CancelBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Cancel-Block-Trade-Order Binance API Documentation}
     */
    cancelBlockTradeOrder(
        requestParameters: CancelBlockTradeOrderRequest
    ): Promise<RestApiResponse<void>> {
        return this.marketMakerBlockTradeApi.cancelBlockTradeOrder(requestParameters);
    }

    /**
     * Extends a block trade expire time by 30 mins from the current time.
     *
     * Weight: 5
     *
     * @summary Extend Block Trade Order (TRADE)
     * @param {ExtendBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ExtendBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Extend-Block-Trade-Order Binance API Documentation}
     */
    extendBlockTradeOrder(
        requestParameters: ExtendBlockTradeOrderRequest
    ): Promise<RestApiResponse<ExtendBlockTradeOrderResponse>> {
        return this.marketMakerBlockTradeApi.extendBlockTradeOrder(requestParameters);
    }

    /**
     * Send in a new block trade order.
     *
     * Weight: 5
     *
     * @summary New Block Trade Order (TRADE)
     * @param {NewBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/New-Block-Trade-Order Binance API Documentation}
     */
    newBlockTradeOrder(
        requestParameters: NewBlockTradeOrderRequest
    ): Promise<RestApiResponse<NewBlockTradeOrderResponse>> {
        return this.marketMakerBlockTradeApi.newBlockTradeOrder(requestParameters);
    }

    /**
     * Query block trade details; returns block trade details from counterparty's perspective.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Details (USER_DATA)
     * @param {QueryBlockTradeDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBlockTradeDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Detail Binance API Documentation}
     */
    queryBlockTradeDetails(
        requestParameters: QueryBlockTradeDetailsRequest
    ): Promise<RestApiResponse<QueryBlockTradeDetailsResponse>> {
        return this.marketMakerBlockTradeApi.queryBlockTradeDetails(requestParameters);
    }

    /**
     * Check block trade order status.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Order (TRADE)
     * @param {QueryBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Order Binance API Documentation}
     */
    queryBlockTradeOrder(
        requestParameters: QueryBlockTradeOrderRequest = {}
    ): Promise<RestApiResponse<QueryBlockTradeOrderResponse>> {
        return this.marketMakerBlockTradeApi.queryBlockTradeOrder(requestParameters);
    }

    /**
     * This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter.
     *
     * The response will only include underlying symbols where the heartbeat has been successfully updated.
     *
     * Weight: 10
     *
     * @summary Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)
     * @param {AutoCancelAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AutoCancelAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Auto-Cancel-All-Open-Orders-Heartbeat Binance API Documentation}
     */
    autoCancelAllOpenOrders(
        requestParameters: AutoCancelAllOpenOrdersRequest
    ): Promise<RestApiResponse<AutoCancelAllOpenOrdersResponse>> {
        return this.marketMakerEndpointsApi.autoCancelAllOpenOrders(requestParameters);
    }

    /**
     * This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.
     *
     * countdownTime = 0 means the function is disabled.
     *
     * Weight: 1
     *
     * @summary Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {GetAutoCancelAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAutoCancelAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Auto-Cancel-All-Open-Orders-Config Binance API Documentation}
     */
    getAutoCancelAllOpenOrders(
        requestParameters: GetAutoCancelAllOpenOrdersRequest = {}
    ): Promise<RestApiResponse<GetAutoCancelAllOpenOrdersResponse>> {
        return this.marketMakerEndpointsApi.getAutoCancelAllOpenOrders(requestParameters);
    }

    /**
     * Get config for MMP.
     *
     * Weight: 1
     *
     * @summary Get Market Maker Protection Config (TRADE)
     * @param {GetMarketMakerProtectionConfigRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetMarketMakerProtectionConfigResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Market-Maker-Protection-Config Binance API Documentation}
     */
    getMarketMakerProtectionConfig(
        requestParameters: GetMarketMakerProtectionConfigRequest = {}
    ): Promise<RestApiResponse<GetMarketMakerProtectionConfigResponse>> {
        return this.marketMakerEndpointsApi.getMarketMakerProtectionConfig(requestParameters);
    }

    /**
     * Get current account information.
     *
     * Weight: 3
     *
     * @summary Option Margin Account Information (USER_DATA)
     * @param {OptionMarginAccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionMarginAccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Option-Margin-Account-Information Binance API Documentation}
     */
    optionMarginAccountInformation(
        requestParameters: OptionMarginAccountInformationRequest = {}
    ): Promise<RestApiResponse<OptionMarginAccountInformationResponse>> {
        return this.marketMakerEndpointsApi.optionMarginAccountInformation(requestParameters);
    }

    /**
     * Reset MMP, start MMP order again.
     *
     * Weight: 1
     *
     * @summary Reset Market Maker Protection Config (TRADE)
     * @param {ResetMarketMakerProtectionConfigRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ResetMarketMakerProtectionConfigResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Reset-Market-Maker-Protection-Config Binance API Documentation}
     */
    resetMarketMakerProtectionConfig(
        requestParameters: ResetMarketMakerProtectionConfigRequest = {}
    ): Promise<RestApiResponse<ResetMarketMakerProtectionConfigResponse>> {
        return this.marketMakerEndpointsApi.resetMarketMakerProtectionConfig(requestParameters);
    }

    /**
     * This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.
     *
     *
     * This rest endpoint sets up the parameters to cancel your open orders in case of an outage or disconnection.
     * Example usage:
     * Call this endpoint with a countdownTime value of 10000 (10 seconds) to turn on the auto-cancel feature. If the corresponding countdownCancelAllHeartBeat endpoint is not called within 10 seconds with the specified underlying symbol, all open orders of the specified symbol will be automatically canceled. If this endpoint is called with an countdownTime of 0, the countdown timer will be stopped.
     * The system will check all countdowns approximately every 1000 milliseconds, **please note that sufficient redundancy should be considered when using this function**. We do not recommend setting the countdown time to be too precise or too small.
     *
     * Weight: 1
     *
     * @summary Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)
     * @param {SetAutoCancelAllOpenOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetAutoCancelAllOpenOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Auto-Cancel-All-Open-Orders-Config Binance API Documentation}
     */
    setAutoCancelAllOpenOrders(
        requestParameters: SetAutoCancelAllOpenOrdersRequest
    ): Promise<RestApiResponse<SetAutoCancelAllOpenOrdersResponse>> {
        return this.marketMakerEndpointsApi.setAutoCancelAllOpenOrders(requestParameters);
    }

    /**
     * Set config for MMP.
     * Market Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker's account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.
     *
     * Weight: 1
     *
     * @summary Set Market Maker Protection Config (TRADE)
     * @param {SetMarketMakerProtectionConfigRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetMarketMakerProtectionConfigResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Market-Maker-Protection-Config Binance API Documentation}
     */
    setMarketMakerProtectionConfig(
        requestParameters: SetMarketMakerProtectionConfigRequest = {}
    ): Promise<RestApiResponse<SetMarketMakerProtectionConfigResponse>> {
        return this.marketMakerEndpointsApi.setMarketMakerProtectionConfig(requestParameters);
    }

    /**
     * Get trades for a specific account and symbol.
     *
     * Weight: 5
     *
     * @summary Account Trade List (USER_DATA)
     * @param {AccountTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Account-Trade-List Binance API Documentation}
     */
    accountTradeList(
        requestParameters: AccountTradeListRequest = {}
    ): Promise<RestApiResponse<AccountTradeListResponse>> {
        return this.tradeApi.accountTradeList(requestParameters);
    }

    /**
     * Cancel all active orders on specified underlying.
     *
     * Weight: 1
     *
     * @summary Cancel All Option Orders By Underlying (TRADE)
     * @param {CancelAllOptionOrdersByUnderlyingRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllOptionOrdersByUnderlyingResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Cancel-All-Option-Orders-By-Underlying Binance API Documentation}
     */
    cancelAllOptionOrdersByUnderlying(
        requestParameters: CancelAllOptionOrdersByUnderlyingRequest
    ): Promise<RestApiResponse<CancelAllOptionOrdersByUnderlyingResponse>> {
        return this.tradeApi.cancelAllOptionOrdersByUnderlying(requestParameters);
    }

    /**
     * Cancel all active order on a symbol.
     *
     * Weight: 1
     *
     * @summary Cancel all Option orders on specific symbol (TRADE)
     * @param {CancelAllOptionOrdersOnSpecificSymbolRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelAllOptionOrdersOnSpecificSymbolResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Cancel-all-Option-orders-on-specific-symbol Binance API Documentation}
     */
    cancelAllOptionOrdersOnSpecificSymbol(
        requestParameters: CancelAllOptionOrdersOnSpecificSymbolRequest
    ): Promise<RestApiResponse<CancelAllOptionOrdersOnSpecificSymbolResponse>> {
        return this.tradeApi.cancelAllOptionOrdersOnSpecificSymbol(requestParameters);
    }

    /**
     * Cancel multiple orders.
     *
     * At least one instance of `orderId` and `clientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Multiple Option Orders (TRADE)
     * @param {CancelMultipleOptionOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelMultipleOptionOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Cancel-Multiple-Option-Orders Binance API Documentation}
     */
    cancelMultipleOptionOrders(
        requestParameters: CancelMultipleOptionOrdersRequest
    ): Promise<RestApiResponse<CancelMultipleOptionOrdersResponse>> {
        return this.tradeApi.cancelMultipleOptionOrders(requestParameters);
    }

    /**
     * Cancel an active order.
     *
     * At least one instance of `orderId` and `clientOrderId` must be sent.
     *
     * Weight: 1
     *
     * @summary Cancel Option Order (TRADE)
     * @param {CancelOptionOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<CancelOptionOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Cancel-Option-Order Binance API Documentation}
     */
    cancelOptionOrder(
        requestParameters: CancelOptionOrderRequest
    ): Promise<RestApiResponse<CancelOptionOrderResponse>> {
        return this.tradeApi.cancelOptionOrder(requestParameters);
    }

    /**
     * Send a new order.
     *
     * Weight: 0
     *
     * @summary New Order (TRADE)
     * @param {NewOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/New-Order Binance API Documentation}
     */
    newOrder(requestParameters: NewOrderRequest): Promise<RestApiResponse<NewOrderResponse>> {
        return this.tradeApi.newOrder(requestParameters);
    }

    /**
     * Get current position information.
     *
     * Weight: 5
     *
     * @summary Option Position Information (USER_DATA)
     * @param {OptionPositionInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionPositionInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Option-Position-Information Binance API Documentation}
     */
    optionPositionInformation(
        requestParameters: OptionPositionInformationRequest = {}
    ): Promise<RestApiResponse<OptionPositionInformationResponse>> {
        return this.tradeApi.optionPositionInformation(requestParameters);
    }

    /**
     * Send multiple option orders.
     *
     * Parameter rules are same with New Order
     * Batch orders are processed concurrently, and the order of matching is not guaranteed.
     *
     * Weight: 5
     *
     * @summary Place Multiple Orders(TRADE)
     * @param {PlaceMultipleOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<PlaceMultipleOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Place-Multiple-Orders Binance API Documentation}
     */
    placeMultipleOrders(
        requestParameters: PlaceMultipleOrdersRequest
    ): Promise<RestApiResponse<PlaceMultipleOrdersResponse>> {
        return this.tradeApi.placeMultipleOrders(requestParameters);
    }

    /**
     * Query current all open orders, status: ACCEPTED PARTIALLY_FILLED
     *
     * Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
     *
     * @summary Query Current Open Option Orders (USER_DATA)
     * @param {QueryCurrentOpenOptionOrdersRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryCurrentOpenOptionOrdersResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Query-Current-Open-Option-Orders Binance API Documentation}
     */
    queryCurrentOpenOptionOrders(
        requestParameters: QueryCurrentOpenOptionOrdersRequest = {}
    ): Promise<RestApiResponse<QueryCurrentOpenOptionOrdersResponse>> {
        return this.tradeApi.queryCurrentOpenOptionOrders(requestParameters);
    }

    /**
     * Query all finished orders within 5 days, finished status: CANCELLED FILLED REJECTED.
     *
     * Weight: 3
     *
     * @summary Query Option Order History (TRADE)
     * @param {QueryOptionOrderHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryOptionOrderHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Query-Option-Order-History Binance API Documentation}
     */
    queryOptionOrderHistory(
        requestParameters: QueryOptionOrderHistoryRequest
    ): Promise<RestApiResponse<QueryOptionOrderHistoryResponse>> {
        return this.tradeApi.queryOptionOrderHistory(requestParameters);
    }

    /**
     * Check an order status.
     *
     * These orders will not be found:
     * order status is `CANCELED` or `REJECTED`, **AND**
     * order has NO filled trade, **AND**
     * created time + 3 days < current time
     *
     *
     * Either `orderId` or `clientOrderId ` must be sent.
     *
     * Weight: 1
     *
     * @summary Query Single Order (TRADE)
     * @param {QuerySingleOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QuerySingleOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/Query-Single-Order Binance API Documentation}
     */
    querySingleOrder(
        requestParameters: QuerySingleOrderRequest
    ): Promise<RestApiResponse<QuerySingleOrderResponse>> {
        return this.tradeApi.querySingleOrder(requestParameters);
    }

    /**
     * Get account exercise records.
     *
     * Weight: 5
     *
     * @summary User Exercise Record (USER_DATA)
     * @param {UserExerciseRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserExerciseRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/trade/User-Exercise-Record Binance API Documentation}
     */
    userExerciseRecord(
        requestParameters: UserExerciseRecordRequest = {}
    ): Promise<RestApiResponse<UserExerciseRecordResponse>> {
        return this.tradeApi.userExerciseRecord(requestParameters);
    }

    /**
     * Close out a user data stream.
     *
     * Weight: 1
     *
     * @summary Close User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/user-data-streams/Close-User-Data-Stream Binance API Documentation}
     */
    closeUserDataStream(): Promise<RestApiResponse<void>> {
        return this.userDataStreamsApi.closeUserDataStream();
    }

    /**
     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 60 minutes.
     *
     * Weight: 1
     *
     * @summary Keepalive User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/user-data-streams/Keepalive-User-Data-Stream Binance API Documentation}
     */
    keepaliveUserDataStream(): Promise<RestApiResponse<void>> {
        return this.userDataStreamsApi.keepaliveUserDataStream();
    }

    /**
     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
     *
     * Weight: 1
     *
     * @summary Start User Data Stream (USER_STREAM)
     * @returns {Promise<RestApiResponse<StartUserDataStreamResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/derivatives/option/user-data-streams/Start-User-Data-Stream Binance API Documentation}
     */
    startUserDataStream(): Promise<RestApiResponse<StartUserDataStreamResponse>> {
        return this.userDataStreamsApi.startUserDataStream();
    }
}
