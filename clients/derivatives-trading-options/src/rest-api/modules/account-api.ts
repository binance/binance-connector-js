/**
 * Binance Public Derivatives Trading Options REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountFundingFlowResponse,
    GetDownloadIdForOptionTransactionHistoryResponse,
    GetOptionTransactionHistoryDownloadLinkByIdResponse,
    OptionAccountInformationResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Query account funding flows.
         *
         * Weight: 1
         *
         * @summary Account Funding Flow (USER_DATA)
         * @param {string} currency Asset type, only support USDT  as of now
         * @param {number} [recordId] Return the recordId and subsequent data, the latest data is returned by default, e.g 100000
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountFundingFlow: async (
            currency: string,
            recordId?: number,
            startTime?: number,
            endTime?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('accountFundingFlow', 'currency', currency);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (currency !== undefined && currency !== null) {
                localVarQueryParameter['currency'] = currency;
            }

            if (recordId !== undefined && recordId !== null) {
                localVarQueryParameter['recordId'] = recordId;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/bill',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get download id for option transaction history
         *
         * Request Limitation is 5 times per month, shared by > front end download page and rest api
         * The time between `startTime` and `endTime` can not be longer than 1 year
         *
         * Weight: 5
         *
         * @summary Get Download Id For Option Transaction History (USER_DATA)
         * @param {number} startTime Timestamp in ms
         * @param {number} endTime Timestamp in ms
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getDownloadIdForOptionTransactionHistory: async (
            startTime: number,
            endTime: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDownloadIdForOptionTransactionHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDownloadIdForOptionTransactionHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/income/asyn',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get option transaction history download Link by Id
         *
         * Download link expiration: 24h
         *
         * Weight: 5
         *
         * @summary Get Option Transaction History Download Link by Id (USER_DATA)
         * @param {string} downloadId get by download id api
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getOptionTransactionHistoryDownloadLinkById: async (
            downloadId: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'downloadId' is not null or undefined
            assertParamExists(
                'getOptionTransactionHistoryDownloadLinkById',
                'downloadId',
                downloadId
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (downloadId !== undefined && downloadId !== null) {
                localVarQueryParameter['downloadId'] = downloadId;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/income/asyn/id',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get current account information.
         *
         * Weight: 3
         *
         * @summary Option Account Information(TRADE)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        optionAccountInformation: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/account',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Query account funding flows.
     *
     * Weight: 1
     *
     * @summary Account Funding Flow (USER_DATA)
     * @param {AccountFundingFlowRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountFundingFlow(
        requestParameters: AccountFundingFlowRequest
    ): Promise<RestApiResponse<AccountFundingFlowResponse>>;
    /**
     * Get download id for option transaction history
     *
     * Request Limitation is 5 times per month, shared by > front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Option Transaction History (USER_DATA)
     * @param {GetDownloadIdForOptionTransactionHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getDownloadIdForOptionTransactionHistory(
        requestParameters: GetDownloadIdForOptionTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForOptionTransactionHistoryResponse>>;
    /**
     * Get option transaction history download Link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Option Transaction History Download Link by Id (USER_DATA)
     * @param {GetOptionTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getOptionTransactionHistoryDownloadLinkById(
        requestParameters: GetOptionTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetOptionTransactionHistoryDownloadLinkByIdResponse>>;
    /**
     * Get current account information.
     *
     * Weight: 3
     *
     * @summary Option Account Information(TRADE)
     * @param {OptionAccountInformationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    optionAccountInformation(
        requestParameters?: OptionAccountInformationRequest
    ): Promise<RestApiResponse<OptionAccountInformationResponse>>;
}

/**
 * Request parameters for accountFundingFlow operation in AccountApi.
 * @interface AccountFundingFlowRequest
 */
export interface AccountFundingFlowRequest {
    /**
     * Asset type, only support USDT  as of now
     * @type {string}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly currency: string;

    /**
     * Return the recordId and subsequent data, the latest data is returned by default, e.g 100000
     * @type {number}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly recordId?: number;

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly startTime?: number;

    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly endTime?: number;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiAccountFundingFlow
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getDownloadIdForOptionTransactionHistory operation in AccountApi.
 * @interface GetDownloadIdForOptionTransactionHistoryRequest
 */
export interface GetDownloadIdForOptionTransactionHistoryRequest {
    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForOptionTransactionHistory
     */
    readonly startTime: number;

    /**
     * Timestamp in ms
     * @type {number}
     * @memberof AccountApiGetDownloadIdForOptionTransactionHistory
     */
    readonly endTime: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetDownloadIdForOptionTransactionHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getOptionTransactionHistoryDownloadLinkById operation in AccountApi.
 * @interface GetOptionTransactionHistoryDownloadLinkByIdRequest
 */
export interface GetOptionTransactionHistoryDownloadLinkByIdRequest {
    /**
     * get by download id api
     * @type {string}
     * @memberof AccountApiGetOptionTransactionHistoryDownloadLinkById
     */
    readonly downloadId: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiGetOptionTransactionHistoryDownloadLinkById
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for optionAccountInformation operation in AccountApi.
 * @interface OptionAccountInformationRequest
 */
export interface OptionAccountInformationRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiOptionAccountInformation
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Query account funding flows.
     *
     * Weight: 1
     *
     * @summary Account Funding Flow (USER_DATA)
     * @param {AccountFundingFlowRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountFundingFlowResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Account-Funding-Flow Binance API Documentation}
     */
    public async accountFundingFlow(
        requestParameters: AccountFundingFlowRequest
    ): Promise<RestApiResponse<AccountFundingFlowResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountFundingFlow(
            requestParameters?.currency,
            requestParameters?.recordId,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<AccountFundingFlowResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get download id for option transaction history
     *
     * Request Limitation is 5 times per month, shared by > front end download page and rest api
     * The time between `startTime` and `endTime` can not be longer than 1 year
     *
     * Weight: 5
     *
     * @summary Get Download Id For Option Transaction History (USER_DATA)
     * @param {GetDownloadIdForOptionTransactionHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetDownloadIdForOptionTransactionHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Get-Download-Id-For-Option-Transaction-History Binance API Documentation}
     */
    public async getDownloadIdForOptionTransactionHistory(
        requestParameters: GetDownloadIdForOptionTransactionHistoryRequest
    ): Promise<RestApiResponse<GetDownloadIdForOptionTransactionHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getDownloadIdForOptionTransactionHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.recvWindow
            );
        return sendRequest<GetDownloadIdForOptionTransactionHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get option transaction history download Link by Id
     *
     * Download link expiration: 24h
     *
     * Weight: 5
     *
     * @summary Get Option Transaction History Download Link by Id (USER_DATA)
     * @param {GetOptionTransactionHistoryDownloadLinkByIdRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetOptionTransactionHistoryDownloadLinkByIdResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Get-Option-Transaction-History-Download-Link-by-Id Binance API Documentation}
     */
    public async getOptionTransactionHistoryDownloadLinkById(
        requestParameters: GetOptionTransactionHistoryDownloadLinkByIdRequest
    ): Promise<RestApiResponse<GetOptionTransactionHistoryDownloadLinkByIdResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getOptionTransactionHistoryDownloadLinkById(
                requestParameters?.downloadId,
                requestParameters?.recvWindow
            );
        return sendRequest<GetOptionTransactionHistoryDownloadLinkByIdResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get current account information.
     *
     * Weight: 3
     *
     * @summary Option Account Information(TRADE)
     * @param {OptionAccountInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionAccountInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/account/Option-Account-Information Binance API Documentation}
     */
    public async optionAccountInformation(
        requestParameters: OptionAccountInformationRequest = {}
    ): Promise<RestApiResponse<OptionAccountInformationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.optionAccountInformation(
            requestParameters?.recvWindow
        );
        return sendRequest<OptionAccountInformationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
