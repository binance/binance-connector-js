/**
 * Binance Public Derivatives Trading Options REST API
 *
 * OpenAPI Specification for the Binance Public Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AcceptBlockTradeOrderResponse,
    AccountBlockTradeListResponse,
    ExtendBlockTradeOrderResponse,
    NewBlockTradeOrderResponse,
    QueryBlockTradeDetailsResponse,
    QueryBlockTradeOrderResponse,
} from '../types';

/**
 * MarketMakerBlockTradeApi - axios parameter creator
 */
const MarketMakerBlockTradeApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Accept a block trade order
         *
         * Weight: 5
         *
         * @summary Accept Block Trade Order (TRADE)
         * @param {string} blockOrderMatchingKey
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        acceptBlockTradeOrder: async (
            blockOrderMatchingKey: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'blockOrderMatchingKey' is not null or undefined
            assertParamExists(
                'acceptBlockTradeOrder',
                'blockOrderMatchingKey',
                blockOrderMatchingKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (blockOrderMatchingKey !== undefined && blockOrderMatchingKey !== null) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/execute',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Gets block trades for a specific account.
         *
         * Weight: 5
         *
         * @summary Account Block Trade List (USER_DATA)
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {string} [underlying] underlying, e.g BTCUSDT
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountBlockTradeList: async (
            endTime?: number,
            startTime?: number,
            underlying?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (underlying !== undefined && underlying !== null) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/user-trades',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Cancel a block trade order.
         *
         * Weight: 5
         *
         * @summary Cancel Block Trade Order (TRADE)
         * @param {string} blockOrderMatchingKey
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        cancelBlockTradeOrder: async (
            blockOrderMatchingKey: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'blockOrderMatchingKey' is not null or undefined
            assertParamExists(
                'cancelBlockTradeOrder',
                'blockOrderMatchingKey',
                blockOrderMatchingKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (blockOrderMatchingKey !== undefined && blockOrderMatchingKey !== null) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/create',
                method: 'DELETE',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Extends a block trade expire time by 30 mins from the current time.
         *
         * Weight: 5
         *
         * @summary Extend Block Trade Order (TRADE)
         * @param {string} blockOrderMatchingKey
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        extendBlockTradeOrder: async (
            blockOrderMatchingKey: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'blockOrderMatchingKey' is not null or undefined
            assertParamExists(
                'extendBlockTradeOrder',
                'blockOrderMatchingKey',
                blockOrderMatchingKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (blockOrderMatchingKey !== undefined && blockOrderMatchingKey !== null) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/create',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Send in a new block trade order.
         *
         * Weight: 5
         *
         * @summary New Block Trade Order (TRADE)
         * @param {string} liquidity Taker or Maker
         * @param {Array<object>} legs Max 1 (only single leg supported), list of legs parameters in JSON; example: eapi/v1/block/order/create?orders=[{"symbol":"BTC-210115-35000-C", "price":"100","quantity":"0.0002","side":"BUY","type":"LIMIT"}]
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {NewBlockTradeOrderSideEnum} side BUY or SELL
         * @param {number} price Order Price
         * @param {number} quantity Order Quantity
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        newBlockTradeOrder: async (
            liquidity: string,
            legs: Array<object>,
            symbol: string,
            side: NewBlockTradeOrderSideEnum,
            price: number,
            quantity: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'liquidity' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'liquidity', liquidity);
            // verify required parameter 'legs' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'legs', legs);
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'symbol', symbol);
            // verify required parameter 'side' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'side', side);
            // verify required parameter 'price' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'price', price);
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('newBlockTradeOrder', 'quantity', quantity);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (liquidity !== undefined && liquidity !== null) {
                localVarQueryParameter['liquidity'] = liquidity;
            }

            if (legs) {
                localVarQueryParameter['legs'] = legs;
            }

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined && side !== null) {
                localVarQueryParameter['side'] = side;
            }

            if (price !== undefined && price !== null) {
                localVarQueryParameter['price'] = price;
            }

            if (quantity !== undefined && quantity !== null) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/create',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query block trade details; returns block trade details from counterparty's perspective.
         *
         * Weight: 5
         *
         * @summary Query Block Trade Details (USER_DATA)
         * @param {string} blockOrderMatchingKey
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryBlockTradeDetails: async (
            blockOrderMatchingKey: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'blockOrderMatchingKey' is not null or undefined
            assertParamExists(
                'queryBlockTradeDetails',
                'blockOrderMatchingKey',
                blockOrderMatchingKey
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (blockOrderMatchingKey !== undefined && blockOrderMatchingKey !== null) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/execute',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Check block trade order status.
         *
         * Weight: 5
         *
         * @summary Query Block Trade Order (TRADE)
         * @param {string} [blockOrderMatchingKey] If specified, returns the specific block trade associated with the blockOrderMatchingKey
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {string} [underlying] underlying, e.g BTCUSDT
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryBlockTradeOrder: async (
            blockOrderMatchingKey?: string,
            endTime?: number,
            startTime?: number,
            underlying?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (blockOrderMatchingKey !== undefined && blockOrderMatchingKey !== null) {
                localVarQueryParameter['blockOrderMatchingKey'] = blockOrderMatchingKey;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (underlying !== undefined && underlying !== null) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/block/order/orders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketMakerBlockTradeApi - interface
 * @interface MarketMakerBlockTradeApi
 */
export interface MarketMakerBlockTradeApiInterface {
    /**
     * Accept a block trade order
     *
     * Weight: 5
     *
     * @summary Accept Block Trade Order (TRADE)
     * @param {AcceptBlockTradeOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    acceptBlockTradeOrder(
        requestParameters: AcceptBlockTradeOrderRequest
    ): Promise<RestApiResponse<AcceptBlockTradeOrderResponse>>;
    /**
     * Gets block trades for a specific account.
     *
     * Weight: 5
     *
     * @summary Account Block Trade List (USER_DATA)
     * @param {AccountBlockTradeListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    accountBlockTradeList(
        requestParameters?: AccountBlockTradeListRequest
    ): Promise<RestApiResponse<AccountBlockTradeListResponse>>;
    /**
     * Cancel a block trade order.
     *
     * Weight: 5
     *
     * @summary Cancel Block Trade Order (TRADE)
     * @param {CancelBlockTradeOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    cancelBlockTradeOrder(
        requestParameters: CancelBlockTradeOrderRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Extends a block trade expire time by 30 mins from the current time.
     *
     * Weight: 5
     *
     * @summary Extend Block Trade Order (TRADE)
     * @param {ExtendBlockTradeOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    extendBlockTradeOrder(
        requestParameters: ExtendBlockTradeOrderRequest
    ): Promise<RestApiResponse<ExtendBlockTradeOrderResponse>>;
    /**
     * Send in a new block trade order.
     *
     * Weight: 5
     *
     * @summary New Block Trade Order (TRADE)
     * @param {NewBlockTradeOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    newBlockTradeOrder(
        requestParameters: NewBlockTradeOrderRequest
    ): Promise<RestApiResponse<NewBlockTradeOrderResponse>>;
    /**
     * Query block trade details; returns block trade details from counterparty's perspective.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Details (USER_DATA)
     * @param {QueryBlockTradeDetailsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    queryBlockTradeDetails(
        requestParameters: QueryBlockTradeDetailsRequest
    ): Promise<RestApiResponse<QueryBlockTradeDetailsResponse>>;
    /**
     * Check block trade order status.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Order (TRADE)
     * @param {QueryBlockTradeOrderRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApiInterface
     */
    queryBlockTradeOrder(
        requestParameters?: QueryBlockTradeOrderRequest
    ): Promise<RestApiResponse<QueryBlockTradeOrderResponse>>;
}

/**
 * Request parameters for acceptBlockTradeOrder operation in MarketMakerBlockTradeApi.
 * @interface AcceptBlockTradeOrderRequest
 */
export interface AcceptBlockTradeOrderRequest {
    /**
     *
     * @type {string}
     * @memberof MarketMakerBlockTradeApiAcceptBlockTradeOrder
     */
    readonly blockOrderMatchingKey: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiAcceptBlockTradeOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for accountBlockTradeList operation in MarketMakerBlockTradeApi.
 * @interface AccountBlockTradeListRequest
 */
export interface AccountBlockTradeListRequest {
    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof MarketMakerBlockTradeApiAccountBlockTradeList
     */
    readonly endTime?: number;

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof MarketMakerBlockTradeApiAccountBlockTradeList
     */
    readonly startTime?: number;

    /**
     * underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketMakerBlockTradeApiAccountBlockTradeList
     */
    readonly underlying?: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiAccountBlockTradeList
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for cancelBlockTradeOrder operation in MarketMakerBlockTradeApi.
 * @interface CancelBlockTradeOrderRequest
 */
export interface CancelBlockTradeOrderRequest {
    /**
     *
     * @type {string}
     * @memberof MarketMakerBlockTradeApiCancelBlockTradeOrder
     */
    readonly blockOrderMatchingKey: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiCancelBlockTradeOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for extendBlockTradeOrder operation in MarketMakerBlockTradeApi.
 * @interface ExtendBlockTradeOrderRequest
 */
export interface ExtendBlockTradeOrderRequest {
    /**
     *
     * @type {string}
     * @memberof MarketMakerBlockTradeApiExtendBlockTradeOrder
     */
    readonly blockOrderMatchingKey: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiExtendBlockTradeOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for newBlockTradeOrder operation in MarketMakerBlockTradeApi.
 * @interface NewBlockTradeOrderRequest
 */
export interface NewBlockTradeOrderRequest {
    /**
     * Taker or Maker
     * @type {string}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly liquidity: string;

    /**
     * Max 1 (only single leg supported), list of legs parameters in JSON; example: eapi/v1/block/order/create?orders=[{"symbol":"BTC-210115-35000-C", "price":"100","quantity":"0.0002","side":"BUY","type":"LIMIT"}]
     * @type {Array<object>}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly legs: Array<object>;

    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly symbol: string;

    /**
     * BUY or SELL
     * @type {'BUY' | 'SELL'}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly side: NewBlockTradeOrderSideEnum;

    /**
     * Order Price
     * @type {number}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly price: number;

    /**
     * Order Quantity
     * @type {number}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly quantity: number;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiNewBlockTradeOrder
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryBlockTradeDetails operation in MarketMakerBlockTradeApi.
 * @interface QueryBlockTradeDetailsRequest
 */
export interface QueryBlockTradeDetailsRequest {
    /**
     *
     * @type {string}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeDetails
     */
    readonly blockOrderMatchingKey: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeDetails
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryBlockTradeOrder operation in MarketMakerBlockTradeApi.
 * @interface QueryBlockTradeOrderRequest
 */
export interface QueryBlockTradeOrderRequest {
    /**
     * If specified, returns the specific block trade associated with the blockOrderMatchingKey
     * @type {string}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeOrder
     */
    readonly blockOrderMatchingKey?: string;

    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeOrder
     */
    readonly endTime?: number;

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeOrder
     */
    readonly startTime?: number;

    /**
     * underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeOrder
     */
    readonly underlying?: string;

    /**
     *
     * @type {number}
     * @memberof MarketMakerBlockTradeApiQueryBlockTradeOrder
     */
    readonly recvWindow?: number;
}

/**
 * MarketMakerBlockTradeApi - object-oriented interface
 * @class MarketMakerBlockTradeApi
 */
export class MarketMakerBlockTradeApi implements MarketMakerBlockTradeApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketMakerBlockTradeApiAxiosParamCreator(configuration);
    }

    /**
     * Accept a block trade order
     *
     * Weight: 5
     *
     * @summary Accept Block Trade Order (TRADE)
     * @param {AcceptBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AcceptBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Accept-Block-Trade-Order Binance API Documentation}
     */
    public async acceptBlockTradeOrder(
        requestParameters: AcceptBlockTradeOrderRequest
    ): Promise<RestApiResponse<AcceptBlockTradeOrderResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.acceptBlockTradeOrder(
            requestParameters?.blockOrderMatchingKey,
            requestParameters?.recvWindow
        );
        return sendRequest<AcceptBlockTradeOrderResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Gets block trades for a specific account.
     *
     * Weight: 5
     *
     * @summary Account Block Trade List (USER_DATA)
     * @param {AccountBlockTradeListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountBlockTradeListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Account-Block-Trade-List Binance API Documentation}
     */
    public async accountBlockTradeList(
        requestParameters: AccountBlockTradeListRequest = {}
    ): Promise<RestApiResponse<AccountBlockTradeListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountBlockTradeList(
            requestParameters?.endTime,
            requestParameters?.startTime,
            requestParameters?.underlying,
            requestParameters?.recvWindow
        );
        return sendRequest<AccountBlockTradeListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Cancel a block trade order.
     *
     * Weight: 5
     *
     * @summary Cancel Block Trade Order (TRADE)
     * @param {CancelBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Cancel-Block-Trade-Order Binance API Documentation}
     */
    public async cancelBlockTradeOrder(
        requestParameters: CancelBlockTradeOrderRequest
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.cancelBlockTradeOrder(
            requestParameters?.blockOrderMatchingKey,
            requestParameters?.recvWindow
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Extends a block trade expire time by 30 mins from the current time.
     *
     * Weight: 5
     *
     * @summary Extend Block Trade Order (TRADE)
     * @param {ExtendBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ExtendBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Extend-Block-Trade-Order Binance API Documentation}
     */
    public async extendBlockTradeOrder(
        requestParameters: ExtendBlockTradeOrderRequest
    ): Promise<RestApiResponse<ExtendBlockTradeOrderResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.extendBlockTradeOrder(
            requestParameters?.blockOrderMatchingKey,
            requestParameters?.recvWindow
        );
        return sendRequest<ExtendBlockTradeOrderResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Send in a new block trade order.
     *
     * Weight: 5
     *
     * @summary New Block Trade Order (TRADE)
     * @param {NewBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<NewBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/New-Block-Trade-Order Binance API Documentation}
     */
    public async newBlockTradeOrder(
        requestParameters: NewBlockTradeOrderRequest
    ): Promise<RestApiResponse<NewBlockTradeOrderResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.newBlockTradeOrder(
            requestParameters?.liquidity,
            requestParameters?.legs,
            requestParameters?.symbol,
            requestParameters?.side,
            requestParameters?.price,
            requestParameters?.quantity,
            requestParameters?.recvWindow
        );
        return sendRequest<NewBlockTradeOrderResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query block trade details; returns block trade details from counterparty's perspective.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Details (USER_DATA)
     * @param {QueryBlockTradeDetailsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBlockTradeDetailsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Detail Binance API Documentation}
     */
    public async queryBlockTradeDetails(
        requestParameters: QueryBlockTradeDetailsRequest
    ): Promise<RestApiResponse<QueryBlockTradeDetailsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryBlockTradeDetails(
            requestParameters?.blockOrderMatchingKey,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryBlockTradeDetailsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Check block trade order status.
     *
     * Weight: 5
     *
     * @summary Query Block Trade Order (TRADE)
     * @param {QueryBlockTradeOrderRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryBlockTradeOrderResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketMakerBlockTradeApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Order Binance API Documentation}
     */
    public async queryBlockTradeOrder(
        requestParameters: QueryBlockTradeOrderRequest = {}
    ): Promise<RestApiResponse<QueryBlockTradeOrderResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryBlockTradeOrder(
            requestParameters?.blockOrderMatchingKey,
            requestParameters?.endTime,
            requestParameters?.startTime,
            requestParameters?.underlying,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryBlockTradeOrderResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}

export const NewBlockTradeOrderSideEnum = {
    BUY: 'BUY',
    SELL: 'SELL',
} as const;
export type NewBlockTradeOrderSideEnum =
    (typeof NewBlockTradeOrderSideEnum)[keyof typeof NewBlockTradeOrderSideEnum];
