/**
 * Binance Derivatives Trading Options REST API
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    CheckServerTimeResponse,
    ExchangeInformationResponse,
    HistoricalExerciseRecordsResponse,
    KlineCandlestickDataResponse,
    OldTradesLookupResponse,
    OpenInterestResponse,
    OptionMarkPriceResponse,
    OrderBookResponse,
    RecentBlockTradesListResponse,
    RecentTradesListResponse,
    SymbolPriceTickerResponse,
    Ticker24hrPriceChangeStatisticsResponse,
} from '../types';

/**
 * MarketDataApi - axios parameter creator
 */
const MarketDataApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Test connectivity to the Rest API and get the current server time.
         *
         * Weight: 1
         *
         * @summary Check Server Time
         *
         * @throws {RequiredError}
         */
        checkServerTime: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/time',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Current exchange trading rules and symbol information
         *
         * Weight: 1
         *
         * @summary Exchange Information
         *
         * @throws {RequiredError}
         */
        exchangeInformation: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/exchangeInfo',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get historical exercise records.
         * REALISTIC_VALUE_STRICKEN -> Exercised
         * EXTRINSIC_VALUE_EXPIRED -> Expired OTM
         *
         * Weight: 3
         *
         * @summary Historical Exercise Records
         * @param {string} [underlying] underlying, e.g BTCUSDT
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        historicalExerciseRecords: async (
            underlying?: string,
            startTime?: number,
            endTime?: number,
            limit?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (underlying !== undefined && underlying !== null) {
                localVarQueryParameter['underlying'] = underlying;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/exerciseHistory',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Kline/candlestick bars for an option symbol.
         * Klines are uniquely identified by their open time.
         *
         * If startTime and endTime are not sent, the most recent klines are returned.
         *
         * Weight: 1
         *
         * @summary Kline/Candlestick Data
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {string} interval Time interval
         * @param {number} [startTime] Start Time, e.g 1593511200000
         * @param {number} [endTime] End Time, e.g 1593512200000
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        klineCandlestickData: async (
            symbol: string,
            interval: string,
            startTime?: number,
            endTime?: number,
            limit?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('klineCandlestickData', 'symbol', symbol);
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('klineCandlestickData', 'interval', interval);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (interval !== undefined && interval !== null) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/klines',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get older market historical trades.
         *
         * Weight: 20
         *
         * @summary Old Trades Lookup (MARKET_DATA)
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [fromId] The UniqueId ID from which to return. The latest deal record is returned by default
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        oldTradesLookup: async (
            symbol: string,
            fromId?: number,
            limit?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('oldTradesLookup', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (fromId !== undefined && fromId !== null) {
                localVarQueryParameter['fromId'] = fromId;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/historicalTrades',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get open interest for specific underlying asset on specific expiration date.
         *
         * Weight: 0
         *
         * @summary Open Interest
         * @param {string} underlyingAsset underlying asset, e.g ETH/BTC
         * @param {string} expiration expiration date, e.g 221225
         *
         * @throws {RequiredError}
         */
        openInterest: async (underlyingAsset: string, expiration: string): Promise<RequestArgs> => {
            // verify required parameter 'underlyingAsset' is not null or undefined
            assertParamExists('openInterest', 'underlyingAsset', underlyingAsset);
            // verify required parameter 'expiration' is not null or undefined
            assertParamExists('openInterest', 'expiration', expiration);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (underlyingAsset !== undefined && underlyingAsset !== null) {
                localVarQueryParameter['underlyingAsset'] = underlyingAsset;
            }

            if (expiration !== undefined && expiration !== null) {
                localVarQueryParameter['expiration'] = expiration;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/openInterest',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Option mark price and greek info.
         *
         * Weight: 5
         *
         * @summary Option Mark Price
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         *
         * @throws {RequiredError}
         */
        optionMarkPrice: async (symbol?: string): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/mark',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Check orderbook depth on specific symbol
         *
         * Weight: limit         | weight
         * ------------  | ------------
         * 5, 10, 20, 50 | 2
         * 100           | 5
         * 500           | 10
         * 1000          | 20
         *
         * @summary Order Book
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        orderBook: async (symbol: string, limit?: number): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('orderBook', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/depth',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get recent block trades
         *
         * Weight: 5
         *
         * @summary Recent Block Trades List
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        recentBlockTradesList: async (symbol?: string, limit?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/blockTrades',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get recent market trades
         *
         * Weight: 5
         *
         * @summary Recent Trades List
         * @param {string} symbol Option trading pair, e.g BTC-200730-9000-C
         * @param {number} [limit] Number of result sets returned Default:100 Max:1000
         *
         * @throws {RequiredError}
         */
        recentTradesList: async (symbol: string, limit?: number): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('recentTradesList', 'symbol', symbol);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/trades',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get spot index price for option underlying.
         *
         * Weight: 1
         *
         * @summary Symbol Price Ticker
         * @param {string} underlying Option underlying, e.g BTCUSDT
         *
         * @throws {RequiredError}
         */
        symbolPriceTicker: async (underlying: string): Promise<RequestArgs> => {
            // verify required parameter 'underlying' is not null or undefined
            assertParamExists('symbolPriceTicker', 'underlying', underlying);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (underlying !== undefined && underlying !== null) {
                localVarQueryParameter['underlying'] = underlying;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/index',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Test connectivity to the Rest API.
         *
         * Weight: 1
         *
         * @summary Test Connectivity
         *
         * @throws {RequiredError}
         */
        testConnectivity: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/ping',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * 24 hour rolling window price change statistics.
         *
         * Weight: 5
         *
         * @summary 24hr Ticker Price Change Statistics
         * @param {string} [symbol] Option trading pair, e.g BTC-200730-9000-C
         *
         * @throws {RequiredError}
         */
        ticker24hrPriceChangeStatistics: async (symbol?: string): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/eapi/v1/ticker',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * MarketDataApi - interface
 * @interface MarketDataApi
 */
export interface MarketDataApiInterface {
    /**
     * Test connectivity to the Rest API and get the current server time.
     *
     * Weight: 1
     *
     * @summary Check Server Time
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    checkServerTime(): Promise<RestApiResponse<CheckServerTimeResponse>>;
    /**
     * Current exchange trading rules and symbol information
     *
     * Weight: 1
     *
     * @summary Exchange Information
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    exchangeInformation(): Promise<RestApiResponse<ExchangeInformationResponse>>;
    /**
     * Get historical exercise records.
     * REALISTIC_VALUE_STRICKEN -> Exercised
     * EXTRINSIC_VALUE_EXPIRED -> Expired OTM
     *
     * Weight: 3
     *
     * @summary Historical Exercise Records
     * @param {HistoricalExerciseRecordsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    historicalExerciseRecords(
        requestParameters?: HistoricalExerciseRecordsRequest
    ): Promise<RestApiResponse<HistoricalExerciseRecordsResponse>>;
    /**
     * Kline/candlestick bars for an option symbol.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: 1
     *
     * @summary Kline/Candlestick Data
     * @param {KlineCandlestickDataRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    klineCandlestickData(
        requestParameters: KlineCandlestickDataRequest
    ): Promise<RestApiResponse<KlineCandlestickDataResponse>>;
    /**
     * Get older market historical trades.
     *
     * Weight: 20
     *
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {OldTradesLookupRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    oldTradesLookup(
        requestParameters: OldTradesLookupRequest
    ): Promise<RestApiResponse<OldTradesLookupResponse>>;
    /**
     * Get open interest for specific underlying asset on specific expiration date.
     *
     * Weight: 0
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    openInterest(
        requestParameters: OpenInterestRequest
    ): Promise<RestApiResponse<OpenInterestResponse>>;
    /**
     * Option mark price and greek info.
     *
     * Weight: 5
     *
     * @summary Option Mark Price
     * @param {OptionMarkPriceRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    optionMarkPrice(
        requestParameters?: OptionMarkPriceRequest
    ): Promise<RestApiResponse<OptionMarkPriceResponse>>;
    /**
     * Check orderbook depth on specific symbol
     *
     * Weight: limit         | weight
     * ------------  | ------------
     * 5, 10, 20, 50 | 2
     * 100           | 5
     * 500           | 10
     * 1000          | 20
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    orderBook(requestParameters: OrderBookRequest): Promise<RestApiResponse<OrderBookResponse>>;
    /**
     * Get recent block trades
     *
     * Weight: 5
     *
     * @summary Recent Block Trades List
     * @param {RecentBlockTradesListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    recentBlockTradesList(
        requestParameters?: RecentBlockTradesListRequest
    ): Promise<RestApiResponse<RecentBlockTradesListResponse>>;
    /**
     * Get recent market trades
     *
     * Weight: 5
     *
     * @summary Recent Trades List
     * @param {RecentTradesListRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    recentTradesList(
        requestParameters: RecentTradesListRequest
    ): Promise<RestApiResponse<RecentTradesListResponse>>;
    /**
     * Get spot index price for option underlying.
     *
     * Weight: 1
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    symbolPriceTicker(
        requestParameters: SymbolPriceTickerRequest
    ): Promise<RestApiResponse<SymbolPriceTickerResponse>>;
    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     *
     * @summary Test Connectivity
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    testConnectivity(): Promise<RestApiResponse<void>>;
    /**
     * 24 hour rolling window price change statistics.
     *
     * Weight: 5
     *
     * @summary 24hr Ticker Price Change Statistics
     * @param {Ticker24hrPriceChangeStatisticsRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApiInterface
     */
    ticker24hrPriceChangeStatistics(
        requestParameters?: Ticker24hrPriceChangeStatisticsRequest
    ): Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>>;
}

/**
 * Request parameters for historicalExerciseRecords operation in MarketDataApi.
 * @interface HistoricalExerciseRecordsRequest
 */
export interface HistoricalExerciseRecordsRequest {
    /**
     * underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketDataApiHistoricalExerciseRecords
     */
    readonly underlying?: string;

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof MarketDataApiHistoricalExerciseRecords
     */
    readonly startTime?: number;

    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof MarketDataApiHistoricalExerciseRecords
     */
    readonly endTime?: number;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiHistoricalExerciseRecords
     */
    readonly limit?: number;
}

/**
 * Request parameters for klineCandlestickData operation in MarketDataApi.
 * @interface KlineCandlestickDataRequest
 */
export interface KlineCandlestickDataRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiKlineCandlestickData
     */
    readonly symbol: string;

    /**
     * Time interval
     * @type {string}
     * @memberof MarketDataApiKlineCandlestickData
     */
    readonly interval: string;

    /**
     * Start Time, e.g 1593511200000
     * @type {number}
     * @memberof MarketDataApiKlineCandlestickData
     */
    readonly startTime?: number;

    /**
     * End Time, e.g 1593512200000
     * @type {number}
     * @memberof MarketDataApiKlineCandlestickData
     */
    readonly endTime?: number;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiKlineCandlestickData
     */
    readonly limit?: number;
}

/**
 * Request parameters for oldTradesLookup operation in MarketDataApi.
 * @interface OldTradesLookupRequest
 */
export interface OldTradesLookupRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOldTradesLookup
     */
    readonly symbol: string;

    /**
     * The UniqueId ID from which to return. The latest deal record is returned by default
     * @type {number}
     * @memberof MarketDataApiOldTradesLookup
     */
    readonly fromId?: number;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiOldTradesLookup
     */
    readonly limit?: number;
}

/**
 * Request parameters for openInterest operation in MarketDataApi.
 * @interface OpenInterestRequest
 */
export interface OpenInterestRequest {
    /**
     * underlying asset, e.g ETH/BTC
     * @type {string}
     * @memberof MarketDataApiOpenInterest
     */
    readonly underlyingAsset: string;

    /**
     * expiration date, e.g 221225
     * @type {string}
     * @memberof MarketDataApiOpenInterest
     */
    readonly expiration: string;
}

/**
 * Request parameters for optionMarkPrice operation in MarketDataApi.
 * @interface OptionMarkPriceRequest
 */
export interface OptionMarkPriceRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOptionMarkPrice
     */
    readonly symbol?: string;
}

/**
 * Request parameters for orderBook operation in MarketDataApi.
 * @interface OrderBookRequest
 */
export interface OrderBookRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiOrderBook
     */
    readonly symbol: string;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiOrderBook
     */
    readonly limit?: number;
}

/**
 * Request parameters for recentBlockTradesList operation in MarketDataApi.
 * @interface RecentBlockTradesListRequest
 */
export interface RecentBlockTradesListRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiRecentBlockTradesList
     */
    readonly symbol?: string;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiRecentBlockTradesList
     */
    readonly limit?: number;
}

/**
 * Request parameters for recentTradesList operation in MarketDataApi.
 * @interface RecentTradesListRequest
 */
export interface RecentTradesListRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiRecentTradesList
     */
    readonly symbol: string;

    /**
     * Number of result sets returned Default:100 Max:1000
     * @type {number}
     * @memberof MarketDataApiRecentTradesList
     */
    readonly limit?: number;
}

/**
 * Request parameters for symbolPriceTicker operation in MarketDataApi.
 * @interface SymbolPriceTickerRequest
 */
export interface SymbolPriceTickerRequest {
    /**
     * Option underlying, e.g BTCUSDT
     * @type {string}
     * @memberof MarketDataApiSymbolPriceTicker
     */
    readonly underlying: string;
}

/**
 * Request parameters for ticker24hrPriceChangeStatistics operation in MarketDataApi.
 * @interface Ticker24hrPriceChangeStatisticsRequest
 */
export interface Ticker24hrPriceChangeStatisticsRequest {
    /**
     * Option trading pair, e.g BTC-200730-9000-C
     * @type {string}
     * @memberof MarketDataApiTicker24hrPriceChangeStatistics
     */
    readonly symbol?: string;
}

/**
 * MarketDataApi - object-oriented interface
 * @class MarketDataApi
 */
export class MarketDataApi implements MarketDataApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = MarketDataApiAxiosParamCreator(configuration);
    }

    /**
     * Test connectivity to the Rest API and get the current server time.
     *
     * Weight: 1
     *
     * @summary Check Server Time
     * @returns {Promise<RestApiResponse<CheckServerTimeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Check-Server-Time Binance API Documentation}
     */
    public async checkServerTime(): Promise<RestApiResponse<CheckServerTimeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.checkServerTime();
        return sendRequest<CheckServerTimeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Current exchange trading rules and symbol information
     *
     * Weight: 1
     *
     * @summary Exchange Information
     * @returns {Promise<RestApiResponse<ExchangeInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Exchange-Information Binance API Documentation}
     */
    public async exchangeInformation(): Promise<RestApiResponse<ExchangeInformationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.exchangeInformation();
        return sendRequest<ExchangeInformationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get historical exercise records.
     * REALISTIC_VALUE_STRICKEN -> Exercised
     * EXTRINSIC_VALUE_EXPIRED -> Expired OTM
     *
     * Weight: 3
     *
     * @summary Historical Exercise Records
     * @param {HistoricalExerciseRecordsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<HistoricalExerciseRecordsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Historical-Exercise-Records Binance API Documentation}
     */
    public async historicalExerciseRecords(
        requestParameters: HistoricalExerciseRecordsRequest = {}
    ): Promise<RestApiResponse<HistoricalExerciseRecordsResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.historicalExerciseRecords(
            requestParameters?.underlying,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit
        );
        return sendRequest<HistoricalExerciseRecordsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Kline/candlestick bars for an option symbol.
     * Klines are uniquely identified by their open time.
     *
     * If startTime and endTime are not sent, the most recent klines are returned.
     *
     * Weight: 1
     *
     * @summary Kline/Candlestick Data
     * @param {KlineCandlestickDataRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<KlineCandlestickDataResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Kline-Candlestick-Data Binance API Documentation}
     */
    public async klineCandlestickData(
        requestParameters: KlineCandlestickDataRequest
    ): Promise<RestApiResponse<KlineCandlestickDataResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.klineCandlestickData(
            requestParameters?.symbol,
            requestParameters?.interval,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit
        );
        return sendRequest<KlineCandlestickDataResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get older market historical trades.
     *
     * Weight: 20
     *
     * @summary Old Trades Lookup (MARKET_DATA)
     * @param {OldTradesLookupRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OldTradesLookupResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Old-Trades-Lookup Binance API Documentation}
     */
    public async oldTradesLookup(
        requestParameters: OldTradesLookupRequest
    ): Promise<RestApiResponse<OldTradesLookupResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.oldTradesLookup(
            requestParameters?.symbol,
            requestParameters?.fromId,
            requestParameters?.limit
        );
        return sendRequest<OldTradesLookupResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get open interest for specific underlying asset on specific expiration date.
     *
     * Weight: 0
     *
     * @summary Open Interest
     * @param {OpenInterestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OpenInterestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Open-Interest Binance API Documentation}
     */
    public async openInterest(
        requestParameters: OpenInterestRequest
    ): Promise<RestApiResponse<OpenInterestResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.openInterest(
            requestParameters?.underlyingAsset,
            requestParameters?.expiration
        );
        return sendRequest<OpenInterestResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Option mark price and greek info.
     *
     * Weight: 5
     *
     * @summary Option Mark Price
     * @param {OptionMarkPriceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OptionMarkPriceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Option-Mark-Price Binance API Documentation}
     */
    public async optionMarkPrice(
        requestParameters: OptionMarkPriceRequest = {}
    ): Promise<RestApiResponse<OptionMarkPriceResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.optionMarkPrice(
            requestParameters?.symbol
        );
        return sendRequest<OptionMarkPriceResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Check orderbook depth on specific symbol
     *
     * Weight: limit         | weight
     * ------------  | ------------
     * 5, 10, 20, 50 | 2
     * 100           | 5
     * 500           | 10
     * 1000          | 20
     *
     * @summary Order Book
     * @param {OrderBookRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OrderBookResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Order-Book Binance API Documentation}
     */
    public async orderBook(
        requestParameters: OrderBookRequest
    ): Promise<RestApiResponse<OrderBookResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.orderBook(
            requestParameters?.symbol,
            requestParameters?.limit
        );
        return sendRequest<OrderBookResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get recent block trades
     *
     * Weight: 5
     *
     * @summary Recent Block Trades List
     * @param {RecentBlockTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RecentBlockTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Recent-Block-Trade-List Binance API Documentation}
     */
    public async recentBlockTradesList(
        requestParameters: RecentBlockTradesListRequest = {}
    ): Promise<RestApiResponse<RecentBlockTradesListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.recentBlockTradesList(
            requestParameters?.symbol,
            requestParameters?.limit
        );
        return sendRequest<RecentBlockTradesListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get recent market trades
     *
     * Weight: 5
     *
     * @summary Recent Trades List
     * @param {RecentTradesListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RecentTradesListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Recent-Trades-List Binance API Documentation}
     */
    public async recentTradesList(
        requestParameters: RecentTradesListRequest
    ): Promise<RestApiResponse<RecentTradesListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.recentTradesList(
            requestParameters?.symbol,
            requestParameters?.limit
        );
        return sendRequest<RecentTradesListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Get spot index price for option underlying.
     *
     * Weight: 1
     *
     * @summary Symbol Price Ticker
     * @param {SymbolPriceTickerRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SymbolPriceTickerResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Symbol-Price-Ticker Binance API Documentation}
     */
    public async symbolPriceTicker(
        requestParameters: SymbolPriceTickerRequest
    ): Promise<RestApiResponse<SymbolPriceTickerResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.symbolPriceTicker(
            requestParameters?.underlying
        );
        return sendRequest<SymbolPriceTickerResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Test connectivity to the Rest API.
     *
     * Weight: 1
     *
     * @summary Test Connectivity
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/Test-Connectivity Binance API Documentation}
     */
    public async testConnectivity(): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.testConnectivity();
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * 24 hour rolling window price change statistics.
     *
     * Weight: 5
     *
     * @summary 24hr Ticker Price Change Statistics
     * @param {Ticker24hrPriceChangeStatisticsRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof MarketDataApi
     * @see {@link https://developers.binance.com/docs/derivatives/option/market-data/24hr-Ticker-Price-Change-Statistics Binance API Documentation}
     */
    public async ticker24hrPriceChangeStatistics(
        requestParameters: Ticker24hrPriceChangeStatisticsRequest = {}
    ): Promise<RestApiResponse<Ticker24hrPriceChangeStatisticsResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.ticker24hrPriceChangeStatistics(
                requestParameters?.symbol
            );
        return sendRequest<Ticker24hrPriceChangeStatisticsResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }
}
