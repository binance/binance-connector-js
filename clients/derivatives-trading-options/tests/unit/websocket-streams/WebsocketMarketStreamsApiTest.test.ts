/**
 * Binance Derivatives Trading Options WebSocket Market Streams
 *
 * OpenAPI Specification for the Binance Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, describe, it } from '@jest/globals';
import {
    ConfigurationWebsocketStreams,
    WebsocketStreamsBase,
    replaceWebsocketStreamsPlaceholders,
} from '@binance/common';
import {
    IndexPriceStreamsRequest,
    KlineCandlestickStreamsRequest,
    MarkPriceRequest,
    NewSymbolInfoRequest,
    OpenInterestRequest,
    PartialBookDepthStreamsRequest,
    Ticker24HourRequest,
    Ticker24HourByUnderlyingAssetAndExpirationDataRequest,
    TradeStreamsRequest,
} from '../../../src/websocket-streams';
import { WebsocketMarketStreamsApi } from '../../../src/websocket-streams';
import { mockSubscription } from './utils';

describe('WebsocketMarketStreamsApi', () => {
    describe('indexPriceStreams()', () => {
        it('should execute indexPriceStreams() successfully', async () => {
            const params: IndexPriceStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = { e: 'index', E: 1661415480351, s: 'ETHUSDT', p: '1707.89008607' };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@index'.slice(1), params as unknown as Record<string, IndexPriceStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle indexPriceStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: IndexPriceStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = { e: 'index', E: 1661415480351, s: 'ETHUSDT', p: '1707.89008607' };

            const stream = websocketStreamApi.indexPriceStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@index'.slice(1),
                        params as unknown as Record<string, IndexPriceStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: IndexPriceStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.indexPriceStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling indexPriceStreams.'
            );
        });
    });

    describe('klineCandlestickStreams()', () => {
        it('should execute klineCandlestickStreams() successfully', async () => {
            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1638747660000,
                s: 'BTC-200630-9000-P',
                k: {
                    t: 1638747660000,
                    T: 1638747719999,
                    s: 'BTC-200630-9000-P',
                    i: '1m',
                    F: 0,
                    L: 0,
                    o: '1000',
                    c: '1000',
                    h: '1000',
                    l: '1000',
                    v: '0',
                    n: 0,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                },
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@kline_<interval>'.slice(1), params as unknown as Record<string, KlineCandlestickStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle klineCandlestickStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'kline',
                E: 1638747660000,
                s: 'BTC-200630-9000-P',
                k: {
                    t: 1638747660000,
                    T: 1638747719999,
                    s: 'BTC-200630-9000-P',
                    i: '1m',
                    F: 0,
                    L: 0,
                    o: '1000',
                    c: '1000',
                    h: '1000',
                    l: '1000',
                    v: '0',
                    n: 0,
                    x: false,
                    q: '0',
                    V: '0',
                    Q: '0',
                },
            };

            const stream = websocketStreamApi.klineCandlestickStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@kline_<interval>'.slice(1),
                        params as unknown as Record<string, KlineCandlestickStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling klineCandlestickStreams.'
            );
        });

        it('should throw RequiredError when interval is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: KlineCandlestickStreamsRequest = {
                symbol: 'BTCUSDT',
                interval: '1m',
            };
            const params = Object.assign({ ..._params });
            delete params?.interval;

            expect(() => websocketStreamApi.klineCandlestickStreams(params)).toThrow(
                'Required parameter interval was null or undefined when calling klineCandlestickStreams.'
            );
        });
    });

    describe('markPrice()', () => {
        it('should execute markPrice() successfully', async () => {
            const params: MarkPriceRequest = {
                underlyingAsset: 'ETH',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                { e: 'markPrice', E: 1663684594227, s: 'ETH-220930-1500-C', mp: '30.3' },
                { e: 'markPrice', E: 1663684594228, s: 'ETH-220923-1000-C', mp: '341.5' },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<underlyingAsset>@markPrice'.slice(1), params as unknown as Record<string, MarkPriceRequest>)}`,
                mockResponse
            );
        });

        it('should handle markPrice() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: MarkPriceRequest = {
                underlyingAsset: 'ETH',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                { e: 'markPrice', E: 1663684594227, s: 'ETH-220930-1500-C', mp: '30.3' },
                { e: 'markPrice', E: 1663684594228, s: 'ETH-220923-1000-C', mp: '341.5' },
            ];

            const stream = websocketStreamApi.markPrice(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<underlyingAsset>@markPrice'.slice(1),
                        params as unknown as Record<string, MarkPriceRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when underlyingAsset is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: MarkPriceRequest = {
                underlyingAsset: 'ETH',
            };
            const params = Object.assign({ ..._params });
            delete params?.underlyingAsset;

            expect(() => websocketStreamApi.markPrice(params)).toThrow(
                'Required parameter underlyingAsset was null or undefined when calling markPrice.'
            );
        });
    });

    describe('newSymbolInfo()', () => {
        it('should execute newSymbolInfo() successfully', async () => {
            const params: NewSymbolInfoRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'OPTION_PAIR',
                E: 1668573571842,
                u: 'BTCUSDT',
                qa: 'USDT',
                s: 'BTC-221116-21000-C',
                unit: 1,
                mq: '0.01',
                d: 'CALL',
                sp: '21000',
                ed: 1668585600000,
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/option_pair'.slice(1), params as unknown as Record<string, NewSymbolInfoRequest>)}`,
                mockResponse
            );
        });

        it('should handle newSymbolInfo() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: NewSymbolInfoRequest = {
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'OPTION_PAIR',
                E: 1668573571842,
                u: 'BTCUSDT',
                qa: 'USDT',
                s: 'BTC-221116-21000-C',
                unit: 1,
                mq: '0.01',
                d: 'CALL',
                sp: '21000',
                ed: 1668585600000,
            };

            const stream = websocketStreamApi.newSymbolInfo(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/option_pair'.slice(1),
                        params as unknown as Record<string, NewSymbolInfoRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });
    });

    describe('openInterest()', () => {
        it('should execute openInterest() successfully', async () => {
            const params: OpenInterestRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: 'openInterest',
                    E: 1668759300045,
                    s: 'ETH-221125-2700-C',
                    o: '1580.87',
                    h: '1912992.178168204',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<underlyingAsset>@openInterest@<expirationDate>'.slice(1), params as unknown as Record<string, OpenInterestRequest>)}`,
                mockResponse
            );
        });

        it('should handle openInterest() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: OpenInterestRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: 'openInterest',
                    E: 1668759300045,
                    s: 'ETH-221125-2700-C',
                    o: '1580.87',
                    h: '1912992.178168204',
                },
            ];

            const stream = websocketStreamApi.openInterest(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<underlyingAsset>@openInterest@<expirationDate>'.slice(1),
                        params as unknown as Record<string, OpenInterestRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when underlyingAsset is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: OpenInterestRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
            };
            const params = Object.assign({ ..._params });
            delete params?.underlyingAsset;

            expect(() => websocketStreamApi.openInterest(params)).toThrow(
                'Required parameter underlyingAsset was null or undefined when calling openInterest.'
            );
        });

        it('should throw RequiredError when expirationDate is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: OpenInterestRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
            };
            const params = Object.assign({ ..._params });
            delete params?.expirationDate;

            expect(() => websocketStreamApi.openInterest(params)).toThrow(
                'Required parameter expirationDate was null or undefined when calling openInterest.'
            );
        });
    });

    describe('partialBookDepthStreams()', () => {
        it('should execute partialBookDepthStreams() successfully', async () => {
            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depth',
                E: 1591695934010,
                T: 1591695934000,
                s: 'BTC-200630-9000-P',
                u: 162,
                pu: 162,
                b: [
                    ['200', '3'],
                    ['101', '1'],
                    ['100', '2'],
                ],
                a: [['1000', '89']],
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@depth<levels><updateSpeed>'.slice(1), params as unknown as Record<string, PartialBookDepthStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle partialBookDepthStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
                id: 'e9d6b4349871b40611412680b3445fac',
                updateSpeed: 'updateSpeed_example',
            };

            const mockResponse = {
                e: 'depth',
                E: 1591695934010,
                T: 1591695934000,
                s: 'BTC-200630-9000-P',
                u: 162,
                pu: 162,
                b: [
                    ['200', '3'],
                    ['101', '1'],
                    ['100', '2'],
                ],
                a: [['1000', '89']],
            };

            const stream = websocketStreamApi.partialBookDepthStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@depth<levels><updateSpeed>'.slice(1),
                        params as unknown as Record<string, PartialBookDepthStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling partialBookDepthStreams.'
            );
        });

        it('should throw RequiredError when levels is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: PartialBookDepthStreamsRequest = {
                symbol: 'BTCUSDT',
                levels: 10,
            };
            const params = Object.assign({ ..._params });
            delete params?.levels;

            expect(() => websocketStreamApi.partialBookDepthStreams(params)).toThrow(
                'Required parameter levels was null or undefined when calling partialBookDepthStreams.'
            );
        });
    });

    describe('ticker24Hour()', () => {
        it('should execute ticker24Hour() successfully', async () => {
            const params: Ticker24HourRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1657706425200,
                T: 1657706425220,
                s: 'BTC-220930-18000-C',
                o: '2000',
                h: '2020',
                l: '2000',
                c: '2020',
                V: '1.42',
                A: '2841',
                P: '0.01',
                p: '20',
                Q: '0.01',
                F: '27',
                L: '48',
                n: 22,
                bo: '2012',
                ao: '2020',
                bq: '4.9',
                aq: '0.03',
                b: '0.1202',
                a: '0.1318',
                d: '0.98911',
                t: '-0.16961',
                g: '0.00004',
                v: '2.66584',
                vo: '0.10001',
                mp: '2003.5102',
                hl: '2023.511',
                ll: '1983.511',
                eep: '0',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@ticker'.slice(1), params as unknown as Record<string, Ticker24HourRequest>)}`,
                mockResponse
            );
        });

        it('should handle ticker24Hour() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: Ticker24HourRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: '24hrTicker',
                E: 1657706425200,
                T: 1657706425220,
                s: 'BTC-220930-18000-C',
                o: '2000',
                h: '2020',
                l: '2000',
                c: '2020',
                V: '1.42',
                A: '2841',
                P: '0.01',
                p: '20',
                Q: '0.01',
                F: '27',
                L: '48',
                n: 22,
                bo: '2012',
                ao: '2020',
                bq: '4.9',
                aq: '0.03',
                b: '0.1202',
                a: '0.1318',
                d: '0.98911',
                t: '-0.16961',
                g: '0.00004',
                v: '2.66584',
                vo: '0.10001',
                mp: '2003.5102',
                hl: '2023.511',
                ll: '1983.511',
                eep: '0',
            };

            const stream = websocketStreamApi.ticker24Hour(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@ticker'.slice(1),
                        params as unknown as Record<string, Ticker24HourRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: Ticker24HourRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.ticker24Hour(params)).toThrow(
                'Required parameter symbol was null or undefined when calling ticker24Hour.'
            );
        });
    });

    describe('ticker24HourByUnderlyingAssetAndExpirationData()', () => {
        it('should execute ticker24HourByUnderlyingAssetAndExpirationData() successfully', async () => {
            const params: Ticker24HourByUnderlyingAssetAndExpirationDataRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1657706425200,
                    T: 1657706425220,
                    s: 'ETH-220930-1600-C',
                    o: '2000',
                    h: '2020',
                    l: '2000',
                    c: '2020',
                    V: '1.42',
                    A: '2841',
                    P: '0.01',
                    p: '20',
                    Q: '0.01',
                    F: '27',
                    L: '48',
                    n: 22,
                    bo: '2012',
                    ao: '2020',
                    bq: '4.9',
                    aq: '0.03',
                    b: '0.1202',
                    a: '0.1318',
                    d: '0.98911',
                    t: '-0.16961',
                    g: '0.00004',
                    v: '2.66584',
                    vo: '0.10001',
                    mp: '2003.5102',
                    hl: '2023.511',
                    ll: '1983.511',
                    eep: '0',
                },
                {
                    e: '24hrTicker',
                    E: 1663685112123,
                    s: 'ETH-220930-1500-C',
                    o: '34.9',
                    h: '44.6',
                    l: '26.8',
                    c: '26.8',
                    V: '11.84',
                    A: '444.37',
                    P: '-0.232',
                    p: '-8.1',
                    Q: '0',
                    F: '91',
                    L: '129',
                    n: 39,
                    bo: '26.8',
                    ao: '33.9',
                    bq: '0.65',
                    aq: '0.01',
                    b: '0.88790536',
                    a: '0.98729014',
                    d: '0.2621153',
                    t: '-3.44806807',
                    g: '0.00158298',
                    v: '0.7148147',
                    vo: '0.93759775',
                    mp: '30.3',
                    hl: '228.7',
                    ll: '0.1',
                    eep: '0',
                },
            ];

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<underlyingAsset>@ticker@<expirationDate>'.slice(1), params as unknown as Record<string, Ticker24HourByUnderlyingAssetAndExpirationDataRequest>)}`,
                mockResponse
            );
        });

        it('should handle ticker24HourByUnderlyingAssetAndExpirationData() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: Ticker24HourByUnderlyingAssetAndExpirationDataRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = [
                {
                    e: '24hrTicker',
                    E: 1657706425200,
                    T: 1657706425220,
                    s: 'ETH-220930-1600-C',
                    o: '2000',
                    h: '2020',
                    l: '2000',
                    c: '2020',
                    V: '1.42',
                    A: '2841',
                    P: '0.01',
                    p: '20',
                    Q: '0.01',
                    F: '27',
                    L: '48',
                    n: 22,
                    bo: '2012',
                    ao: '2020',
                    bq: '4.9',
                    aq: '0.03',
                    b: '0.1202',
                    a: '0.1318',
                    d: '0.98911',
                    t: '-0.16961',
                    g: '0.00004',
                    v: '2.66584',
                    vo: '0.10001',
                    mp: '2003.5102',
                    hl: '2023.511',
                    ll: '1983.511',
                    eep: '0',
                },
                {
                    e: '24hrTicker',
                    E: 1663685112123,
                    s: 'ETH-220930-1500-C',
                    o: '34.9',
                    h: '44.6',
                    l: '26.8',
                    c: '26.8',
                    V: '11.84',
                    A: '444.37',
                    P: '-0.232',
                    p: '-8.1',
                    Q: '0',
                    F: '91',
                    L: '129',
                    n: 39,
                    bo: '26.8',
                    ao: '33.9',
                    bq: '0.65',
                    aq: '0.01',
                    b: '0.88790536',
                    a: '0.98729014',
                    d: '0.2621153',
                    t: '-3.44806807',
                    g: '0.00158298',
                    v: '0.7148147',
                    vo: '0.93759775',
                    mp: '30.3',
                    hl: '228.7',
                    ll: '0.1',
                    eep: '0',
                },
            ];

            const stream =
                websocketStreamApi.ticker24HourByUnderlyingAssetAndExpirationData(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<underlyingAsset>@ticker@<expirationDate>'.slice(1),
                        params as unknown as Record<
                            string,
                            Ticker24HourByUnderlyingAssetAndExpirationDataRequest
                        >
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when underlyingAsset is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: Ticker24HourByUnderlyingAssetAndExpirationDataRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
            };
            const params = Object.assign({ ..._params });
            delete params?.underlyingAsset;

            expect(() =>
                websocketStreamApi.ticker24HourByUnderlyingAssetAndExpirationData(params)
            ).toThrow(
                'Required parameter underlyingAsset was null or undefined when calling ticker24HourByUnderlyingAssetAndExpirationData.'
            );
        });

        it('should throw RequiredError when expirationDate is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: Ticker24HourByUnderlyingAssetAndExpirationDataRequest = {
                underlyingAsset: 'ETH',
                expirationDate: '220930',
            };
            const params = Object.assign({ ..._params });
            delete params?.expirationDate;

            expect(() =>
                websocketStreamApi.ticker24HourByUnderlyingAssetAndExpirationData(params)
            ).toThrow(
                'Required parameter expirationDate was null or undefined when calling ticker24HourByUnderlyingAssetAndExpirationData.'
            );
        });
    });

    describe('tradeStreams()', () => {
        it('should execute tradeStreams() successfully', async () => {
            const params: TradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'trade',
                E: 1591677941092,
                s: 'BTC-200630-9000-P',
                t: 1,
                p: '1000',
                q: '-2',
                b: 4611781675939004000,
                a: 4611781675939004000,
                T: 1591677567872,
                S: '-1',
                X: 'MARKET',
            };

            mockSubscription(
                `ws/${replaceWebsocketStreamsPlaceholders('/<symbol>@trade'.slice(1), params as unknown as Record<string, TradeStreamsRequest>)}`,
                mockResponse
            );
        });

        it('should handle tradeStreams() WebSocket stream data', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const params: TradeStreamsRequest = {
                symbol: 'BTCUSDT',
                id: 'e9d6b4349871b40611412680b3445fac',
            };

            const mockResponse = {
                e: 'trade',
                E: 1591677941092,
                s: 'BTC-200630-9000-P',
                t: 1,
                p: '1000',
                q: '-2',
                b: 4611781675939004000,
                a: 4611781675939004000,
                T: 1591677567872,
                S: '-1',
                X: 'MARKET',
            };

            const stream = websocketStreamApi.tradeStreams(params);
            const mockCallback = jest.fn();
            stream.on('message', mockCallback);

            websocketStreamClient['onMessage'](
                JSON.stringify({
                    stream: replaceWebsocketStreamsPlaceholders(
                        '/<symbol>@trade'.slice(1),
                        params as unknown as Record<string, TradeStreamsRequest>
                    ),
                    data: mockResponse,
                }),
                websocketStreamClient.connectionPool[0]
            );

            expect(mockCallback).toHaveBeenCalledWith(mockResponse);
        });

        it('should throw RequiredError when symbol is missing', () => {
            const configuration = new ConfigurationWebsocketStreams({});
            const websocketStreamClient = new WebsocketStreamsBase(configuration);
            const websocketStreamApi = new WebsocketMarketStreamsApi(websocketStreamClient);

            const _params: TradeStreamsRequest = {
                symbol: 'BTCUSDT',
            };
            const params = Object.assign({ ..._params });
            delete params?.symbol;

            expect(() => websocketStreamApi.tradeStreams(params)).toThrow(
                'Required parameter symbol was null or undefined when calling tradeStreams.'
            );
        });
    });
});
