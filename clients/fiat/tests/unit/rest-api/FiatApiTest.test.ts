/**
 * Binance Public Fiat REST API
 *
 * OpenAPI Specification for the Binance Public Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { FiatApi } from '../../../src/rest-api';
import {
    GetFiatDepositWithdrawHistoryRequest,
    GetFiatPaymentsHistoryRequest,
} from '../../../src/rest-api';
import type {
    GetFiatDepositWithdrawHistoryResponse,
    GetFiatPaymentsHistoryResponse,
} from '../../../src/rest-api/types';

describe('FiatApi', () => {
    let client: FiatApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new FiatApi(config);
    });

    describe('getFiatDepositWithdrawHistory()', () => {
        it('should execute getFiatDepositWithdrawHistory() successfully with required parameters only', async () => {
            const params: GetFiatDepositWithdrawHistoryRequest = {
                transactionType: 'transactionType_example',
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNo: '7d76d611-0568-4f43-afb6-24cac7767365',
                        fiatCurrency: 'BRL',
                        indicatedAmount: '10.00',
                        amount: '10.00',
                        totalFee: '0.00',
                        method: 'BankAccount',
                        status: 'Expired',
                        createTime: 1626144956000,
                        updateTime: 1626400907000,
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getFiatDepositWithdrawHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFiatDepositWithdrawHistoryResponse>)
            );
            const response = await client.getFiatDepositWithdrawHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getFiatDepositWithdrawHistory() successfully with optional parameters', async () => {
            const params: GetFiatDepositWithdrawHistoryRequest = {
                transactionType: 'transactionType_example',
                beginTime: 789,
                endTime: 1641782889000,
                page: 1,
                rows: 100,
                recvWindow: 5000,
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNo: '7d76d611-0568-4f43-afb6-24cac7767365',
                        fiatCurrency: 'BRL',
                        indicatedAmount: '10.00',
                        amount: '10.00',
                        totalFee: '0.00',
                        method: 'BankAccount',
                        status: 'Expired',
                        createTime: 1626144956000,
                        updateTime: 1626400907000,
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getFiatDepositWithdrawHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFiatDepositWithdrawHistoryResponse>)
            );
            const response = await client.getFiatDepositWithdrawHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when transactionType is missing', async () => {
            const _params: GetFiatDepositWithdrawHistoryRequest = {
                transactionType: 'transactionType_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.transactionType;

            await expect(client.getFiatDepositWithdrawHistory(params)).rejects.toThrow(
                'Required parameter transactionType was null or undefined when calling getFiatDepositWithdrawHistory.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: GetFiatDepositWithdrawHistoryRequest = {
                transactionType: 'transactionType_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getFiatDepositWithdrawHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getFiatDepositWithdrawHistory(params)).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });

    describe('getFiatPaymentsHistory()', () => {
        it('should execute getFiatPaymentsHistory() successfully with required parameters only', async () => {
            const params: GetFiatPaymentsHistoryRequest = {
                transactionType: 'transactionType_example',
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNo: '353fca443f06466db0c4dc89f94f027a',
                        sourceAmount: '20.0',
                        fiatCurrency: 'EUR',
                        obtainAmount: '4.462',
                        cryptoCurrency: 'LUNA',
                        totalFee: '0.2',
                        price: '4.437472',
                        status: 'Failed',
                        paymentMethod: 'Credit Card',
                        createTime: 1624529919000,
                        updateTime: 1624529919000,
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getFiatPaymentsHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFiatPaymentsHistoryResponse>)
            );
            const response = await client.getFiatPaymentsHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getFiatPaymentsHistory() successfully with optional parameters', async () => {
            const params: GetFiatPaymentsHistoryRequest = {
                transactionType: 'transactionType_example',
                beginTime: 789,
                endTime: 1641782889000,
                page: 1,
                rows: 100,
                recvWindow: 5000,
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    {
                        orderNo: '353fca443f06466db0c4dc89f94f027a',
                        sourceAmount: '20.0',
                        fiatCurrency: 'EUR',
                        obtainAmount: '4.462',
                        cryptoCurrency: 'LUNA',
                        totalFee: '0.2',
                        price: '4.437472',
                        status: 'Failed',
                        paymentMethod: 'Credit Card',
                        createTime: 1624529919000,
                        updateTime: 1624529919000,
                    },
                ],
                total: 1,
                success: true,
            };

            const spy = jest.spyOn(client, 'getFiatPaymentsHistory').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFiatPaymentsHistoryResponse>)
            );
            const response = await client.getFiatPaymentsHistory(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw RequiredError when transactionType is missing', async () => {
            const _params: GetFiatPaymentsHistoryRequest = {
                transactionType: 'transactionType_example',
            };
            const params = Object.assign({ ..._params });
            delete params?.transactionType;

            await expect(client.getFiatPaymentsHistory(params)).rejects.toThrow(
                'Required parameter transactionType was null or undefined when calling getFiatPaymentsHistory.'
            );
        });

        it('should throw an error when server is returning an error', async () => {
            const params: GetFiatPaymentsHistoryRequest = {
                transactionType: 'transactionType_example',
            };

            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getFiatPaymentsHistory')
                .mockRejectedValueOnce(mockError);
            await expect(client.getFiatPaymentsHistory(params)).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });
});
