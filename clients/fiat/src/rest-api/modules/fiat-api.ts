/**
 * Binance Public Fiat REST API
 *
 * OpenAPI Specification for the Binance Public Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetFiatDepositWithdrawHistoryResponse,
    GetFiatPaymentsHistoryResponse,
} from '../types';

/**
 * FiatApi - axios parameter creator
 */
const FiatApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Fiat Deposit/Withdraw History
         *
         * If beginTime and endTime are not sent, the recent 30-day data will be returned.
         *
         * Weight: 90000
         *
         * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
         * @param {string} transactionType 0-buy,1-sell
         * @param {number} [beginTime]
         * @param {number} [endTime]
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFiatDepositWithdrawHistory: async (
            transactionType: string,
            beginTime?: number,
            endTime?: number,
            page?: number,
            rows?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'transactionType' is not null or undefined
            assertParamExists('getFiatDepositWithdrawHistory', 'transactionType', transactionType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (transactionType !== undefined && transactionType !== null) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (beginTime !== undefined && beginTime !== null) {
                localVarQueryParameter['beginTime'] = beginTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (rows !== undefined && rows !== null) {
                localVarQueryParameter['rows'] = rows;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/fiat/orders',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Fiat Deposit/Withdraw History
         *
         * If beginTime and endTime are not sent, the recent 30-day data will be returned.
         * paymentMethod: Only when requesting payments history for buy (transactionType=0), response contains paymentMethod representing the way of purchase. Now we have:
         * Cash Balance
         * Credit Card
         * Online Banking
         * Bank Transfer
         *
         * Weight: 1
         *
         * @summary Get Fiat Payments History (USER_DATA)
         * @param {string} transactionType 0-buy,1-sell
         * @param {number} [beginTime]
         * @param {number} [endTime]
         * @param {number} [page] default 1
         * @param {number} [rows] default 100, max 500
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFiatPaymentsHistory: async (
            transactionType: string,
            beginTime?: number,
            endTime?: number,
            page?: number,
            rows?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'transactionType' is not null or undefined
            assertParamExists('getFiatPaymentsHistory', 'transactionType', transactionType);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (transactionType !== undefined && transactionType !== null) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (beginTime !== undefined && beginTime !== null) {
                localVarQueryParameter['beginTime'] = beginTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined && page !== null) {
                localVarQueryParameter['page'] = page;
            }

            if (rows !== undefined && rows !== null) {
                localVarQueryParameter['rows'] = rows;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/fiat/payments',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * FiatApi - interface
 * @interface FiatApi
 */
export interface FiatApiInterface {
    /**
     * Get Fiat Deposit/Withdraw History
     *
     * If beginTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 90000
     *
     * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
     * @param {GetFiatDepositWithdrawHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FiatApiInterface
     */
    getFiatDepositWithdrawHistory(
        requestParameters: GetFiatDepositWithdrawHistoryRequest
    ): Promise<RestApiResponse<GetFiatDepositWithdrawHistoryResponse>>;
    /**
     * Get Fiat Deposit/Withdraw History
     *
     * If beginTime and endTime are not sent, the recent 30-day data will be returned.
     * paymentMethod: Only when requesting payments history for buy (transactionType=0), response contains paymentMethod representing the way of purchase. Now we have:
     * Cash Balance
     * Credit Card
     * Online Banking
     * Bank Transfer
     *
     * Weight: 1
     *
     * @summary Get Fiat Payments History (USER_DATA)
     * @param {GetFiatPaymentsHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FiatApiInterface
     */
    getFiatPaymentsHistory(
        requestParameters: GetFiatPaymentsHistoryRequest
    ): Promise<RestApiResponse<GetFiatPaymentsHistoryResponse>>;
}

/**
 * Request parameters for getFiatDepositWithdrawHistory operation in FiatApi.
 * @interface GetFiatDepositWithdrawHistoryRequest
 */
export interface GetFiatDepositWithdrawHistoryRequest {
    /**
     * 0-buy,1-sell
     * @type {string}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly transactionType: string;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly beginTime?: number;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly endTime?: number;

    /**
     * default 1
     * @type {number}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly page?: number;

    /**
     * default 100, max 500
     * @type {number}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly rows?: number;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatDepositWithdrawHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFiatPaymentsHistory operation in FiatApi.
 * @interface GetFiatPaymentsHistoryRequest
 */
export interface GetFiatPaymentsHistoryRequest {
    /**
     * 0-buy,1-sell
     * @type {string}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly transactionType: string;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly beginTime?: number;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly endTime?: number;

    /**
     * default 1
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly page?: number;

    /**
     * default 100, max 500
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly rows?: number;

    /**
     *
     * @type {number}
     * @memberof FiatApiGetFiatPaymentsHistory
     */
    readonly recvWindow?: number;
}

/**
 * FiatApi - object-oriented interface
 * @class FiatApi
 */
export class FiatApi implements FiatApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = FiatApiAxiosParamCreator(configuration);
    }

    /**
     * Get Fiat Deposit/Withdraw History
     *
     * If beginTime and endTime are not sent, the recent 30-day data will be returned.
     *
     * Weight: 90000
     *
     * @summary Get Fiat Deposit/Withdraw History (USER_DATA)
     * @param {GetFiatDepositWithdrawHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFiatDepositWithdrawHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FiatApi
     * @see {@link https://developers.binance.com/docs/fiat/rest-api/Get-Fiat-Deposit-Withdraw-History Binance API Documentation}
     */
    public async getFiatDepositWithdrawHistory(
        requestParameters: GetFiatDepositWithdrawHistoryRequest
    ): Promise<RestApiResponse<GetFiatDepositWithdrawHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFiatDepositWithdrawHistory(
                requestParameters?.transactionType,
                requestParameters?.beginTime,
                requestParameters?.endTime,
                requestParameters?.page,
                requestParameters?.rows,
                requestParameters?.recvWindow
            );
        return sendRequest<GetFiatDepositWithdrawHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Fiat Deposit/Withdraw History
     *
     * If beginTime and endTime are not sent, the recent 30-day data will be returned.
     * paymentMethod: Only when requesting payments history for buy (transactionType=0), response contains paymentMethod representing the way of purchase. Now we have:
     * Cash Balance
     * Credit Card
     * Online Banking
     * Bank Transfer
     *
     * Weight: 1
     *
     * @summary Get Fiat Payments History (USER_DATA)
     * @param {GetFiatPaymentsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFiatPaymentsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FiatApi
     * @see {@link https://developers.binance.com/docs/fiat/rest-api/Get-Fiat-Payments-History Binance API Documentation}
     */
    public async getFiatPaymentsHistory(
        requestParameters: GetFiatPaymentsHistoryRequest
    ): Promise<RestApiResponse<GetFiatPaymentsHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFiatPaymentsHistory(
            requestParameters?.transactionType,
            requestParameters?.beginTime,
            requestParameters?.endTime,
            requestParameters?.page,
            requestParameters?.rows,
            requestParameters?.recvWindow
        );
        return sendRequest<GetFiatPaymentsHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
