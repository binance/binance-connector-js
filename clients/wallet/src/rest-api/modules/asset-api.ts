/**
 * Binance Wallet REST API
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AssetDetailResponse,
    AssetDividendRecordResponse,
    DustTransferResponse,
    DustlogResponse,
    FundingWalletResponse,
    GetAssetsThatCanBeConvertedIntoBnbResponse,
    GetCloudMiningPaymentAndRefundHistoryResponse,
    GetOpenSymbolListResponse,
    QueryUserDelegationHistoryResponse,
    QueryUserUniversalTransferHistoryResponse,
    QueryUserWalletBalanceResponse,
    ToggleBnbBurnOnSpotTradeAndMarginInterestResponse,
    TradeFeeResponse,
    UserAssetResponse,
    UserUniversalTransferResponse,
} from '../types';

/**
 * AssetApi - axios parameter creator
 */
const AssetApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Fetch details of assets supported on Binance.
         *
         *
         * Please get network and other deposit or withdraw details from ``GET /sapi/v1/capital/config/getall``.
         *
         * Weight: 1
         *
         * @summary Asset Detail (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        assetDetail: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/assetDetail',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query asset dividend record.
         *
         *
         * There cannot be more than 180 days between parameter `startTime` and `endTime`.
         *
         * Weight: 10
         *
         * @summary Asset Dividend Record (USER_DATA)
         * @param {string} [asset] If asset is blank, then query all positive assets user have.
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        assetDividendRecord: async (
            asset?: string,
            startTime?: number,
            endTime?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/assetDividend',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Convert dust assets to BNB.
         *
         * You need to open`Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
         *
         * Weight: 10
         *
         * @summary Dust Transfer (USER_DATA)
         * @param {string} asset
         * @param {string} [accountType] `SPOT` or `MARGIN`,default `SPOT`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        dustTransfer: async (
            asset: string,
            accountType?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('dustTransfer', 'asset', asset);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (accountType !== undefined && accountType !== null) {
                localVarQueryParameter['accountType'] = accountType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/dust',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Dustlog
         *
         * Only return last 100 records
         * Only return records after 2020/12/01
         *
         * Weight: 1
         *
         * @summary DustLog(USER_DATA)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        dustlog: async (
            startTime?: number,
            endTime?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/dribblet',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query Funding Wallet
         *
         *
         * Currently supports querying the following business assetsï¼šBinance Pay, Binance Card, Binance Gift Card, Stock Token
         *
         * Weight: 1
         *
         * @summary Funding Wallet (USER_DATA)
         * @param {string} [asset] If asset is blank, then query all positive assets user have.
         * @param {string} [needBtcValuation] true or false
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        fundingWallet: async (
            asset?: string,
            needBtcValuation?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (needBtcValuation !== undefined && needBtcValuation !== null) {
                localVarQueryParameter['needBtcValuation'] = needBtcValuation;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/get-funding-asset',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Assets That Can Be Converted Into BNB
         *
         * Weight: 1
         *
         * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @param {string} [accountType] `SPOT` or `MARGIN`,default `SPOT`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getAssetsThatCanBeConvertedIntoBnb: async (
            accountType?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (accountType !== undefined && accountType !== null) {
                localVarQueryParameter['accountType'] = accountType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/dust-btc',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * The query of Cloud-Mining payment and refund history
         *
         * Just return the SUCCESS records of payment and refund.
         * For response, type = 248 means payment, type = 249 means refund, status =S means SUCCESS.
         *
         * Weight: 600
         *
         * @summary Get Cloud-Mining payment and refund history (USER_DATA)
         * @param {number} startTime
         * @param {number} endTime
         * @param {number} [tranId] The transaction id
         * @param {string} [clientTranId] The unique flag
         * @param {string} [asset] If asset is blank, then query all positive assets user have.
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         *
         * @throws {RequiredError}
         */
        getCloudMiningPaymentAndRefundHistory: async (
            startTime: number,
            endTime: number,
            tranId?: number,
            clientTranId?: string,
            asset?: string,
            current?: number,
            size?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getCloudMiningPaymentAndRefundHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getCloudMiningPaymentAndRefundHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (tranId !== undefined && tranId !== null) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (clientTranId !== undefined && clientTranId !== null) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get the list of symbols that are scheduled to be opened for trading in the market.
         *
         * Weight: 100
         *
         * @summary Get Open Symbol List (MARKET_DATA)
         *
         * @throws {RequiredError}
         */
        getOpenSymbolList: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/spot/open-symbol-list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query User Delegation History
         *
         * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint
         *
         * Weight: 60
         *
         * @summary Query User Delegation History(For Master Account)(USER_DATA)
         * @param {string} email
         * @param {number} startTime
         * @param {number} endTime
         * @param {string} [type] Delegate/Undelegate
         * @param {string} [asset] If asset is blank, then query all positive assets user have.
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryUserDelegationHistory: async (
            email: string,
            startTime: number,
            endTime: number,
            type?: string,
            asset?: string,
            current?: number,
            size?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('queryUserDelegationHistory', 'email', email);
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('queryUserDelegationHistory', 'startTime', startTime);
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('queryUserDelegationHistory', 'endTime', endTime);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (email !== undefined && email !== null) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/custody/transfer-history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query User Universal Transfer History
         *
         *
         *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         * Support query within the last 6 months only
         * If `startTime`and `endTime` not sent, return records of the last 7 days by default
         *
         * Weight: 1
         *
         * @summary Query User Universal Transfer History(USER_DATA)
         * @param {string} type
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [current] current page, default 1, the min value is 1
         * @param {number} [size] page size, default 10, the max value is 100
         * @param {string} [fromSymbol]
         * @param {string} [toSymbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryUserUniversalTransferHistory: async (
            type: string,
            startTime?: number,
            endTime?: number,
            current?: number,
            size?: number,
            fromSymbol?: string,
            toSymbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('queryUserUniversalTransferHistory', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined && current !== null) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined && size !== null) {
                localVarQueryParameter['size'] = size;
            }

            if (fromSymbol !== undefined && fromSymbol !== null) {
                localVarQueryParameter['fromSymbol'] = fromSymbol;
            }

            if (toSymbol !== undefined && toSymbol !== null) {
                localVarQueryParameter['toSymbol'] = toSymbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/transfer',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Query User Wallet Balance
         *
         *
         * You need to open Permits Universal Transfer permission for the API Key which requests this endpoint.
         *
         * Weight: 60
         *
         * @summary Query User Wallet Balance (USER_DATA)
         * @param {string} [quoteAsset] `USDT`, `ETH`, `USDC`, `BNB`, etc. default `BTC`
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        queryUserWalletBalance: async (
            quoteAsset?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (quoteAsset !== undefined && quoteAsset !== null) {
                localVarQueryParameter['quoteAsset'] = quoteAsset;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/wallet/balance',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest
         *
         * "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
         *
         * Weight: 1(IP)
         *
         * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @param {string} [spotBNBBurn] "true" or "false"; Determines whether to use BNB to pay for trading fees on SPOT
         * @param {string} [interestBNBBurn] "true" or "false"; Determines whether to use BNB to pay for margin loan's interest
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        toggleBnbBurnOnSpotTradeAndMarginInterest: async (
            spotBNBBurn?: string,
            interestBNBBurn?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (spotBNBBurn !== undefined && spotBNBBurn !== null) {
                localVarQueryParameter['spotBNBBurn'] = spotBNBBurn;
            }

            if (interestBNBBurn !== undefined && interestBNBBurn !== null) {
                localVarQueryParameter['interestBNBBurn'] = interestBNBBurn;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/bnbBurn',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch trade fee
         *
         * Weight: 1
         *
         * @summary Trade Fee (USER_DATA)
         * @param {string} [symbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        tradeFee: async (symbol?: string, recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (symbol !== undefined && symbol !== null) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/tradeFee',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get user assets, just for positive data.
         *
         * If asset is set, then return this asset, otherwise return all assets positive.
         * If needBtcValuation is set, then return btcValudation.
         *
         * Weight: 5
         *
         * @summary User Asset (USER_DATA)
         * @param {string} [asset] If asset is blank, then query all positive assets user have.
         * @param {boolean} [needBtcValuation] Whether need btc valuation or not.
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        userAsset: async (
            asset?: string,
            needBtcValuation?: boolean,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (needBtcValuation !== undefined && needBtcValuation !== null) {
                localVarQueryParameter['needBtcValuation'] = needBtcValuation;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v3/asset/getUserAsset',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * user universal transfer
         *
         *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         * ENUM of transfer types:
         * MAIN_UMFUTURE   Spot account transfer to USDâ“ˆ-M Futures account
         * MAIN_CMFUTURE   Spot account transfer to COIN-M Futures account
         * MAIN_MARGIN   Spot account transfer to Marginï¼ˆcrossï¼‰account
         * UMFUTURE_MAIN   USDâ“ˆ-M Futures account transfer to Spot account
         * UMFUTURE_MARGIN   USDâ“ˆ-M Futures account transfer to Marginï¼ˆcrossï¼‰account
         * CMFUTURE_MAIN   COIN-M Futures account transfer to Spot account
         * CMFUTURE_MARGIN   COIN-M Futures account transfer to Margin(cross) account
         * MARGIN_MAIN   Marginï¼ˆcrossï¼‰account transfer to Spot account
         * MARGIN_UMFUTURE   Marginï¼ˆcrossï¼‰account transfer to USDâ“ˆ-M Futures
         * MARGIN_CMFUTURE   Marginï¼ˆcrossï¼‰account transfer to COIN-M Futures
         * ISOLATEDMARGIN_MARGIN   Isolated margin account transfer to Margin(cross) account
         * MARGIN_ISOLATEDMARGIN   Margin(cross) account transfer to Isolated margin account
         * ISOLATEDMARGIN_ISOLATEDMARGIN   Isolated margin account transfer to Isolated margin account
         * MAIN_FUNDING   Spot account transfer to Funding account
         * FUNDING_MAIN   Funding account transfer to Spot account
         * FUNDING_UMFUTURE   Funding account transfer to UMFUTURE account
         * UMFUTURE_FUNDING   UMFUTURE account transfer to Funding account
         * MARGIN_FUNDING   MARGIN account transfer to Funding account
         * FUNDING_MARGIN   Funding account transfer to Margin account
         * FUNDING_CMFUTURE   Funding account transfer to CMFUTURE account
         * CMFUTURE_FUNDING   CMFUTURE account transfer to Funding account
         * MAIN_OPTION  Spot account transfer to Options account
         * OPTION_MAIN  Options account transfer to Spot account
         * UMFUTURE_OPTION USDâ“ˆ-M Futures account transfer to Options account
         * OPTION_UMFUTURE Options account transfer to USDâ“ˆ-M Futures account
         * MARGIN_OPTION  Marginï¼ˆcrossï¼‰account transfer to Options account
         * OPTION_MARGIN  Options account transfer to Marginï¼ˆcrossï¼‰account
         * FUNDING_OPTION   Funding account transfer to Options account
         * OPTION_FUNDING   Options account transfer to Funding account
         * MAIN_PORTFOLIO_MARGIN  Spot account transfer to Portfolio Margin account
         * PORTFOLIO_MARGIN_MAIN  Portfolio Margin account transfer to Spot account
         *
         * Weight: 900
         *
         * @summary User Universal Transfer (USER_DATA)
         * @param {string} type
         * @param {string} asset
         * @param {number} amount
         * @param {string} [fromSymbol]
         * @param {string} [toSymbol]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        userUniversalTransfer: async (
            type: string,
            asset: string,
            amount: number,
            fromSymbol?: string,
            toSymbol?: string,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('userUniversalTransfer', 'type', type);
            // verify required parameter 'asset' is not null or undefined
            assertParamExists('userUniversalTransfer', 'asset', asset);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('userUniversalTransfer', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (asset !== undefined && asset !== null) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (fromSymbol !== undefined && fromSymbol !== null) {
                localVarQueryParameter['fromSymbol'] = fromSymbol;
            }

            if (toSymbol !== undefined && toSymbol !== null) {
                localVarQueryParameter['toSymbol'] = toSymbol;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/asset/transfer',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AssetApi - interface
 * @interface AssetApi
 */
export interface AssetApiInterface {
    /**
     * Fetch details of assets supported on Binance.
     *
     *
     * Please get network and other deposit or withdraw details from ``GET /sapi/v1/capital/config/getall``.
     *
     * Weight: 1
     *
     * @summary Asset Detail (USER_DATA)
     * @param {AssetDetailRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    assetDetail(
        requestParameters?: AssetDetailRequest
    ): Promise<RestApiResponse<AssetDetailResponse>>;
    /**
     * Query asset dividend record.
     *
     *
     * There cannot be more than 180 days between parameter `startTime` and `endTime`.
     *
     * Weight: 10
     *
     * @summary Asset Dividend Record (USER_DATA)
     * @param {AssetDividendRecordRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    assetDividendRecord(
        requestParameters?: AssetDividendRecordRequest
    ): Promise<RestApiResponse<AssetDividendRecordResponse>>;
    /**
     * Convert dust assets to BNB.
     *
     * You need to open`Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 10
     *
     * @summary Dust Transfer (USER_DATA)
     * @param {DustTransferRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    dustTransfer(
        requestParameters: DustTransferRequest
    ): Promise<RestApiResponse<DustTransferResponse>>;
    /**
     * Dustlog
     *
     * Only return last 100 records
     * Only return records after 2020/12/01
     *
     * Weight: 1
     *
     * @summary DustLog(USER_DATA)
     * @param {DustlogRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    dustlog(requestParameters?: DustlogRequest): Promise<RestApiResponse<DustlogResponse>>;
    /**
     * Query Funding Wallet
     *
     *
     * Currently supports querying the following business assetsï¼šBinance Pay, Binance Card, Binance Gift Card, Stock Token
     *
     * Weight: 1
     *
     * @summary Funding Wallet (USER_DATA)
     * @param {FundingWalletRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    fundingWallet(
        requestParameters?: FundingWalletRequest
    ): Promise<RestApiResponse<FundingWalletResponse>>;
    /**
     * Get Assets That Can Be Converted Into BNB
     *
     * Weight: 1
     *
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {GetAssetsThatCanBeConvertedIntoBnbRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    getAssetsThatCanBeConvertedIntoBnb(
        requestParameters?: GetAssetsThatCanBeConvertedIntoBnbRequest
    ): Promise<RestApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>>;
    /**
     * The query of Cloud-Mining payment and refund history
     *
     * Just return the SUCCESS records of payment and refund.
     * For response, type = 248 means payment, type = 249 means refund, status =S means SUCCESS.
     *
     * Weight: 600
     *
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {GetCloudMiningPaymentAndRefundHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    getCloudMiningPaymentAndRefundHistory(
        requestParameters: GetCloudMiningPaymentAndRefundHistoryRequest
    ): Promise<RestApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>>;
    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     *
     * Weight: 100
     *
     * @summary Get Open Symbol List (MARKET_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    getOpenSymbolList(): Promise<RestApiResponse<GetOpenSymbolListResponse>>;
    /**
     * Query User Delegation History
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint
     *
     * Weight: 60
     *
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {QueryUserDelegationHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    queryUserDelegationHistory(
        requestParameters: QueryUserDelegationHistoryRequest
    ): Promise<RestApiResponse<QueryUserDelegationHistoryResponse>>;
    /**
     * Query User Universal Transfer History
     *
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * Support query within the last 6 months only
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default
     *
     * Weight: 1
     *
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {QueryUserUniversalTransferHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    queryUserUniversalTransferHistory(
        requestParameters: QueryUserUniversalTransferHistoryRequest
    ): Promise<RestApiResponse<QueryUserUniversalTransferHistoryResponse>>;
    /**
     * Query User Wallet Balance
     *
     *
     * You need to open Permits Universal Transfer permission for the API Key which requests this endpoint.
     *
     * Weight: 60
     *
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {QueryUserWalletBalanceRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    queryUserWalletBalance(
        requestParameters?: QueryUserWalletBalanceRequest
    ): Promise<RestApiResponse<QueryUserWalletBalanceResponse>>;
    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     *
     * "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
     *
     * Weight: 1(IP)
     *
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {ToggleBnbBurnOnSpotTradeAndMarginInterestRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    toggleBnbBurnOnSpotTradeAndMarginInterest(
        requestParameters?: ToggleBnbBurnOnSpotTradeAndMarginInterestRequest
    ): Promise<RestApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>>;
    /**
     * Fetch trade fee
     *
     * Weight: 1
     *
     * @summary Trade Fee (USER_DATA)
     * @param {TradeFeeRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    tradeFee(requestParameters?: TradeFeeRequest): Promise<RestApiResponse<TradeFeeResponse>>;
    /**
     * Get user assets, just for positive data.
     *
     * If asset is set, then return this asset, otherwise return all assets positive.
     * If needBtcValuation is set, then return btcValudation.
     *
     * Weight: 5
     *
     * @summary User Asset (USER_DATA)
     * @param {UserAssetRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    userAsset(requestParameters?: UserAssetRequest): Promise<RestApiResponse<UserAssetResponse>>;
    /**
     * user universal transfer
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * ENUM of transfer types:
     * MAIN_UMFUTURE   Spot account transfer to USDâ“ˆ-M Futures account
     * MAIN_CMFUTURE   Spot account transfer to COIN-M Futures account
     * MAIN_MARGIN   Spot account transfer to Marginï¼ˆcrossï¼‰account
     * UMFUTURE_MAIN   USDâ“ˆ-M Futures account transfer to Spot account
     * UMFUTURE_MARGIN   USDâ“ˆ-M Futures account transfer to Marginï¼ˆcrossï¼‰account
     * CMFUTURE_MAIN   COIN-M Futures account transfer to Spot account
     * CMFUTURE_MARGIN   COIN-M Futures account transfer to Margin(cross) account
     * MARGIN_MAIN   Marginï¼ˆcrossï¼‰account transfer to Spot account
     * MARGIN_UMFUTURE   Marginï¼ˆcrossï¼‰account transfer to USDâ“ˆ-M Futures
     * MARGIN_CMFUTURE   Marginï¼ˆcrossï¼‰account transfer to COIN-M Futures
     * ISOLATEDMARGIN_MARGIN   Isolated margin account transfer to Margin(cross) account
     * MARGIN_ISOLATEDMARGIN   Margin(cross) account transfer to Isolated margin account
     * ISOLATEDMARGIN_ISOLATEDMARGIN   Isolated margin account transfer to Isolated margin account
     * MAIN_FUNDING   Spot account transfer to Funding account
     * FUNDING_MAIN   Funding account transfer to Spot account
     * FUNDING_UMFUTURE   Funding account transfer to UMFUTURE account
     * UMFUTURE_FUNDING   UMFUTURE account transfer to Funding account
     * MARGIN_FUNDING   MARGIN account transfer to Funding account
     * FUNDING_MARGIN   Funding account transfer to Margin account
     * FUNDING_CMFUTURE   Funding account transfer to CMFUTURE account
     * CMFUTURE_FUNDING   CMFUTURE account transfer to Funding account
     * MAIN_OPTION  Spot account transfer to Options account
     * OPTION_MAIN  Options account transfer to Spot account
     * UMFUTURE_OPTION USDâ“ˆ-M Futures account transfer to Options account
     * OPTION_UMFUTURE Options account transfer to USDâ“ˆ-M Futures account
     * MARGIN_OPTION  Marginï¼ˆcrossï¼‰account transfer to Options account
     * OPTION_MARGIN  Options account transfer to Marginï¼ˆcrossï¼‰account
     * FUNDING_OPTION   Funding account transfer to Options account
     * OPTION_FUNDING   Options account transfer to Funding account
     * MAIN_PORTFOLIO_MARGIN  Spot account transfer to Portfolio Margin account
     * PORTFOLIO_MARGIN_MAIN  Portfolio Margin account transfer to Spot account
     *
     * Weight: 900
     *
     * @summary User Universal Transfer (USER_DATA)
     * @param {UserUniversalTransferRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApiInterface
     */
    userUniversalTransfer(
        requestParameters: UserUniversalTransferRequest
    ): Promise<RestApiResponse<UserUniversalTransferResponse>>;
}

/**
 * Request parameters for assetDetail operation in AssetApi.
 * @interface AssetDetailRequest
 */
export interface AssetDetailRequest {
    /**
     *
     * @type {number}
     * @memberof AssetApiAssetDetail
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for assetDividendRecord operation in AssetApi.
 * @interface AssetDividendRecordRequest
 */
export interface AssetDividendRecordRequest {
    /**
     * If asset is blank, then query all positive assets user have.
     * @type {string}
     * @memberof AssetApiAssetDividendRecord
     */
    readonly asset?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiAssetDividendRecord
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiAssetDividendRecord
     */
    readonly endTime?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof AssetApiAssetDividendRecord
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiAssetDividendRecord
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for dustTransfer operation in AssetApi.
 * @interface DustTransferRequest
 */
export interface DustTransferRequest {
    /**
     *
     * @type {string}
     * @memberof AssetApiDustTransfer
     */
    readonly asset: string;

    /**
     * `SPOT` or `MARGIN`,default `SPOT`
     * @type {string}
     * @memberof AssetApiDustTransfer
     */
    readonly accountType?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiDustTransfer
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for dustlog operation in AssetApi.
 * @interface DustlogRequest
 */
export interface DustlogRequest {
    /**
     *
     * @type {number}
     * @memberof AssetApiDustlog
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiDustlog
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiDustlog
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for fundingWallet operation in AssetApi.
 * @interface FundingWalletRequest
 */
export interface FundingWalletRequest {
    /**
     * If asset is blank, then query all positive assets user have.
     * @type {string}
     * @memberof AssetApiFundingWallet
     */
    readonly asset?: string;

    /**
     * true or false
     * @type {string}
     * @memberof AssetApiFundingWallet
     */
    readonly needBtcValuation?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiFundingWallet
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getAssetsThatCanBeConvertedIntoBnb operation in AssetApi.
 * @interface GetAssetsThatCanBeConvertedIntoBnbRequest
 */
export interface GetAssetsThatCanBeConvertedIntoBnbRequest {
    /**
     * `SPOT` or `MARGIN`,default `SPOT`
     * @type {string}
     * @memberof AssetApiGetAssetsThatCanBeConvertedIntoBnb
     */
    readonly accountType?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiGetAssetsThatCanBeConvertedIntoBnb
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getCloudMiningPaymentAndRefundHistory operation in AssetApi.
 * @interface GetCloudMiningPaymentAndRefundHistoryRequest
 */
export interface GetCloudMiningPaymentAndRefundHistoryRequest {
    /**
     *
     * @type {number}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly startTime: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly endTime: number;

    /**
     * The transaction id
     * @type {number}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly tranId?: number;

    /**
     * The unique flag
     * @type {string}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly clientTranId?: string;

    /**
     * If asset is blank, then query all positive assets user have.
     * @type {string}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly asset?: string;

    /**
     * current page, default 1, the min value is 1
     * @type {number}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly current?: number;

    /**
     * page size, default 10, the max value is 100
     * @type {number}
     * @memberof AssetApiGetCloudMiningPaymentAndRefundHistory
     */
    readonly size?: number;
}

/**
 * Request parameters for queryUserDelegationHistory operation in AssetApi.
 * @interface QueryUserDelegationHistoryRequest
 */
export interface QueryUserDelegationHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly email: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly startTime: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly endTime: number;

    /**
     * Delegate/Undelegate
     * @type {string}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly type?: string;

    /**
     * If asset is blank, then query all positive assets user have.
     * @type {string}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly asset?: string;

    /**
     * current page, default 1, the min value is 1
     * @type {number}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly current?: number;

    /**
     * page size, default 10, the max value is 100
     * @type {number}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly size?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserDelegationHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryUserUniversalTransferHistory operation in AssetApi.
 * @interface QueryUserUniversalTransferHistoryRequest
 */
export interface QueryUserUniversalTransferHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly type: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly endTime?: number;

    /**
     * current page, default 1, the min value is 1
     * @type {number}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly current?: number;

    /**
     * page size, default 10, the max value is 100
     * @type {number}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly size?: number;

    /**
     *
     * @type {string}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly fromSymbol?: string;

    /**
     *
     * @type {string}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly toSymbol?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserUniversalTransferHistory
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for queryUserWalletBalance operation in AssetApi.
 * @interface QueryUserWalletBalanceRequest
 */
export interface QueryUserWalletBalanceRequest {
    /**
     * `USDT`, `ETH`, `USDC`, `BNB`, etc. default `BTC`
     * @type {string}
     * @memberof AssetApiQueryUserWalletBalance
     */
    readonly quoteAsset?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiQueryUserWalletBalance
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for toggleBnbBurnOnSpotTradeAndMarginInterest operation in AssetApi.
 * @interface ToggleBnbBurnOnSpotTradeAndMarginInterestRequest
 */
export interface ToggleBnbBurnOnSpotTradeAndMarginInterestRequest {
    /**
     * "true" or "false"; Determines whether to use BNB to pay for trading fees on SPOT
     * @type {string}
     * @memberof AssetApiToggleBnbBurnOnSpotTradeAndMarginInterest
     */
    readonly spotBNBBurn?: string;

    /**
     * "true" or "false"; Determines whether to use BNB to pay for margin loan's interest
     * @type {string}
     * @memberof AssetApiToggleBnbBurnOnSpotTradeAndMarginInterest
     */
    readonly interestBNBBurn?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiToggleBnbBurnOnSpotTradeAndMarginInterest
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for tradeFee operation in AssetApi.
 * @interface TradeFeeRequest
 */
export interface TradeFeeRequest {
    /**
     *
     * @type {string}
     * @memberof AssetApiTradeFee
     */
    readonly symbol?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiTradeFee
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for userAsset operation in AssetApi.
 * @interface UserAssetRequest
 */
export interface UserAssetRequest {
    /**
     * If asset is blank, then query all positive assets user have.
     * @type {string}
     * @memberof AssetApiUserAsset
     */
    readonly asset?: string;

    /**
     * Whether need btc valuation or not.
     * @type {boolean}
     * @memberof AssetApiUserAsset
     */
    readonly needBtcValuation?: boolean;

    /**
     *
     * @type {number}
     * @memberof AssetApiUserAsset
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for userUniversalTransfer operation in AssetApi.
 * @interface UserUniversalTransferRequest
 */
export interface UserUniversalTransferRequest {
    /**
     *
     * @type {string}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly type: string;

    /**
     *
     * @type {string}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly asset: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly amount: number;

    /**
     *
     * @type {string}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly fromSymbol?: string;

    /**
     *
     * @type {string}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly toSymbol?: string;

    /**
     *
     * @type {number}
     * @memberof AssetApiUserUniversalTransfer
     */
    readonly recvWindow?: number;
}

/**
 * AssetApi - object-oriented interface
 * @class AssetApi
 */
export class AssetApi implements AssetApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration);
    }

    /**
     * Fetch details of assets supported on Binance.
     *
     *
     * Please get network and other deposit or withdraw details from ``GET /sapi/v1/capital/config/getall``.
     *
     * Weight: 1
     *
     * @summary Asset Detail (USER_DATA)
     * @param {AssetDetailRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AssetDetailResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Asset-Detail Binance API Documentation}
     */
    public async assetDetail(
        requestParameters: AssetDetailRequest = {}
    ): Promise<RestApiResponse<AssetDetailResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.assetDetail(
            requestParameters?.recvWindow
        );
        return sendRequest<AssetDetailResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query asset dividend record.
     *
     *
     * There cannot be more than 180 days between parameter `startTime` and `endTime`.
     *
     * Weight: 10
     *
     * @summary Asset Dividend Record (USER_DATA)
     * @param {AssetDividendRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AssetDividendRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/assets-divided-record Binance API Documentation}
     */
    public async assetDividendRecord(
        requestParameters: AssetDividendRecordRequest = {}
    ): Promise<RestApiResponse<AssetDividendRecordResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.assetDividendRecord(
            requestParameters?.asset,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<AssetDividendRecordResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Convert dust assets to BNB.
     *
     * You need to open`Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 10
     *
     * @summary Dust Transfer (USER_DATA)
     * @param {DustTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DustTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Dust-Transfer Binance API Documentation}
     */
    public async dustTransfer(
        requestParameters: DustTransferRequest
    ): Promise<RestApiResponse<DustTransferResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.dustTransfer(
            requestParameters?.asset,
            requestParameters?.accountType,
            requestParameters?.recvWindow
        );
        return sendRequest<DustTransferResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Dustlog
     *
     * Only return last 100 records
     * Only return records after 2020/12/01
     *
     * Weight: 1
     *
     * @summary DustLog(USER_DATA)
     * @param {DustlogRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DustlogResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/dust-log Binance API Documentation}
     */
    public async dustlog(
        requestParameters: DustlogRequest = {}
    ): Promise<RestApiResponse<DustlogResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.dustlog(
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.recvWindow
        );
        return sendRequest<DustlogResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query Funding Wallet
     *
     *
     * Currently supports querying the following business assetsï¼šBinance Pay, Binance Card, Binance Gift Card, Stock Token
     *
     * Weight: 1
     *
     * @summary Funding Wallet (USER_DATA)
     * @param {FundingWalletRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundingWalletResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Funding-Wallet Binance API Documentation}
     */
    public async fundingWallet(
        requestParameters: FundingWalletRequest = {}
    ): Promise<RestApiResponse<FundingWalletResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.fundingWallet(
            requestParameters?.asset,
            requestParameters?.needBtcValuation,
            requestParameters?.recvWindow
        );
        return sendRequest<FundingWalletResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Assets That Can Be Converted Into BNB
     *
     * Weight: 1
     *
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {GetAssetsThatCanBeConvertedIntoBnbRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/assets-can-convert-bnb Binance API Documentation}
     */
    public async getAssetsThatCanBeConvertedIntoBnb(
        requestParameters: GetAssetsThatCanBeConvertedIntoBnbRequest = {}
    ): Promise<RestApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getAssetsThatCanBeConvertedIntoBnb(
                requestParameters?.accountType,
                requestParameters?.recvWindow
            );
        return sendRequest<GetAssetsThatCanBeConvertedIntoBnbResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * The query of Cloud-Mining payment and refund history
     *
     * Just return the SUCCESS records of payment and refund.
     * For response, type = 248 means payment, type = 249 means refund, status =S means SUCCESS.
     *
     * Weight: 600
     *
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {GetCloudMiningPaymentAndRefundHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/cloud-mining-payment-and-refund-history Binance API Documentation}
     */
    public async getCloudMiningPaymentAndRefundHistory(
        requestParameters: GetCloudMiningPaymentAndRefundHistoryRequest
    ): Promise<RestApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getCloudMiningPaymentAndRefundHistory(
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.tranId,
                requestParameters?.clientTranId,
                requestParameters?.asset,
                requestParameters?.current,
                requestParameters?.size
            );
        return sendRequest<GetCloudMiningPaymentAndRefundHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     *
     * Weight: 100
     *
     * @summary Get Open Symbol List (MARKET_DATA)
     * @returns {Promise<RestApiResponse<GetOpenSymbolListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/open-symbol-list Binance API Documentation}
     */
    public async getOpenSymbolList(): Promise<RestApiResponse<GetOpenSymbolListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getOpenSymbolList();
        return sendRequest<GetOpenSymbolListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: false }
        );
    }

    /**
     * Query User Delegation History
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint
     *
     * Weight: 60
     *
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {QueryUserDelegationHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserDelegationHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/query-user-delegation Binance API Documentation}
     */
    public async queryUserDelegationHistory(
        requestParameters: QueryUserDelegationHistoryRequest
    ): Promise<RestApiResponse<QueryUserDelegationHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryUserDelegationHistory(
            requestParameters?.email,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.type,
            requestParameters?.asset,
            requestParameters?.current,
            requestParameters?.size,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryUserDelegationHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query User Universal Transfer History
     *
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * Support query within the last 6 months only
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default
     *
     * Weight: 1
     *
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {QueryUserUniversalTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserUniversalTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/query-user-universal-transfer Binance API Documentation}
     */
    public async queryUserUniversalTransferHistory(
        requestParameters: QueryUserUniversalTransferHistoryRequest
    ): Promise<RestApiResponse<QueryUserUniversalTransferHistoryResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.queryUserUniversalTransferHistory(
                requestParameters?.type,
                requestParameters?.startTime,
                requestParameters?.endTime,
                requestParameters?.current,
                requestParameters?.size,
                requestParameters?.fromSymbol,
                requestParameters?.toSymbol,
                requestParameters?.recvWindow
            );
        return sendRequest<QueryUserUniversalTransferHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Query User Wallet Balance
     *
     *
     * You need to open Permits Universal Transfer permission for the API Key which requests this endpoint.
     *
     * Weight: 60
     *
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {QueryUserWalletBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserWalletBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Query-User-Wallet-Balance Binance API Documentation}
     */
    public async queryUserWalletBalance(
        requestParameters: QueryUserWalletBalanceRequest = {}
    ): Promise<RestApiResponse<QueryUserWalletBalanceResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.queryUserWalletBalance(
            requestParameters?.quoteAsset,
            requestParameters?.recvWindow
        );
        return sendRequest<QueryUserWalletBalanceResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     *
     * "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
     *
     * Weight: 1(IP)
     *
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {ToggleBnbBurnOnSpotTradeAndMarginInterestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Toggle-BNB-Burn-On-Spot-Trade-And-Margin-Interest Binance API Documentation}
     */
    public async toggleBnbBurnOnSpotTradeAndMarginInterest(
        requestParameters: ToggleBnbBurnOnSpotTradeAndMarginInterestRequest = {}
    ): Promise<RestApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.toggleBnbBurnOnSpotTradeAndMarginInterest(
                requestParameters?.spotBNBBurn,
                requestParameters?.interestBNBBurn,
                requestParameters?.recvWindow
            );
        return sendRequest<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch trade fee
     *
     * Weight: 1
     *
     * @summary Trade Fee (USER_DATA)
     * @param {TradeFeeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TradeFeeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/Trade-Fee Binance API Documentation}
     */
    public async tradeFee(
        requestParameters: TradeFeeRequest = {}
    ): Promise<RestApiResponse<TradeFeeResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.tradeFee(
            requestParameters?.symbol,
            requestParameters?.recvWindow
        );
        return sendRequest<TradeFeeResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get user assets, just for positive data.
     *
     * If asset is set, then return this asset, otherwise return all assets positive.
     * If needBtcValuation is set, then return btcValudation.
     *
     * Weight: 5
     *
     * @summary User Asset (USER_DATA)
     * @param {UserAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/user-assets Binance API Documentation}
     */
    public async userAsset(
        requestParameters: UserAssetRequest = {}
    ): Promise<RestApiResponse<UserAssetResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.userAsset(
            requestParameters?.asset,
            requestParameters?.needBtcValuation,
            requestParameters?.recvWindow
        );
        return sendRequest<UserAssetResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * user universal transfer
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * ENUM of transfer types:
     * MAIN_UMFUTURE   Spot account transfer to USDâ“ˆ-M Futures account
     * MAIN_CMFUTURE   Spot account transfer to COIN-M Futures account
     * MAIN_MARGIN   Spot account transfer to Marginï¼ˆcrossï¼‰account
     * UMFUTURE_MAIN   USDâ“ˆ-M Futures account transfer to Spot account
     * UMFUTURE_MARGIN   USDâ“ˆ-M Futures account transfer to Marginï¼ˆcrossï¼‰account
     * CMFUTURE_MAIN   COIN-M Futures account transfer to Spot account
     * CMFUTURE_MARGIN   COIN-M Futures account transfer to Margin(cross) account
     * MARGIN_MAIN   Marginï¼ˆcrossï¼‰account transfer to Spot account
     * MARGIN_UMFUTURE   Marginï¼ˆcrossï¼‰account transfer to USDâ“ˆ-M Futures
     * MARGIN_CMFUTURE   Marginï¼ˆcrossï¼‰account transfer to COIN-M Futures
     * ISOLATEDMARGIN_MARGIN   Isolated margin account transfer to Margin(cross) account
     * MARGIN_ISOLATEDMARGIN   Margin(cross) account transfer to Isolated margin account
     * ISOLATEDMARGIN_ISOLATEDMARGIN   Isolated margin account transfer to Isolated margin account
     * MAIN_FUNDING   Spot account transfer to Funding account
     * FUNDING_MAIN   Funding account transfer to Spot account
     * FUNDING_UMFUTURE   Funding account transfer to UMFUTURE account
     * UMFUTURE_FUNDING   UMFUTURE account transfer to Funding account
     * MARGIN_FUNDING   MARGIN account transfer to Funding account
     * FUNDING_MARGIN   Funding account transfer to Margin account
     * FUNDING_CMFUTURE   Funding account transfer to CMFUTURE account
     * CMFUTURE_FUNDING   CMFUTURE account transfer to Funding account
     * MAIN_OPTION  Spot account transfer to Options account
     * OPTION_MAIN  Options account transfer to Spot account
     * UMFUTURE_OPTION USDâ“ˆ-M Futures account transfer to Options account
     * OPTION_UMFUTURE Options account transfer to USDâ“ˆ-M Futures account
     * MARGIN_OPTION  Marginï¼ˆcrossï¼‰account transfer to Options account
     * OPTION_MARGIN  Options account transfer to Marginï¼ˆcrossï¼‰account
     * FUNDING_OPTION   Funding account transfer to Options account
     * OPTION_FUNDING   Options account transfer to Funding account
     * MAIN_PORTFOLIO_MARGIN  Spot account transfer to Portfolio Margin account
     * PORTFOLIO_MARGIN_MAIN  Portfolio Margin account transfer to Spot account
     *
     * Weight: 900
     *
     * @summary User Universal Transfer (USER_DATA)
     * @param {UserUniversalTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserUniversalTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AssetApi
     * @see {@link https://developers.binance.com/docs/wallet/asset/User-Universal-Transfer Binance API Documentation}
     */
    public async userUniversalTransfer(
        requestParameters: UserUniversalTransferRequest
    ): Promise<RestApiResponse<UserUniversalTransferResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.userUniversalTransfer(
            requestParameters?.type,
            requestParameters?.asset,
            requestParameters?.amount,
            requestParameters?.fromSymbol,
            requestParameters?.toSymbol,
            requestParameters?.recvWindow
        );
        return sendRequest<UserUniversalTransferResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
