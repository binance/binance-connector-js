/**
 * Binance Wallet REST API
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    BrokerWithdrawResponse,
    DepositHistoryTravelRuleResponse,
    OnboardedVaspListResponse,
    SubmitDepositQuestionnaireResponse,
    SubmitDepositQuestionnaireTravelRuleResponse,
    WithdrawHistoryV1Response,
    WithdrawHistoryV2Response,
    WithdrawTravelRuleResponse,
} from '../types';

/**
 * TravelRuleApi - axios parameter creator
 */
const TravelRuleApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Submit a withdrawal request for brokers of local entities that required travel rule.
         *
         * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
         * You can get `network` in `networkList` of a coin in the response
         * Questionnaire is different for each local entity, please refer to
         * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
         *
         * Weight: 600
         *
         * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
         * @param {string} address
         * @param {string} coin
         * @param {number} amount
         * @param {string} withdrawOrderId withdrawID defined by the client (i.e. client's internal withdrawID)
         * @param {string} questionnaire JSON format questionnaire answers.
         * @param {string} originatorPii JSON format originator Pii, see StandardPii section below
         * @param {string} signature Must be the last parameter.
         * @param {string} [addressTag] Secondary address identifier for coins like XRP,XMR etc.
         * @param {string} [network]
         * @param {string} [addressName] Description of the address. Address book cap is 200, space in name should be encoded into `%20`
         * @param {boolean} [transactionFeeFlag] When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
         * @param {number} [walletType] The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
         *
         * @throws {RequiredError}
         */
        brokerWithdraw: async (
            address: string,
            coin: string,
            amount: number,
            withdrawOrderId: string,
            questionnaire: string,
            originatorPii: string,
            signature: string,
            addressTag?: string,
            network?: string,
            addressName?: string,
            transactionFeeFlag?: boolean,
            walletType?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('brokerWithdraw', 'address', address);
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('brokerWithdraw', 'coin', coin);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('brokerWithdraw', 'amount', amount);
            // verify required parameter 'withdrawOrderId' is not null or undefined
            assertParamExists('brokerWithdraw', 'withdrawOrderId', withdrawOrderId);
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('brokerWithdraw', 'questionnaire', questionnaire);
            // verify required parameter 'originatorPii' is not null or undefined
            assertParamExists('brokerWithdraw', 'originatorPii', originatorPii);
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('brokerWithdraw', 'signature', signature);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (address !== undefined && address !== null) {
                localVarQueryParameter['address'] = address;
            }

            if (addressTag !== undefined && addressTag !== null) {
                localVarQueryParameter['addressTag'] = addressTag;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (addressName !== undefined && addressName !== null) {
                localVarQueryParameter['addressName'] = addressName;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (transactionFeeFlag !== undefined && transactionFeeFlag !== null) {
                localVarQueryParameter['transactionFeeFlag'] = transactionFeeFlag;
            }

            if (walletType !== undefined && walletType !== null) {
                localVarQueryParameter['walletType'] = walletType;
            }

            if (questionnaire !== undefined && questionnaire !== null) {
                localVarQueryParameter['questionnaire'] = questionnaire;
            }

            if (originatorPii !== undefined && originatorPii !== null) {
                localVarQueryParameter['originatorPii'] = originatorPii;
            }

            if (signature !== undefined && signature !== null) {
                localVarQueryParameter['signature'] = signature;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/broker/withdraw/apply',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch deposit history for local entities that required travel rule.
         *
         * Please notice the default `startTime` and `endTime` to make sure that time interval is within
         * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must
         *
         * Weight: 1
         *
         * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId]
         * @param {string} [tranId] Comma(,) separated list of wallet tran Ids.
         * @param {string} [network]
         * @param {string} [coin]
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {boolean} [pendingQuestionnaire] true: Only return records that pending deposit questionnaire. false/not provided: return all records.
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [offset] Default: 0
         * @param {number} [limit] min 7, max 30, default 7
         *
         * @throws {RequiredError}
         */
        depositHistoryTravelRule: async (
            trId?: string,
            txId?: string,
            tranId?: string,
            network?: string,
            coin?: string,
            travelRuleStatus?: number,
            pendingQuestionnaire?: boolean,
            startTime?: number,
            endTime?: number,
            offset?: number,
            limit?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (trId !== undefined && trId !== null) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            if (tranId !== undefined && tranId !== null) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined && travelRuleStatus !== null) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (pendingQuestionnaire !== undefined && pendingQuestionnaire !== null) {
                localVarQueryParameter['pendingQuestionnaire'] = pendingQuestionnaire;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/deposit/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch the onboarded VASP list for local entities that required travel rule.
         *
         * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         *
         * Weight: 18000
         * Request limit: 10 requests per second
         * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         * limit is 180000/second. Response from the endpoint contains header
         * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
         *
         * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
         *
         * @throws {RequiredError}
         */
        onboardedVaspList: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/vasp',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Submit questionnaire for brokers of local entities that require travel rule.
         * The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
         * yet onboarded with GTR.
         *
         * Questionnaire is different for each local entity, please refer
         * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
         *
         * Weight: 600
         *
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} subAccountId External user ID.
         * @param {string} depositId Wallet deposit ID.
         * @param {string} questionnaire JSON format questionnaire answers.
         * @param {string} beneficiaryPii JSON format beneficiary Pii.
         * @param {string} signature Must be the last parameter.
         * @param {string} [network]
         * @param {string} [coin]
         * @param {number} [amount]
         * @param {string} [address]
         * @param {string} [addressTag] Secondary address identifier for coins like XRP,XMR etc.
         *
         * @throws {RequiredError}
         */
        submitDepositQuestionnaire: async (
            subAccountId: string,
            depositId: string,
            questionnaire: string,
            beneficiaryPii: string,
            signature: string,
            network?: string,
            coin?: string,
            amount?: number,
            address?: string,
            addressTag?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            assertParamExists('submitDepositQuestionnaire', 'subAccountId', subAccountId);
            // verify required parameter 'depositId' is not null or undefined
            assertParamExists('submitDepositQuestionnaire', 'depositId', depositId);
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('submitDepositQuestionnaire', 'questionnaire', questionnaire);
            // verify required parameter 'beneficiaryPii' is not null or undefined
            assertParamExists('submitDepositQuestionnaire', 'beneficiaryPii', beneficiaryPii);
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('submitDepositQuestionnaire', 'signature', signature);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (subAccountId !== undefined && subAccountId !== null) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (depositId !== undefined && depositId !== null) {
                localVarQueryParameter['depositId'] = depositId;
            }

            if (questionnaire !== undefined && questionnaire !== null) {
                localVarQueryParameter['questionnaire'] = questionnaire;
            }

            if (beneficiaryPii !== undefined && beneficiaryPii !== null) {
                localVarQueryParameter['beneficiaryPii'] = beneficiaryPii;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (address !== undefined && address !== null) {
                localVarQueryParameter['address'] = address;
            }

            if (addressTag !== undefined && addressTag !== null) {
                localVarQueryParameter['addressTag'] = addressTag;
            }

            if (signature !== undefined && signature !== null) {
                localVarQueryParameter['signature'] = signature;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/broker/deposit/provide-info',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Submit questionnaire for local entities that require travel rule.
         * The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
         * yet onboarded with GTR.
         *
         * Questionnaire is different for each local entity, please refer
         * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
         *
         * Weight: 600
         *
         * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {number} tranId Wallet tran ID
         * @param {string} questionnaire JSON format questionnaire answers.
         *
         * @throws {RequiredError}
         */
        submitDepositQuestionnaireTravelRule: async (
            tranId: number,
            questionnaire: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'tranId' is not null or undefined
            assertParamExists('submitDepositQuestionnaireTravelRule', 'tranId', tranId);
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists(
                'submitDepositQuestionnaireTravelRule',
                'questionnaire',
                questionnaire
            );

            const localVarQueryParameter: Record<string, unknown> = {};

            if (tranId !== undefined && tranId !== null) {
                localVarQueryParameter['tranId'] = tranId;
            }

            if (questionnaire !== undefined && questionnaire !== null) {
                localVarQueryParameter['questionnaire'] = questionnaire;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/deposit/provide-info',
                method: 'PUT',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         *
         * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         * `network` may not be in the response for old withdraw.
         * Please notice the default `startTime` and `endTime` to make sure that time interval is within
         * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
         *
         * Weight: 18000
         * Request limit: 10 requests per second
         * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         * limit is 180000/second. Response from the endpoint contains header
         * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
         *
         * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId]
         * @param {string} [withdrawOrderId]
         * @param {string} [network]
         * @param {string} [coin]
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdrawHistoryV1: async (
            trId?: string,
            txId?: string,
            withdrawOrderId?: string,
            network?: string,
            coin?: string,
            travelRuleStatus?: number,
            offset?: number,
            limit?: number,
            startTime?: number,
            endTime?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (trId !== undefined && trId !== null) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined && travelRuleStatus !== null) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/withdraw/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch withdraw history for local entities that required travel rule.
         *
         * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         * `network` may not be in the response for old withdraw.
         * Withdrawal made through /sapi/v1/capital/withdraw/apply may not be in the response.
         * Please notice the default `startTime` and `endTime` to make sure that time interval is within
         * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
         * If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.
         * If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.
         * Maximum support trId,txId number is 45.
         * WithdrawOrderId only support 1.
         * If responsible does not include withdrawalStatus, please input trId or txId retrieve the data.
         *
         * Weight: 18000
         * Request limit: 10 requests per second
         * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
         * limit is 180000/second. Response from the endpoint contains header
         * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
         *
         * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
         * @param {string} [trId] Comma(,) separated list of travel rule record Ids.
         * @param {string} [txId]
         * @param {string} [withdrawOrderId]
         * @param {string} [network]
         * @param {string} [coin]
         * @param {number} [travelRuleStatus] 0:Completed,1:Pending,2:Failed
         * @param {number} [offset] Default: 0
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdrawHistoryV2: async (
            trId?: string,
            txId?: string,
            withdrawOrderId?: string,
            network?: string,
            coin?: string,
            travelRuleStatus?: number,
            offset?: number,
            limit?: number,
            startTime?: number,
            endTime?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (trId !== undefined && trId !== null) {
                localVarQueryParameter['trId'] = trId;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (travelRuleStatus !== undefined && travelRuleStatus !== null) {
                localVarQueryParameter['travelRuleStatus'] = travelRuleStatus;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v2/localentity/withdraw/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Submit a withdrawal request for local entities that required travel rule.
         *
         * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
         * You can get `network` and `isDefault` in `networkList` of a coin in the response
         * Questionnaire is different for each local entity, please refer to
         * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
         *
         * Weight: 600
         *
         * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
         * @param {string} coin
         * @param {string} address
         * @param {number} amount
         * @param {string} questionnaire JSON format questionnaire answers.
         * @param {string} [withdrawOrderId]
         * @param {string} [network]
         * @param {string} [addressTag] Secondary address identifier for coins like XRP,XMR etc.
         * @param {boolean} [transactionFeeFlag] When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
         * @param {string} [name] Description of the address. Address book cap is 200, space in name should be encoded into `%20`
         * @param {number} [walletType] The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdrawTravelRule: async (
            coin: string,
            address: string,
            amount: number,
            questionnaire: string,
            withdrawOrderId?: string,
            network?: string,
            addressTag?: string,
            transactionFeeFlag?: boolean,
            name?: string,
            walletType?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('withdrawTravelRule', 'coin', coin);
            // verify required parameter 'address' is not null or undefined
            assertParamExists('withdrawTravelRule', 'address', address);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('withdrawTravelRule', 'amount', amount);
            // verify required parameter 'questionnaire' is not null or undefined
            assertParamExists('withdrawTravelRule', 'questionnaire', questionnaire);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (address !== undefined && address !== null) {
                localVarQueryParameter['address'] = address;
            }

            if (addressTag !== undefined && addressTag !== null) {
                localVarQueryParameter['addressTag'] = addressTag;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (transactionFeeFlag !== undefined && transactionFeeFlag !== null) {
                localVarQueryParameter['transactionFeeFlag'] = transactionFeeFlag;
            }

            if (name !== undefined && name !== null) {
                localVarQueryParameter['name'] = name;
            }

            if (walletType !== undefined && walletType !== null) {
                localVarQueryParameter['walletType'] = walletType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (questionnaire !== undefined && questionnaire !== null) {
                localVarQueryParameter['questionnaire'] = questionnaire;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/localentity/withdraw/apply',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * TravelRuleApi - interface
 * @interface TravelRuleApi
 */
export interface TravelRuleApiInterface {
    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {BrokerWithdrawRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    brokerWithdraw(
        requestParameters: BrokerWithdrawRequest
    ): Promise<RestApiResponse<BrokerWithdrawResponse>>;
    /**
     * Fetch deposit history for local entities that required travel rule.
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must
     *
     * Weight: 1
     *
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {DepositHistoryTravelRuleRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    depositHistoryTravelRule(
        requestParameters?: DepositHistoryTravelRuleRequest
    ): Promise<RestApiResponse<DepositHistoryTravelRuleResponse>>;
    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    onboardedVaspList(): Promise<RestApiResponse<OnboardedVaspListResponse>>;
    /**
     * Submit questionnaire for brokers of local entities that require travel rule.
     * The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    submitDepositQuestionnaire(
        requestParameters: SubmitDepositQuestionnaireRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireResponse>>;
    /**
     * Submit questionnaire for local entities that require travel rule.
     * The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireTravelRuleRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    submitDepositQuestionnaireTravelRule(
        requestParameters: SubmitDepositQuestionnaireTravelRuleRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireTravelRuleResponse>>;
    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV1Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    withdrawHistoryV1(
        requestParameters?: WithdrawHistoryV1Request
    ): Promise<RestApiResponse<WithdrawHistoryV1Response>>;
    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Withdrawal made through /sapi/v1/capital/withdraw/apply may not be in the response.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     * If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.
     * If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.
     * Maximum support trId,txId number is 45.
     * WithdrawOrderId only support 1.
     * If responsible does not include withdrawalStatus, please input trId or txId retrieve the data.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV2Request} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    withdrawHistoryV2(
        requestParameters?: WithdrawHistoryV2Request
    ): Promise<RestApiResponse<WithdrawHistoryV2Response>>;
    /**
     * Submit a withdrawal request for local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {WithdrawTravelRuleRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApiInterface
     */
    withdrawTravelRule(
        requestParameters: WithdrawTravelRuleRequest
    ): Promise<RestApiResponse<WithdrawTravelRuleResponse>>;
}

/**
 * Request parameters for brokerWithdraw operation in TravelRuleApi.
 * @interface BrokerWithdrawRequest
 */
export interface BrokerWithdrawRequest {
    /**
     *
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly address: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly coin: string;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly amount: number;

    /**
     * withdrawID defined by the client (i.e. client's internal withdrawID)
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly withdrawOrderId: string;

    /**
     * JSON format questionnaire answers.
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly questionnaire: string;

    /**
     * JSON format originator Pii, see StandardPii section below
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly originatorPii: string;

    /**
     * Must be the last parameter.
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly signature: string;

    /**
     * Secondary address identifier for coins like XRP,XMR etc.
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly addressTag?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly network?: string;

    /**
     * Description of the address. Address book cap is 200, space in name should be encoded into `%20`
     * @type {string}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly addressName?: string;

    /**
     * When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
     * @type {boolean}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly transactionFeeFlag?: boolean;

    /**
     * The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
     * @type {number}
     * @memberof TravelRuleApiBrokerWithdraw
     */
    readonly walletType?: number;
}

/**
 * Request parameters for depositHistoryTravelRule operation in TravelRuleApi.
 * @interface DepositHistoryTravelRuleRequest
 */
export interface DepositHistoryTravelRuleRequest {
    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly trId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly txId?: string;

    /**
     * Comma(,) separated list of wallet tran Ids.
     * @type {string}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly tranId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly network?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly coin?: string;

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly travelRuleStatus?: number;

    /**
     * true: Only return records that pending deposit questionnaire. false/not provided: return all records.
     * @type {boolean}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly pendingQuestionnaire?: boolean;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly endTime?: number;

    /**
     * Default: 0
     * @type {number}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly offset?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof TravelRuleApiDepositHistoryTravelRule
     */
    readonly limit?: number;
}

/**
 * Request parameters for submitDepositQuestionnaire operation in TravelRuleApi.
 * @interface SubmitDepositQuestionnaireRequest
 */
export interface SubmitDepositQuestionnaireRequest {
    /**
     * External user ID.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly subAccountId: string;

    /**
     * Wallet deposit ID.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly depositId: string;

    /**
     * JSON format questionnaire answers.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly questionnaire: string;

    /**
     * JSON format beneficiary Pii.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly beneficiaryPii: string;

    /**
     * Must be the last parameter.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly signature: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly network?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly coin?: string;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly amount?: number;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly address?: string;

    /**
     * Secondary address identifier for coins like XRP,XMR etc.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaire
     */
    readonly addressTag?: string;
}

/**
 * Request parameters for submitDepositQuestionnaireTravelRule operation in TravelRuleApi.
 * @interface SubmitDepositQuestionnaireTravelRuleRequest
 */
export interface SubmitDepositQuestionnaireTravelRuleRequest {
    /**
     * Wallet tran ID
     * @type {number}
     * @memberof TravelRuleApiSubmitDepositQuestionnaireTravelRule
     */
    readonly tranId: number;

    /**
     * JSON format questionnaire answers.
     * @type {string}
     * @memberof TravelRuleApiSubmitDepositQuestionnaireTravelRule
     */
    readonly questionnaire: string;
}

/**
 * Request parameters for withdrawHistoryV1 operation in TravelRuleApi.
 * @interface WithdrawHistoryV1Request
 */
export interface WithdrawHistoryV1Request {
    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly trId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly txId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly withdrawOrderId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly network?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly coin?: string;

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly travelRuleStatus?: number;

    /**
     * Default: 0
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly offset?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV1
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for withdrawHistoryV2 operation in TravelRuleApi.
 * @interface WithdrawHistoryV2Request
 */
export interface WithdrawHistoryV2Request {
    /**
     * Comma(,) separated list of travel rule record Ids.
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly trId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly txId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly withdrawOrderId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly network?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly coin?: string;

    /**
     * 0:Completed,1:Pending,2:Failed
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly travelRuleStatus?: number;

    /**
     * Default: 0
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly offset?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawHistoryV2
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for withdrawTravelRule operation in TravelRuleApi.
 * @interface WithdrawTravelRuleRequest
 */
export interface WithdrawTravelRuleRequest {
    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly coin: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly address: string;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly amount: number;

    /**
     * JSON format questionnaire answers.
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly questionnaire: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly withdrawOrderId?: string;

    /**
     *
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly network?: string;

    /**
     * Secondary address identifier for coins like XRP,XMR etc.
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly addressTag?: string;

    /**
     * When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
     * @type {boolean}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly transactionFeeFlag?: boolean;

    /**
     * Description of the address. Address book cap is 200, space in name should be encoded into `%20`
     * @type {string}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly name?: string;

    /**
     * The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
     * @type {number}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly walletType?: number;

    /**
     *
     * @type {number}
     * @memberof TravelRuleApiWithdrawTravelRule
     */
    readonly recvWindow?: number;
}

/**
 * TravelRuleApi - object-oriented interface
 * @class TravelRuleApi
 */
export class TravelRuleApi implements TravelRuleApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = TravelRuleApiAxiosParamCreator(configuration);
    }

    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {BrokerWithdrawRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BrokerWithdrawResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Broker-Withdraw Binance API Documentation}
     */
    public async brokerWithdraw(
        requestParameters: BrokerWithdrawRequest
    ): Promise<RestApiResponse<BrokerWithdrawResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.brokerWithdraw(
            requestParameters?.address,
            requestParameters?.coin,
            requestParameters?.amount,
            requestParameters?.withdrawOrderId,
            requestParameters?.questionnaire,
            requestParameters?.originatorPii,
            requestParameters?.signature,
            requestParameters?.addressTag,
            requestParameters?.network,
            requestParameters?.addressName,
            requestParameters?.transactionFeeFlag,
            requestParameters?.walletType
        );
        return sendRequest<BrokerWithdrawResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch deposit history for local entities that required travel rule.
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must
     *
     * Weight: 1
     *
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {DepositHistoryTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositHistoryTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Deposit-History Binance API Documentation}
     */
    public async depositHistoryTravelRule(
        requestParameters: DepositHistoryTravelRuleRequest = {}
    ): Promise<RestApiResponse<DepositHistoryTravelRuleResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.depositHistoryTravelRule(
            requestParameters?.trId,
            requestParameters?.txId,
            requestParameters?.tranId,
            requestParameters?.network,
            requestParameters?.coin,
            requestParameters?.travelRuleStatus,
            requestParameters?.pendingQuestionnaire,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.offset,
            requestParameters?.limit
        );
        return sendRequest<DepositHistoryTravelRuleResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @returns {Promise<RestApiResponse<OnboardedVaspListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Onboarded-VASP-list Binance API Documentation}
     */
    public async onboardedVaspList(): Promise<RestApiResponse<OnboardedVaspListResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.onboardedVaspList();
        return sendRequest<OnboardedVaspListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Submit questionnaire for brokers of local entities that require travel rule.
     * The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubmitDepositQuestionnaireResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/deposit-provide-info Binance API Documentation}
     */
    public async submitDepositQuestionnaire(
        requestParameters: SubmitDepositQuestionnaireRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.submitDepositQuestionnaire(
            requestParameters?.subAccountId,
            requestParameters?.depositId,
            requestParameters?.questionnaire,
            requestParameters?.beneficiaryPii,
            requestParameters?.signature,
            requestParameters?.network,
            requestParameters?.coin,
            requestParameters?.amount,
            requestParameters?.address,
            requestParameters?.addressTag
        );
        return sendRequest<SubmitDepositQuestionnaireResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Submit questionnaire for local entities that require travel rule.
     * The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubmitDepositQuestionnaireTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/deposit-provide-info Binance API Documentation}
     */
    public async submitDepositQuestionnaireTravelRule(
        requestParameters: SubmitDepositQuestionnaireTravelRuleRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireTravelRuleResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.submitDepositQuestionnaireTravelRule(
                requestParameters?.tranId,
                requestParameters?.questionnaire
            );
        return sendRequest<SubmitDepositQuestionnaireTravelRuleResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV1Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryV1Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw-History Binance API Documentation}
     */
    public async withdrawHistoryV1(
        requestParameters: WithdrawHistoryV1Request = {}
    ): Promise<RestApiResponse<WithdrawHistoryV1Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.withdrawHistoryV1(
            requestParameters?.trId,
            requestParameters?.txId,
            requestParameters?.withdrawOrderId,
            requestParameters?.network,
            requestParameters?.coin,
            requestParameters?.travelRuleStatus,
            requestParameters?.offset,
            requestParameters?.limit,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.recvWindow
        );
        return sendRequest<WithdrawHistoryV1Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Withdrawal made through /sapi/v1/capital/withdraw/apply may not be in the response.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     * If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.
     * If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.
     * Maximum support trId,txId number is 45.
     * WithdrawOrderId only support 1.
     * If responsible does not include withdrawalStatus, please input trId or txId retrieve the data.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw-History-V2 Binance API Documentation}
     */
    public async withdrawHistoryV2(
        requestParameters: WithdrawHistoryV2Request = {}
    ): Promise<RestApiResponse<WithdrawHistoryV2Response>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.withdrawHistoryV2(
            requestParameters?.trId,
            requestParameters?.txId,
            requestParameters?.withdrawOrderId,
            requestParameters?.network,
            requestParameters?.coin,
            requestParameters?.travelRuleStatus,
            requestParameters?.offset,
            requestParameters?.limit,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.recvWindow
        );
        return sendRequest<WithdrawHistoryV2Response>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {WithdrawTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof TravelRuleApi
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw Binance API Documentation}
     */
    public async withdrawTravelRule(
        requestParameters: WithdrawTravelRuleRequest
    ): Promise<RestApiResponse<WithdrawTravelRuleResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.withdrawTravelRule(
            requestParameters?.coin,
            requestParameters?.address,
            requestParameters?.amount,
            requestParameters?.questionnaire,
            requestParameters?.withdrawOrderId,
            requestParameters?.network,
            requestParameters?.addressTag,
            requestParameters?.transactionFeeFlag,
            requestParameters?.name,
            requestParameters?.walletType,
            requestParameters?.recvWindow
        );
        return sendRequest<WithdrawTravelRuleResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
