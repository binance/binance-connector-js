/**
 * Binance Wallet REST API
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AllCoinsInformationResponse,
    DepositAddressResponse,
    DepositHistoryResponse,
    FetchDepositAddressListWithNetworkResponse,
    FetchWithdrawAddressListResponse,
    OneClickArrivalDepositApplyResponse,
    WithdrawHistoryResponse,
    WithdrawResponse,
} from '../types';

/**
 * CapitalApi - axios parameter creator
 */
const CapitalApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get information of coins (available for deposit and withdraw) for user.
         *
         * Weight: 10
         *
         * @summary All Coins\' Information (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        allCoinsInformation: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/config/getall',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch deposit address with network.
         *
         * If `network` is not send, return with default network of the coin.
         * You can get `network` and `isDefault` in `networkList` in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
         * `amount` needs to be sent if using LIGHTNING network
         *
         * Weight: 10
         *
         * @summary Deposit Address(supporting network) (USER_DATA)
         * @param {string} coin
         * @param {string} [network]
         * @param {number} [amount]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        depositAddress: async (
            coin: string,
            network?: string,
            amount?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('depositAddress', 'coin', coin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/address',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch deposit history.
         *
         *
         * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
         * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must be less than 90 days.
         *
         * Weight: 1
         *
         * @summary Deposit History (supporting network) (USER_DATA)
         * @param {boolean} [includeSource] Default: `false`, return `sourceAddress`field when set to `true`
         * @param {string} [coin]
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [offset] Default: 0
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow]
         * @param {string} [txId]
         *
         * @throws {RequiredError}
         */
        depositHistory: async (
            includeSource?: boolean,
            coin?: string,
            status?: number,
            startTime?: number,
            endTime?: number,
            offset?: number,
            limit?: number,
            recvWindow?: number,
            txId?: string
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (includeSource !== undefined && includeSource !== null) {
                localVarQueryParameter['includeSource'] = includeSource;
            }

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/hisrec',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch deposit address list with network.
         *
         *
         * If network is not send, return with default network of the coin.
         * You can get network and isDefault in networkList in the response of `Get /sapi/v1/capital/config/getall`.
         *
         * Weight: 10
         *
         * @summary Fetch deposit address list with network(USER_DATA)
         * @param {string} coin
         * @param {string} [network]
         *
         * @throws {RequiredError}
         */
        fetchDepositAddressListWithNetwork: async (
            coin: string,
            network?: string
        ): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('fetchDepositAddressListWithNetwork', 'coin', coin);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/address/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch withdraw address list
         *
         * Weight: 10
         *
         * @summary Fetch withdraw address list (USER_DATA)
         *
         * @throws {RequiredError}
         */
        fetchWithdrawAddressList: async (): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/withdraw/address/list',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Apply deposit credit for expired address (One click arrival)
         *
         * Params need to be in the POST body
         *
         * Weight: 1
         *
         * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
         * @param {number} [depositId] Deposit record Id, priority use
         * @param {string} [txId]
         * @param {number} [subAccountId] Sub-accountId of Cloud user
         * @param {number} [subUserId] Sub-userId of parent user
         *
         * @throws {RequiredError}
         */
        oneClickArrivalDepositApply: async (
            depositId?: number,
            txId?: string,
            subAccountId?: number,
            subUserId?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (depositId !== undefined && depositId !== null) {
                localVarQueryParameter['depositId'] = depositId;
            }

            if (txId !== undefined && txId !== null) {
                localVarQueryParameter['txId'] = txId;
            }

            if (subAccountId !== undefined && subAccountId !== null) {
                localVarQueryParameter['subAccountId'] = subAccountId;
            }

            if (subUserId !== undefined && subUserId !== null) {
                localVarQueryParameter['subUserId'] = subUserId;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/deposit/credit-apply',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Submit a withdraw request.
         *
         *
         * If `network` not send, return with default network of the coin.
         * You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
         *
         * Weight: 900
         *
         * @summary Withdraw(USER_DATA)
         * @param {string} coin
         * @param {string} address
         * @param {number} amount
         * @param {string} [withdrawOrderId]
         * @param {string} [network]
         * @param {string} [addressTag] Secondary address identifier for coins like XRP,XMR etc.
         * @param {boolean} [transactionFeeFlag] When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
         * @param {string} [name] Description of the address. Address book cap is 200, space in name should be encoded into `%20`
         * @param {number} [walletType] The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdraw: async (
            coin: string,
            address: string,
            amount: number,
            withdrawOrderId?: string,
            network?: string,
            addressTag?: string,
            transactionFeeFlag?: boolean,
            name?: string,
            walletType?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'coin' is not null or undefined
            assertParamExists('withdraw', 'coin', coin);
            // verify required parameter 'address' is not null or undefined
            assertParamExists('withdraw', 'address', address);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('withdraw', 'amount', amount);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (network !== undefined && network !== null) {
                localVarQueryParameter['network'] = network;
            }

            if (address !== undefined && address !== null) {
                localVarQueryParameter['address'] = address;
            }

            if (addressTag !== undefined && addressTag !== null) {
                localVarQueryParameter['addressTag'] = addressTag;
            }

            if (amount !== undefined && amount !== null) {
                localVarQueryParameter['amount'] = amount;
            }

            if (transactionFeeFlag !== undefined && transactionFeeFlag !== null) {
                localVarQueryParameter['transactionFeeFlag'] = transactionFeeFlag;
            }

            if (name !== undefined && name !== null) {
                localVarQueryParameter['name'] = name;
            }

            if (walletType !== undefined && walletType !== null) {
                localVarQueryParameter['walletType'] = walletType;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/withdraw/apply',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch withdraw history.
         *
         * `network` may not be in the response for old withdraw.
         * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
         * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less than 90 days.
         * If `withdrawOrderId` is sent, time between `startTime` and `endTime` must be less than 7 days.
         * If `withdrawOrderId` is sent, `startTime` and `endTime` are not sent, will return last 7 days records by default.
         * Maximum support `idList` number is 45.
         *
         * Weight: 18000
         * Request limit: 10 requests per second
         *
         * @summary Withdraw History (supporting network) (USER_DATA)
         * @param {string} [coin]
         * @param {string} [withdrawOrderId]
         * @param {number} [status] 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
         * @param {number} [offset] Default: 0
         * @param {number} [limit] min 7, max 30, default 7
         * @param {string} [idList] id list returned in the response of POST `/sapi/v1/capital/withdraw/apply`, separated by `,`
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        withdrawHistory: async (
            coin?: string,
            withdrawOrderId?: string,
            status?: number,
            offset?: number,
            limit?: number,
            idList?: string,
            startTime?: number,
            endTime?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (coin !== undefined && coin !== null) {
                localVarQueryParameter['coin'] = coin;
            }

            if (withdrawOrderId !== undefined && withdrawOrderId !== null) {
                localVarQueryParameter['withdrawOrderId'] = withdrawOrderId;
            }

            if (status !== undefined && status !== null) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined && offset !== null) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (idList !== undefined && idList !== null) {
                localVarQueryParameter['idList'] = idList;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/capital/withdraw/history',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * CapitalApi - interface
 * @interface CapitalApi
 */
export interface CapitalApiInterface {
    /**
     * Get information of coins (available for deposit and withdraw) for user.
     *
     * Weight: 10
     *
     * @summary All Coins\' Information (USER_DATA)
     * @param {AllCoinsInformationRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    allCoinsInformation(
        requestParameters?: AllCoinsInformationRequest
    ): Promise<RestApiResponse<AllCoinsInformationResponse>>;
    /**
     * Fetch deposit address with network.
     *
     * If `network` is not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 10
     *
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {DepositAddressRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    depositAddress(
        requestParameters: DepositAddressRequest
    ): Promise<RestApiResponse<DepositAddressResponse>>;
    /**
     * Fetch deposit history.
     *
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must be less than 90 days.
     *
     * Weight: 1
     *
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {DepositHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    depositHistory(
        requestParameters?: DepositHistoryRequest
    ): Promise<RestApiResponse<DepositHistoryResponse>>;
    /**
     * Fetch deposit address list with network.
     *
     *
     * If network is not send, return with default network of the coin.
     * You can get network and isDefault in networkList in the response of `Get /sapi/v1/capital/config/getall`.
     *
     * Weight: 10
     *
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {FetchDepositAddressListWithNetworkRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    fetchDepositAddressListWithNetwork(
        requestParameters: FetchDepositAddressListWithNetworkRequest
    ): Promise<RestApiResponse<FetchDepositAddressListWithNetworkResponse>>;
    /**
     * Fetch withdraw address list
     *
     * Weight: 10
     *
     * @summary Fetch withdraw address list (USER_DATA)
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    fetchWithdrawAddressList(): Promise<RestApiResponse<FetchWithdrawAddressListResponse>>;
    /**
     * Apply deposit credit for expired address (One click arrival)
     *
     * Params need to be in the POST body
     *
     * Weight: 1
     *
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {OneClickArrivalDepositApplyRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    oneClickArrivalDepositApply(
        requestParameters?: OneClickArrivalDepositApplyRequest
    ): Promise<RestApiResponse<OneClickArrivalDepositApplyResponse>>;
    /**
     * Submit a withdraw request.
     *
     *
     * If `network` not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     *
     * Weight: 900
     *
     * @summary Withdraw(USER_DATA)
     * @param {WithdrawRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    withdraw(requestParameters: WithdrawRequest): Promise<RestApiResponse<WithdrawResponse>>;
    /**
     * Fetch withdraw history.
     *
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less than 90 days.
     * If `withdrawOrderId` is sent, time between `startTime` and `endTime` must be less than 7 days.
     * If `withdrawOrderId` is sent, `startTime` and `endTime` are not sent, will return last 7 days records by default.
     * Maximum support `idList` number is 45.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     *
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {WithdrawHistoryRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApiInterface
     */
    withdrawHistory(
        requestParameters?: WithdrawHistoryRequest
    ): Promise<RestApiResponse<WithdrawHistoryResponse>>;
}

/**
 * Request parameters for allCoinsInformation operation in CapitalApi.
 * @interface AllCoinsInformationRequest
 */
export interface AllCoinsInformationRequest {
    /**
     *
     * @type {number}
     * @memberof CapitalApiAllCoinsInformation
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for depositAddress operation in CapitalApi.
 * @interface DepositAddressRequest
 */
export interface DepositAddressRequest {
    /**
     *
     * @type {string}
     * @memberof CapitalApiDepositAddress
     */
    readonly coin: string;

    /**
     *
     * @type {string}
     * @memberof CapitalApiDepositAddress
     */
    readonly network?: string;

    /**
     *
     * @type {number}
     * @memberof CapitalApiDepositAddress
     */
    readonly amount?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiDepositAddress
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for depositHistory operation in CapitalApi.
 * @interface DepositHistoryRequest
 */
export interface DepositHistoryRequest {
    /**
     * Default: `false`, return `sourceAddress`field when set to `true`
     * @type {boolean}
     * @memberof CapitalApiDepositHistory
     */
    readonly includeSource?: boolean;

    /**
     *
     * @type {string}
     * @memberof CapitalApiDepositHistory
     */
    readonly coin?: string;

    /**
     * 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly status?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly endTime?: number;

    /**
     * Default: 0
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly offset?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiDepositHistory
     */
    readonly recvWindow?: number;

    /**
     *
     * @type {string}
     * @memberof CapitalApiDepositHistory
     */
    readonly txId?: string;
}

/**
 * Request parameters for fetchDepositAddressListWithNetwork operation in CapitalApi.
 * @interface FetchDepositAddressListWithNetworkRequest
 */
export interface FetchDepositAddressListWithNetworkRequest {
    /**
     *
     * @type {string}
     * @memberof CapitalApiFetchDepositAddressListWithNetwork
     */
    readonly coin: string;

    /**
     *
     * @type {string}
     * @memberof CapitalApiFetchDepositAddressListWithNetwork
     */
    readonly network?: string;
}

/**
 * Request parameters for oneClickArrivalDepositApply operation in CapitalApi.
 * @interface OneClickArrivalDepositApplyRequest
 */
export interface OneClickArrivalDepositApplyRequest {
    /**
     * Deposit record Id, priority use
     * @type {number}
     * @memberof CapitalApiOneClickArrivalDepositApply
     */
    readonly depositId?: number;

    /**
     *
     * @type {string}
     * @memberof CapitalApiOneClickArrivalDepositApply
     */
    readonly txId?: string;

    /**
     * Sub-accountId of Cloud user
     * @type {number}
     * @memberof CapitalApiOneClickArrivalDepositApply
     */
    readonly subAccountId?: number;

    /**
     * Sub-userId of parent user
     * @type {number}
     * @memberof CapitalApiOneClickArrivalDepositApply
     */
    readonly subUserId?: number;
}

/**
 * Request parameters for withdraw operation in CapitalApi.
 * @interface WithdrawRequest
 */
export interface WithdrawRequest {
    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly coin: string;

    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly address: string;

    /**
     *
     * @type {number}
     * @memberof CapitalApiWithdraw
     */
    readonly amount: number;

    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly withdrawOrderId?: string;

    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly network?: string;

    /**
     * Secondary address identifier for coins like XRP,XMR etc.
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly addressTag?: string;

    /**
     * When making internal transfer, `true` for returning the fee to the destination account; `false` for returning the fee back to the departure account. Default `false`.
     * @type {boolean}
     * @memberof CapitalApiWithdraw
     */
    readonly transactionFeeFlag?: boolean;

    /**
     * Description of the address. Address book cap is 200, space in name should be encoded into `%20`
     * @type {string}
     * @memberof CapitalApiWithdraw
     */
    readonly name?: string;

    /**
     * The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current "selected wallet" under wallet->Fiat and Spot/Funding->Deposit
     * @type {number}
     * @memberof CapitalApiWithdraw
     */
    readonly walletType?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiWithdraw
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for withdrawHistory operation in CapitalApi.
 * @interface WithdrawHistoryRequest
 */
export interface WithdrawHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly coin?: string;

    /**
     *
     * @type {string}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly withdrawOrderId?: string;

    /**
     * 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly status?: number;

    /**
     * Default: 0
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly offset?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly limit?: number;

    /**
     * id list returned in the response of POST `/sapi/v1/capital/withdraw/apply`, separated by `,`
     * @type {string}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly idList?: string;

    /**
     *
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly endTime?: number;

    /**
     *
     * @type {number}
     * @memberof CapitalApiWithdrawHistory
     */
    readonly recvWindow?: number;
}

/**
 * CapitalApi - object-oriented interface
 * @class CapitalApi
 */
export class CapitalApi implements CapitalApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = CapitalApiAxiosParamCreator(configuration);
    }

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     *
     * Weight: 10
     *
     * @summary All Coins\' Information (USER_DATA)
     * @param {AllCoinsInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AllCoinsInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/all-coins-info Binance API Documentation}
     */
    public async allCoinsInformation(
        requestParameters: AllCoinsInformationRequest = {}
    ): Promise<RestApiResponse<AllCoinsInformationResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.allCoinsInformation(
            requestParameters?.recvWindow
        );
        return sendRequest<AllCoinsInformationResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch deposit address with network.
     *
     * If `network` is not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 10
     *
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {DepositAddressRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositAddressResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/deposite-address Binance API Documentation}
     */
    public async depositAddress(
        requestParameters: DepositAddressRequest
    ): Promise<RestApiResponse<DepositAddressResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.depositAddress(
            requestParameters?.coin,
            requestParameters?.network,
            requestParameters?.amount,
            requestParameters?.recvWindow
        );
        return sendRequest<DepositAddressResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch deposit history.
     *
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must be less than 90 days.
     *
     * Weight: 1
     *
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {DepositHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/deposite-history Binance API Documentation}
     */
    public async depositHistory(
        requestParameters: DepositHistoryRequest = {}
    ): Promise<RestApiResponse<DepositHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.depositHistory(
            requestParameters?.includeSource,
            requestParameters?.coin,
            requestParameters?.status,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.offset,
            requestParameters?.limit,
            requestParameters?.recvWindow,
            requestParameters?.txId
        );
        return sendRequest<DepositHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch deposit address list with network.
     *
     *
     * If network is not send, return with default network of the coin.
     * You can get network and isDefault in networkList in the response of `Get /sapi/v1/capital/config/getall`.
     *
     * Weight: 10
     *
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {FetchDepositAddressListWithNetworkRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FetchDepositAddressListWithNetworkResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/Fetch-deposit-address-list-with-network Binance API Documentation}
     */
    public async fetchDepositAddressListWithNetwork(
        requestParameters: FetchDepositAddressListWithNetworkRequest
    ): Promise<RestApiResponse<FetchDepositAddressListWithNetworkResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.fetchDepositAddressListWithNetwork(
                requestParameters?.coin,
                requestParameters?.network
            );
        return sendRequest<FetchDepositAddressListWithNetworkResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch withdraw address list
     *
     * Weight: 10
     *
     * @summary Fetch withdraw address list (USER_DATA)
     * @returns {Promise<RestApiResponse<FetchWithdrawAddressListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/fetch-withdraw-address Binance API Documentation}
     */
    public async fetchWithdrawAddressList(): Promise<
        RestApiResponse<FetchWithdrawAddressListResponse>
        > {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.fetchWithdrawAddressList();
        return sendRequest<FetchWithdrawAddressListResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Apply deposit credit for expired address (One click arrival)
     *
     * Params need to be in the POST body
     *
     * Weight: 1
     *
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {OneClickArrivalDepositApplyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OneClickArrivalDepositApplyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/one-click-arrival-deposite-apply Binance API Documentation}
     */
    public async oneClickArrivalDepositApply(
        requestParameters: OneClickArrivalDepositApplyRequest = {}
    ): Promise<RestApiResponse<OneClickArrivalDepositApplyResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.oneClickArrivalDepositApply(
            requestParameters?.depositId,
            requestParameters?.txId,
            requestParameters?.subAccountId,
            requestParameters?.subUserId
        );
        return sendRequest<OneClickArrivalDepositApplyResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Submit a withdraw request.
     *
     *
     * If `network` not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     *
     * Weight: 900
     *
     * @summary Withdraw(USER_DATA)
     * @param {WithdrawRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/Withdraw Binance API Documentation}
     */
    public async withdraw(
        requestParameters: WithdrawRequest
    ): Promise<RestApiResponse<WithdrawResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.withdraw(
            requestParameters?.coin,
            requestParameters?.address,
            requestParameters?.amount,
            requestParameters?.withdrawOrderId,
            requestParameters?.network,
            requestParameters?.addressTag,
            requestParameters?.transactionFeeFlag,
            requestParameters?.name,
            requestParameters?.walletType,
            requestParameters?.recvWindow
        );
        return sendRequest<WithdrawResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch withdraw history.
     *
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less than 90 days.
     * If `withdrawOrderId` is sent, time between `startTime` and `endTime` must be less than 7 days.
     * If `withdrawOrderId` is sent, `startTime` and `endTime` are not sent, will return last 7 days records by default.
     * Maximum support `idList` number is 45.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     *
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {WithdrawHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof CapitalApi
     * @see {@link https://developers.binance.com/docs/wallet/capital/Withdraw-History Binance API Documentation}
     */
    public async withdrawHistory(
        requestParameters: WithdrawHistoryRequest = {}
    ): Promise<RestApiResponse<WithdrawHistoryResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.withdrawHistory(
            requestParameters?.coin,
            requestParameters?.withdrawOrderId,
            requestParameters?.status,
            requestParameters?.offset,
            requestParameters?.limit,
            requestParameters?.idList,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.recvWindow
        );
        return sendRequest<WithdrawHistoryResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
