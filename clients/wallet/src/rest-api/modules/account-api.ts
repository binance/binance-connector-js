/**
 * Binance Public Wallet REST API
 *
 * OpenAPI Specification for the Binance Public Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    assertParamExists,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    AccountApiTradingStatusResponse,
    AccountInfoResponse,
    AccountStatusResponse,
    DailyAccountSnapshotResponse,
    GetApiKeyPermissionResponse,
} from '../types';

/**
 * AccountApi - axios parameter creator
 */
const AccountApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Fetch account api trading status detail.
         *
         * Weight: 1
         *
         * @summary Account API Trading Status (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountApiTradingStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/apiTradingStatus',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch account info detail.
         *
         * Weight: 1
         *
         * @summary Account info (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountInfo: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/info',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Fetch account status detail.
         *
         * Weight: 1
         *
         * @summary Account Status (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        accountStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/status',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Daily account snapshot
         *
         * The query time period must be less then 30 days
         * Support query within the last one month only
         * If startTimeand endTime not sent, return records of the last 7 days by default
         *
         * Weight: 2400
         *
         * @summary Daily Account Snapshot (USER_DATA)
         * @param {string} type
         * @param {number} [startTime]
         * @param {number} [endTime]
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        dailyAccountSnapshot: async (
            type: string,
            startTime?: number,
            endTime?: number,
            limit?: number,
            recvWindow?: number
        ): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('dailyAccountSnapshot', 'type', type);

            const localVarQueryParameter: Record<string, unknown> = {};

            if (type !== undefined && type !== null) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined && startTime !== null) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined && endTime !== null) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined && limit !== null) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/accountSnapshot',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         *
         * Weight: 1
         *
         * @summary Disable Fast Withdraw Switch (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        disableFastWithdrawSwitch: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/disableFastWithdrawSwitch',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         *
         * This request will enable fastwithdraw switch under your  account. <br></br>
         * When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
         *
         * Weight: 1
         *
         * @summary Enable Fast Withdraw Switch (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        enableFastWithdrawSwitch: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/enableFastWithdrawSwitch',
                method: 'POST',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get API Key Permission
         *
         * Weight: 1
         *
         * @summary Get API Key Permission (USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getApiKeyPermission: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/account/apiRestrictions',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * AccountApi - interface
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * Fetch account api trading status detail.
     *
     * Weight: 1
     *
     * @summary Account API Trading Status (USER_DATA)
     * @param {AccountApiTradingStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountApiTradingStatus(
        requestParameters?: AccountApiTradingStatusRequest
    ): Promise<RestApiResponse<AccountApiTradingStatusResponse>>;
    /**
     * Fetch account info detail.
     *
     * Weight: 1
     *
     * @summary Account info (USER_DATA)
     * @param {AccountInfoRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountInfo(
        requestParameters?: AccountInfoRequest
    ): Promise<RestApiResponse<AccountInfoResponse>>;
    /**
     * Fetch account status detail.
     *
     * Weight: 1
     *
     * @summary Account Status (USER_DATA)
     * @param {AccountStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    accountStatus(
        requestParameters?: AccountStatusRequest
    ): Promise<RestApiResponse<AccountStatusResponse>>;
    /**
     * Daily account snapshot
     *
     * The query time period must be less then 30 days
     * Support query within the last one month only
     * If startTimeand endTime not sent, return records of the last 7 days by default
     *
     * Weight: 2400
     *
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {DailyAccountSnapshotRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    dailyAccountSnapshot(
        requestParameters: DailyAccountSnapshotRequest
    ): Promise<RestApiResponse<DailyAccountSnapshotResponse>>;
    /**
     *
     * Weight: 1
     *
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {DisableFastWithdrawSwitchRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    disableFastWithdrawSwitch(
        requestParameters?: DisableFastWithdrawSwitchRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * This request will enable fastwithdraw switch under your  account. <br></br>
     * When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
     *
     * Weight: 1
     *
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {EnableFastWithdrawSwitchRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    enableFastWithdrawSwitch(
        requestParameters?: EnableFastWithdrawSwitchRequest
    ): Promise<RestApiResponse<void>>;
    /**
     * Get API Key Permission
     *
     * Weight: 1
     *
     * @summary Get API Key Permission (USER_DATA)
     * @param {GetApiKeyPermissionRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApiInterface
     */
    getApiKeyPermission(
        requestParameters?: GetApiKeyPermissionRequest
    ): Promise<RestApiResponse<GetApiKeyPermissionResponse>>;
}

/**
 * Request parameters for accountApiTradingStatus operation in AccountApi.
 * @interface AccountApiTradingStatusRequest
 */
export interface AccountApiTradingStatusRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountApiTradingStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for accountInfo operation in AccountApi.
 * @interface AccountInfoRequest
 */
export interface AccountInfoRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountInfo
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for accountStatus operation in AccountApi.
 * @interface AccountStatusRequest
 */
export interface AccountStatusRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiAccountStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for dailyAccountSnapshot operation in AccountApi.
 * @interface DailyAccountSnapshotRequest
 */
export interface DailyAccountSnapshotRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiDailyAccountSnapshot
     */
    readonly type: string;

    /**
     *
     * @type {number}
     * @memberof AccountApiDailyAccountSnapshot
     */
    readonly startTime?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiDailyAccountSnapshot
     */
    readonly endTime?: number;

    /**
     * min 7, max 30, default 7
     * @type {number}
     * @memberof AccountApiDailyAccountSnapshot
     */
    readonly limit?: number;

    /**
     *
     * @type {number}
     * @memberof AccountApiDailyAccountSnapshot
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for disableFastWithdrawSwitch operation in AccountApi.
 * @interface DisableFastWithdrawSwitchRequest
 */
export interface DisableFastWithdrawSwitchRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiDisableFastWithdrawSwitch
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for enableFastWithdrawSwitch operation in AccountApi.
 * @interface EnableFastWithdrawSwitchRequest
 */
export interface EnableFastWithdrawSwitchRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiEnableFastWithdrawSwitch
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getApiKeyPermission operation in AccountApi.
 * @interface GetApiKeyPermissionRequest
 */
export interface GetApiKeyPermissionRequest {
    /**
     *
     * @type {number}
     * @memberof AccountApiGetApiKeyPermission
     */
    readonly recvWindow?: number;
}

/**
 * AccountApi - object-oriented interface
 * @class AccountApi
 */
export class AccountApi implements AccountApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
    }

    /**
     * Fetch account api trading status detail.
     *
     * Weight: 1
     *
     * @summary Account API Trading Status (USER_DATA)
     * @param {AccountApiTradingStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountApiTradingStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-API-Trading-Status Binance API Documentation}
     */
    public async accountApiTradingStatus(
        requestParameters: AccountApiTradingStatusRequest = {}
    ): Promise<RestApiResponse<AccountApiTradingStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountApiTradingStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountApiTradingStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch account info detail.
     *
     * Weight: 1
     *
     * @summary Account info (USER_DATA)
     * @param {AccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-info Binance API Documentation}
     */
    public async accountInfo(
        requestParameters: AccountInfoRequest = {}
    ): Promise<RestApiResponse<AccountInfoResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountInfo(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountInfoResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Fetch account status detail.
     *
     * Weight: 1
     *
     * @summary Account Status (USER_DATA)
     * @param {AccountStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-Status Binance API Documentation}
     */
    public async accountStatus(
        requestParameters: AccountStatusRequest = {}
    ): Promise<RestApiResponse<AccountStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.accountStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<AccountStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Daily account snapshot
     *
     * The query time period must be less then 30 days
     * Support query within the last one month only
     * If startTimeand endTime not sent, return records of the last 7 days by default
     *
     * Weight: 2400
     *
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {DailyAccountSnapshotRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DailyAccountSnapshotResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/daily-account-snapshoot Binance API Documentation}
     */
    public async dailyAccountSnapshot(
        requestParameters: DailyAccountSnapshotRequest
    ): Promise<RestApiResponse<DailyAccountSnapshotResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.dailyAccountSnapshot(
            requestParameters?.type,
            requestParameters?.startTime,
            requestParameters?.endTime,
            requestParameters?.limit,
            requestParameters?.recvWindow
        );
        return sendRequest<DailyAccountSnapshotResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     *
     * Weight: 1
     *
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {DisableFastWithdrawSwitchRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/Disable-Fast-Withdraw-Switch Binance API Documentation}
     */
    public async disableFastWithdrawSwitch(
        requestParameters: DisableFastWithdrawSwitchRequest = {}
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.disableFastWithdrawSwitch(
            requestParameters?.recvWindow
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * This request will enable fastwithdraw switch under your  account. <br></br>
     * When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
     *
     * Weight: 1
     *
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {EnableFastWithdrawSwitchRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/Enable-Fast-Withdraw-Switch Binance API Documentation}
     */
    public async enableFastWithdrawSwitch(
        requestParameters: EnableFastWithdrawSwitchRequest = {}
    ): Promise<RestApiResponse<void>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.enableFastWithdrawSwitch(
            requestParameters?.recvWindow
        );
        return sendRequest<void>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get API Key Permission
     *
     * Weight: 1
     *
     * @summary Get API Key Permission (USER_DATA)
     * @param {GetApiKeyPermissionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetApiKeyPermissionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof AccountApi
     * @see {@link https://developers.binance.com/docs/wallet/account/api-key-permission Binance API Documentation}
     */
    public async getApiKeyPermission(
        requestParameters: GetApiKeyPermissionRequest = {}
    ): Promise<RestApiResponse<GetApiKeyPermissionResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getApiKeyPermission(
            requestParameters?.recvWindow
        );
        return sendRequest<GetApiKeyPermissionResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
