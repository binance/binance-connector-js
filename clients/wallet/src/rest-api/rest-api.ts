/**
 * Binance Wallet REST API
 *
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { AssetApi } from './modules/asset-api';
import { CapitalApi } from './modules/capital-api';
import { OthersApi } from './modules/others-api';
import { TravelRuleApi } from './modules/travel-rule-api';

import type {
    AccountApiTradingStatusRequest,
    AccountInfoRequest,
    AccountStatusRequest,
    DailyAccountSnapshotRequest,
    DisableFastWithdrawSwitchRequest,
    EnableFastWithdrawSwitchRequest,
    GetApiKeyPermissionRequest,
} from './modules/account-api';
import type {
    AssetDetailRequest,
    AssetDividendRecordRequest,
    DustTransferRequest,
    DustlogRequest,
    FundingWalletRequest,
    GetAssetsThatCanBeConvertedIntoBnbRequest,
    GetCloudMiningPaymentAndRefundHistoryRequest,
    QueryUserDelegationHistoryRequest,
    QueryUserUniversalTransferHistoryRequest,
    QueryUserWalletBalanceRequest,
    ToggleBnbBurnOnSpotTradeAndMarginInterestRequest,
    TradeFeeRequest,
    UserAssetRequest,
    UserUniversalTransferRequest,
} from './modules/asset-api';
import type {
    AllCoinsInformationRequest,
    DepositAddressRequest,
    DepositHistoryRequest,
    FetchDepositAddressListWithNetworkRequest,
    OneClickArrivalDepositApplyRequest,
    WithdrawRequest,
    WithdrawHistoryRequest,
} from './modules/capital-api';
import type { GetSymbolsDelistScheduleForSpotRequest } from './modules/others-api';
import type {
    BrokerWithdrawRequest,
    DepositHistoryTravelRuleRequest,
    SubmitDepositQuestionnaireRequest,
    SubmitDepositQuestionnaireTravelRuleRequest,
    WithdrawHistoryV1Request,
    WithdrawHistoryV2Request,
    WithdrawTravelRuleRequest,
} from './modules/travel-rule-api';

import type {
    AccountApiTradingStatusResponse,
    AccountInfoResponse,
    AccountStatusResponse,
    DailyAccountSnapshotResponse,
    GetApiKeyPermissionResponse,
} from './types';
import type {
    AssetDetailResponse,
    AssetDividendRecordResponse,
    DustTransferResponse,
    DustlogResponse,
    FundingWalletResponse,
    GetAssetsThatCanBeConvertedIntoBnbResponse,
    GetCloudMiningPaymentAndRefundHistoryResponse,
    GetOpenSymbolListResponse,
    QueryUserDelegationHistoryResponse,
    QueryUserUniversalTransferHistoryResponse,
    QueryUserWalletBalanceResponse,
    ToggleBnbBurnOnSpotTradeAndMarginInterestResponse,
    TradeFeeResponse,
    UserAssetResponse,
    UserUniversalTransferResponse,
} from './types';
import type {
    AllCoinsInformationResponse,
    DepositAddressResponse,
    DepositHistoryResponse,
    FetchDepositAddressListWithNetworkResponse,
    FetchWithdrawAddressListResponse,
    OneClickArrivalDepositApplyResponse,
    WithdrawResponse,
    WithdrawHistoryResponse,
} from './types';
import type { GetSymbolsDelistScheduleForSpotResponse, SystemStatusResponse } from './types';
import type {
    BrokerWithdrawResponse,
    DepositHistoryTravelRuleResponse,
    OnboardedVaspListResponse,
    SubmitDepositQuestionnaireResponse,
    SubmitDepositQuestionnaireTravelRuleResponse,
    WithdrawHistoryV1Response,
    WithdrawHistoryV2Response,
    WithdrawTravelRuleResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private assetApi: AssetApi;
    private capitalApi: CapitalApi;
    private othersApi: OthersApi;
    private travelRuleApi: TravelRuleApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.assetApi = new AssetApi(configuration);
        this.capitalApi = new CapitalApi(configuration);
        this.othersApi = new OthersApi(configuration);
        this.travelRuleApi = new TravelRuleApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Fetch account api trading status detail.
     *
     * Weight: 1
     *
     * @summary Account API Trading Status (USER_DATA)
     * @param {AccountApiTradingStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountApiTradingStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-API-Trading-Status Binance API Documentation}
     */
    accountApiTradingStatus(
        requestParameters: AccountApiTradingStatusRequest = {}
    ): Promise<RestApiResponse<AccountApiTradingStatusResponse>> {
        return this.accountApi.accountApiTradingStatus(requestParameters);
    }

    /**
     * Fetch account info detail.
     *
     * Weight: 1
     *
     * @summary Account info (USER_DATA)
     * @param {AccountInfoRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountInfoResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-info Binance API Documentation}
     */
    accountInfo(
        requestParameters: AccountInfoRequest = {}
    ): Promise<RestApiResponse<AccountInfoResponse>> {
        return this.accountApi.accountInfo(requestParameters);
    }

    /**
     * Fetch account status detail.
     *
     * Weight: 1
     *
     * @summary Account Status (USER_DATA)
     * @param {AccountStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AccountStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/Account-Status Binance API Documentation}
     */
    accountStatus(
        requestParameters: AccountStatusRequest = {}
    ): Promise<RestApiResponse<AccountStatusResponse>> {
        return this.accountApi.accountStatus(requestParameters);
    }

    /**
     * Daily account snapshot
     *
     * The query time period must be less then 30 days
     * Support query within the last one month only
     * If startTimeand endTime not sent, return records of the last 7 days by default
     *
     * Weight: 2400
     *
     * @summary Daily Account Snapshot (USER_DATA)
     * @param {DailyAccountSnapshotRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DailyAccountSnapshotResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/daily-account-snapshoot Binance API Documentation}
     */
    dailyAccountSnapshot(
        requestParameters: DailyAccountSnapshotRequest
    ): Promise<RestApiResponse<DailyAccountSnapshotResponse>> {
        return this.accountApi.dailyAccountSnapshot(requestParameters);
    }

    /**
     *
     * Weight: 1
     *
     * @summary Disable Fast Withdraw Switch (USER_DATA)
     * @param {DisableFastWithdrawSwitchRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/Disable-Fast-Withdraw-Switch Binance API Documentation}
     */
    disableFastWithdrawSwitch(
        requestParameters: DisableFastWithdrawSwitchRequest = {}
    ): Promise<RestApiResponse<void>> {
        return this.accountApi.disableFastWithdrawSwitch(requestParameters);
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     * This request will enable fastwithdraw switch under your  account. <br></br>
     * When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
     *
     * Weight: 1
     *
     * @summary Enable Fast Withdraw Switch (USER_DATA)
     * @param {EnableFastWithdrawSwitchRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<void>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/Enable-Fast-Withdraw-Switch Binance API Documentation}
     */
    enableFastWithdrawSwitch(
        requestParameters: EnableFastWithdrawSwitchRequest = {}
    ): Promise<RestApiResponse<void>> {
        return this.accountApi.enableFastWithdrawSwitch(requestParameters);
    }

    /**
     * Get API Key Permission
     *
     * Weight: 1
     *
     * @summary Get API Key Permission (USER_DATA)
     * @param {GetApiKeyPermissionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetApiKeyPermissionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/account/api-key-permission Binance API Documentation}
     */
    getApiKeyPermission(
        requestParameters: GetApiKeyPermissionRequest = {}
    ): Promise<RestApiResponse<GetApiKeyPermissionResponse>> {
        return this.accountApi.getApiKeyPermission(requestParameters);
    }

    /**
     * Fetch details of assets supported on Binance.
     *
     *
     * Please get network and other deposit or withdraw details from ``GET /sapi/v1/capital/config/getall``.
     *
     * Weight: 1
     *
     * @summary Asset Detail (USER_DATA)
     * @param {AssetDetailRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AssetDetailResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Asset-Detail Binance API Documentation}
     */
    assetDetail(
        requestParameters: AssetDetailRequest = {}
    ): Promise<RestApiResponse<AssetDetailResponse>> {
        return this.assetApi.assetDetail(requestParameters);
    }

    /**
     * Query asset dividend record.
     *
     *
     * There cannot be more than 180 days between parameter `startTime` and `endTime`.
     *
     * Weight: 10
     *
     * @summary Asset Dividend Record (USER_DATA)
     * @param {AssetDividendRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AssetDividendRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/assets-divided-record Binance API Documentation}
     */
    assetDividendRecord(
        requestParameters: AssetDividendRecordRequest = {}
    ): Promise<RestApiResponse<AssetDividendRecordResponse>> {
        return this.assetApi.assetDividendRecord(requestParameters);
    }

    /**
     * Convert dust assets to BNB.
     *
     * You need to open`Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 10
     *
     * @summary Dust Transfer (USER_DATA)
     * @param {DustTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DustTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Dust-Transfer Binance API Documentation}
     */
    dustTransfer(
        requestParameters: DustTransferRequest
    ): Promise<RestApiResponse<DustTransferResponse>> {
        return this.assetApi.dustTransfer(requestParameters);
    }

    /**
     * Dustlog
     *
     * Only return last 100 records
     * Only return records after 2020/12/01
     *
     * Weight: 1
     *
     * @summary DustLog(USER_DATA)
     * @param {DustlogRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DustlogResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/dust-log Binance API Documentation}
     */
    dustlog(requestParameters: DustlogRequest = {}): Promise<RestApiResponse<DustlogResponse>> {
        return this.assetApi.dustlog(requestParameters);
    }

    /**
     * Query Funding Wallet
     *
     *
     * Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token
     *
     * Weight: 1
     *
     * @summary Funding Wallet (USER_DATA)
     * @param {FundingWalletRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FundingWalletResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Funding-Wallet Binance API Documentation}
     */
    fundingWallet(
        requestParameters: FundingWalletRequest = {}
    ): Promise<RestApiResponse<FundingWalletResponse>> {
        return this.assetApi.fundingWallet(requestParameters);
    }

    /**
     * Get Assets That Can Be Converted Into BNB
     *
     * Weight: 1
     *
     * @summary Get Assets That Can Be Converted Into BNB (USER_DATA)
     * @param {GetAssetsThatCanBeConvertedIntoBnbRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/assets-can-convert-bnb Binance API Documentation}
     */
    getAssetsThatCanBeConvertedIntoBnb(
        requestParameters: GetAssetsThatCanBeConvertedIntoBnbRequest = {}
    ): Promise<RestApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>> {
        return this.assetApi.getAssetsThatCanBeConvertedIntoBnb(requestParameters);
    }

    /**
     * The query of Cloud-Mining payment and refund history
     *
     * Just return the SUCCESS records of payment and refund.
     * For response, type = 248 means payment, type = 249 means refund, status =S means SUCCESS.
     *
     * Weight: 600
     *
     * @summary Get Cloud-Mining payment and refund history (USER_DATA)
     * @param {GetCloudMiningPaymentAndRefundHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/cloud-mining-payment-and-refund-history Binance API Documentation}
     */
    getCloudMiningPaymentAndRefundHistory(
        requestParameters: GetCloudMiningPaymentAndRefundHistoryRequest
    ): Promise<RestApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>> {
        return this.assetApi.getCloudMiningPaymentAndRefundHistory(requestParameters);
    }

    /**
     * Get the list of symbols that are scheduled to be opened for trading in the market.
     *
     * Weight: 100
     *
     * @summary Get Open Symbol List (MARKET_DATA)
     * @returns {Promise<RestApiResponse<GetOpenSymbolListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/open-symbol-list Binance API Documentation}
     */
    getOpenSymbolList(): Promise<RestApiResponse<GetOpenSymbolListResponse>> {
        return this.assetApi.getOpenSymbolList();
    }

    /**
     * Query User Delegation History
     *
     * You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint
     *
     * Weight: 60
     *
     * @summary Query User Delegation History(For Master Account)(USER_DATA)
     * @param {QueryUserDelegationHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserDelegationHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/query-user-delegation Binance API Documentation}
     */
    queryUserDelegationHistory(
        requestParameters: QueryUserDelegationHistoryRequest
    ): Promise<RestApiResponse<QueryUserDelegationHistoryResponse>> {
        return this.assetApi.queryUserDelegationHistory(requestParameters);
    }

    /**
     * Query User Universal Transfer History
     *
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * Support query within the last 6 months only
     * If `startTime`and `endTime` not sent, return records of the last 7 days by default
     *
     * Weight: 1
     *
     * @summary Query User Universal Transfer History(USER_DATA)
     * @param {QueryUserUniversalTransferHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserUniversalTransferHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/query-user-universal-transfer Binance API Documentation}
     */
    queryUserUniversalTransferHistory(
        requestParameters: QueryUserUniversalTransferHistoryRequest
    ): Promise<RestApiResponse<QueryUserUniversalTransferHistoryResponse>> {
        return this.assetApi.queryUserUniversalTransferHistory(requestParameters);
    }

    /**
     * Query User Wallet Balance
     *
     *
     * You need to open Permits Universal Transfer permission for the API Key which requests this endpoint.
     *
     * Weight: 60
     *
     * @summary Query User Wallet Balance (USER_DATA)
     * @param {QueryUserWalletBalanceRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<QueryUserWalletBalanceResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Query-User-Wallet-Balance Binance API Documentation}
     */
    queryUserWalletBalance(
        requestParameters: QueryUserWalletBalanceRequest = {}
    ): Promise<RestApiResponse<QueryUserWalletBalanceResponse>> {
        return this.assetApi.queryUserWalletBalance(requestParameters);
    }

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest
     *
     * "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
     *
     * Weight: 1(IP)
     *
     * @summary Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
     * @param {ToggleBnbBurnOnSpotTradeAndMarginInterestRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Toggle-BNB-Burn-On-Spot-Trade-And-Margin-Interest Binance API Documentation}
     */
    toggleBnbBurnOnSpotTradeAndMarginInterest(
        requestParameters: ToggleBnbBurnOnSpotTradeAndMarginInterestRequest = {}
    ): Promise<RestApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>> {
        return this.assetApi.toggleBnbBurnOnSpotTradeAndMarginInterest(requestParameters);
    }

    /**
     * Fetch trade fee
     *
     * Weight: 1
     *
     * @summary Trade Fee (USER_DATA)
     * @param {TradeFeeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<TradeFeeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/Trade-Fee Binance API Documentation}
     */
    tradeFee(requestParameters: TradeFeeRequest = {}): Promise<RestApiResponse<TradeFeeResponse>> {
        return this.assetApi.tradeFee(requestParameters);
    }

    /**
     * Get user assets, just for positive data.
     *
     * If asset is set, then return this asset, otherwise return all assets positive.
     * If needBtcValuation is set, then return btcValudation.
     *
     * Weight: 5
     *
     * @summary User Asset (USER_DATA)
     * @param {UserAssetRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserAssetResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/user-assets Binance API Documentation}
     */
    userAsset(
        requestParameters: UserAssetRequest = {}
    ): Promise<RestApiResponse<UserAssetResponse>> {
        return this.assetApi.userAsset(requestParameters);
    }

    /**
     * user universal transfer
     *
     *  `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     *  `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
     * ENUM of transfer types:
     * MAIN_UMFUTURE   Spot account transfer to USDⓈ-M Futures account
     * MAIN_CMFUTURE   Spot account transfer to COIN-M Futures account
     * MAIN_MARGIN   Spot account transfer to Margin（cross）account
     * UMFUTURE_MAIN   USDⓈ-M Futures account transfer to Spot account
     * UMFUTURE_MARGIN   USDⓈ-M Futures account transfer to Margin（cross）account
     * CMFUTURE_MAIN   COIN-M Futures account transfer to Spot account
     * CMFUTURE_MARGIN   COIN-M Futures account transfer to Margin(cross) account
     * MARGIN_MAIN   Margin（cross）account transfer to Spot account
     * MARGIN_UMFUTURE   Margin（cross）account transfer to USDⓈ-M Futures
     * MARGIN_CMFUTURE   Margin（cross）account transfer to COIN-M Futures
     * ISOLATEDMARGIN_MARGIN   Isolated margin account transfer to Margin(cross) account
     * MARGIN_ISOLATEDMARGIN   Margin(cross) account transfer to Isolated margin account
     * ISOLATEDMARGIN_ISOLATEDMARGIN   Isolated margin account transfer to Isolated margin account
     * MAIN_FUNDING   Spot account transfer to Funding account
     * FUNDING_MAIN   Funding account transfer to Spot account
     * FUNDING_UMFUTURE   Funding account transfer to UMFUTURE account
     * UMFUTURE_FUNDING   UMFUTURE account transfer to Funding account
     * MARGIN_FUNDING   MARGIN account transfer to Funding account
     * FUNDING_MARGIN   Funding account transfer to Margin account
     * FUNDING_CMFUTURE   Funding account transfer to CMFUTURE account
     * CMFUTURE_FUNDING   CMFUTURE account transfer to Funding account
     * MAIN_OPTION  Spot account transfer to Options account
     * OPTION_MAIN  Options account transfer to Spot account
     * UMFUTURE_OPTION USDⓈ-M Futures account transfer to Options account
     * OPTION_UMFUTURE Options account transfer to USDⓈ-M Futures account
     * MARGIN_OPTION  Margin（cross）account transfer to Options account
     * OPTION_MARGIN  Options account transfer to Margin（cross）account
     * FUNDING_OPTION   Funding account transfer to Options account
     * OPTION_FUNDING   Options account transfer to Funding account
     * MAIN_PORTFOLIO_MARGIN  Spot account transfer to Portfolio Margin account
     * PORTFOLIO_MARGIN_MAIN  Portfolio Margin account transfer to Spot account
     *
     * Weight: 900
     *
     * @summary User Universal Transfer (USER_DATA)
     * @param {UserUniversalTransferRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<UserUniversalTransferResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/asset/User-Universal-Transfer Binance API Documentation}
     */
    userUniversalTransfer(
        requestParameters: UserUniversalTransferRequest
    ): Promise<RestApiResponse<UserUniversalTransferResponse>> {
        return this.assetApi.userUniversalTransfer(requestParameters);
    }

    /**
     * Get information of coins (available for deposit and withdraw) for user.
     *
     * Weight: 10
     *
     * @summary All Coins\' Information (USER_DATA)
     * @param {AllCoinsInformationRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<AllCoinsInformationResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/all-coins-info Binance API Documentation}
     */
    allCoinsInformation(
        requestParameters: AllCoinsInformationRequest = {}
    ): Promise<RestApiResponse<AllCoinsInformationResponse>> {
        return this.capitalApi.allCoinsInformation(requestParameters);
    }

    /**
     * Fetch deposit address with network.
     *
     * If `network` is not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     * `amount` needs to be sent if using LIGHTNING network
     *
     * Weight: 10
     *
     * @summary Deposit Address(supporting network) (USER_DATA)
     * @param {DepositAddressRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositAddressResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/deposite-address Binance API Documentation}
     */
    depositAddress(
        requestParameters: DepositAddressRequest
    ): Promise<RestApiResponse<DepositAddressResponse>> {
        return this.capitalApi.depositAddress(requestParameters);
    }

    /**
     * Fetch deposit history.
     *
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must be less than 90 days.
     *
     * Weight: 1
     *
     * @summary Deposit History (supporting network) (USER_DATA)
     * @param {DepositHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/deposite-history Binance API Documentation}
     */
    depositHistory(
        requestParameters: DepositHistoryRequest = {}
    ): Promise<RestApiResponse<DepositHistoryResponse>> {
        return this.capitalApi.depositHistory(requestParameters);
    }

    /**
     * Fetch deposit address list with network.
     *
     *
     * If network is not send, return with default network of the coin.
     * You can get network and isDefault in networkList in the response of `Get /sapi/v1/capital/config/getall`.
     *
     * Weight: 10
     *
     * @summary Fetch deposit address list with network(USER_DATA)
     * @param {FetchDepositAddressListWithNetworkRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<FetchDepositAddressListWithNetworkResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/Fetch-deposit-address-list-with-network Binance API Documentation}
     */
    fetchDepositAddressListWithNetwork(
        requestParameters: FetchDepositAddressListWithNetworkRequest
    ): Promise<RestApiResponse<FetchDepositAddressListWithNetworkResponse>> {
        return this.capitalApi.fetchDepositAddressListWithNetwork(requestParameters);
    }

    /**
     * Fetch withdraw address list
     *
     * Weight: 10
     *
     * @summary Fetch withdraw address list (USER_DATA)
     * @returns {Promise<RestApiResponse<FetchWithdrawAddressListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/fetch-withdraw-address Binance API Documentation}
     */
    fetchWithdrawAddressList(): Promise<RestApiResponse<FetchWithdrawAddressListResponse>> {
        return this.capitalApi.fetchWithdrawAddressList();
    }

    /**
     * Apply deposit credit for expired address (One click arrival)
     *
     * Params need to be in the POST body
     *
     * Weight: 1
     *
     * @summary One click arrival deposit apply (for expired address deposit) (USER_DATA)
     * @param {OneClickArrivalDepositApplyRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<OneClickArrivalDepositApplyResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/one-click-arrival-deposite-apply Binance API Documentation}
     */
    oneClickArrivalDepositApply(
        requestParameters: OneClickArrivalDepositApplyRequest = {}
    ): Promise<RestApiResponse<OneClickArrivalDepositApplyResponse>> {
        return this.capitalApi.oneClickArrivalDepositApply(requestParameters);
    }

    /**
     * Submit a withdraw request.
     *
     *
     * If `network` not send, return with default network of the coin.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
     *
     * Weight: 900
     *
     * @summary Withdraw(USER_DATA)
     * @param {WithdrawRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/Withdraw Binance API Documentation}
     */
    withdraw(requestParameters: WithdrawRequest): Promise<RestApiResponse<WithdrawResponse>> {
        return this.capitalApi.withdraw(requestParameters);
    }

    /**
     * Fetch withdraw history.
     *
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less than 90 days.
     * If `withdrawOrderId` is sent, time between `startTime` and `endTime` must be less than 7 days.
     * If `withdrawOrderId` is sent, `startTime` and `endTime` are not sent, will return last 7 days records by default.
     * Maximum support `idList` number is 45.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     *
     * @summary Withdraw History (supporting network) (USER_DATA)
     * @param {WithdrawHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/capital/Withdraw-History Binance API Documentation}
     */
    withdrawHistory(
        requestParameters: WithdrawHistoryRequest = {}
    ): Promise<RestApiResponse<WithdrawHistoryResponse>> {
        return this.capitalApi.withdrawHistory(requestParameters);
    }

    /**
     * Get symbols delist schedule for spot
     *
     * Weight: 100
     *
     * @summary Get symbols delist schedule for spot (MARKET_DATA)
     * @param {GetSymbolsDelistScheduleForSpotRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSymbolsDelistScheduleForSpotResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/others/delist-schedule Binance API Documentation}
     */
    getSymbolsDelistScheduleForSpot(
        requestParameters: GetSymbolsDelistScheduleForSpotRequest = {}
    ): Promise<RestApiResponse<GetSymbolsDelistScheduleForSpotResponse>> {
        return this.othersApi.getSymbolsDelistScheduleForSpot(requestParameters);
    }

    /**
     * Fetch system status.
     *
     * Weight: 1
     *
     * @summary System Status (System)
     * @returns {Promise<RestApiResponse<SystemStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/others/System-Status Binance API Documentation}
     */
    systemStatus(): Promise<RestApiResponse<SystemStatusResponse>> {
        return this.othersApi.systemStatus();
    }

    /**
     * Submit a withdrawal request for brokers of local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Broker Withdraw (for brokers of local entities that require travel rule) (USER_DATA)
     * @param {BrokerWithdrawRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<BrokerWithdrawResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Broker-Withdraw Binance API Documentation}
     */
    brokerWithdraw(
        requestParameters: BrokerWithdrawRequest
    ): Promise<RestApiResponse<BrokerWithdrawResponse>> {
        return this.travelRuleApi.brokerWithdraw(requestParameters);
    }

    /**
     * Fetch deposit history for local entities that required travel rule.
     *
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both ``startTime`` and ``endTime`` are sent, time between ``startTime`` and ``endTime`` must
     *
     * Weight: 1
     *
     * @summary Deposit History (for local entities that required travel rule) (supporting network) (USER_DATA)
     * @param {DepositHistoryTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<DepositHistoryTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Deposit-History Binance API Documentation}
     */
    depositHistoryTravelRule(
        requestParameters: DepositHistoryTravelRuleRequest = {}
    ): Promise<RestApiResponse<DepositHistoryTravelRuleResponse>> {
        return this.travelRuleApi.depositHistoryTravelRule(requestParameters);
    }

    /**
     * Fetch the onboarded VASP list for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Onboarded VASP list (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @returns {Promise<RestApiResponse<OnboardedVaspListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Onboarded-VASP-list Binance API Documentation}
     */
    onboardedVaspList(): Promise<RestApiResponse<OnboardedVaspListResponse>> {
        return this.travelRuleApi.onboardedVaspList();
    }

    /**
     * Submit questionnaire for brokers of local entities that require travel rule.
     * The questionnaire is only applies to transactions from un-hosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubmitDepositQuestionnaireResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/deposit-provide-info Binance API Documentation}
     */
    submitDepositQuestionnaire(
        requestParameters: SubmitDepositQuestionnaireRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireResponse>> {
        return this.travelRuleApi.submitDepositQuestionnaire(requestParameters);
    }

    /**
     * Submit questionnaire for local entities that require travel rule.
     * The questionnaire is only applies to transactions from unhosted wallets or VASPs that are not
     * yet onboarded with GTR.
     *
     * Questionnaire is different for each local entity, please refer
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Submit Deposit Questionnaire (For local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {SubmitDepositQuestionnaireTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubmitDepositQuestionnaireTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/deposit-provide-info Binance API Documentation}
     */
    submitDepositQuestionnaireTravelRule(
        requestParameters: SubmitDepositQuestionnaireTravelRuleRequest
    ): Promise<RestApiResponse<SubmitDepositQuestionnaireTravelRuleResponse>> {
        return this.travelRuleApi.submitDepositQuestionnaireTravelRule(requestParameters);
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV1Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryV1Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw-History Binance API Documentation}
     */
    withdrawHistoryV1(
        requestParameters: WithdrawHistoryV1Request = {}
    ): Promise<RestApiResponse<WithdrawHistoryV1Response>> {
        return this.travelRuleApi.withdrawHistoryV1(requestParameters);
    }

    /**
     * Fetch withdraw history for local entities that required travel rule.
     *
     * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * `network` may not be in the response for old withdraw.
     * Withdrawal made through /sapi/v1/capital/withdraw/apply may not be in the response.
     * Please notice the default `startTime` and `endTime` to make sure that time interval is within
     * If both `startTime` and `endTime`are sent, time between `startTime`and `endTime`must be less
     * If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.
     * If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.
     * Maximum support trId,txId number is 45.
     * WithdrawOrderId only support 1.
     * If responsible does not include withdrawalStatus, please input trId or txId retrieve the data.
     *
     * Weight: 18000
     * Request limit: 10 requests per second
     * > * This endpoint specifically uses per second IP rate limit, user's total second level IP rate
     * limit is 180000/second. Response from the endpoint contains header
     * key X-SAPI-USED-IP-WEIGHT-1S, which defines weight used by the current IP.
     *
     * @summary Withdraw History V2 (for local entities that require travel rule) (supporting network) (USER_DATA)
     * @param {WithdrawHistoryV2Request} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawHistoryV2Response>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw-History-V2 Binance API Documentation}
     */
    withdrawHistoryV2(
        requestParameters: WithdrawHistoryV2Request = {}
    ): Promise<RestApiResponse<WithdrawHistoryV2Response>> {
        return this.travelRuleApi.withdrawHistoryV2(requestParameters);
    }

    /**
     * Submit a withdrawal request for local entities that required travel rule.
     *
     * If `network` not send, return with default network of the coin, but if the address could not match default network, the withdraw will be rejected.
     * You can get `network` and `isDefault` in `networkList` of a coin in the response
     * Questionnaire is different for each local entity, please refer to
     * If getting error like `Questionnaire format not valid.` or `Questionnaire must not be blank`,
     *
     * Weight: 600
     *
     * @summary Withdraw (for local entities that require travel rule) (USER_DATA)
     * @param {WithdrawTravelRuleRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<WithdrawTravelRuleResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/wallet/travel-rule/Withdraw Binance API Documentation}
     */
    withdrawTravelRule(
        requestParameters: WithdrawTravelRuleRequest
    ): Promise<RestApiResponse<WithdrawTravelRuleResponse>> {
        return this.travelRuleApi.withdrawTravelRule(requestParameters);
    }
}
