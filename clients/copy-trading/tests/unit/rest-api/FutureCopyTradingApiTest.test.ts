/**
 * Binance Copy Trading REST API
 *
 * OpenAPI Specification for the Binance Copy Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { jest, expect, beforeEach, describe, it } from '@jest/globals';
import { ConfigurationRestAPI, type RestApiResponse } from '@binance/common';

import { FutureCopyTradingApi } from '../../../src/rest-api';
import {
    GetFuturesLeadTraderStatusRequest,
    GetFuturesLeadTradingSymbolWhitelistRequest,
} from '../../../src/rest-api';
import type {
    GetFuturesLeadTraderStatusResponse,
    GetFuturesLeadTradingSymbolWhitelistResponse,
} from '../../../src/rest-api/types';

describe('FutureCopyTradingApi', () => {
    let client: FutureCopyTradingApi;
    let config: ConfigurationRestAPI;
    let mockResponse: object = {};

    beforeEach(() => {
        config = new ConfigurationRestAPI({
            apiKey: 'test-api-key',
            apiSecret: 'test-api-secret',
            basePath: '',
        });
        client = new FutureCopyTradingApi(config);
    });

    describe('getFuturesLeadTraderStatus()', () => {
        it('should execute getFuturesLeadTraderStatus() successfully with required parameters only', async () => {
            mockResponse = {
                code: '000000',
                message: 'success',
                data: { isLeadTrader: true, time: 1717382310843 },
                success: true,
            };

            const spy = jest.spyOn(client, 'getFuturesLeadTraderStatus').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFuturesLeadTraderStatusResponse>)
            );
            const response = await client.getFuturesLeadTraderStatus();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getFuturesLeadTraderStatus() successfully with optional parameters', async () => {
            const params: GetFuturesLeadTraderStatusRequest = {
                recvWindow: 5000,
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: { isLeadTrader: true, time: 1717382310843 },
                success: true,
            };

            const spy = jest.spyOn(client, 'getFuturesLeadTraderStatus').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFuturesLeadTraderStatusResponse>)
            );
            const response = await client.getFuturesLeadTraderStatus(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getFuturesLeadTraderStatus')
                .mockRejectedValueOnce(mockError);
            await expect(client.getFuturesLeadTraderStatus()).rejects.toThrow('ResponseError');
            spy.mockRestore();
        });
    });

    describe('getFuturesLeadTradingSymbolWhitelist()', () => {
        it('should execute getFuturesLeadTradingSymbolWhitelist() successfully with required parameters only', async () => {
            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    { symbol: 'BTCUSDT', baseAsset: 'BTC', quoteAsset: 'USDT' },
                    { symbol: 'ETHUSDT', baseAsset: 'ETH', quoteAsset: 'USDT' },
                ],
            };

            const spy = jest.spyOn(client, 'getFuturesLeadTradingSymbolWhitelist').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFuturesLeadTradingSymbolWhitelistResponse>)
            );
            const response = await client.getFuturesLeadTradingSymbolWhitelist();
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should execute getFuturesLeadTradingSymbolWhitelist() successfully with optional parameters', async () => {
            const params: GetFuturesLeadTradingSymbolWhitelistRequest = {
                recvWindow: 5000,
            };

            mockResponse = {
                code: '000000',
                message: 'success',
                data: [
                    { symbol: 'BTCUSDT', baseAsset: 'BTC', quoteAsset: 'USDT' },
                    { symbol: 'ETHUSDT', baseAsset: 'ETH', quoteAsset: 'USDT' },
                ],
            };

            const spy = jest.spyOn(client, 'getFuturesLeadTradingSymbolWhitelist').mockReturnValue(
                Promise.resolve({
                    data: () => Promise.resolve(mockResponse),
                    status: 200,
                    headers: {},
                    rateLimits: [],
                } as RestApiResponse<GetFuturesLeadTradingSymbolWhitelistResponse>)
            );
            const response = await client.getFuturesLeadTradingSymbolWhitelist(params);
            expect(response).toBeDefined();
            await expect(response.data()).resolves.toBe(mockResponse);
            spy.mockRestore();
        });

        it('should throw an error when server is returning an error', async () => {
            const errorResponse = {
                code: -1111,
                msg: 'Server Error',
            };

            const mockError = new Error('ResponseError') as Error & {
                response?: { status: number; data: unknown };
            };
            mockError.response = { status: 400, data: errorResponse };
            const spy = jest
                .spyOn(client, 'getFuturesLeadTradingSymbolWhitelist')
                .mockRejectedValueOnce(mockError);
            await expect(client.getFuturesLeadTradingSymbolWhitelist()).rejects.toThrow(
                'ResponseError'
            );
            spy.mockRestore();
        });
    });
});
