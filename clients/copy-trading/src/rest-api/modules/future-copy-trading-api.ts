/**
 * Binance Public Copy Trading REST API
 *
 * OpenAPI Specification for the Binance Public Copy Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConfigurationRestAPI,
    TimeUnit,
    RestApiResponse,
    sendRequest,
    type RequestArgs,
} from '@binance/common';
import type {
    GetFuturesLeadTraderStatusResponse,
    GetFuturesLeadTradingSymbolWhitelistResponse,
} from '../types';

/**
 * FutureCopyTradingApi - axios parameter creator
 */
const FutureCopyTradingApiAxiosParamCreator = function (configuration: ConfigurationRestAPI) {
    return {
        /**
         * Get Futures Lead Trader Status
         *
         * Weight: 20
         *
         * @summary Get Futures Lead Trader Status(TRADE)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesLeadTraderStatus: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/copyTrading/futures/userStatus',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
        /**
         * Get Futures Lead Trading Symbol Whitelist
         *
         * Weight: 20
         *
         * @summary Get Futures Lead Trading Symbol Whitelist(USER_DATA)
         * @param {number} [recvWindow]
         *
         * @throws {RequiredError}
         */
        getFuturesLeadTradingSymbolWhitelist: async (recvWindow?: number): Promise<RequestArgs> => {
            const localVarQueryParameter: Record<string, unknown> = {};

            if (recvWindow !== undefined && recvWindow !== null) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            let _timeUnit: TimeUnit | undefined;
            if ('timeUnit' in configuration) _timeUnit = configuration.timeUnit as TimeUnit;

            return {
                endpoint: '/sapi/v1/copyTrading/futures/leadSymbol',
                method: 'GET',
                params: localVarQueryParameter,
                timeUnit: _timeUnit,
            };
        },
    };
};

/**
 * FutureCopyTradingApi - interface
 * @interface FutureCopyTradingApi
 */
export interface FutureCopyTradingApiInterface {
    /**
     * Get Futures Lead Trader Status
     *
     * Weight: 20
     *
     * @summary Get Futures Lead Trader Status(TRADE)
     * @param {GetFuturesLeadTraderStatusRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureCopyTradingApiInterface
     */
    getFuturesLeadTraderStatus(
        requestParameters?: GetFuturesLeadTraderStatusRequest
    ): Promise<RestApiResponse<GetFuturesLeadTraderStatusResponse>>;
    /**
     * Get Futures Lead Trading Symbol Whitelist
     *
     * Weight: 20
     *
     * @summary Get Futures Lead Trading Symbol Whitelist(USER_DATA)
     * @param {GetFuturesLeadTradingSymbolWhitelistRequest} requestParameters Request parameters.
     *
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureCopyTradingApiInterface
     */
    getFuturesLeadTradingSymbolWhitelist(
        requestParameters?: GetFuturesLeadTradingSymbolWhitelistRequest
    ): Promise<RestApiResponse<GetFuturesLeadTradingSymbolWhitelistResponse>>;
}

/**
 * Request parameters for getFuturesLeadTraderStatus operation in FutureCopyTradingApi.
 * @interface GetFuturesLeadTraderStatusRequest
 */
export interface GetFuturesLeadTraderStatusRequest {
    /**
     *
     * @type {number}
     * @memberof FutureCopyTradingApiGetFuturesLeadTraderStatus
     */
    readonly recvWindow?: number;
}

/**
 * Request parameters for getFuturesLeadTradingSymbolWhitelist operation in FutureCopyTradingApi.
 * @interface GetFuturesLeadTradingSymbolWhitelistRequest
 */
export interface GetFuturesLeadTradingSymbolWhitelistRequest {
    /**
     *
     * @type {number}
     * @memberof FutureCopyTradingApiGetFuturesLeadTradingSymbolWhitelist
     */
    readonly recvWindow?: number;
}

/**
 * FutureCopyTradingApi - object-oriented interface
 * @class FutureCopyTradingApi
 */
export class FutureCopyTradingApi implements FutureCopyTradingApiInterface {
    private readonly configuration: ConfigurationRestAPI;
    private localVarAxiosParamCreator;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.localVarAxiosParamCreator = FutureCopyTradingApiAxiosParamCreator(configuration);
    }

    /**
     * Get Futures Lead Trader Status
     *
     * Weight: 20
     *
     * @summary Get Futures Lead Trader Status(TRADE)
     * @param {GetFuturesLeadTraderStatusRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesLeadTraderStatusResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureCopyTradingApi
     * @see {@link https://developers.binance.com/docs/copy_trading/future-copy-trading/Get-Futures-Lead-Trader-Status Binance API Documentation}
     */
    public async getFuturesLeadTraderStatus(
        requestParameters: GetFuturesLeadTraderStatusRequest = {}
    ): Promise<RestApiResponse<GetFuturesLeadTraderStatusResponse>> {
        const localVarAxiosArgs = await this.localVarAxiosParamCreator.getFuturesLeadTraderStatus(
            requestParameters?.recvWindow
        );
        return sendRequest<GetFuturesLeadTraderStatusResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }

    /**
     * Get Futures Lead Trading Symbol Whitelist
     *
     * Weight: 20
     *
     * @summary Get Futures Lead Trading Symbol Whitelist(USER_DATA)
     * @param {GetFuturesLeadTradingSymbolWhitelistRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFuturesLeadTradingSymbolWhitelistResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @memberof FutureCopyTradingApi
     * @see {@link https://developers.binance.com/docs/copy_trading/future-copy-trading/Get-Futures-Lead-Trading-Symbol-Whitelist Binance API Documentation}
     */
    public async getFuturesLeadTradingSymbolWhitelist(
        requestParameters: GetFuturesLeadTradingSymbolWhitelistRequest = {}
    ): Promise<RestApiResponse<GetFuturesLeadTradingSymbolWhitelistResponse>> {
        const localVarAxiosArgs =
            await this.localVarAxiosParamCreator.getFuturesLeadTradingSymbolWhitelist(
                requestParameters?.recvWindow
            );
        return sendRequest<GetFuturesLeadTradingSymbolWhitelistResponse>(
            this.configuration,
            localVarAxiosArgs.endpoint,
            localVarAxiosArgs.method,
            localVarAxiosArgs.params,
            localVarAxiosArgs?.timeUnit,
            { isSigned: true }
        );
    }
}
