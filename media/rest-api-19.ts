/**
 * Binance Simple Earn REST API
 *
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationRestAPI, RestApiResponse, sendRequest } from '@binance/common';
import { AccountApi } from './modules/account-api';
import { EarnApi } from './modules/earn-api';
import { HistoryApi } from './modules/history-api';

import type {
    GetFlexiblePersonalLeftQuotaRequest,
    GetFlexibleProductPositionRequest,
    GetLockedPersonalLeftQuotaRequest,
    GetLockedProductPositionRequest,
    GetSimpleEarnFlexibleProductListRequest,
    GetSimpleEarnLockedProductListRequest,
    SimpleAccountRequest,
} from './modules/account-api';
import type {
    GetFlexibleSubscriptionPreviewRequest,
    GetLockedSubscriptionPreviewRequest,
    RedeemFlexibleProductRequest,
    RedeemLockedProductRequest,
    SetFlexibleAutoSubscribeRequest,
    SetLockedAutoSubscribeRequest,
    SetLockedProductRedeemOptionRequest,
    SubscribeFlexibleProductRequest,
    SubscribeLockedProductRequest,
} from './modules/earn-api';
import type {
    GetCollateralRecordRequest,
    GetFlexibleRedemptionRecordRequest,
    GetFlexibleRewardsHistoryRequest,
    GetFlexibleSubscriptionRecordRequest,
    GetLockedRedemptionRecordRequest,
    GetLockedRewardsHistoryRequest,
    GetLockedSubscriptionRecordRequest,
    GetRateHistoryRequest,
} from './modules/history-api';

import type {
    GetFlexiblePersonalLeftQuotaResponse,
    GetFlexibleProductPositionResponse,
    GetLockedPersonalLeftQuotaResponse,
    GetLockedProductPositionResponse,
    GetSimpleEarnFlexibleProductListResponse,
    GetSimpleEarnLockedProductListResponse,
    SimpleAccountResponse,
} from './types';
import type {
    GetFlexibleSubscriptionPreviewResponse,
    GetLockedSubscriptionPreviewResponse,
    RedeemFlexibleProductResponse,
    RedeemLockedProductResponse,
    SetFlexibleAutoSubscribeResponse,
    SetLockedAutoSubscribeResponse,
    SetLockedProductRedeemOptionResponse,
    SubscribeFlexibleProductResponse,
    SubscribeLockedProductResponse,
} from './types';
import type {
    GetCollateralRecordResponse,
    GetFlexibleRedemptionRecordResponse,
    GetFlexibleRewardsHistoryResponse,
    GetFlexibleSubscriptionRecordResponse,
    GetLockedRedemptionRecordResponse,
    GetLockedRewardsHistoryResponse,
    GetLockedSubscriptionRecordResponse,
    GetRateHistoryResponse,
} from './types';

export class RestAPI {
    private configuration: ConfigurationRestAPI;
    private accountApi: AccountApi;
    private earnApi: EarnApi;
    private historyApi: HistoryApi;

    constructor(configuration: ConfigurationRestAPI) {
        this.configuration = configuration;
        this.accountApi = new AccountApi(configuration);
        this.earnApi = new EarnApi(configuration);
        this.historyApi = new HistoryApi(configuration);
    }

    /**
     * Generic function to send a request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined);
    }

    /**
     * Generic function to send a signed request.
     * @param endpoint - The API endpoint to call.
     * @param method - HTTP method to use (GET, POST, DELETE, etc.).
     * @param params - Query parameters for the request.
     *
     * @returns A promise resolving to the response data object.
     */
    sendSignedRequest<T>(
        endpoint: string,
        method: 'GET' | 'POST' | 'DELETE' | 'PUT' | 'PATCH',
        params: Record<string, unknown> = {}
    ): Promise<RestApiResponse<T>> {
        return sendRequest<T>(this.configuration, endpoint, method, params, undefined, {
            isSigned: true,
        });
    }

    /**
     * Get Flexible Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Flexible Personal Left Quota(USER_DATA)
     * @param {GetFlexiblePersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Personal-Left-Quota Binance API Documentation}
     */
    getFlexiblePersonalLeftQuota(
        requestParameters: GetFlexiblePersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetFlexiblePersonalLeftQuotaResponse>> {
        return this.accountApi.getFlexiblePersonalLeftQuota(requestParameters);
    }

    /**
     * Get Flexible Product Position
     *
     * Weight: 150
     *
     * @summary Get Flexible Product Position(USER_DATA)
     * @param {GetFlexibleProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Product-Position Binance API Documentation}
     */
    getFlexibleProductPosition(
        requestParameters: GetFlexibleProductPositionRequest = {}
    ): Promise<RestApiResponse<GetFlexibleProductPositionResponse>> {
        return this.accountApi.getFlexibleProductPosition(requestParameters);
    }

    /**
     * Get Locked Personal Left Quota
     *
     * Weight: 150
     *
     * @summary Get Locked Personal Left Quota(USER_DATA)
     * @param {GetLockedPersonalLeftQuotaRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Locked-Personal-Left-Quota Binance API Documentation}
     */
    getLockedPersonalLeftQuota(
        requestParameters: GetLockedPersonalLeftQuotaRequest
    ): Promise<RestApiResponse<GetLockedPersonalLeftQuotaResponse>> {
        return this.accountApi.getLockedPersonalLeftQuota(requestParameters);
    }

    /**
     * Get Locked Product Position
     *
     * Weight: 150
     *
     * @summary Get Locked Product Position
     * @param {GetLockedProductPositionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedProductPositionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Locked-Product-Position Binance API Documentation}
     */
    getLockedProductPosition(
        requestParameters: GetLockedProductPositionRequest = {}
    ): Promise<RestApiResponse<GetLockedProductPositionResponse>> {
        return this.accountApi.getLockedProductPosition(requestParameters);
    }

    /**
     * Get available Simple Earn flexible product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Flexible Product List(USER_DATA)
     * @param {GetSimpleEarnFlexibleProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Flexible-Product-List Binance API Documentation}
     */
    getSimpleEarnFlexibleProductList(
        requestParameters: GetSimpleEarnFlexibleProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnFlexibleProductListResponse>> {
        return this.accountApi.getSimpleEarnFlexibleProductList(requestParameters);
    }

    /**
     * Get Simple Earn Locked Product List
     *
     * Get available Simple Earn locked product list
     *
     * Weight: 150
     *
     * @summary Get Simple Earn Locked Product List(USER_DATA)
     * @param {GetSimpleEarnLockedProductListRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Locked-Product-List Binance API Documentation}
     */
    getSimpleEarnLockedProductList(
        requestParameters: GetSimpleEarnLockedProductListRequest = {}
    ): Promise<RestApiResponse<GetSimpleEarnLockedProductListResponse>> {
        return this.accountApi.getSimpleEarnLockedProductList(requestParameters);
    }

    /**
     * Simple Account query
     *
     * Weight: 150
     *
     * @summary Simple Account(USER_DATA)
     * @param {SimpleAccountRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SimpleAccountResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/account/Simple-Account Binance API Documentation}
     */
    simpleAccount(
        requestParameters: SimpleAccountRequest = {}
    ): Promise<RestApiResponse<SimpleAccountResponse>> {
        return this.accountApi.simpleAccount(requestParameters);
    }

    /**
     * Get Flexible Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Preview(USER_DATA)
     * @param {GetFlexibleSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Get-Flexible-Subscription-Preview Binance API Documentation}
     */
    getFlexibleSubscriptionPreview(
        requestParameters: GetFlexibleSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetFlexibleSubscriptionPreviewResponse>> {
        return this.earnApi.getFlexibleSubscriptionPreview(requestParameters);
    }

    /**
     * Get Locked Subscription Preview
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Preview(USER_DATA)
     * @param {GetLockedSubscriptionPreviewRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Get-Locked-Subscription-Preview Binance API Documentation}
     */
    getLockedSubscriptionPreview(
        requestParameters: GetLockedSubscriptionPreviewRequest
    ): Promise<RestApiResponse<GetLockedSubscriptionPreviewResponse>> {
        return this.earnApi.getLockedSubscriptionPreview(requestParameters);
    }

    /**
     * Redeem Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Redeem Flexible Product(TRADE)
     * @param {RedeemFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Redeem-Flexible-Product Binance API Documentation}
     */
    redeemFlexibleProduct(
        requestParameters: RedeemFlexibleProductRequest
    ): Promise<RestApiResponse<RedeemFlexibleProductResponse>> {
        return this.earnApi.redeemFlexibleProduct(requestParameters);
    }

    /**
     * Redeem Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1/3s per account
     *
     * @summary Redeem Locked Product(TRADE)
     * @param {RedeemLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<RedeemLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Redeem-Locked-Product Binance API Documentation}
     */
    redeemLockedProduct(
        requestParameters: RedeemLockedProductRequest
    ): Promise<RestApiResponse<RedeemLockedProductResponse>> {
        return this.earnApi.redeemLockedProduct(requestParameters);
    }

    /**
     * Set Flexible Auto Subscribe
     *
     * Weight: 150
     *
     * @summary Set Flexible Auto Subscribe(USER_DATA)
     * @param {SetFlexibleAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Flexible-Auto-Subscribe Binance API Documentation}
     */
    setFlexibleAutoSubscribe(
        requestParameters: SetFlexibleAutoSubscribeRequest
    ): Promise<RestApiResponse<SetFlexibleAutoSubscribeResponse>> {
        return this.earnApi.setFlexibleAutoSubscribe(requestParameters);
    }

    /**
     * Set locked auto subscribe
     *
     * Weight: 150
     *
     * @summary Set Locked Auto Subscribe(USER_DATA)
     * @param {SetLockedAutoSubscribeRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedAutoSubscribeResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Auto-Subscribe Binance API Documentation}
     */
    setLockedAutoSubscribe(
        requestParameters: SetLockedAutoSubscribeRequest
    ): Promise<RestApiResponse<SetLockedAutoSubscribeResponse>> {
        return this.earnApi.setLockedAutoSubscribe(requestParameters);
    }

    /**
     * Set redeem option for Locked product
     *
     * Weight: 50
     *
     * @summary Set Locked Product Redeem Option(USER_DATA)
     * @param {SetLockedProductRedeemOptionRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Redeem-Option Binance API Documentation}
     */
    setLockedProductRedeemOption(
        requestParameters: SetLockedProductRedeemOptionRequest
    ): Promise<RestApiResponse<SetLockedProductRedeemOptionResponse>> {
        return this.earnApi.setLockedProductRedeemOption(requestParameters);
    }

    /**
     * Subscribe Flexible Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Flexible Product(TRADE)
     * @param {SubscribeFlexibleProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeFlexibleProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Subscribe-Flexible-Product Binance API Documentation}
     */
    subscribeFlexibleProduct(
        requestParameters: SubscribeFlexibleProductRequest
    ): Promise<RestApiResponse<SubscribeFlexibleProductResponse>> {
        return this.earnApi.subscribeFlexibleProduct(requestParameters);
    }

    /**
     * Subscribe Locked Product
     *
     * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.
     *
     * Weight: 1
     *
     * @summary Subscribe Locked Product(TRADE)
     * @param {SubscribeLockedProductRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<SubscribeLockedProductResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/earn/Subscribe-Locked-Product Binance API Documentation}
     */
    subscribeLockedProduct(
        requestParameters: SubscribeLockedProductRequest
    ): Promise<RestApiResponse<SubscribeLockedProductResponse>> {
        return this.earnApi.subscribeLockedProduct(requestParameters);
    }

    /**
     * Get Collateral Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 30 days.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 1
     *
     * @summary Get Collateral Record(USER_DATA)
     * @param {GetCollateralRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetCollateralRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Collateral-Record Binance API Documentation}
     */
    getCollateralRecord(
        requestParameters: GetCollateralRecordRequest = {}
    ): Promise<RestApiResponse<GetCollateralRecordResponse>> {
        return this.historyApi.getCollateralRecord(requestParameters);
    }

    /**
     * Get Flexible Redemption Record
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Redemption Record(USER_DATA)
     * @param {GetFlexibleRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Redemption-Record Binance API Documentation}
     */
    getFlexibleRedemptionRecord(
        requestParameters: GetFlexibleRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleRedemptionRecordResponse>> {
        return this.historyApi.getFlexibleRedemptionRecord(requestParameters);
    }

    /**
     * Get Flexible Rewards History
     *
     *	The time between `startTime` and `endTime` cannot be longer than 3 months.
     *	If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     *	If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     *	If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Rewards History(USER_DATA)
     * @param {GetFlexibleRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Rewards-History Binance API Documentation}
     */
    getFlexibleRewardsHistory(
        requestParameters: GetFlexibleRewardsHistoryRequest
    ): Promise<RestApiResponse<GetFlexibleRewardsHistoryResponse>> {
        return this.historyApi.getFlexibleRewardsHistory(requestParameters);
    }

    /**
     * Get Flexible Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Flexible Subscription Record(USER_DATA)
     * @param {GetFlexibleSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Flexible-Subscription-Record Binance API Documentation}
     */
    getFlexibleSubscriptionRecord(
        requestParameters: GetFlexibleSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetFlexibleSubscriptionRecordResponse>> {
        return this.historyApi.getFlexibleSubscriptionRecord(requestParameters);
    }

    /**
     * Get Locked Redemption Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Redemption Record(USER_DATA)
     * @param {GetLockedRedemptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRedemptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Redemption-Record Binance API Documentation}
     */
    getLockedRedemptionRecord(
        requestParameters: GetLockedRedemptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedRedemptionRecordResponse>> {
        return this.historyApi.getLockedRedemptionRecord(requestParameters);
    }

    /**
     * Get Locked Rewards History
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Rewards History(USER_DATA)
     * @param {GetLockedRewardsHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedRewardsHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Rewards-History Binance API Documentation}
     */
    getLockedRewardsHistory(
        requestParameters: GetLockedRewardsHistoryRequest = {}
    ): Promise<RestApiResponse<GetLockedRewardsHistoryResponse>> {
        return this.historyApi.getLockedRewardsHistory(requestParameters);
    }

    /**
     * Get Locked Subscription Record
     *
     * The time between `startTime` and `endTime` cannot be longer than 3 months.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Locked Subscription Record(USER_DATA)
     * @param {GetLockedSubscriptionRecordRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Locked-Subscription-Record Binance API Documentation}
     */
    getLockedSubscriptionRecord(
        requestParameters: GetLockedSubscriptionRecordRequest = {}
    ): Promise<RestApiResponse<GetLockedSubscriptionRecordResponse>> {
        return this.historyApi.getLockedSubscriptionRecord(requestParameters);
    }

    /**
     * Get Rate History
     *
     * The time between startTime and endTime cannot be longer than 1 year.
     * If `startTime` and `endTime` are both not sent, then the last 30 days' data will be returned.
     * If `startTime` is sent but `endTime` is not sent, the next 30 days' data beginning from `startTime` will be returned.
     * If `endTime` is sent but `startTime` is not sent, the 30 days' data before `endTime` will be returned.
     *
     * Weight: 150
     *
     * @summary Get Rate History(USER_DATA)
     * @param {GetRateHistoryRequest} requestParameters Request parameters.
     * @returns {Promise<RestApiResponse<GetRateHistoryResponse>>}
     * @throws {RequiredError | ConnectorClientError | UnauthorizedError | ForbiddenError | TooManyRequestsError | RateLimitBanError | ServerError | NotFoundError | NetworkError | BadRequestError}
     * @see {@link https://developers.binance.com/docs/simple_earn/history/Get-Rate-History Binance API Documentation}
     */
    getRateHistory(
        requestParameters: GetRateHistoryRequest
    ): Promise<RestApiResponse<GetRateHistoryResponse>> {
        return this.historyApi.getRateHistory(requestParameters);
    }
}
