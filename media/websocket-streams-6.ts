/**
 * Binance Spot WebSocket Streams
 *
 * OpenAPI Specifications for the Binance Spot WebSocket Streams
 *
 * API documents:
 * - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
 * - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ConfigurationWebsocketStreams, WebsocketStreamsBase } from '@binance/common';
import { WebsocketStreamsConnection } from './websocket-streams-connection';

export class WebsocketStreams {
    private configuration: ConfigurationWebsocketStreams;

    constructor(configuration: ConfigurationWebsocketStreams) {
        this.configuration = configuration;
    }

    /**
     * Connects to the Binance WebSocket streams and returns a `WebsocketStreamsConnection` instance.
     *
     * @param {object} [options] - Optional connection options.
     * @param {string|string[]} [options.stream] - The stream(s) to connect to.
     * @param {'single'|'pool'} [options.mode] - The connection mode, either 'single' or 'pool'. Overwrite the `mode` option in the configuration.
     * @param {number} [options.poolSize] - The number of connections to use in pool mode. Overwrite the `poolSize` option in the configuration.
     * @returns {Promise<WebsocketStreamsConnection>} - A promise that resolves to a `WebsocketStreamsConnection` instance.
     */
    async connect({
        stream,
        mode,
        poolSize,
    }: {
        stream?: string | string[];
        mode?: 'single' | 'pool';
        poolSize?: number;
    } = {}): Promise<WebsocketStreamsConnection> {
        const websocketBase = new WebsocketStreamsBase({
            ...this.configuration,
            ...(mode && { mode }),
            ...(poolSize && { poolSize }),
        });
        const websocketStreamsConnection = new WebsocketStreamsConnection(websocketBase);
        await websocketBase.connect(stream);
        return websocketStreamsConnection;
    }
}
